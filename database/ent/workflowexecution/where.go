// Code generated by ent, DO NOT EDIT.

package workflowexecution

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldUpdateBy, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldExecutionID, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldApplicationID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldFinishedAt, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldDurationMs, v))
}

// TotalTokens applies equality check predicate on the "total_tokens" field. It's identical to TotalTokensEQ.
func TotalTokens(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTotalTokens, v))
}

// TotalCost applies equality check predicate on the "total_cost" field. It's identical to TotalCostEQ.
func TotalCost(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTotalCost, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorStack applies equality check predicate on the "error_stack" field. It's identical to ErrorStackEQ.
func ErrorStack(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldErrorStack, v))
}

// TriggeredBy applies equality check predicate on the "triggered_by" field. It's identical to TriggeredByEQ.
func TriggeredBy(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTriggeredBy, v))
}

// TriggerSource applies equality check predicate on the "trigger_source" field. It's identical to TriggerSourceEQ.
func TriggerSource(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTriggerSource, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldUpdateBy))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldExecutionID, vs...))
}

// ExecutionIDGT applies the GT predicate on the "execution_id" field.
func ExecutionIDGT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldExecutionID, v))
}

// ExecutionIDGTE applies the GTE predicate on the "execution_id" field.
func ExecutionIDGTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldExecutionID, v))
}

// ExecutionIDLT applies the LT predicate on the "execution_id" field.
func ExecutionIDLT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldExecutionID, v))
}

// ExecutionIDLTE applies the LTE predicate on the "execution_id" field.
func ExecutionIDLTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldExecutionID, v))
}

// ExecutionIDContains applies the Contains predicate on the "execution_id" field.
func ExecutionIDContains(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContains(FieldExecutionID, v))
}

// ExecutionIDHasPrefix applies the HasPrefix predicate on the "execution_id" field.
func ExecutionIDHasPrefix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasPrefix(FieldExecutionID, v))
}

// ExecutionIDHasSuffix applies the HasSuffix predicate on the "execution_id" field.
func ExecutionIDHasSuffix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasSuffix(FieldExecutionID, v))
}

// ExecutionIDEqualFold applies the EqualFold predicate on the "execution_id" field.
func ExecutionIDEqualFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEqualFold(FieldExecutionID, v))
}

// ExecutionIDContainsFold applies the ContainsFold predicate on the "execution_id" field.
func ExecutionIDContainsFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContainsFold(FieldExecutionID, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldApplicationID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// InputIsNil applies the IsNil predicate on the "input" field.
func InputIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldInput))
}

// InputNotNil applies the NotNil predicate on the "input" field.
func InputNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldInput))
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldOutput))
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldOutput))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldContext))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldFinishedAt))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldDurationMs, v))
}

// TotalTokensEQ applies the EQ predicate on the "total_tokens" field.
func TotalTokensEQ(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTotalTokens, v))
}

// TotalTokensNEQ applies the NEQ predicate on the "total_tokens" field.
func TotalTokensNEQ(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldTotalTokens, v))
}

// TotalTokensIn applies the In predicate on the "total_tokens" field.
func TotalTokensIn(vs ...int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldTotalTokens, vs...))
}

// TotalTokensNotIn applies the NotIn predicate on the "total_tokens" field.
func TotalTokensNotIn(vs ...int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldTotalTokens, vs...))
}

// TotalTokensGT applies the GT predicate on the "total_tokens" field.
func TotalTokensGT(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldTotalTokens, v))
}

// TotalTokensGTE applies the GTE predicate on the "total_tokens" field.
func TotalTokensGTE(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldTotalTokens, v))
}

// TotalTokensLT applies the LT predicate on the "total_tokens" field.
func TotalTokensLT(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldTotalTokens, v))
}

// TotalTokensLTE applies the LTE predicate on the "total_tokens" field.
func TotalTokensLTE(v int) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldTotalTokens, v))
}

// TotalCostEQ applies the EQ predicate on the "total_cost" field.
func TotalCostEQ(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTotalCost, v))
}

// TotalCostNEQ applies the NEQ predicate on the "total_cost" field.
func TotalCostNEQ(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldTotalCost, v))
}

// TotalCostIn applies the In predicate on the "total_cost" field.
func TotalCostIn(vs ...float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldTotalCost, vs...))
}

// TotalCostNotIn applies the NotIn predicate on the "total_cost" field.
func TotalCostNotIn(vs ...float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldTotalCost, vs...))
}

// TotalCostGT applies the GT predicate on the "total_cost" field.
func TotalCostGT(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldTotalCost, v))
}

// TotalCostGTE applies the GTE predicate on the "total_cost" field.
func TotalCostGTE(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldTotalCost, v))
}

// TotalCostLT applies the LT predicate on the "total_cost" field.
func TotalCostLT(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldTotalCost, v))
}

// TotalCostLTE applies the LTE predicate on the "total_cost" field.
func TotalCostLTE(v float64) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldTotalCost, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContainsFold(FieldErrorMessage, v))
}

// ErrorStackEQ applies the EQ predicate on the "error_stack" field.
func ErrorStackEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldErrorStack, v))
}

// ErrorStackNEQ applies the NEQ predicate on the "error_stack" field.
func ErrorStackNEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldErrorStack, v))
}

// ErrorStackIn applies the In predicate on the "error_stack" field.
func ErrorStackIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldErrorStack, vs...))
}

// ErrorStackNotIn applies the NotIn predicate on the "error_stack" field.
func ErrorStackNotIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldErrorStack, vs...))
}

// ErrorStackGT applies the GT predicate on the "error_stack" field.
func ErrorStackGT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldErrorStack, v))
}

// ErrorStackGTE applies the GTE predicate on the "error_stack" field.
func ErrorStackGTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldErrorStack, v))
}

// ErrorStackLT applies the LT predicate on the "error_stack" field.
func ErrorStackLT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldErrorStack, v))
}

// ErrorStackLTE applies the LTE predicate on the "error_stack" field.
func ErrorStackLTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldErrorStack, v))
}

// ErrorStackContains applies the Contains predicate on the "error_stack" field.
func ErrorStackContains(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContains(FieldErrorStack, v))
}

// ErrorStackHasPrefix applies the HasPrefix predicate on the "error_stack" field.
func ErrorStackHasPrefix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasPrefix(FieldErrorStack, v))
}

// ErrorStackHasSuffix applies the HasSuffix predicate on the "error_stack" field.
func ErrorStackHasSuffix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasSuffix(FieldErrorStack, v))
}

// ErrorStackIsNil applies the IsNil predicate on the "error_stack" field.
func ErrorStackIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldErrorStack))
}

// ErrorStackNotNil applies the NotNil predicate on the "error_stack" field.
func ErrorStackNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldErrorStack))
}

// ErrorStackEqualFold applies the EqualFold predicate on the "error_stack" field.
func ErrorStackEqualFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEqualFold(FieldErrorStack, v))
}

// ErrorStackContainsFold applies the ContainsFold predicate on the "error_stack" field.
func ErrorStackContainsFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContainsFold(FieldErrorStack, v))
}

// TriggeredByEQ applies the EQ predicate on the "triggered_by" field.
func TriggeredByEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTriggeredBy, v))
}

// TriggeredByNEQ applies the NEQ predicate on the "triggered_by" field.
func TriggeredByNEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldTriggeredBy, v))
}

// TriggeredByIn applies the In predicate on the "triggered_by" field.
func TriggeredByIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldTriggeredBy, vs...))
}

// TriggeredByNotIn applies the NotIn predicate on the "triggered_by" field.
func TriggeredByNotIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldTriggeredBy, vs...))
}

// TriggeredByGT applies the GT predicate on the "triggered_by" field.
func TriggeredByGT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldTriggeredBy, v))
}

// TriggeredByGTE applies the GTE predicate on the "triggered_by" field.
func TriggeredByGTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldTriggeredBy, v))
}

// TriggeredByLT applies the LT predicate on the "triggered_by" field.
func TriggeredByLT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldTriggeredBy, v))
}

// TriggeredByLTE applies the LTE predicate on the "triggered_by" field.
func TriggeredByLTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldTriggeredBy, v))
}

// TriggeredByContains applies the Contains predicate on the "triggered_by" field.
func TriggeredByContains(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContains(FieldTriggeredBy, v))
}

// TriggeredByHasPrefix applies the HasPrefix predicate on the "triggered_by" field.
func TriggeredByHasPrefix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasPrefix(FieldTriggeredBy, v))
}

// TriggeredByHasSuffix applies the HasSuffix predicate on the "triggered_by" field.
func TriggeredByHasSuffix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasSuffix(FieldTriggeredBy, v))
}

// TriggeredByIsNil applies the IsNil predicate on the "triggered_by" field.
func TriggeredByIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldTriggeredBy))
}

// TriggeredByNotNil applies the NotNil predicate on the "triggered_by" field.
func TriggeredByNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldTriggeredBy))
}

// TriggeredByEqualFold applies the EqualFold predicate on the "triggered_by" field.
func TriggeredByEqualFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEqualFold(FieldTriggeredBy, v))
}

// TriggeredByContainsFold applies the ContainsFold predicate on the "triggered_by" field.
func TriggeredByContainsFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContainsFold(FieldTriggeredBy, v))
}

// TriggerSourceEQ applies the EQ predicate on the "trigger_source" field.
func TriggerSourceEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEQ(FieldTriggerSource, v))
}

// TriggerSourceNEQ applies the NEQ predicate on the "trigger_source" field.
func TriggerSourceNEQ(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNEQ(FieldTriggerSource, v))
}

// TriggerSourceIn applies the In predicate on the "trigger_source" field.
func TriggerSourceIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIn(FieldTriggerSource, vs...))
}

// TriggerSourceNotIn applies the NotIn predicate on the "trigger_source" field.
func TriggerSourceNotIn(vs ...string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotIn(FieldTriggerSource, vs...))
}

// TriggerSourceGT applies the GT predicate on the "trigger_source" field.
func TriggerSourceGT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGT(FieldTriggerSource, v))
}

// TriggerSourceGTE applies the GTE predicate on the "trigger_source" field.
func TriggerSourceGTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldGTE(FieldTriggerSource, v))
}

// TriggerSourceLT applies the LT predicate on the "trigger_source" field.
func TriggerSourceLT(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLT(FieldTriggerSource, v))
}

// TriggerSourceLTE applies the LTE predicate on the "trigger_source" field.
func TriggerSourceLTE(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldLTE(FieldTriggerSource, v))
}

// TriggerSourceContains applies the Contains predicate on the "trigger_source" field.
func TriggerSourceContains(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContains(FieldTriggerSource, v))
}

// TriggerSourceHasPrefix applies the HasPrefix predicate on the "trigger_source" field.
func TriggerSourceHasPrefix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasPrefix(FieldTriggerSource, v))
}

// TriggerSourceHasSuffix applies the HasSuffix predicate on the "trigger_source" field.
func TriggerSourceHasSuffix(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldHasSuffix(FieldTriggerSource, v))
}

// TriggerSourceIsNil applies the IsNil predicate on the "trigger_source" field.
func TriggerSourceIsNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldIsNull(FieldTriggerSource))
}

// TriggerSourceNotNil applies the NotNil predicate on the "trigger_source" field.
func TriggerSourceNotNil() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldNotNull(FieldTriggerSource))
}

// TriggerSourceEqualFold applies the EqualFold predicate on the "trigger_source" field.
func TriggerSourceEqualFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldEqualFold(FieldTriggerSource, v))
}

// TriggerSourceContainsFold applies the ContainsFold predicate on the "trigger_source" field.
func TriggerSourceContainsFold(v string) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.FieldContainsFold(FieldTriggerSource, v))
}

// HasApplication applies the HasEdge predicate on the "application" edge.
func HasApplication() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationWith applies the HasEdge predicate on the "application" edge with a given conditions (other predicates).
func HasApplicationWith(preds ...predicate.WorkflowApplication) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(func(s *sql.Selector) {
		step := newApplicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeExecutions applies the HasEdge predicate on the "node_executions" edge.
func HasNodeExecutions() predicate.WorkflowExecution {
	return predicate.WorkflowExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodeExecutionsTable, NodeExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeExecutionsWith applies the HasEdge predicate on the "node_executions" edge with a given conditions (other predicates).
func HasNodeExecutionsWith(preds ...predicate.WorkflowNodeExecution) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(func(s *sql.Selector) {
		step := newNodeExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowExecution) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowExecution) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowExecution) predicate.WorkflowExecution {
	return predicate.WorkflowExecution(sql.NotPredicates(p))
}
