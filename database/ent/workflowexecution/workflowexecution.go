// Code generated by ent, DO NOT EDIT.

package workflowexecution

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflowexecution type in the database.
	Label = "workflow_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldTotalTokens holds the string denoting the total_tokens field in the database.
	FieldTotalTokens = "total_tokens"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldErrorStack holds the string denoting the error_stack field in the database.
	FieldErrorStack = "error_stack"
	// FieldTriggeredBy holds the string denoting the triggered_by field in the database.
	FieldTriggeredBy = "triggered_by"
	// FieldTriggerSource holds the string denoting the trigger_source field in the database.
	FieldTriggerSource = "trigger_source"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// EdgeNodeExecutions holds the string denoting the node_executions edge name in mutations.
	EdgeNodeExecutions = "node_executions"
	// Table holds the table name of the workflowexecution in the database.
	Table = "workflow_executions"
	// ApplicationTable is the table that holds the application relation/edge.
	ApplicationTable = "workflow_executions"
	// ApplicationInverseTable is the table name for the WorkflowApplication entity.
	// It exists in this package in order to avoid circular dependency with the "workflowapplication" package.
	ApplicationInverseTable = "workflow_applications"
	// ApplicationColumn is the table column denoting the application relation/edge.
	ApplicationColumn = "application_id"
	// NodeExecutionsTable is the table that holds the node_executions relation/edge.
	NodeExecutionsTable = "workflow_node_executions"
	// NodeExecutionsInverseTable is the table name for the WorkflowNodeExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflownodeexecution" package.
	NodeExecutionsInverseTable = "workflow_node_executions"
	// NodeExecutionsColumn is the table column denoting the node_executions relation/edge.
	NodeExecutionsColumn = "execution_id"
)

// Columns holds all SQL columns for workflowexecution fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldExecutionID,
	FieldApplicationID,
	FieldStatus,
	FieldInput,
	FieldOutput,
	FieldContext,
	FieldStartedAt,
	FieldFinishedAt,
	FieldDurationMs,
	FieldTotalTokens,
	FieldTotalCost,
	FieldErrorMessage,
	FieldErrorStack,
	FieldTriggeredBy,
	FieldTriggerSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ExecutionIDValidator is a validator for the "execution_id" field. It is called by the builders before save.
	ExecutionIDValidator func(string) error
	// DefaultDurationMs holds the default value on creation for the "duration_ms" field.
	DefaultDurationMs int
	// DefaultTotalTokens holds the default value on creation for the "total_tokens" field.
	DefaultTotalTokens int
	// DefaultTotalCost holds the default value on creation for the "total_cost" field.
	DefaultTotalCost float64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
	StatusCancelled Status = "cancelled"
	StatusTimeout   Status = "timeout"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusCompleted, StatusFailed, StatusCancelled, StatusTimeout:
		return nil
	default:
		return fmt.Errorf("workflowexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the WorkflowExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByTotalTokens orders the results by the total_tokens field.
func ByTotalTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTokens, opts...).ToFunc()
}

// ByTotalCost orders the results by the total_cost field.
func ByTotalCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCost, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByErrorStack orders the results by the error_stack field.
func ByErrorStack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorStack, opts...).ToFunc()
}

// ByTriggeredBy orders the results by the triggered_by field.
func ByTriggeredBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriggeredBy, opts...).ToFunc()
}

// ByTriggerSource orders the results by the trigger_source field.
func ByTriggerSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriggerSource, opts...).ToFunc()
}

// ByApplicationField orders the results by application field.
func ByApplicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), sql.OrderByField(field, opts...))
	}
}

// ByNodeExecutionsCount orders the results by node_executions count.
func ByNodeExecutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeExecutionsStep(), opts...)
	}
}

// ByNodeExecutions orders the results by node_executions terms.
func ByNodeExecutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeExecutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
	)
}
func newNodeExecutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeExecutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeExecutionsTable, NodeExecutionsColumn),
	)
}
