// Code generated by ent, DO NOT EDIT.

package subwaystation

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subwaystation type in the database.
	Label = "subway_station"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldSubwayID holds the string denoting the subway_id field in the database.
	FieldSubwayID = "subway_id"
	// FieldSequence holds the string denoting the sequence field in the database.
	FieldSequence = "sequence"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeSubway holds the string denoting the subway edge name in mutations.
	EdgeSubway = "subway"
	// Table holds the table name of the subwaystation in the database.
	Table = "sys_subway_stations"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "sys_subway_stations"
	// StationInverseTable is the table name for the Station entity.
	// It exists in this package in order to avoid circular dependency with the "station" package.
	StationInverseTable = "sys_stations"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// SubwayTable is the table that holds the subway relation/edge.
	SubwayTable = "sys_subway_stations"
	// SubwayInverseTable is the table name for the Subway entity.
	// It exists in this package in order to avoid circular dependency with the "subway" package.
	SubwayInverseTable = "sys_subways"
	// SubwayColumn is the table column denoting the subway relation/edge.
	SubwayColumn = "subway_id"
)

// Columns holds all SQL columns for subwaystation fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldStationID,
	FieldSubwayID,
	FieldSequence,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sys_subway_stations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"station_subway_stations",
	"subway_subway_stations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the SubwayStation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// BySubwayID orders the results by the subway_id field.
func BySubwayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubwayID, opts...).ToFunc()
}

// BySequence orders the results by the sequence field.
func BySequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequence, opts...).ToFunc()
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// BySubwayField orders the results by subway field.
func BySubwayField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubwayStep(), sql.OrderByField(field, opts...))
	}
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newSubwayStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubwayInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubwayTable, SubwayColumn),
	)
}
