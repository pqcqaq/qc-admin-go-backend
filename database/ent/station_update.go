// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/area"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subwaystation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks    []Hook
	mutation *StationMutation
}

// Where appends a list predicates to the StationUpdate builder.
func (_u *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *StationUpdate) SetCreateBy(v uint64) *StationUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *StationUpdate) SetNillableCreateBy(v *uint64) *StationUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *StationUpdate) AddCreateBy(v int64) *StationUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *StationUpdate) ClearCreateBy() *StationUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *StationUpdate) SetUpdateTime(v time.Time) *StationUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *StationUpdate) SetUpdateBy(v uint64) *StationUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *StationUpdate) SetNillableUpdateBy(v *uint64) *StationUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *StationUpdate) AddUpdateBy(v int64) *StationUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *StationUpdate) ClearUpdateBy() *StationUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *StationUpdate) SetDeleteTime(v time.Time) *StationUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *StationUpdate) SetNillableDeleteTime(v *time.Time) *StationUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *StationUpdate) ClearDeleteTime() *StationUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *StationUpdate) SetDeleteBy(v uint64) *StationUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *StationUpdate) SetNillableDeleteBy(v *uint64) *StationUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *StationUpdate) AddDeleteBy(v int64) *StationUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *StationUpdate) ClearDeleteBy() *StationUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *StationUpdate) SetName(v string) *StationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StationUpdate) SetNillableName(v *string) *StationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAreaID sets the "area_id" field.
func (_u *StationUpdate) SetAreaID(v uint64) *StationUpdate {
	_u.mutation.SetAreaID(v)
	return _u
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (_u *StationUpdate) SetNillableAreaID(v *uint64) *StationUpdate {
	if v != nil {
		_u.SetAreaID(*v)
	}
	return _u
}

// SetArea sets the "area" edge to the Area entity.
func (_u *StationUpdate) SetArea(v *Area) *StationUpdate {
	return _u.SetAreaID(v.ID)
}

// AddSubwayStationIDs adds the "subway_stations" edge to the SubwayStation entity by IDs.
func (_u *StationUpdate) AddSubwayStationIDs(ids ...uint64) *StationUpdate {
	_u.mutation.AddSubwayStationIDs(ids...)
	return _u
}

// AddSubwayStations adds the "subway_stations" edges to the SubwayStation entity.
func (_u *StationUpdate) AddSubwayStations(v ...*SubwayStation) *StationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubwayStationIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (_u *StationUpdate) Mutation() *StationMutation {
	return _u.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (_u *StationUpdate) ClearArea() *StationUpdate {
	_u.mutation.ClearArea()
	return _u
}

// ClearSubwayStations clears all "subway_stations" edges to the SubwayStation entity.
func (_u *StationUpdate) ClearSubwayStations() *StationUpdate {
	_u.mutation.ClearSubwayStations()
	return _u
}

// RemoveSubwayStationIDs removes the "subway_stations" edge to SubwayStation entities by IDs.
func (_u *StationUpdate) RemoveSubwayStationIDs(ids ...uint64) *StationUpdate {
	_u.mutation.RemoveSubwayStationIDs(ids...)
	return _u
}

// RemoveSubwayStations removes "subway_stations" edges to SubwayStation entities.
func (_u *StationUpdate) RemoveSubwayStations(v ...*SubwayStation) *StationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubwayStationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if station.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized station.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := station.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StationUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := station.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Station.name": %w`, err)}
		}
	}
	if _u.mutation.AreaCleared() && len(_u.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Station.area"`)
	}
	return nil
}

func (_u *StationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(station.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(station.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(station.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(station.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(station.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(station.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(station.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(station.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(station.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(station.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(station.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(station.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(station.FieldName, field.TypeString, value)
	}
	if _u.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   station.AreaTable,
			Columns: []string{station.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   station.AreaTable,
			Columns: []string{station.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwayStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubwayStationsIDs(); len(nodes) > 0 && !_u.mutation.SubwayStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwayStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *StationUpdateOne) SetCreateBy(v uint64) *StationUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableCreateBy(v *uint64) *StationUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *StationUpdateOne) AddCreateBy(v int64) *StationUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *StationUpdateOne) ClearCreateBy() *StationUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *StationUpdateOne) SetUpdateTime(v time.Time) *StationUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *StationUpdateOne) SetUpdateBy(v uint64) *StationUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableUpdateBy(v *uint64) *StationUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *StationUpdateOne) AddUpdateBy(v int64) *StationUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *StationUpdateOne) ClearUpdateBy() *StationUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *StationUpdateOne) SetDeleteTime(v time.Time) *StationUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableDeleteTime(v *time.Time) *StationUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *StationUpdateOne) ClearDeleteTime() *StationUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *StationUpdateOne) SetDeleteBy(v uint64) *StationUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableDeleteBy(v *uint64) *StationUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *StationUpdateOne) AddDeleteBy(v int64) *StationUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *StationUpdateOne) ClearDeleteBy() *StationUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *StationUpdateOne) SetName(v string) *StationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableName(v *string) *StationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAreaID sets the "area_id" field.
func (_u *StationUpdateOne) SetAreaID(v uint64) *StationUpdateOne {
	_u.mutation.SetAreaID(v)
	return _u
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (_u *StationUpdateOne) SetNillableAreaID(v *uint64) *StationUpdateOne {
	if v != nil {
		_u.SetAreaID(*v)
	}
	return _u
}

// SetArea sets the "area" edge to the Area entity.
func (_u *StationUpdateOne) SetArea(v *Area) *StationUpdateOne {
	return _u.SetAreaID(v.ID)
}

// AddSubwayStationIDs adds the "subway_stations" edge to the SubwayStation entity by IDs.
func (_u *StationUpdateOne) AddSubwayStationIDs(ids ...uint64) *StationUpdateOne {
	_u.mutation.AddSubwayStationIDs(ids...)
	return _u
}

// AddSubwayStations adds the "subway_stations" edges to the SubwayStation entity.
func (_u *StationUpdateOne) AddSubwayStations(v ...*SubwayStation) *StationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubwayStationIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (_u *StationUpdateOne) Mutation() *StationMutation {
	return _u.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (_u *StationUpdateOne) ClearArea() *StationUpdateOne {
	_u.mutation.ClearArea()
	return _u
}

// ClearSubwayStations clears all "subway_stations" edges to the SubwayStation entity.
func (_u *StationUpdateOne) ClearSubwayStations() *StationUpdateOne {
	_u.mutation.ClearSubwayStations()
	return _u
}

// RemoveSubwayStationIDs removes the "subway_stations" edge to SubwayStation entities by IDs.
func (_u *StationUpdateOne) RemoveSubwayStationIDs(ids ...uint64) *StationUpdateOne {
	_u.mutation.RemoveSubwayStationIDs(ids...)
	return _u
}

// RemoveSubwayStations removes "subway_stations" edges to SubwayStation entities.
func (_u *StationUpdateOne) RemoveSubwayStations(v ...*SubwayStation) *StationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubwayStationIDs(ids...)
}

// Where appends a list predicates to the StationUpdate builder.
func (_u *StationUpdateOne) Where(ps ...predicate.Station) *StationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Station entity.
func (_u *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if station.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized station.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := station.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StationUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := station.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Station.name": %w`, err)}
		}
	}
	if _u.mutation.AreaCleared() && len(_u.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Station.area"`)
	}
	return nil
}

func (_u *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(station.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(station.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(station.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(station.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(station.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(station.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(station.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(station.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(station.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(station.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(station.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(station.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(station.FieldName, field.TypeString, value)
	}
	if _u.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   station.AreaTable,
			Columns: []string{station.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   station.AreaTable,
			Columns: []string{station.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwayStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubwayStationsIDs(); len(nodes) > 0 && !_u.mutation.SubwayStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwayStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Station{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
