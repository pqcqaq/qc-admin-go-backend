// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OauthApplicationUpdate is the builder for updating OauthApplication entities.
type OauthApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *OauthApplicationMutation
}

// Where appends a list predicates to the OauthApplicationUpdate builder.
func (_u *OauthApplicationUpdate) Where(ps ...predicate.OauthApplication) *OauthApplicationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthApplicationUpdate) SetCreateBy(v uint64) *OauthApplicationUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableCreateBy(v *uint64) *OauthApplicationUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthApplicationUpdate) AddCreateBy(v int64) *OauthApplicationUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthApplicationUpdate) ClearCreateBy() *OauthApplicationUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthApplicationUpdate) SetUpdateTime(v time.Time) *OauthApplicationUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthApplicationUpdate) SetUpdateBy(v uint64) *OauthApplicationUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableUpdateBy(v *uint64) *OauthApplicationUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthApplicationUpdate) AddUpdateBy(v int64) *OauthApplicationUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthApplicationUpdate) ClearUpdateBy() *OauthApplicationUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthApplicationUpdate) SetDeleteTime(v time.Time) *OauthApplicationUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableDeleteTime(v *time.Time) *OauthApplicationUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthApplicationUpdate) ClearDeleteTime() *OauthApplicationUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthApplicationUpdate) SetDeleteBy(v uint64) *OauthApplicationUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableDeleteBy(v *uint64) *OauthApplicationUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthApplicationUpdate) AddDeleteBy(v int64) *OauthApplicationUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthApplicationUpdate) ClearDeleteBy() *OauthApplicationUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthApplicationUpdate) SetClientSecret(v string) *OauthApplicationUpdate {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableClientSecret(v *string) *OauthApplicationUpdate {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OauthApplicationUpdate) SetName(v string) *OauthApplicationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableName(v *string) *OauthApplicationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRedirectUris sets the "redirect_uris" field.
func (_u *OauthApplicationUpdate) SetRedirectUris(v []string) *OauthApplicationUpdate {
	_u.mutation.SetRedirectUris(v)
	return _u
}

// AppendRedirectUris appends value to the "redirect_uris" field.
func (_u *OauthApplicationUpdate) AppendRedirectUris(v []string) *OauthApplicationUpdate {
	_u.mutation.AppendRedirectUris(v)
	return _u
}

// SetIsConfidential sets the "is_confidential" field.
func (_u *OauthApplicationUpdate) SetIsConfidential(v bool) *OauthApplicationUpdate {
	_u.mutation.SetIsConfidential(v)
	return _u
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableIsConfidential(v *bool) *OauthApplicationUpdate {
	if v != nil {
		_u.SetIsConfidential(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthApplicationUpdate) SetScopes(v []string) *OauthApplicationUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *OauthApplicationUpdate) AppendScopes(v []string) *OauthApplicationUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// SetAbleState sets the "able_state" field.
func (_u *OauthApplicationUpdate) SetAbleState(v oauthapplication.AbleState) *OauthApplicationUpdate {
	_u.mutation.SetAbleState(v)
	return _u
}

// SetNillableAbleState sets the "able_state" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableAbleState(v *oauthapplication.AbleState) *OauthApplicationUpdate {
	if v != nil {
		_u.SetAbleState(*v)
	}
	return _u
}

// SetSystemID sets the "system_id" field.
func (_u *OauthApplicationUpdate) SetSystemID(v uint64) *OauthApplicationUpdate {
	_u.mutation.ResetSystemID()
	_u.mutation.SetSystemID(v)
	return _u
}

// SetNillableSystemID sets the "system_id" field if the given value is not nil.
func (_u *OauthApplicationUpdate) SetNillableSystemID(v *uint64) *OauthApplicationUpdate {
	if v != nil {
		_u.SetSystemID(*v)
	}
	return _u
}

// AddSystemID adds value to the "system_id" field.
func (_u *OauthApplicationUpdate) AddSystemID(v int64) *OauthApplicationUpdate {
	_u.mutation.AddSystemID(v)
	return _u
}

// ClearSystemID clears the value of the "system_id" field.
func (_u *OauthApplicationUpdate) ClearSystemID() *OauthApplicationUpdate {
	_u.mutation.ClearSystemID()
	return _u
}

// AddAuthorizationCodeIDs adds the "authorization_codes" edge to the OauthAuthorizationCode entity by IDs.
func (_u *OauthApplicationUpdate) AddAuthorizationCodeIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.AddAuthorizationCodeIDs(ids...)
	return _u
}

// AddAuthorizationCodes adds the "authorization_codes" edges to the OauthAuthorizationCode entity.
func (_u *OauthApplicationUpdate) AddAuthorizationCodes(v ...*OauthAuthorizationCode) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthorizationCodeIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the OauthToken entity by IDs.
func (_u *OauthApplicationUpdate) AddTokenIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.AddTokenIDs(ids...)
	return _u
}

// AddTokens adds the "tokens" edges to the OauthToken entity.
func (_u *OauthApplicationUpdate) AddTokens(v ...*OauthToken) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTokenIDs(ids...)
}

// AddUserAuthorizationIDs adds the "user_authorizations" edge to the OauthUserAuthorization entity by IDs.
func (_u *OauthApplicationUpdate) AddUserAuthorizationIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.AddUserAuthorizationIDs(ids...)
	return _u
}

// AddUserAuthorizations adds the "user_authorizations" edges to the OauthUserAuthorization entity.
func (_u *OauthApplicationUpdate) AddUserAuthorizations(v ...*OauthUserAuthorization) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserAuthorizationIDs(ids...)
}

// Mutation returns the OauthApplicationMutation object of the builder.
func (_u *OauthApplicationUpdate) Mutation() *OauthApplicationMutation {
	return _u.mutation
}

// ClearAuthorizationCodes clears all "authorization_codes" edges to the OauthAuthorizationCode entity.
func (_u *OauthApplicationUpdate) ClearAuthorizationCodes() *OauthApplicationUpdate {
	_u.mutation.ClearAuthorizationCodes()
	return _u
}

// RemoveAuthorizationCodeIDs removes the "authorization_codes" edge to OauthAuthorizationCode entities by IDs.
func (_u *OauthApplicationUpdate) RemoveAuthorizationCodeIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.RemoveAuthorizationCodeIDs(ids...)
	return _u
}

// RemoveAuthorizationCodes removes "authorization_codes" edges to OauthAuthorizationCode entities.
func (_u *OauthApplicationUpdate) RemoveAuthorizationCodes(v ...*OauthAuthorizationCode) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthorizationCodeIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the OauthToken entity.
func (_u *OauthApplicationUpdate) ClearTokens() *OauthApplicationUpdate {
	_u.mutation.ClearTokens()
	return _u
}

// RemoveTokenIDs removes the "tokens" edge to OauthToken entities by IDs.
func (_u *OauthApplicationUpdate) RemoveTokenIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.RemoveTokenIDs(ids...)
	return _u
}

// RemoveTokens removes "tokens" edges to OauthToken entities.
func (_u *OauthApplicationUpdate) RemoveTokens(v ...*OauthToken) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTokenIDs(ids...)
}

// ClearUserAuthorizations clears all "user_authorizations" edges to the OauthUserAuthorization entity.
func (_u *OauthApplicationUpdate) ClearUserAuthorizations() *OauthApplicationUpdate {
	_u.mutation.ClearUserAuthorizations()
	return _u
}

// RemoveUserAuthorizationIDs removes the "user_authorizations" edge to OauthUserAuthorization entities by IDs.
func (_u *OauthApplicationUpdate) RemoveUserAuthorizationIDs(ids ...uint64) *OauthApplicationUpdate {
	_u.mutation.RemoveUserAuthorizationIDs(ids...)
	return _u
}

// RemoveUserAuthorizations removes "user_authorizations" edges to OauthUserAuthorization entities.
func (_u *OauthApplicationUpdate) RemoveUserAuthorizations(v ...*OauthUserAuthorization) *OauthApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserAuthorizationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthApplicationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthApplicationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthApplicationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthApplicationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthapplication.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthapplication.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthapplication.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthApplicationUpdate) check() error {
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthapplication.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthapplication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AbleState(); ok {
		if err := oauthapplication.AbleStateValidator(v); err != nil {
			return &ValidationError{Name: "able_state", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.able_state": %w`, err)}
		}
	}
	return nil
}

func (_u *OauthApplicationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthapplication.Table, oauthapplication.Columns, sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthapplication.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthapplication.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthapplication.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthapplication.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthapplication.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthapplication.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthapplication.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthapplication.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectUris(); ok {
		_spec.SetField(oauthapplication.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthapplication.FieldRedirectUris, value)
		})
	}
	if value, ok := _u.mutation.IsConfidential(); ok {
		_spec.SetField(oauthapplication.FieldIsConfidential, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthapplication.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthapplication.FieldScopes, value)
		})
	}
	if value, ok := _u.mutation.AbleState(); ok {
		_spec.SetField(oauthapplication.FieldAbleState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SystemID(); ok {
		_spec.SetField(oauthapplication.FieldSystemID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSystemID(); ok {
		_spec.AddField(oauthapplication.FieldSystemID, field.TypeUint64, value)
	}
	if _u.mutation.SystemIDCleared() {
		_spec.ClearField(oauthapplication.FieldSystemID, field.TypeUint64)
	}
	if _u.mutation.AuthorizationCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthorizationCodesIDs(); len(nodes) > 0 && !_u.mutation.AuthorizationCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizationCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTokensIDs(); len(nodes) > 0 && !_u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserAuthorizationsIDs(); len(nodes) > 0 && !_u.mutation.UserAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthApplicationUpdateOne is the builder for updating a single OauthApplication entity.
type OauthApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthApplicationMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthApplicationUpdateOne) SetCreateBy(v uint64) *OauthApplicationUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableCreateBy(v *uint64) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthApplicationUpdateOne) AddCreateBy(v int64) *OauthApplicationUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthApplicationUpdateOne) ClearCreateBy() *OauthApplicationUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthApplicationUpdateOne) SetUpdateTime(v time.Time) *OauthApplicationUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthApplicationUpdateOne) SetUpdateBy(v uint64) *OauthApplicationUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableUpdateBy(v *uint64) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthApplicationUpdateOne) AddUpdateBy(v int64) *OauthApplicationUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthApplicationUpdateOne) ClearUpdateBy() *OauthApplicationUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthApplicationUpdateOne) SetDeleteTime(v time.Time) *OauthApplicationUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthApplicationUpdateOne) ClearDeleteTime() *OauthApplicationUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthApplicationUpdateOne) SetDeleteBy(v uint64) *OauthApplicationUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableDeleteBy(v *uint64) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthApplicationUpdateOne) AddDeleteBy(v int64) *OauthApplicationUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthApplicationUpdateOne) ClearDeleteBy() *OauthApplicationUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthApplicationUpdateOne) SetClientSecret(v string) *OauthApplicationUpdateOne {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableClientSecret(v *string) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OauthApplicationUpdateOne) SetName(v string) *OauthApplicationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableName(v *string) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRedirectUris sets the "redirect_uris" field.
func (_u *OauthApplicationUpdateOne) SetRedirectUris(v []string) *OauthApplicationUpdateOne {
	_u.mutation.SetRedirectUris(v)
	return _u
}

// AppendRedirectUris appends value to the "redirect_uris" field.
func (_u *OauthApplicationUpdateOne) AppendRedirectUris(v []string) *OauthApplicationUpdateOne {
	_u.mutation.AppendRedirectUris(v)
	return _u
}

// SetIsConfidential sets the "is_confidential" field.
func (_u *OauthApplicationUpdateOne) SetIsConfidential(v bool) *OauthApplicationUpdateOne {
	_u.mutation.SetIsConfidential(v)
	return _u
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableIsConfidential(v *bool) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetIsConfidential(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthApplicationUpdateOne) SetScopes(v []string) *OauthApplicationUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *OauthApplicationUpdateOne) AppendScopes(v []string) *OauthApplicationUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// SetAbleState sets the "able_state" field.
func (_u *OauthApplicationUpdateOne) SetAbleState(v oauthapplication.AbleState) *OauthApplicationUpdateOne {
	_u.mutation.SetAbleState(v)
	return _u
}

// SetNillableAbleState sets the "able_state" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableAbleState(v *oauthapplication.AbleState) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetAbleState(*v)
	}
	return _u
}

// SetSystemID sets the "system_id" field.
func (_u *OauthApplicationUpdateOne) SetSystemID(v uint64) *OauthApplicationUpdateOne {
	_u.mutation.ResetSystemID()
	_u.mutation.SetSystemID(v)
	return _u
}

// SetNillableSystemID sets the "system_id" field if the given value is not nil.
func (_u *OauthApplicationUpdateOne) SetNillableSystemID(v *uint64) *OauthApplicationUpdateOne {
	if v != nil {
		_u.SetSystemID(*v)
	}
	return _u
}

// AddSystemID adds value to the "system_id" field.
func (_u *OauthApplicationUpdateOne) AddSystemID(v int64) *OauthApplicationUpdateOne {
	_u.mutation.AddSystemID(v)
	return _u
}

// ClearSystemID clears the value of the "system_id" field.
func (_u *OauthApplicationUpdateOne) ClearSystemID() *OauthApplicationUpdateOne {
	_u.mutation.ClearSystemID()
	return _u
}

// AddAuthorizationCodeIDs adds the "authorization_codes" edge to the OauthAuthorizationCode entity by IDs.
func (_u *OauthApplicationUpdateOne) AddAuthorizationCodeIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.AddAuthorizationCodeIDs(ids...)
	return _u
}

// AddAuthorizationCodes adds the "authorization_codes" edges to the OauthAuthorizationCode entity.
func (_u *OauthApplicationUpdateOne) AddAuthorizationCodes(v ...*OauthAuthorizationCode) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthorizationCodeIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the OauthToken entity by IDs.
func (_u *OauthApplicationUpdateOne) AddTokenIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.AddTokenIDs(ids...)
	return _u
}

// AddTokens adds the "tokens" edges to the OauthToken entity.
func (_u *OauthApplicationUpdateOne) AddTokens(v ...*OauthToken) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTokenIDs(ids...)
}

// AddUserAuthorizationIDs adds the "user_authorizations" edge to the OauthUserAuthorization entity by IDs.
func (_u *OauthApplicationUpdateOne) AddUserAuthorizationIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.AddUserAuthorizationIDs(ids...)
	return _u
}

// AddUserAuthorizations adds the "user_authorizations" edges to the OauthUserAuthorization entity.
func (_u *OauthApplicationUpdateOne) AddUserAuthorizations(v ...*OauthUserAuthorization) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserAuthorizationIDs(ids...)
}

// Mutation returns the OauthApplicationMutation object of the builder.
func (_u *OauthApplicationUpdateOne) Mutation() *OauthApplicationMutation {
	return _u.mutation
}

// ClearAuthorizationCodes clears all "authorization_codes" edges to the OauthAuthorizationCode entity.
func (_u *OauthApplicationUpdateOne) ClearAuthorizationCodes() *OauthApplicationUpdateOne {
	_u.mutation.ClearAuthorizationCodes()
	return _u
}

// RemoveAuthorizationCodeIDs removes the "authorization_codes" edge to OauthAuthorizationCode entities by IDs.
func (_u *OauthApplicationUpdateOne) RemoveAuthorizationCodeIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.RemoveAuthorizationCodeIDs(ids...)
	return _u
}

// RemoveAuthorizationCodes removes "authorization_codes" edges to OauthAuthorizationCode entities.
func (_u *OauthApplicationUpdateOne) RemoveAuthorizationCodes(v ...*OauthAuthorizationCode) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthorizationCodeIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the OauthToken entity.
func (_u *OauthApplicationUpdateOne) ClearTokens() *OauthApplicationUpdateOne {
	_u.mutation.ClearTokens()
	return _u
}

// RemoveTokenIDs removes the "tokens" edge to OauthToken entities by IDs.
func (_u *OauthApplicationUpdateOne) RemoveTokenIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.RemoveTokenIDs(ids...)
	return _u
}

// RemoveTokens removes "tokens" edges to OauthToken entities.
func (_u *OauthApplicationUpdateOne) RemoveTokens(v ...*OauthToken) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTokenIDs(ids...)
}

// ClearUserAuthorizations clears all "user_authorizations" edges to the OauthUserAuthorization entity.
func (_u *OauthApplicationUpdateOne) ClearUserAuthorizations() *OauthApplicationUpdateOne {
	_u.mutation.ClearUserAuthorizations()
	return _u
}

// RemoveUserAuthorizationIDs removes the "user_authorizations" edge to OauthUserAuthorization entities by IDs.
func (_u *OauthApplicationUpdateOne) RemoveUserAuthorizationIDs(ids ...uint64) *OauthApplicationUpdateOne {
	_u.mutation.RemoveUserAuthorizationIDs(ids...)
	return _u
}

// RemoveUserAuthorizations removes "user_authorizations" edges to OauthUserAuthorization entities.
func (_u *OauthApplicationUpdateOne) RemoveUserAuthorizations(v ...*OauthUserAuthorization) *OauthApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserAuthorizationIDs(ids...)
}

// Where appends a list predicates to the OauthApplicationUpdate builder.
func (_u *OauthApplicationUpdateOne) Where(ps ...predicate.OauthApplication) *OauthApplicationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthApplicationUpdateOne) Select(field string, fields ...string) *OauthApplicationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthApplication entity.
func (_u *OauthApplicationUpdateOne) Save(ctx context.Context) (*OauthApplication, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthApplicationUpdateOne) SaveX(ctx context.Context) *OauthApplication {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthApplicationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthapplication.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthapplication.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthapplication.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthApplicationUpdateOne) check() error {
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthapplication.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthapplication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AbleState(); ok {
		if err := oauthapplication.AbleStateValidator(v); err != nil {
			return &ValidationError{Name: "able_state", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.able_state": %w`, err)}
		}
	}
	return nil
}

func (_u *OauthApplicationUpdateOne) sqlSave(ctx context.Context) (_node *OauthApplication, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthapplication.Table, oauthapplication.Columns, sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthapplication.FieldID)
		for _, f := range fields {
			if !oauthapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthapplication.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthapplication.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthapplication.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthapplication.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthapplication.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthapplication.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthapplication.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthapplication.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectUris(); ok {
		_spec.SetField(oauthapplication.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthapplication.FieldRedirectUris, value)
		})
	}
	if value, ok := _u.mutation.IsConfidential(); ok {
		_spec.SetField(oauthapplication.FieldIsConfidential, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthapplication.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthapplication.FieldScopes, value)
		})
	}
	if value, ok := _u.mutation.AbleState(); ok {
		_spec.SetField(oauthapplication.FieldAbleState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SystemID(); ok {
		_spec.SetField(oauthapplication.FieldSystemID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSystemID(); ok {
		_spec.AddField(oauthapplication.FieldSystemID, field.TypeUint64, value)
	}
	if _u.mutation.SystemIDCleared() {
		_spec.ClearField(oauthapplication.FieldSystemID, field.TypeUint64)
	}
	if _u.mutation.AuthorizationCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthorizationCodesIDs(); len(nodes) > 0 && !_u.mutation.AuthorizationCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizationCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTokensIDs(); len(nodes) > 0 && !_u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserAuthorizationsIDs(); len(nodes) > 0 && !_u.mutation.UserAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthApplication{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
