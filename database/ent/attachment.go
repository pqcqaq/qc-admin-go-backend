// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/attachment"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Attachment is the model entity for the Attachment schema.
type Attachment struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy int64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy int64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy int64 `json:"delete_by,omitempty"`
	// 原始文件名
	Filename string `json:"filename,omitempty"`
	// 文件存储路径
	Path string `json:"path,omitempty"`
	// 文件访问URL
	URL string `json:"url,omitempty"`
	// 文件MIME类型
	ContentType string `json:"content_type,omitempty"`
	// 文件大小(字节)
	Size int64 `json:"size,omitempty"`
	// 文件ETag
	Etag string `json:"etag,omitempty"`
	// 存储桶名称
	Bucket string `json:"bucket,omitempty"`
	// 存储提供商
	StorageProvider string `json:"storage_provider,omitempty"`
	// 附加元数据
	Metadata map[string]any `json:"metadata,omitempty"`
	// 文件状态
	Status attachment.Status `json:"status,omitempty"`
	// 上传会话ID
	UploadSessionID string `json:"upload_session_id,omitempty"`
	// 标签1
	Tag1 string `json:"tag1,omitempty"`
	// 标签2
	Tag2 string `json:"tag2,omitempty"`
	// 标签3
	Tag3             string `json:"tag3,omitempty"`
	user_attachments *uint64
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachment.FieldMetadata:
			values[i] = new([]byte)
		case attachment.FieldID, attachment.FieldCreateBy, attachment.FieldUpdateBy, attachment.FieldDeleteBy, attachment.FieldSize:
			values[i] = new(sql.NullInt64)
		case attachment.FieldFilename, attachment.FieldPath, attachment.FieldURL, attachment.FieldContentType, attachment.FieldEtag, attachment.FieldBucket, attachment.FieldStorageProvider, attachment.FieldStatus, attachment.FieldUploadSessionID, attachment.FieldTag1, attachment.FieldTag2, attachment.FieldTag3:
			values[i] = new(sql.NullString)
		case attachment.FieldCreateTime, attachment.FieldUpdateTime, attachment.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case attachment.ForeignKeys[0]: // user_attachments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attachment fields.
func (_m *Attachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case attachment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case attachment.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = value.Int64
			}
		case attachment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case attachment.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = value.Int64
			}
		case attachment.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case attachment.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = value.Int64
			}
		case attachment.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				_m.Filename = value.String
			}
		case attachment.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case attachment.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case attachment.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				_m.ContentType = value.String
			}
		case attachment.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				_m.Size = value.Int64
			}
		case attachment.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				_m.Etag = value.String
			}
		case attachment.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				_m.Bucket = value.String
			}
		case attachment.FieldStorageProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_provider", values[i])
			} else if value.Valid {
				_m.StorageProvider = value.String
			}
		case attachment.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case attachment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = attachment.Status(value.String)
			}
		case attachment.FieldUploadSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upload_session_id", values[i])
			} else if value.Valid {
				_m.UploadSessionID = value.String
			}
		case attachment.FieldTag1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag1", values[i])
			} else if value.Valid {
				_m.Tag1 = value.String
			}
		case attachment.FieldTag2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag2", values[i])
			} else if value.Valid {
				_m.Tag2 = value.String
			}
		case attachment.FieldTag3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag3", values[i])
			} else if value.Valid {
				_m.Tag3 = value.String
			}
		case attachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_attachments", values[i])
			} else if value.Valid {
				_m.user_attachments = new(uint64)
				*_m.user_attachments = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attachment.
// This includes values selected through modifiers, order, etc.
func (_m *Attachment) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Attachment.
// Note that you need to call Attachment.Unwrap() before calling this method if this Attachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Attachment) Update() *AttachmentUpdateOne {
	return NewAttachmentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Attachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Attachment) Unwrap() *Attachment {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attachment is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Attachment) String() string {
	var builder strings.Builder
	builder.WriteString("Attachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(_m.Filename)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(_m.ContentType)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", _m.Size))
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(_m.Etag)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(_m.Bucket)
	builder.WriteString(", ")
	builder.WriteString("storage_provider=")
	builder.WriteString(_m.StorageProvider)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("upload_session_id=")
	builder.WriteString(_m.UploadSessionID)
	builder.WriteString(", ")
	builder.WriteString("tag1=")
	builder.WriteString(_m.Tag1)
	builder.WriteString(", ")
	builder.WriteString("tag2=")
	builder.WriteString(_m.Tag2)
	builder.WriteString(", ")
	builder.WriteString("tag3=")
	builder.WriteString(_m.Tag3)
	builder.WriteByte(')')
	return builder.String()
}

// Attachments is a parsable slice of Attachment.
type Attachments []*Attachment
