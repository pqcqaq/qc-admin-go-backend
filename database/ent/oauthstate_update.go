// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthStateUpdate is the builder for updating OauthState entities.
type OauthStateUpdate struct {
	config
	hooks    []Hook
	mutation *OauthStateMutation
}

// Where appends a list predicates to the OauthStateUpdate builder.
func (_u *OauthStateUpdate) Where(ps ...predicate.OauthState) *OauthStateUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthStateUpdate) SetCreateBy(v uint64) *OauthStateUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableCreateBy(v *uint64) *OauthStateUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthStateUpdate) AddCreateBy(v int64) *OauthStateUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthStateUpdate) ClearCreateBy() *OauthStateUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthStateUpdate) SetUpdateTime(v time.Time) *OauthStateUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthStateUpdate) SetUpdateBy(v uint64) *OauthStateUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableUpdateBy(v *uint64) *OauthStateUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthStateUpdate) AddUpdateBy(v int64) *OauthStateUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthStateUpdate) ClearUpdateBy() *OauthStateUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthStateUpdate) SetDeleteTime(v time.Time) *OauthStateUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableDeleteTime(v *time.Time) *OauthStateUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthStateUpdate) ClearDeleteTime() *OauthStateUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthStateUpdate) SetDeleteBy(v uint64) *OauthStateUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableDeleteBy(v *uint64) *OauthStateUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthStateUpdate) AddDeleteBy(v int64) *OauthStateUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthStateUpdate) ClearDeleteBy() *OauthStateUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetState sets the "state" field.
func (_u *OauthStateUpdate) SetState(v string) *OauthStateUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableState(v *string) *OauthStateUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *OauthStateUpdate) SetType(v oauthstate.Type) *OauthStateUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableType(v *oauthstate.Type) *OauthStateUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthStateUpdate) SetProviderID(v uint64) *OauthStateUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableProviderID(v *uint64) *OauthStateUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthStateUpdate) SetUserID(v uint64) *OauthStateUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableUserID(v *uint64) *OauthStateUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *OauthStateUpdate) ClearUserID() *OauthStateUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthStateUpdate) SetExpiresAt(v time.Time) *OauthStateUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableExpiresAt(v *time.Time) *OauthStateUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *OauthStateUpdate) SetUsedAt(v time.Time) *OauthStateUpdate {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *OauthStateUpdate) SetNillableUsedAt(v *time.Time) *OauthStateUpdate {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *OauthStateUpdate) ClearUsedAt() *OauthStateUpdate {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthStateUpdate) SetProvider(v *OauthProvider) *OauthStateUpdate {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthStateUpdate) SetUser(v *User) *OauthStateUpdate {
	return _u.SetUserID(v.ID)
}

// AddOauthUserIDs adds the "oauth_users" edge to the OauthUser entity by IDs.
func (_u *OauthStateUpdate) AddOauthUserIDs(ids ...uint64) *OauthStateUpdate {
	_u.mutation.AddOauthUserIDs(ids...)
	return _u
}

// AddOauthUsers adds the "oauth_users" edges to the OauthUser entity.
func (_u *OauthStateUpdate) AddOauthUsers(v ...*OauthUser) *OauthStateUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthUserIDs(ids...)
}

// Mutation returns the OauthStateMutation object of the builder.
func (_u *OauthStateUpdate) Mutation() *OauthStateMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthStateUpdate) ClearProvider() *OauthStateUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthStateUpdate) ClearUser() *OauthStateUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearOauthUsers clears all "oauth_users" edges to the OauthUser entity.
func (_u *OauthStateUpdate) ClearOauthUsers() *OauthStateUpdate {
	_u.mutation.ClearOauthUsers()
	return _u
}

// RemoveOauthUserIDs removes the "oauth_users" edge to OauthUser entities by IDs.
func (_u *OauthStateUpdate) RemoveOauthUserIDs(ids ...uint64) *OauthStateUpdate {
	_u.mutation.RemoveOauthUserIDs(ids...)
	return _u
}

// RemoveOauthUsers removes "oauth_users" edges to OauthUser entities.
func (_u *OauthStateUpdate) RemoveOauthUsers(v ...*OauthUser) *OauthStateUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthStateUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthStateUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthStateUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthStateUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthStateUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthstate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthstate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthstate.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthStateUpdate) check() error {
	if v, ok := _u.mutation.State(); ok {
		if err := oauthstate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthState.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthstate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthState.type": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthState.provider"`)
	}
	return nil
}

func (_u *OauthStateUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthstate.Table, oauthstate.Columns, sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthstate.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthstate.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthstate.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthstate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthstate.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthstate.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthstate.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthstate.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthstate.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthstate.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthstate.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthstate.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(oauthstate.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthstate.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthstate.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(oauthstate.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(oauthstate.FieldUsedAt, field.TypeTime)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthUsersIDs(); len(nodes) > 0 && !_u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthStateUpdateOne is the builder for updating a single OauthState entity.
type OauthStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthStateMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthStateUpdateOne) SetCreateBy(v uint64) *OauthStateUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableCreateBy(v *uint64) *OauthStateUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthStateUpdateOne) AddCreateBy(v int64) *OauthStateUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthStateUpdateOne) ClearCreateBy() *OauthStateUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthStateUpdateOne) SetUpdateTime(v time.Time) *OauthStateUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthStateUpdateOne) SetUpdateBy(v uint64) *OauthStateUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableUpdateBy(v *uint64) *OauthStateUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthStateUpdateOne) AddUpdateBy(v int64) *OauthStateUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthStateUpdateOne) ClearUpdateBy() *OauthStateUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthStateUpdateOne) SetDeleteTime(v time.Time) *OauthStateUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthStateUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthStateUpdateOne) ClearDeleteTime() *OauthStateUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthStateUpdateOne) SetDeleteBy(v uint64) *OauthStateUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableDeleteBy(v *uint64) *OauthStateUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthStateUpdateOne) AddDeleteBy(v int64) *OauthStateUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthStateUpdateOne) ClearDeleteBy() *OauthStateUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetState sets the "state" field.
func (_u *OauthStateUpdateOne) SetState(v string) *OauthStateUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableState(v *string) *OauthStateUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *OauthStateUpdateOne) SetType(v oauthstate.Type) *OauthStateUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableType(v *oauthstate.Type) *OauthStateUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthStateUpdateOne) SetProviderID(v uint64) *OauthStateUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableProviderID(v *uint64) *OauthStateUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthStateUpdateOne) SetUserID(v uint64) *OauthStateUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableUserID(v *uint64) *OauthStateUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *OauthStateUpdateOne) ClearUserID() *OauthStateUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthStateUpdateOne) SetExpiresAt(v time.Time) *OauthStateUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableExpiresAt(v *time.Time) *OauthStateUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *OauthStateUpdateOne) SetUsedAt(v time.Time) *OauthStateUpdateOne {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *OauthStateUpdateOne) SetNillableUsedAt(v *time.Time) *OauthStateUpdateOne {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *OauthStateUpdateOne) ClearUsedAt() *OauthStateUpdateOne {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthStateUpdateOne) SetProvider(v *OauthProvider) *OauthStateUpdateOne {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthStateUpdateOne) SetUser(v *User) *OauthStateUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddOauthUserIDs adds the "oauth_users" edge to the OauthUser entity by IDs.
func (_u *OauthStateUpdateOne) AddOauthUserIDs(ids ...uint64) *OauthStateUpdateOne {
	_u.mutation.AddOauthUserIDs(ids...)
	return _u
}

// AddOauthUsers adds the "oauth_users" edges to the OauthUser entity.
func (_u *OauthStateUpdateOne) AddOauthUsers(v ...*OauthUser) *OauthStateUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthUserIDs(ids...)
}

// Mutation returns the OauthStateMutation object of the builder.
func (_u *OauthStateUpdateOne) Mutation() *OauthStateMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthStateUpdateOne) ClearProvider() *OauthStateUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthStateUpdateOne) ClearUser() *OauthStateUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearOauthUsers clears all "oauth_users" edges to the OauthUser entity.
func (_u *OauthStateUpdateOne) ClearOauthUsers() *OauthStateUpdateOne {
	_u.mutation.ClearOauthUsers()
	return _u
}

// RemoveOauthUserIDs removes the "oauth_users" edge to OauthUser entities by IDs.
func (_u *OauthStateUpdateOne) RemoveOauthUserIDs(ids ...uint64) *OauthStateUpdateOne {
	_u.mutation.RemoveOauthUserIDs(ids...)
	return _u
}

// RemoveOauthUsers removes "oauth_users" edges to OauthUser entities.
func (_u *OauthStateUpdateOne) RemoveOauthUsers(v ...*OauthUser) *OauthStateUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthUserIDs(ids...)
}

// Where appends a list predicates to the OauthStateUpdate builder.
func (_u *OauthStateUpdateOne) Where(ps ...predicate.OauthState) *OauthStateUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthStateUpdateOne) Select(field string, fields ...string) *OauthStateUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthState entity.
func (_u *OauthStateUpdateOne) Save(ctx context.Context) (*OauthState, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthStateUpdateOne) SaveX(ctx context.Context) *OauthState {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthStateUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthStateUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthStateUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthstate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthstate.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthstate.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthStateUpdateOne) check() error {
	if v, ok := _u.mutation.State(); ok {
		if err := oauthstate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthState.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthstate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthState.type": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthState.provider"`)
	}
	return nil
}

func (_u *OauthStateUpdateOne) sqlSave(ctx context.Context) (_node *OauthState, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthstate.Table, oauthstate.Columns, sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthstate.FieldID)
		for _, f := range fields {
			if !oauthstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthstate.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthstate.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthstate.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthstate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthstate.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthstate.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthstate.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthstate.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthstate.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthstate.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthstate.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthstate.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(oauthstate.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthstate.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthstate.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(oauthstate.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(oauthstate.FieldUsedAt, field.TypeTime)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthUsersIDs(); len(nodes) > 0 && !_u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthState{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
