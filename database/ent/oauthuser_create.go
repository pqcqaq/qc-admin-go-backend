// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthUserCreate is the builder for creating a OauthUser entity.
type OauthUserCreate struct {
	config
	mutation *OauthUserMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *OauthUserCreate) SetCreateTime(v time.Time) *OauthUserCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableCreateTime(v *time.Time) *OauthUserCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *OauthUserCreate) SetCreateBy(v uint64) *OauthUserCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableCreateBy(v *uint64) *OauthUserCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OauthUserCreate) SetUpdateTime(v time.Time) *OauthUserCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableUpdateTime(v *time.Time) *OauthUserCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *OauthUserCreate) SetUpdateBy(v uint64) *OauthUserCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableUpdateBy(v *uint64) *OauthUserCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *OauthUserCreate) SetDeleteTime(v time.Time) *OauthUserCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableDeleteTime(v *time.Time) *OauthUserCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *OauthUserCreate) SetDeleteBy(v uint64) *OauthUserCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableDeleteBy(v *uint64) *OauthUserCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetProviderID sets the "provider_id" field.
func (_c *OauthUserCreate) SetProviderID(v uint64) *OauthUserCreate {
	_c.mutation.SetProviderID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OauthUserCreate) SetUserID(v uint64) *OauthUserCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetStateID sets the "state_id" field.
func (_c *OauthUserCreate) SetStateID(v uint64) *OauthUserCreate {
	_c.mutation.SetStateID(v)
	return _c
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableStateID(v *uint64) *OauthUserCreate {
	if v != nil {
		_c.SetStateID(*v)
	}
	return _c
}

// SetProviderUserID sets the "provider_user_id" field.
func (_c *OauthUserCreate) SetProviderUserID(v string) *OauthUserCreate {
	_c.mutation.SetProviderUserID(v)
	return _c
}

// SetRawUserInfo sets the "raw_user_info" field.
func (_c *OauthUserCreate) SetRawUserInfo(v map[string]interface{}) *OauthUserCreate {
	_c.mutation.SetRawUserInfo(v)
	return _c
}

// SetAccessToken sets the "access_token" field.
func (_c *OauthUserCreate) SetAccessToken(v string) *OauthUserCreate {
	_c.mutation.SetAccessToken(v)
	return _c
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableAccessToken(v *string) *OauthUserCreate {
	if v != nil {
		_c.SetAccessToken(*v)
	}
	return _c
}

// SetRefreshToken sets the "refresh_token" field.
func (_c *OauthUserCreate) SetRefreshToken(v string) *OauthUserCreate {
	_c.mutation.SetRefreshToken(v)
	return _c
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableRefreshToken(v *string) *OauthUserCreate {
	if v != nil {
		_c.SetRefreshToken(*v)
	}
	return _c
}

// SetAccessExpiresAt sets the "access_expires_at" field.
func (_c *OauthUserCreate) SetAccessExpiresAt(v time.Time) *OauthUserCreate {
	_c.mutation.SetAccessExpiresAt(v)
	return _c
}

// SetNillableAccessExpiresAt sets the "access_expires_at" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableAccessExpiresAt(v *time.Time) *OauthUserCreate {
	if v != nil {
		_c.SetAccessExpiresAt(*v)
	}
	return _c
}

// SetRefreshExpiresAt sets the "refresh_expires_at" field.
func (_c *OauthUserCreate) SetRefreshExpiresAt(v time.Time) *OauthUserCreate {
	_c.mutation.SetRefreshExpiresAt(v)
	return _c
}

// SetNillableRefreshExpiresAt sets the "refresh_expires_at" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableRefreshExpiresAt(v *time.Time) *OauthUserCreate {
	if v != nil {
		_c.SetRefreshExpiresAt(*v)
	}
	return _c
}

// SetLoadState sets the "load_state" field.
func (_c *OauthUserCreate) SetLoadState(v oauthuser.LoadState) *OauthUserCreate {
	_c.mutation.SetLoadState(v)
	return _c
}

// SetNillableLoadState sets the "load_state" field if the given value is not nil.
func (_c *OauthUserCreate) SetNillableLoadState(v *oauthuser.LoadState) *OauthUserCreate {
	if v != nil {
		_c.SetLoadState(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthUserCreate) SetID(v uint64) *OauthUserCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_c *OauthUserCreate) SetProvider(v *OauthProvider) *OauthUserCreate {
	return _c.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_c *OauthUserCreate) SetUser(v *User) *OauthUserCreate {
	return _c.SetUserID(v.ID)
}

// SetState sets the "state" edge to the OauthState entity.
func (_c *OauthUserCreate) SetState(v *OauthState) *OauthUserCreate {
	return _c.SetStateID(v.ID)
}

// Mutation returns the OauthUserMutation object of the builder.
func (_c *OauthUserCreate) Mutation() *OauthUserMutation {
	return _c.mutation
}

// Save creates the OauthUser in the database.
func (_c *OauthUserCreate) Save(ctx context.Context) (*OauthUser, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthUserCreate) SaveX(ctx context.Context) *OauthUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthUserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthUserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthUserCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if oauthuser.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuser.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := oauthuser.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if oauthuser.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuser.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuser.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.LoadState(); !ok {
		v := oauthuser.DefaultLoadState
		_c.mutation.SetLoadState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthUserCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OauthUser.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OauthUser.update_time"`)}
	}
	if _, ok := _c.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OauthUser.provider_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OauthUser.user_id"`)}
	}
	if _, ok := _c.mutation.ProviderUserID(); !ok {
		return &ValidationError{Name: "provider_user_id", err: errors.New(`ent: missing required field "OauthUser.provider_user_id"`)}
	}
	if v, ok := _c.mutation.ProviderUserID(); ok {
		if err := oauthuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AccessToken(); ok {
		if err := oauthuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.access_token": %w`, err)}
		}
	}
	if v, ok := _c.mutation.RefreshToken(); ok {
		if err := oauthuser.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.refresh_token": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LoadState(); !ok {
		return &ValidationError{Name: "load_state", err: errors.New(`ent: missing required field "OauthUser.load_state"`)}
	}
	if v, ok := _c.mutation.LoadState(); ok {
		if err := oauthuser.LoadStateValidator(v); err != nil {
			return &ValidationError{Name: "load_state", err: fmt.Errorf(`ent: validator failed for field "OauthUser.load_state": %w`, err)}
		}
	}
	if len(_c.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "OauthUser.provider"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OauthUser.user"`)}
	}
	return nil
}

func (_c *OauthUserCreate) sqlSave(ctx context.Context) (*OauthUser, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthUserCreate) createSpec() (*OauthUser, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthUser{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthuser.Table, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(oauthuser.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(oauthuser.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuser.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuser.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuser.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuser.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthuser.FieldProviderUserID, field.TypeString, value)
		_node.ProviderUserID = value
	}
	if value, ok := _c.mutation.RawUserInfo(); ok {
		_spec.SetField(oauthuser.FieldRawUserInfo, field.TypeJSON, value)
		_node.RawUserInfo = value
	}
	if value, ok := _c.mutation.AccessToken(); ok {
		_spec.SetField(oauthuser.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := _c.mutation.RefreshToken(); ok {
		_spec.SetField(oauthuser.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := _c.mutation.AccessExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldAccessExpiresAt, field.TypeTime, value)
		_node.AccessExpiresAt = &value
	}
	if value, ok := _c.mutation.RefreshExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldRefreshExpiresAt, field.TypeTime, value)
		_node.RefreshExpiresAt = &value
	}
	if value, ok := _c.mutation.LoadState(); ok {
		_spec.SetField(oauthuser.FieldLoadState, field.TypeEnum, value)
		_node.LoadState = value
	}
	if nodes := _c.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthUserCreateBulk is the builder for creating many OauthUser entities in bulk.
type OauthUserCreateBulk struct {
	config
	err      error
	builders []*OauthUserCreate
}

// Save creates the OauthUser entities in the database.
func (_c *OauthUserCreateBulk) Save(ctx context.Context) ([]*OauthUser, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthUser, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthUserCreateBulk) SaveX(ctx context.Context) []*OauthUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthUserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthUserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
