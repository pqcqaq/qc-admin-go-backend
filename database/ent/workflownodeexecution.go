// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownode"
	"go-backend/database/ent/workflownodeexecution"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowNodeExecution is the model entity for the WorkflowNodeExecution schema.
type WorkflowNodeExecution struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 工作流执行ID
	ExecutionID uint64 `json:"execution_id,omitempty"`
	// 节点ID
	NodeID uint64 `json:"node_id,omitempty"`
	// 节点名称
	NodeName string `json:"node_name,omitempty"`
	// 节点类型
	NodeType string `json:"node_type,omitempty"`
	// 执行状态
	Status workflownodeexecution.Status `json:"status,omitempty"`
	// 输入数据
	Input map[string]interface{} `json:"input,omitempty"`
	// 输出数据
	Output map[string]interface{} `json:"output,omitempty"`
	// 额外信息
	Extra map[string]interface{} `json:"extra,omitempty"`
	// 开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 结束时间
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// 执行时长(毫秒)
	DurationMs int `json:"duration_ms,omitempty"`
	// 提示词Token
	PromptTokens int `json:"prompt_tokens,omitempty"`
	// 补全Token
	CompletionTokens int `json:"completion_tokens,omitempty"`
	// 总Token
	TotalTokens int `json:"total_tokens,omitempty"`
	// 成本
	Cost float64 `json:"cost,omitempty"`
	// 使用的模型
	Model string `json:"model,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 错误堆栈
	ErrorStack string `json:"error_stack,omitempty"`
	// 重试次数
	RetryCount int `json:"retry_count,omitempty"`
	// 是否异步执行
	IsAsync bool `json:"is_async,omitempty"`
	// 父节点执行ID
	ParentExecutionID uint64 `json:"parent_execution_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowNodeExecutionQuery when eager-loading is set.
	Edges        WorkflowNodeExecutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowNodeExecutionEdges holds the relations/edges for other nodes in the graph.
type WorkflowNodeExecutionEdges struct {
	// WorkflowExecution holds the value of the workflow_execution edge.
	WorkflowExecution *WorkflowExecution `json:"workflow_execution,omitempty"`
	// Node holds the value of the node edge.
	Node *WorkflowNode `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkflowExecutionOrErr returns the WorkflowExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowNodeExecutionEdges) WorkflowExecutionOrErr() (*WorkflowExecution, error) {
	if e.WorkflowExecution != nil {
		return e.WorkflowExecution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowexecution.Label}
	}
	return nil, &NotLoadedError{edge: "workflow_execution"}
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowNodeExecutionEdges) NodeOrErr() (*WorkflowNode, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workflownode.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowNodeExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflownodeexecution.FieldInput, workflownodeexecution.FieldOutput, workflownodeexecution.FieldExtra:
			values[i] = new([]byte)
		case workflownodeexecution.FieldIsAsync:
			values[i] = new(sql.NullBool)
		case workflownodeexecution.FieldCost:
			values[i] = new(sql.NullFloat64)
		case workflownodeexecution.FieldID, workflownodeexecution.FieldCreateBy, workflownodeexecution.FieldUpdateBy, workflownodeexecution.FieldExecutionID, workflownodeexecution.FieldNodeID, workflownodeexecution.FieldDurationMs, workflownodeexecution.FieldPromptTokens, workflownodeexecution.FieldCompletionTokens, workflownodeexecution.FieldTotalTokens, workflownodeexecution.FieldRetryCount, workflownodeexecution.FieldParentExecutionID:
			values[i] = new(sql.NullInt64)
		case workflownodeexecution.FieldNodeName, workflownodeexecution.FieldNodeType, workflownodeexecution.FieldStatus, workflownodeexecution.FieldModel, workflownodeexecution.FieldErrorMessage, workflownodeexecution.FieldErrorStack:
			values[i] = new(sql.NullString)
		case workflownodeexecution.FieldCreateTime, workflownodeexecution.FieldUpdateTime, workflownodeexecution.FieldStartedAt, workflownodeexecution.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowNodeExecution fields.
func (_m *WorkflowNodeExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflownodeexecution.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflownodeexecution.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflownodeexecution.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflownodeexecution.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflownodeexecution.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflownodeexecution.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				_m.ExecutionID = uint64(value.Int64)
			}
		case workflownodeexecution.FieldNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				_m.NodeID = uint64(value.Int64)
			}
		case workflownodeexecution.FieldNodeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_name", values[i])
			} else if value.Valid {
				_m.NodeName = value.String
			}
		case workflownodeexecution.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				_m.NodeType = value.String
			}
		case workflownodeexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = workflownodeexecution.Status(value.String)
			}
		case workflownodeexecution.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case workflownodeexecution.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Output); err != nil {
					return fmt.Errorf("unmarshal field output: %w", err)
				}
			}
		case workflownodeexecution.FieldExtra:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Extra); err != nil {
					return fmt.Errorf("unmarshal field extra: %w", err)
				}
			}
		case workflownodeexecution.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case workflownodeexecution.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				_m.FinishedAt = value.Time
			}
		case workflownodeexecution.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				_m.DurationMs = int(value.Int64)
			}
		case workflownodeexecution.FieldPromptTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_tokens", values[i])
			} else if value.Valid {
				_m.PromptTokens = int(value.Int64)
			}
		case workflownodeexecution.FieldCompletionTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_tokens", values[i])
			} else if value.Valid {
				_m.CompletionTokens = int(value.Int64)
			}
		case workflownodeexecution.FieldTotalTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_tokens", values[i])
			} else if value.Valid {
				_m.TotalTokens = int(value.Int64)
			}
		case workflownodeexecution.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				_m.Cost = value.Float64
			}
		case workflownodeexecution.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				_m.Model = value.String
			}
		case workflownodeexecution.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = value.String
			}
		case workflownodeexecution.FieldErrorStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_stack", values[i])
			} else if value.Valid {
				_m.ErrorStack = value.String
			}
		case workflownodeexecution.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				_m.RetryCount = int(value.Int64)
			}
		case workflownodeexecution.FieldIsAsync:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_async", values[i])
			} else if value.Valid {
				_m.IsAsync = value.Bool
			}
		case workflownodeexecution.FieldParentExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_execution_id", values[i])
			} else if value.Valid {
				_m.ParentExecutionID = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowNodeExecution.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowNodeExecution) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryWorkflowExecution queries the "workflow_execution" edge of the WorkflowNodeExecution entity.
func (_m *WorkflowNodeExecution) QueryWorkflowExecution() *WorkflowExecutionQuery {
	return NewWorkflowNodeExecutionClient(_m.config).QueryWorkflowExecution(_m)
}

// QueryNode queries the "node" edge of the WorkflowNodeExecution entity.
func (_m *WorkflowNodeExecution) QueryNode() *WorkflowNodeQuery {
	return NewWorkflowNodeExecutionClient(_m.config).QueryNode(_m)
}

// Update returns a builder for updating this WorkflowNodeExecution.
// Note that you need to call WorkflowNodeExecution.Unwrap() before calling this method if this WorkflowNodeExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowNodeExecution) Update() *WorkflowNodeExecutionUpdateOne {
	return NewWorkflowNodeExecutionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowNodeExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowNodeExecution) Unwrap() *WorkflowNodeExecution {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowNodeExecution is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowNodeExecution) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowNodeExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExecutionID))
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NodeID))
	builder.WriteString(", ")
	builder.WriteString("node_name=")
	builder.WriteString(_m.NodeName)
	builder.WriteString(", ")
	builder.WriteString("node_type=")
	builder.WriteString(_m.NodeType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", _m.Input))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", _m.Output))
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(fmt.Sprintf("%v", _m.Extra))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(_m.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", _m.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("prompt_tokens=")
	builder.WriteString(fmt.Sprintf("%v", _m.PromptTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_tokens=")
	builder.WriteString(fmt.Sprintf("%v", _m.CompletionTokens))
	builder.WriteString(", ")
	builder.WriteString("total_tokens=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalTokens))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.Cost))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(_m.Model)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(_m.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("error_stack=")
	builder.WriteString(_m.ErrorStack)
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("is_async=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsAsync))
	builder.WriteString(", ")
	builder.WriteString("parent_execution_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ParentExecutionID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowNodeExecutions is a parsable slice of WorkflowNodeExecution.
type WorkflowNodeExecutions []*WorkflowNodeExecution
