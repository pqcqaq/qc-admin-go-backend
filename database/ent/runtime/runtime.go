// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/role"
	"go-backend/database/ent/rolepermission"
	"go-backend/database/ent/scan"
	"go-backend/database/ent/scope"
	"go-backend/database/ent/user"
	"go-backend/database/ent/userrole"
	"go-backend/database/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	attachmentMixin := schema.Attachment{}.Mixin()
	attachmentMixinHooks0 := attachmentMixin[0].Hooks()
	attachmentMixinHooks1 := attachmentMixin[1].Hooks()
	attachment.Hooks[0] = attachmentMixinHooks0[0]
	attachment.Hooks[1] = attachmentMixinHooks0[1]
	attachment.Hooks[2] = attachmentMixinHooks1[0]
	attachmentMixinInters1 := attachmentMixin[1].Interceptors()
	attachment.Interceptors[0] = attachmentMixinInters1[0]
	attachmentMixinFields0 := attachmentMixin[0].Fields()
	_ = attachmentMixinFields0
	attachmentFields := schema.Attachment{}.Fields()
	_ = attachmentFields
	// attachmentDescCreateTime is the schema descriptor for create_time field.
	attachmentDescCreateTime := attachmentMixinFields0[1].Descriptor()
	// attachment.DefaultCreateTime holds the default value on creation for the create_time field.
	attachment.DefaultCreateTime = attachmentDescCreateTime.Default.(func() time.Time)
	// attachmentDescUpdateTime is the schema descriptor for update_time field.
	attachmentDescUpdateTime := attachmentMixinFields0[3].Descriptor()
	// attachment.DefaultUpdateTime holds the default value on creation for the update_time field.
	attachment.DefaultUpdateTime = attachmentDescUpdateTime.Default.(func() time.Time)
	// attachment.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	attachment.UpdateDefaultUpdateTime = attachmentDescUpdateTime.UpdateDefault.(func() time.Time)
	// attachmentDescFilename is the schema descriptor for filename field.
	attachmentDescFilename := attachmentFields[0].Descriptor()
	// attachment.FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	attachment.FilenameValidator = attachmentDescFilename.Validators[0].(func(string) error)
	// attachmentDescPath is the schema descriptor for path field.
	attachmentDescPath := attachmentFields[1].Descriptor()
	// attachment.PathValidator is a validator for the "path" field. It is called by the builders before save.
	attachment.PathValidator = attachmentDescPath.Validators[0].(func(string) error)
	// attachmentDescURL is the schema descriptor for url field.
	attachmentDescURL := attachmentFields[2].Descriptor()
	// attachment.URLValidator is a validator for the "url" field. It is called by the builders before save.
	attachment.URLValidator = attachmentDescURL.Validators[0].(func(string) error)
	// attachmentDescContentType is the schema descriptor for content_type field.
	attachmentDescContentType := attachmentFields[3].Descriptor()
	// attachment.ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	attachment.ContentTypeValidator = attachmentDescContentType.Validators[0].(func(string) error)
	// attachmentDescEtag is the schema descriptor for etag field.
	attachmentDescEtag := attachmentFields[5].Descriptor()
	// attachment.EtagValidator is a validator for the "etag" field. It is called by the builders before save.
	attachment.EtagValidator = attachmentDescEtag.Validators[0].(func(string) error)
	// attachmentDescBucket is the schema descriptor for bucket field.
	attachmentDescBucket := attachmentFields[6].Descriptor()
	// attachment.BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	attachment.BucketValidator = attachmentDescBucket.Validators[0].(func(string) error)
	// attachmentDescStorageProvider is the schema descriptor for storage_provider field.
	attachmentDescStorageProvider := attachmentFields[7].Descriptor()
	// attachment.DefaultStorageProvider holds the default value on creation for the storage_provider field.
	attachment.DefaultStorageProvider = attachmentDescStorageProvider.Default.(string)
	// attachment.StorageProviderValidator is a validator for the "storage_provider" field. It is called by the builders before save.
	attachment.StorageProviderValidator = attachmentDescStorageProvider.Validators[0].(func(string) error)
	// attachmentDescUploadSessionID is the schema descriptor for upload_session_id field.
	attachmentDescUploadSessionID := attachmentFields[10].Descriptor()
	// attachment.UploadSessionIDValidator is a validator for the "upload_session_id" field. It is called by the builders before save.
	attachment.UploadSessionIDValidator = attachmentDescUploadSessionID.Validators[0].(func(string) error)
	// attachmentDescTag1 is the schema descriptor for tag1 field.
	attachmentDescTag1 := attachmentFields[11].Descriptor()
	// attachment.Tag1Validator is a validator for the "tag1" field. It is called by the builders before save.
	attachment.Tag1Validator = attachmentDescTag1.Validators[0].(func(string) error)
	// attachmentDescTag2 is the schema descriptor for tag2 field.
	attachmentDescTag2 := attachmentFields[12].Descriptor()
	// attachment.Tag2Validator is a validator for the "tag2" field. It is called by the builders before save.
	attachment.Tag2Validator = attachmentDescTag2.Validators[0].(func(string) error)
	// attachmentDescTag3 is the schema descriptor for tag3 field.
	attachmentDescTag3 := attachmentFields[13].Descriptor()
	// attachment.Tag3Validator is a validator for the "tag3" field. It is called by the builders before save.
	attachment.Tag3Validator = attachmentDescTag3.Validators[0].(func(string) error)
	credentialMixin := schema.Credential{}.Mixin()
	credentialMixinHooks0 := credentialMixin[0].Hooks()
	credentialMixinHooks1 := credentialMixin[1].Hooks()
	credential.Hooks[0] = credentialMixinHooks0[0]
	credential.Hooks[1] = credentialMixinHooks0[1]
	credential.Hooks[2] = credentialMixinHooks1[0]
	credentialMixinInters1 := credentialMixin[1].Interceptors()
	credential.Interceptors[0] = credentialMixinInters1[0]
	credentialMixinFields0 := credentialMixin[0].Fields()
	_ = credentialMixinFields0
	credentialFields := schema.Credential{}.Fields()
	_ = credentialFields
	// credentialDescCreateTime is the schema descriptor for create_time field.
	credentialDescCreateTime := credentialMixinFields0[1].Descriptor()
	// credential.DefaultCreateTime holds the default value on creation for the create_time field.
	credential.DefaultCreateTime = credentialDescCreateTime.Default.(func() time.Time)
	// credentialDescUpdateTime is the schema descriptor for update_time field.
	credentialDescUpdateTime := credentialMixinFields0[3].Descriptor()
	// credential.DefaultUpdateTime holds the default value on creation for the update_time field.
	credential.DefaultUpdateTime = credentialDescUpdateTime.Default.(func() time.Time)
	// credential.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	credential.UpdateDefaultUpdateTime = credentialDescUpdateTime.UpdateDefault.(func() time.Time)
	// credentialDescIdentifier is the schema descriptor for identifier field.
	credentialDescIdentifier := credentialFields[2].Descriptor()
	// credential.IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	credential.IdentifierValidator = credentialDescIdentifier.Validators[0].(func(string) error)
	// credentialDescSecret is the schema descriptor for secret field.
	credentialDescSecret := credentialFields[3].Descriptor()
	// credential.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	credential.SecretValidator = credentialDescSecret.Validators[0].(func(string) error)
	// credentialDescProvider is the schema descriptor for provider field.
	credentialDescProvider := credentialFields[4].Descriptor()
	// credential.ProviderValidator is a validator for the "provider" field. It is called by the builders before save.
	credential.ProviderValidator = credentialDescProvider.Validators[0].(func(string) error)
	// credentialDescIsVerified is the schema descriptor for is_verified field.
	credentialDescIsVerified := credentialFields[5].Descriptor()
	// credential.DefaultIsVerified holds the default value on creation for the is_verified field.
	credential.DefaultIsVerified = credentialDescIsVerified.Default.(bool)
	// credentialDescFailedAttempts is the schema descriptor for failed_attempts field.
	credentialDescFailedAttempts := credentialFields[9].Descriptor()
	// credential.DefaultFailedAttempts holds the default value on creation for the failed_attempts field.
	credential.DefaultFailedAttempts = credentialDescFailedAttempts.Default.(int)
	loggingMixin := schema.Logging{}.Mixin()
	loggingMixinHooks0 := loggingMixin[0].Hooks()
	loggingMixinHooks1 := loggingMixin[1].Hooks()
	logging.Hooks[0] = loggingMixinHooks0[0]
	logging.Hooks[1] = loggingMixinHooks0[1]
	logging.Hooks[2] = loggingMixinHooks1[0]
	loggingMixinInters1 := loggingMixin[1].Interceptors()
	logging.Interceptors[0] = loggingMixinInters1[0]
	loggingMixinFields0 := loggingMixin[0].Fields()
	_ = loggingMixinFields0
	loggingFields := schema.Logging{}.Fields()
	_ = loggingFields
	// loggingDescCreateTime is the schema descriptor for create_time field.
	loggingDescCreateTime := loggingMixinFields0[1].Descriptor()
	// logging.DefaultCreateTime holds the default value on creation for the create_time field.
	logging.DefaultCreateTime = loggingDescCreateTime.Default.(func() time.Time)
	// loggingDescUpdateTime is the schema descriptor for update_time field.
	loggingDescUpdateTime := loggingMixinFields0[3].Descriptor()
	// logging.DefaultUpdateTime holds the default value on creation for the update_time field.
	logging.DefaultUpdateTime = loggingDescUpdateTime.Default.(func() time.Time)
	// logging.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	logging.UpdateDefaultUpdateTime = loggingDescUpdateTime.UpdateDefault.(func() time.Time)
	// loggingDescMessage is the schema descriptor for message field.
	loggingDescMessage := loggingFields[2].Descriptor()
	// logging.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	logging.MessageValidator = func() func(string) error {
		validators := loggingDescMessage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(message string) error {
			for _, fn := range fns {
				if err := fn(message); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// loggingDescMethod is the schema descriptor for method field.
	loggingDescMethod := loggingFields[3].Descriptor()
	// logging.MethodValidator is a validator for the "method" field. It is called by the builders before save.
	logging.MethodValidator = loggingDescMethod.Validators[0].(func(string) error)
	// loggingDescPath is the schema descriptor for path field.
	loggingDescPath := loggingFields[4].Descriptor()
	// logging.PathValidator is a validator for the "path" field. It is called by the builders before save.
	logging.PathValidator = loggingDescPath.Validators[0].(func(string) error)
	// loggingDescIP is the schema descriptor for ip field.
	loggingDescIP := loggingFields[5].Descriptor()
	// logging.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	logging.IPValidator = loggingDescIP.Validators[0].(func(string) error)
	// loggingDescQuery is the schema descriptor for query field.
	loggingDescQuery := loggingFields[6].Descriptor()
	// logging.QueryValidator is a validator for the "query" field. It is called by the builders before save.
	logging.QueryValidator = loggingDescQuery.Validators[0].(func(string) error)
	// loggingDescCode is the schema descriptor for code field.
	loggingDescCode := loggingFields[7].Descriptor()
	// logging.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	logging.CodeValidator = loggingDescCode.Validators[0].(func(int) error)
	// loggingDescUserAgent is the schema descriptor for user_agent field.
	loggingDescUserAgent := loggingFields[8].Descriptor()
	// logging.UserAgentValidator is a validator for the "user_agent" field. It is called by the builders before save.
	logging.UserAgentValidator = loggingDescUserAgent.Validators[0].(func(string) error)
	// loggingDescStack is the schema descriptor for stack field.
	loggingDescStack := loggingFields[10].Descriptor()
	// logging.StackValidator is a validator for the "stack" field. It is called by the builders before save.
	logging.StackValidator = loggingDescStack.Validators[0].(func(string) error)
	permissionMixin := schema.Permission{}.Mixin()
	permissionMixinHooks0 := permissionMixin[0].Hooks()
	permissionMixinHooks1 := permissionMixin[1].Hooks()
	permission.Hooks[0] = permissionMixinHooks0[0]
	permission.Hooks[1] = permissionMixinHooks0[1]
	permission.Hooks[2] = permissionMixinHooks1[0]
	permissionMixinInters1 := permissionMixin[1].Interceptors()
	permission.Interceptors[0] = permissionMixinInters1[0]
	permissionMixinFields0 := permissionMixin[0].Fields()
	_ = permissionMixinFields0
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescCreateTime is the schema descriptor for create_time field.
	permissionDescCreateTime := permissionMixinFields0[1].Descriptor()
	// permission.DefaultCreateTime holds the default value on creation for the create_time field.
	permission.DefaultCreateTime = permissionDescCreateTime.Default.(func() time.Time)
	// permissionDescUpdateTime is the schema descriptor for update_time field.
	permissionDescUpdateTime := permissionMixinFields0[3].Descriptor()
	// permission.DefaultUpdateTime holds the default value on creation for the update_time field.
	permission.DefaultUpdateTime = permissionDescUpdateTime.Default.(func() time.Time)
	// permission.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	permission.UpdateDefaultUpdateTime = permissionDescUpdateTime.UpdateDefault.(func() time.Time)
	// permissionDescName is the schema descriptor for name field.
	permissionDescName := permissionFields[0].Descriptor()
	// permission.NameValidator is a validator for the "name" field. It is called by the builders before save.
	permission.NameValidator = permissionDescName.Validators[0].(func(string) error)
	// permissionDescAction is the schema descriptor for action field.
	permissionDescAction := permissionFields[1].Descriptor()
	// permission.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	permission.ActionValidator = permissionDescAction.Validators[0].(func(string) error)
	roleMixin := schema.Role{}.Mixin()
	roleMixinHooks0 := roleMixin[0].Hooks()
	roleMixinHooks1 := roleMixin[1].Hooks()
	roleMixinHooks2 := roleMixin[2].Hooks()
	role.Hooks[0] = roleMixinHooks0[0]
	role.Hooks[1] = roleMixinHooks0[1]
	role.Hooks[2] = roleMixinHooks1[0]
	role.Hooks[3] = roleMixinHooks2[0]
	roleMixinInters1 := roleMixin[1].Interceptors()
	role.Interceptors[0] = roleMixinInters1[0]
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreateTime is the schema descriptor for create_time field.
	roleDescCreateTime := roleMixinFields0[1].Descriptor()
	// role.DefaultCreateTime holds the default value on creation for the create_time field.
	role.DefaultCreateTime = roleDescCreateTime.Default.(func() time.Time)
	// roleDescUpdateTime is the schema descriptor for update_time field.
	roleDescUpdateTime := roleMixinFields0[3].Descriptor()
	// role.DefaultUpdateTime holds the default value on creation for the update_time field.
	role.DefaultUpdateTime = roleDescUpdateTime.Default.(func() time.Time)
	// role.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	role.UpdateDefaultUpdateTime = roleDescUpdateTime.UpdateDefault.(func() time.Time)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = roleDescName.Validators[0].(func(string) error)
	rolepermissionMixin := schema.RolePermission{}.Mixin()
	rolepermissionMixinHooks0 := rolepermissionMixin[0].Hooks()
	rolepermissionMixinHooks1 := rolepermissionMixin[1].Hooks()
	rolepermission.Hooks[0] = rolepermissionMixinHooks0[0]
	rolepermission.Hooks[1] = rolepermissionMixinHooks0[1]
	rolepermission.Hooks[2] = rolepermissionMixinHooks1[0]
	rolepermissionMixinInters1 := rolepermissionMixin[1].Interceptors()
	rolepermission.Interceptors[0] = rolepermissionMixinInters1[0]
	rolepermissionMixinFields0 := rolepermissionMixin[0].Fields()
	_ = rolepermissionMixinFields0
	rolepermissionFields := schema.RolePermission{}.Fields()
	_ = rolepermissionFields
	// rolepermissionDescCreateTime is the schema descriptor for create_time field.
	rolepermissionDescCreateTime := rolepermissionMixinFields0[1].Descriptor()
	// rolepermission.DefaultCreateTime holds the default value on creation for the create_time field.
	rolepermission.DefaultCreateTime = rolepermissionDescCreateTime.Default.(func() time.Time)
	// rolepermissionDescUpdateTime is the schema descriptor for update_time field.
	rolepermissionDescUpdateTime := rolepermissionMixinFields0[3].Descriptor()
	// rolepermission.DefaultUpdateTime holds the default value on creation for the update_time field.
	rolepermission.DefaultUpdateTime = rolepermissionDescUpdateTime.Default.(func() time.Time)
	// rolepermission.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	rolepermission.UpdateDefaultUpdateTime = rolepermissionDescUpdateTime.UpdateDefault.(func() time.Time)
	scanMixin := schema.Scan{}.Mixin()
	scanMixinHooks0 := scanMixin[0].Hooks()
	scanMixinHooks1 := scanMixin[1].Hooks()
	scan.Hooks[0] = scanMixinHooks0[0]
	scan.Hooks[1] = scanMixinHooks0[1]
	scan.Hooks[2] = scanMixinHooks1[0]
	scanMixinInters1 := scanMixin[1].Interceptors()
	scan.Interceptors[0] = scanMixinInters1[0]
	scanMixinFields0 := scanMixin[0].Fields()
	_ = scanMixinFields0
	scanFields := schema.Scan{}.Fields()
	_ = scanFields
	// scanDescCreateTime is the schema descriptor for create_time field.
	scanDescCreateTime := scanMixinFields0[1].Descriptor()
	// scan.DefaultCreateTime holds the default value on creation for the create_time field.
	scan.DefaultCreateTime = scanDescCreateTime.Default.(func() time.Time)
	// scanDescUpdateTime is the schema descriptor for update_time field.
	scanDescUpdateTime := scanMixinFields0[3].Descriptor()
	// scan.DefaultUpdateTime holds the default value on creation for the update_time field.
	scan.DefaultUpdateTime = scanDescUpdateTime.Default.(func() time.Time)
	// scan.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	scan.UpdateDefaultUpdateTime = scanDescUpdateTime.UpdateDefault.(func() time.Time)
	// scanDescContent is the schema descriptor for content field.
	scanDescContent := scanFields[0].Descriptor()
	// scan.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	scan.ContentValidator = func() func(string) error {
		validators := scanDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// scanDescLength is the schema descriptor for length field.
	scanDescLength := scanFields[1].Descriptor()
	// scan.LengthValidator is a validator for the "length" field. It is called by the builders before save.
	scan.LengthValidator = scanDescLength.Validators[0].(func(int) error)
	scopeMixin := schema.Scope{}.Mixin()
	scopeMixinHooks0 := scopeMixin[0].Hooks()
	scopeMixinHooks1 := scopeMixin[1].Hooks()
	scope.Hooks[0] = scopeMixinHooks0[0]
	scope.Hooks[1] = scopeMixinHooks0[1]
	scope.Hooks[2] = scopeMixinHooks1[0]
	scopeMixinInters1 := scopeMixin[1].Interceptors()
	scope.Interceptors[0] = scopeMixinInters1[0]
	scopeMixinFields0 := scopeMixin[0].Fields()
	_ = scopeMixinFields0
	scopeFields := schema.Scope{}.Fields()
	_ = scopeFields
	// scopeDescCreateTime is the schema descriptor for create_time field.
	scopeDescCreateTime := scopeMixinFields0[1].Descriptor()
	// scope.DefaultCreateTime holds the default value on creation for the create_time field.
	scope.DefaultCreateTime = scopeDescCreateTime.Default.(func() time.Time)
	// scopeDescUpdateTime is the schema descriptor for update_time field.
	scopeDescUpdateTime := scopeMixinFields0[3].Descriptor()
	// scope.DefaultUpdateTime holds the default value on creation for the update_time field.
	scope.DefaultUpdateTime = scopeDescUpdateTime.Default.(func() time.Time)
	// scope.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	scope.UpdateDefaultUpdateTime = scopeDescUpdateTime.UpdateDefault.(func() time.Time)
	// scopeDescName is the schema descriptor for name field.
	scopeDescName := scopeFields[0].Descriptor()
	// scope.NameValidator is a validator for the "name" field. It is called by the builders before save.
	scope.NameValidator = scopeDescName.Validators[0].(func(string) error)
	// scopeDescOrder is the schema descriptor for order field.
	scopeDescOrder := scopeFields[8].Descriptor()
	// scope.DefaultOrder holds the default value on creation for the order field.
	scope.DefaultOrder = scopeDescOrder.Default.(int)
	// scopeDescHidden is the schema descriptor for hidden field.
	scopeDescHidden := scopeFields[9].Descriptor()
	// scope.DefaultHidden holds the default value on creation for the hidden field.
	scope.DefaultHidden = scopeDescHidden.Default.(bool)
	// scopeDescDisabled is the schema descriptor for disabled field.
	scopeDescDisabled := scopeFields[10].Descriptor()
	// scope.DefaultDisabled holds the default value on creation for the disabled field.
	scope.DefaultDisabled = scopeDescDisabled.Default.(bool)
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	userMixinHooks1 := userMixin[1].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	user.Hooks[1] = userMixinHooks0[1]
	user.Hooks[2] = userMixinHooks1[0]
	userMixinInters1 := userMixin[1].Interceptors()
	user.Interceptors[0] = userMixinInters1[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[1].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[3].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[1].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	userroleMixin := schema.UserRole{}.Mixin()
	userroleMixinHooks0 := userroleMixin[0].Hooks()
	userroleMixinHooks1 := userroleMixin[1].Hooks()
	userrole.Hooks[0] = userroleMixinHooks0[0]
	userrole.Hooks[1] = userroleMixinHooks0[1]
	userrole.Hooks[2] = userroleMixinHooks1[0]
	userroleMixinInters1 := userroleMixin[1].Interceptors()
	userrole.Interceptors[0] = userroleMixinInters1[0]
	userroleMixinFields0 := userroleMixin[0].Fields()
	_ = userroleMixinFields0
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescCreateTime is the schema descriptor for create_time field.
	userroleDescCreateTime := userroleMixinFields0[1].Descriptor()
	// userrole.DefaultCreateTime holds the default value on creation for the create_time field.
	userrole.DefaultCreateTime = userroleDescCreateTime.Default.(func() time.Time)
	// userroleDescUpdateTime is the schema descriptor for update_time field.
	userroleDescUpdateTime := userroleMixinFields0[3].Descriptor()
	// userrole.DefaultUpdateTime holds the default value on creation for the update_time field.
	userrole.DefaultUpdateTime = userroleDescUpdateTime.Default.(func() time.Time)
	// userrole.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	userrole.UpdateDefaultUpdateTime = userroleDescUpdateTime.UpdateDefault.(func() time.Time)
}

const (
	Version = "v0.14.5"                                         // Version of ent codegen.
	Sum     = "h1:Rj2WOYJtCkWyFo6a+5wB3EfBRP0rnx1fMk6gGA0UUe4=" // Sum of ent codegen.
)
