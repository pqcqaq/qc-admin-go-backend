// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"go-backend/database/ent/logging"
	"go-backend/database/ent/user"
	"go-backend/database/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	loggingMixin := schema.Logging{}.Mixin()
	loggingMixinHooks0 := loggingMixin[0].Hooks()
	loggingMixinHooks1 := loggingMixin[1].Hooks()
	logging.Hooks[0] = loggingMixinHooks0[0]
	logging.Hooks[1] = loggingMixinHooks1[0]
	loggingMixinInters1 := loggingMixin[1].Interceptors()
	logging.Interceptors[0] = loggingMixinInters1[0]
	loggingMixinFields0 := loggingMixin[0].Fields()
	_ = loggingMixinFields0
	loggingFields := schema.Logging{}.Fields()
	_ = loggingFields
	// loggingDescCreateTime is the schema descriptor for create_time field.
	loggingDescCreateTime := loggingMixinFields0[1].Descriptor()
	// logging.DefaultCreateTime holds the default value on creation for the create_time field.
	logging.DefaultCreateTime = loggingDescCreateTime.Default.(func() time.Time)
	// loggingDescUpdateTime is the schema descriptor for update_time field.
	loggingDescUpdateTime := loggingMixinFields0[3].Descriptor()
	// logging.DefaultUpdateTime holds the default value on creation for the update_time field.
	logging.DefaultUpdateTime = loggingDescUpdateTime.Default.(func() time.Time)
	// logging.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	logging.UpdateDefaultUpdateTime = loggingDescUpdateTime.UpdateDefault.(func() time.Time)
	// loggingDescMessage is the schema descriptor for message field.
	loggingDescMessage := loggingFields[2].Descriptor()
	// logging.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	logging.MessageValidator = func() func(string) error {
		validators := loggingDescMessage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(message string) error {
			for _, fn := range fns {
				if err := fn(message); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// loggingDescMethod is the schema descriptor for method field.
	loggingDescMethod := loggingFields[3].Descriptor()
	// logging.MethodValidator is a validator for the "method" field. It is called by the builders before save.
	logging.MethodValidator = loggingDescMethod.Validators[0].(func(string) error)
	// loggingDescPath is the schema descriptor for path field.
	loggingDescPath := loggingFields[4].Descriptor()
	// logging.PathValidator is a validator for the "path" field. It is called by the builders before save.
	logging.PathValidator = loggingDescPath.Validators[0].(func(string) error)
	// loggingDescIP is the schema descriptor for ip field.
	loggingDescIP := loggingFields[5].Descriptor()
	// logging.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	logging.IPValidator = loggingDescIP.Validators[0].(func(string) error)
	// loggingDescQuery is the schema descriptor for query field.
	loggingDescQuery := loggingFields[6].Descriptor()
	// logging.QueryValidator is a validator for the "query" field. It is called by the builders before save.
	logging.QueryValidator = loggingDescQuery.Validators[0].(func(string) error)
	// loggingDescCode is the schema descriptor for code field.
	loggingDescCode := loggingFields[7].Descriptor()
	// logging.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	logging.CodeValidator = loggingDescCode.Validators[0].(func(int) error)
	// loggingDescUserAgent is the schema descriptor for user_agent field.
	loggingDescUserAgent := loggingFields[8].Descriptor()
	// logging.UserAgentValidator is a validator for the "user_agent" field. It is called by the builders before save.
	logging.UserAgentValidator = loggingDescUserAgent.Validators[0].(func(string) error)
	// loggingDescStack is the schema descriptor for stack field.
	loggingDescStack := loggingFields[10].Descriptor()
	// logging.StackValidator is a validator for the "stack" field. It is called by the builders before save.
	logging.StackValidator = loggingDescStack.Validators[0].(func(string) error)
	// loggingDescID is the schema descriptor for id field.
	loggingDescID := loggingMixinFields0[0].Descriptor()
	// logging.IDValidator is a validator for the "id" field. It is called by the builders before save.
	logging.IDValidator = loggingDescID.Validators[0].(func(int64) error)
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	userMixinHooks1 := userMixin[1].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	user.Hooks[1] = userMixinHooks1[0]
	userMixinInters1 := userMixin[1].Interceptors()
	user.Interceptors[0] = userMixinInters1[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[1].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[3].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[2].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[3].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(int64) error)
}

const (
	Version = "v0.14.5"                                         // Version of ent codegen.
	Sum     = "h1:Rj2WOYJtCkWyFo6a+5wB3EfBRP0rnx1fMk6gGA0UUe4=" // Sum of ent codegen.
)
