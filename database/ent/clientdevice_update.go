// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/clientdevice"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClientDeviceUpdate is the builder for updating ClientDevice entities.
type ClientDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *ClientDeviceMutation
}

// Where appends a list predicates to the ClientDeviceUpdate builder.
func (_u *ClientDeviceUpdate) Where(ps ...predicate.ClientDevice) *ClientDeviceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *ClientDeviceUpdate) SetCreateBy(v uint64) *ClientDeviceUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableCreateBy(v *uint64) *ClientDeviceUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ClientDeviceUpdate) AddCreateBy(v int64) *ClientDeviceUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ClientDeviceUpdate) ClearCreateBy() *ClientDeviceUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ClientDeviceUpdate) SetUpdateTime(v time.Time) *ClientDeviceUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ClientDeviceUpdate) SetUpdateBy(v uint64) *ClientDeviceUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableUpdateBy(v *uint64) *ClientDeviceUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ClientDeviceUpdate) AddUpdateBy(v int64) *ClientDeviceUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ClientDeviceUpdate) ClearUpdateBy() *ClientDeviceUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ClientDeviceUpdate) SetDeleteTime(v time.Time) *ClientDeviceUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableDeleteTime(v *time.Time) *ClientDeviceUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ClientDeviceUpdate) ClearDeleteTime() *ClientDeviceUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ClientDeviceUpdate) SetDeleteBy(v uint64) *ClientDeviceUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableDeleteBy(v *uint64) *ClientDeviceUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ClientDeviceUpdate) AddDeleteBy(v int64) *ClientDeviceUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ClientDeviceUpdate) ClearDeleteBy() *ClientDeviceUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *ClientDeviceUpdate) SetName(v string) *ClientDeviceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableName(v *string) *ClientDeviceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *ClientDeviceUpdate) SetCode(v string) *ClientDeviceUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableCode(v *string) *ClientDeviceUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ClientDeviceUpdate) SetDescription(v string) *ClientDeviceUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableDescription(v *string) *ClientDeviceUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ClientDeviceUpdate) ClearDescription() *ClientDeviceUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *ClientDeviceUpdate) SetEnabled(v bool) *ClientDeviceUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableEnabled(v *bool) *ClientDeviceUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetAccessTokenExpiry sets the "access_token_expiry" field.
func (_u *ClientDeviceUpdate) SetAccessTokenExpiry(v uint64) *ClientDeviceUpdate {
	_u.mutation.ResetAccessTokenExpiry()
	_u.mutation.SetAccessTokenExpiry(v)
	return _u
}

// SetNillableAccessTokenExpiry sets the "access_token_expiry" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableAccessTokenExpiry(v *uint64) *ClientDeviceUpdate {
	if v != nil {
		_u.SetAccessTokenExpiry(*v)
	}
	return _u
}

// AddAccessTokenExpiry adds value to the "access_token_expiry" field.
func (_u *ClientDeviceUpdate) AddAccessTokenExpiry(v int64) *ClientDeviceUpdate {
	_u.mutation.AddAccessTokenExpiry(v)
	return _u
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (_u *ClientDeviceUpdate) SetRefreshTokenExpiry(v uint64) *ClientDeviceUpdate {
	_u.mutation.ResetRefreshTokenExpiry()
	_u.mutation.SetRefreshTokenExpiry(v)
	return _u
}

// SetNillableRefreshTokenExpiry sets the "refresh_token_expiry" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableRefreshTokenExpiry(v *uint64) *ClientDeviceUpdate {
	if v != nil {
		_u.SetRefreshTokenExpiry(*v)
	}
	return _u
}

// AddRefreshTokenExpiry adds value to the "refresh_token_expiry" field.
func (_u *ClientDeviceUpdate) AddRefreshTokenExpiry(v int64) *ClientDeviceUpdate {
	_u.mutation.AddRefreshTokenExpiry(v)
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ClientDeviceUpdate) SetAnonymous(v bool) *ClientDeviceUpdate {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ClientDeviceUpdate) SetNillableAnonymous(v *bool) *ClientDeviceUpdate {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *ClientDeviceUpdate) AddRoleIDs(ids ...uint64) *ClientDeviceUpdate {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *ClientDeviceUpdate) AddRoles(v ...*Role) *ClientDeviceUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// Mutation returns the ClientDeviceMutation object of the builder.
func (_u *ClientDeviceUpdate) Mutation() *ClientDeviceMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *ClientDeviceUpdate) ClearRoles() *ClientDeviceUpdate {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *ClientDeviceUpdate) RemoveRoleIDs(ids ...uint64) *ClientDeviceUpdate {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *ClientDeviceUpdate) RemoveRoles(v ...*Role) *ClientDeviceUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ClientDeviceUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClientDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ClientDeviceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClientDeviceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ClientDeviceUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if clientdevice.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized clientdevice.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := clientdevice.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ClientDeviceUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := clientdevice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := clientdevice.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := clientdevice.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessTokenExpiry(); ok {
		if err := clientdevice.AccessTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "access_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.access_token_expiry": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshTokenExpiry(); ok {
		if err := clientdevice.RefreshTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.refresh_token_expiry": %w`, err)}
		}
	}
	return nil
}

func (_u *ClientDeviceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientdevice.Table, clientdevice.Columns, sqlgraph.NewFieldSpec(clientdevice.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(clientdevice.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(clientdevice.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(clientdevice.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(clientdevice.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(clientdevice.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(clientdevice.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(clientdevice.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(clientdevice.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(clientdevice.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(clientdevice.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(clientdevice.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(clientdevice.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(clientdevice.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(clientdevice.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(clientdevice.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(clientdevice.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(clientdevice.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AccessTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldAccessTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedAccessTokenExpiry(); ok {
		_spec.AddField(clientdevice.FieldAccessTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.RefreshTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldRefreshTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedRefreshTokenExpiry(); ok {
		_spec.AddField(clientdevice.FieldRefreshTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(clientdevice.FieldAnonymous, field.TypeBool, value)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ClientDeviceUpdateOne is the builder for updating a single ClientDevice entity.
type ClientDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientDeviceMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *ClientDeviceUpdateOne) SetCreateBy(v uint64) *ClientDeviceUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableCreateBy(v *uint64) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ClientDeviceUpdateOne) AddCreateBy(v int64) *ClientDeviceUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ClientDeviceUpdateOne) ClearCreateBy() *ClientDeviceUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ClientDeviceUpdateOne) SetUpdateTime(v time.Time) *ClientDeviceUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ClientDeviceUpdateOne) SetUpdateBy(v uint64) *ClientDeviceUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableUpdateBy(v *uint64) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ClientDeviceUpdateOne) AddUpdateBy(v int64) *ClientDeviceUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ClientDeviceUpdateOne) ClearUpdateBy() *ClientDeviceUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ClientDeviceUpdateOne) SetDeleteTime(v time.Time) *ClientDeviceUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableDeleteTime(v *time.Time) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ClientDeviceUpdateOne) ClearDeleteTime() *ClientDeviceUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ClientDeviceUpdateOne) SetDeleteBy(v uint64) *ClientDeviceUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableDeleteBy(v *uint64) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ClientDeviceUpdateOne) AddDeleteBy(v int64) *ClientDeviceUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ClientDeviceUpdateOne) ClearDeleteBy() *ClientDeviceUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *ClientDeviceUpdateOne) SetName(v string) *ClientDeviceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableName(v *string) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *ClientDeviceUpdateOne) SetCode(v string) *ClientDeviceUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableCode(v *string) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ClientDeviceUpdateOne) SetDescription(v string) *ClientDeviceUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableDescription(v *string) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ClientDeviceUpdateOne) ClearDescription() *ClientDeviceUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *ClientDeviceUpdateOne) SetEnabled(v bool) *ClientDeviceUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableEnabled(v *bool) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetAccessTokenExpiry sets the "access_token_expiry" field.
func (_u *ClientDeviceUpdateOne) SetAccessTokenExpiry(v uint64) *ClientDeviceUpdateOne {
	_u.mutation.ResetAccessTokenExpiry()
	_u.mutation.SetAccessTokenExpiry(v)
	return _u
}

// SetNillableAccessTokenExpiry sets the "access_token_expiry" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableAccessTokenExpiry(v *uint64) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetAccessTokenExpiry(*v)
	}
	return _u
}

// AddAccessTokenExpiry adds value to the "access_token_expiry" field.
func (_u *ClientDeviceUpdateOne) AddAccessTokenExpiry(v int64) *ClientDeviceUpdateOne {
	_u.mutation.AddAccessTokenExpiry(v)
	return _u
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (_u *ClientDeviceUpdateOne) SetRefreshTokenExpiry(v uint64) *ClientDeviceUpdateOne {
	_u.mutation.ResetRefreshTokenExpiry()
	_u.mutation.SetRefreshTokenExpiry(v)
	return _u
}

// SetNillableRefreshTokenExpiry sets the "refresh_token_expiry" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableRefreshTokenExpiry(v *uint64) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetRefreshTokenExpiry(*v)
	}
	return _u
}

// AddRefreshTokenExpiry adds value to the "refresh_token_expiry" field.
func (_u *ClientDeviceUpdateOne) AddRefreshTokenExpiry(v int64) *ClientDeviceUpdateOne {
	_u.mutation.AddRefreshTokenExpiry(v)
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ClientDeviceUpdateOne) SetAnonymous(v bool) *ClientDeviceUpdateOne {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ClientDeviceUpdateOne) SetNillableAnonymous(v *bool) *ClientDeviceUpdateOne {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *ClientDeviceUpdateOne) AddRoleIDs(ids ...uint64) *ClientDeviceUpdateOne {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *ClientDeviceUpdateOne) AddRoles(v ...*Role) *ClientDeviceUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// Mutation returns the ClientDeviceMutation object of the builder.
func (_u *ClientDeviceUpdateOne) Mutation() *ClientDeviceMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *ClientDeviceUpdateOne) ClearRoles() *ClientDeviceUpdateOne {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *ClientDeviceUpdateOne) RemoveRoleIDs(ids ...uint64) *ClientDeviceUpdateOne {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *ClientDeviceUpdateOne) RemoveRoles(v ...*Role) *ClientDeviceUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the ClientDeviceUpdate builder.
func (_u *ClientDeviceUpdateOne) Where(ps ...predicate.ClientDevice) *ClientDeviceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ClientDeviceUpdateOne) Select(field string, fields ...string) *ClientDeviceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ClientDevice entity.
func (_u *ClientDeviceUpdateOne) Save(ctx context.Context) (*ClientDevice, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClientDeviceUpdateOne) SaveX(ctx context.Context) *ClientDevice {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ClientDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClientDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ClientDeviceUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if clientdevice.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized clientdevice.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := clientdevice.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ClientDeviceUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := clientdevice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := clientdevice.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := clientdevice.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessTokenExpiry(); ok {
		if err := clientdevice.AccessTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "access_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.access_token_expiry": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshTokenExpiry(); ok {
		if err := clientdevice.RefreshTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.refresh_token_expiry": %w`, err)}
		}
	}
	return nil
}

func (_u *ClientDeviceUpdateOne) sqlSave(ctx context.Context) (_node *ClientDevice, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientdevice.Table, clientdevice.Columns, sqlgraph.NewFieldSpec(clientdevice.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClientDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientdevice.FieldID)
		for _, f := range fields {
			if !clientdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clientdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(clientdevice.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(clientdevice.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(clientdevice.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(clientdevice.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(clientdevice.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(clientdevice.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(clientdevice.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(clientdevice.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(clientdevice.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(clientdevice.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(clientdevice.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(clientdevice.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(clientdevice.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(clientdevice.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(clientdevice.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(clientdevice.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(clientdevice.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AccessTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldAccessTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedAccessTokenExpiry(); ok {
		_spec.AddField(clientdevice.FieldAccessTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.RefreshTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldRefreshTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedRefreshTokenExpiry(); ok {
		_spec.AddField(clientdevice.FieldRefreshTokenExpiry, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(clientdevice.FieldAnonymous, field.TypeBool, value)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClientDevice{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
