// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/loginrecord"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginRecordUpdate is the builder for updating LoginRecord entities.
type LoginRecordUpdate struct {
	config
	hooks    []Hook
	mutation *LoginRecordMutation
}

// Where appends a list predicates to the LoginRecordUpdate builder.
func (_u *LoginRecordUpdate) Where(ps ...predicate.LoginRecord) *LoginRecordUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *LoginRecordUpdate) SetCreateBy(v uint64) *LoginRecordUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableCreateBy(v *uint64) *LoginRecordUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *LoginRecordUpdate) AddCreateBy(v int64) *LoginRecordUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *LoginRecordUpdate) ClearCreateBy() *LoginRecordUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *LoginRecordUpdate) SetUpdateTime(v time.Time) *LoginRecordUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *LoginRecordUpdate) SetUpdateBy(v uint64) *LoginRecordUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableUpdateBy(v *uint64) *LoginRecordUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *LoginRecordUpdate) AddUpdateBy(v int64) *LoginRecordUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *LoginRecordUpdate) ClearUpdateBy() *LoginRecordUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *LoginRecordUpdate) SetUserID(v uint64) *LoginRecordUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableUserID(v *uint64) *LoginRecordUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *LoginRecordUpdate) SetIdentifier(v string) *LoginRecordUpdate {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableIdentifier(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *LoginRecordUpdate) SetCredentialType(v loginrecord.CredentialType) *LoginRecordUpdate {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableCredentialType(v *loginrecord.CredentialType) *LoginRecordUpdate {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *LoginRecordUpdate) SetIPAddress(v string) *LoginRecordUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableIPAddress(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LoginRecordUpdate) SetUserAgent(v string) *LoginRecordUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableUserAgent(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LoginRecordUpdate) ClearUserAgent() *LoginRecordUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetDeviceInfo sets the "device_info" field.
func (_u *LoginRecordUpdate) SetDeviceInfo(v string) *LoginRecordUpdate {
	_u.mutation.SetDeviceInfo(v)
	return _u
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableDeviceInfo(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetDeviceInfo(*v)
	}
	return _u
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (_u *LoginRecordUpdate) ClearDeviceInfo() *LoginRecordUpdate {
	_u.mutation.ClearDeviceInfo()
	return _u
}

// SetLocation sets the "location" field.
func (_u *LoginRecordUpdate) SetLocation(v string) *LoginRecordUpdate {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableLocation(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *LoginRecordUpdate) ClearLocation() *LoginRecordUpdate {
	_u.mutation.ClearLocation()
	return _u
}

// SetStatus sets the "status" field.
func (_u *LoginRecordUpdate) SetStatus(v loginrecord.Status) *LoginRecordUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableStatus(v *loginrecord.Status) *LoginRecordUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetFailureReason sets the "failure_reason" field.
func (_u *LoginRecordUpdate) SetFailureReason(v string) *LoginRecordUpdate {
	_u.mutation.SetFailureReason(v)
	return _u
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableFailureReason(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetFailureReason(*v)
	}
	return _u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (_u *LoginRecordUpdate) ClearFailureReason() *LoginRecordUpdate {
	_u.mutation.ClearFailureReason()
	return _u
}

// SetSessionID sets the "session_id" field.
func (_u *LoginRecordUpdate) SetSessionID(v string) *LoginRecordUpdate {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableSessionID(v *string) *LoginRecordUpdate {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// ClearSessionID clears the value of the "session_id" field.
func (_u *LoginRecordUpdate) ClearSessionID() *LoginRecordUpdate {
	_u.mutation.ClearSessionID()
	return _u
}

// SetLogoutTime sets the "logout_time" field.
func (_u *LoginRecordUpdate) SetLogoutTime(v time.Time) *LoginRecordUpdate {
	_u.mutation.SetLogoutTime(v)
	return _u
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableLogoutTime(v *time.Time) *LoginRecordUpdate {
	if v != nil {
		_u.SetLogoutTime(*v)
	}
	return _u
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (_u *LoginRecordUpdate) ClearLogoutTime() *LoginRecordUpdate {
	_u.mutation.ClearLogoutTime()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *LoginRecordUpdate) SetDuration(v int) *LoginRecordUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *LoginRecordUpdate) SetNillableDuration(v *int) *LoginRecordUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *LoginRecordUpdate) AddDuration(v int) *LoginRecordUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *LoginRecordUpdate) ClearDuration() *LoginRecordUpdate {
	_u.mutation.ClearDuration()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *LoginRecordUpdate) SetMetadata(v map[string]interface{}) *LoginRecordUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *LoginRecordUpdate) ClearMetadata() *LoginRecordUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LoginRecordUpdate) SetUser(v *User) *LoginRecordUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (_u *LoginRecordUpdate) Mutation() *LoginRecordMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LoginRecordUpdate) ClearUser() *LoginRecordUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LoginRecordUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoginRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LoginRecordUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoginRecordUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoginRecordUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if loginrecord.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized loginrecord.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := loginrecord.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoginRecordUpdate) check() error {
	if v, ok := _u.mutation.Identifier(); ok {
		if err := loginrecord.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := loginrecord.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPAddress(); ok {
		if err := loginrecord.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.ip_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := loginrecord.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceInfo(); ok {
		if err := loginrecord.DeviceInfoValidator(v); err != nil {
			return &ValidationError{Name: "device_info", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.device_info": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Location(); ok {
		if err := loginrecord.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.location": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := loginrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FailureReason(); ok {
		if err := loginrecord.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.failure_reason": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SessionID(); ok {
		if err := loginrecord.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.session_id": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginRecord.user"`)
	}
	return nil
}

func (_u *LoginRecordUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginrecord.Table, loginrecord.Columns, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(loginrecord.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(loginrecord.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(loginrecord.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(loginrecord.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(loginrecord.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(loginrecord.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(loginrecord.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(loginrecord.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(loginrecord.FieldCredentialType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(loginrecord.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(loginrecord.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(loginrecord.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceInfo(); ok {
		_spec.SetField(loginrecord.FieldDeviceInfo, field.TypeString, value)
	}
	if _u.mutation.DeviceInfoCleared() {
		_spec.ClearField(loginrecord.FieldDeviceInfo, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(loginrecord.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(loginrecord.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(loginrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FailureReason(); ok {
		_spec.SetField(loginrecord.FieldFailureReason, field.TypeString, value)
	}
	if _u.mutation.FailureReasonCleared() {
		_spec.ClearField(loginrecord.FieldFailureReason, field.TypeString)
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(loginrecord.FieldSessionID, field.TypeString, value)
	}
	if _u.mutation.SessionIDCleared() {
		_spec.ClearField(loginrecord.FieldSessionID, field.TypeString)
	}
	if value, ok := _u.mutation.LogoutTime(); ok {
		_spec.SetField(loginrecord.FieldLogoutTime, field.TypeTime, value)
	}
	if _u.mutation.LogoutTimeCleared() {
		_spec.ClearField(loginrecord.FieldLogoutTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(loginrecord.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(loginrecord.FieldDuration, field.TypeInt, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(loginrecord.FieldDuration, field.TypeInt)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(loginrecord.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(loginrecord.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LoginRecordUpdateOne is the builder for updating a single LoginRecord entity.
type LoginRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginRecordMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *LoginRecordUpdateOne) SetCreateBy(v uint64) *LoginRecordUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableCreateBy(v *uint64) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *LoginRecordUpdateOne) AddCreateBy(v int64) *LoginRecordUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *LoginRecordUpdateOne) ClearCreateBy() *LoginRecordUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *LoginRecordUpdateOne) SetUpdateTime(v time.Time) *LoginRecordUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *LoginRecordUpdateOne) SetUpdateBy(v uint64) *LoginRecordUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableUpdateBy(v *uint64) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *LoginRecordUpdateOne) AddUpdateBy(v int64) *LoginRecordUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *LoginRecordUpdateOne) ClearUpdateBy() *LoginRecordUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *LoginRecordUpdateOne) SetUserID(v uint64) *LoginRecordUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableUserID(v *uint64) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *LoginRecordUpdateOne) SetIdentifier(v string) *LoginRecordUpdateOne {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableIdentifier(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *LoginRecordUpdateOne) SetCredentialType(v loginrecord.CredentialType) *LoginRecordUpdateOne {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableCredentialType(v *loginrecord.CredentialType) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *LoginRecordUpdateOne) SetIPAddress(v string) *LoginRecordUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableIPAddress(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LoginRecordUpdateOne) SetUserAgent(v string) *LoginRecordUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableUserAgent(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LoginRecordUpdateOne) ClearUserAgent() *LoginRecordUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetDeviceInfo sets the "device_info" field.
func (_u *LoginRecordUpdateOne) SetDeviceInfo(v string) *LoginRecordUpdateOne {
	_u.mutation.SetDeviceInfo(v)
	return _u
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableDeviceInfo(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetDeviceInfo(*v)
	}
	return _u
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (_u *LoginRecordUpdateOne) ClearDeviceInfo() *LoginRecordUpdateOne {
	_u.mutation.ClearDeviceInfo()
	return _u
}

// SetLocation sets the "location" field.
func (_u *LoginRecordUpdateOne) SetLocation(v string) *LoginRecordUpdateOne {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableLocation(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *LoginRecordUpdateOne) ClearLocation() *LoginRecordUpdateOne {
	_u.mutation.ClearLocation()
	return _u
}

// SetStatus sets the "status" field.
func (_u *LoginRecordUpdateOne) SetStatus(v loginrecord.Status) *LoginRecordUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableStatus(v *loginrecord.Status) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetFailureReason sets the "failure_reason" field.
func (_u *LoginRecordUpdateOne) SetFailureReason(v string) *LoginRecordUpdateOne {
	_u.mutation.SetFailureReason(v)
	return _u
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableFailureReason(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetFailureReason(*v)
	}
	return _u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (_u *LoginRecordUpdateOne) ClearFailureReason() *LoginRecordUpdateOne {
	_u.mutation.ClearFailureReason()
	return _u
}

// SetSessionID sets the "session_id" field.
func (_u *LoginRecordUpdateOne) SetSessionID(v string) *LoginRecordUpdateOne {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableSessionID(v *string) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// ClearSessionID clears the value of the "session_id" field.
func (_u *LoginRecordUpdateOne) ClearSessionID() *LoginRecordUpdateOne {
	_u.mutation.ClearSessionID()
	return _u
}

// SetLogoutTime sets the "logout_time" field.
func (_u *LoginRecordUpdateOne) SetLogoutTime(v time.Time) *LoginRecordUpdateOne {
	_u.mutation.SetLogoutTime(v)
	return _u
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableLogoutTime(v *time.Time) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetLogoutTime(*v)
	}
	return _u
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (_u *LoginRecordUpdateOne) ClearLogoutTime() *LoginRecordUpdateOne {
	_u.mutation.ClearLogoutTime()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *LoginRecordUpdateOne) SetDuration(v int) *LoginRecordUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *LoginRecordUpdateOne) SetNillableDuration(v *int) *LoginRecordUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *LoginRecordUpdateOne) AddDuration(v int) *LoginRecordUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *LoginRecordUpdateOne) ClearDuration() *LoginRecordUpdateOne {
	_u.mutation.ClearDuration()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *LoginRecordUpdateOne) SetMetadata(v map[string]interface{}) *LoginRecordUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *LoginRecordUpdateOne) ClearMetadata() *LoginRecordUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LoginRecordUpdateOne) SetUser(v *User) *LoginRecordUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (_u *LoginRecordUpdateOne) Mutation() *LoginRecordMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LoginRecordUpdateOne) ClearUser() *LoginRecordUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the LoginRecordUpdate builder.
func (_u *LoginRecordUpdateOne) Where(ps ...predicate.LoginRecord) *LoginRecordUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LoginRecordUpdateOne) Select(field string, fields ...string) *LoginRecordUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated LoginRecord entity.
func (_u *LoginRecordUpdateOne) Save(ctx context.Context) (*LoginRecord, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoginRecordUpdateOne) SaveX(ctx context.Context) *LoginRecord {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LoginRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoginRecordUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoginRecordUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if loginrecord.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized loginrecord.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := loginrecord.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoginRecordUpdateOne) check() error {
	if v, ok := _u.mutation.Identifier(); ok {
		if err := loginrecord.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := loginrecord.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPAddress(); ok {
		if err := loginrecord.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.ip_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := loginrecord.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceInfo(); ok {
		if err := loginrecord.DeviceInfoValidator(v); err != nil {
			return &ValidationError{Name: "device_info", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.device_info": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Location(); ok {
		if err := loginrecord.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.location": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := loginrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FailureReason(); ok {
		if err := loginrecord.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.failure_reason": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SessionID(); ok {
		if err := loginrecord.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.session_id": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginRecord.user"`)
	}
	return nil
}

func (_u *LoginRecordUpdateOne) sqlSave(ctx context.Context) (_node *LoginRecord, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginrecord.Table, loginrecord.Columns, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginrecord.FieldID)
		for _, f := range fields {
			if !loginrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(loginrecord.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(loginrecord.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(loginrecord.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(loginrecord.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(loginrecord.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(loginrecord.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(loginrecord.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(loginrecord.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(loginrecord.FieldCredentialType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(loginrecord.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(loginrecord.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(loginrecord.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceInfo(); ok {
		_spec.SetField(loginrecord.FieldDeviceInfo, field.TypeString, value)
	}
	if _u.mutation.DeviceInfoCleared() {
		_spec.ClearField(loginrecord.FieldDeviceInfo, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(loginrecord.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(loginrecord.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(loginrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FailureReason(); ok {
		_spec.SetField(loginrecord.FieldFailureReason, field.TypeString, value)
	}
	if _u.mutation.FailureReasonCleared() {
		_spec.ClearField(loginrecord.FieldFailureReason, field.TypeString)
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(loginrecord.FieldSessionID, field.TypeString, value)
	}
	if _u.mutation.SessionIDCleared() {
		_spec.ClearField(loginrecord.FieldSessionID, field.TypeString)
	}
	if value, ok := _u.mutation.LogoutTime(); ok {
		_spec.SetField(loginrecord.FieldLogoutTime, field.TypeTime, value)
	}
	if _u.mutation.LogoutTimeCleared() {
		_spec.ClearField(loginrecord.FieldLogoutTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(loginrecord.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(loginrecord.FieldDuration, field.TypeInt, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(loginrecord.FieldDuration, field.TypeInt)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(loginrecord.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(loginrecord.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginRecord{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
