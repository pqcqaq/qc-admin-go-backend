// Code generated by ent, DO NOT EDIT.

package workflowversion

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldUpdateBy, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldApplicationID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldVersion, v))
}

// ChangeLog applies equality check predicate on the "change_log" field. It's identical to ChangeLogEQ.
func ChangeLog(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldChangeLog, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotNull(FieldUpdateBy))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldApplicationID, vs...))
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldApplicationID, v))
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldApplicationID, v))
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldApplicationID, v))
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v uint64) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldApplicationID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldVersion, v))
}

// ChangeLogEQ applies the EQ predicate on the "change_log" field.
func ChangeLogEQ(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEQ(FieldChangeLog, v))
}

// ChangeLogNEQ applies the NEQ predicate on the "change_log" field.
func ChangeLogNEQ(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNEQ(FieldChangeLog, v))
}

// ChangeLogIn applies the In predicate on the "change_log" field.
func ChangeLogIn(vs ...string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIn(FieldChangeLog, vs...))
}

// ChangeLogNotIn applies the NotIn predicate on the "change_log" field.
func ChangeLogNotIn(vs ...string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotIn(FieldChangeLog, vs...))
}

// ChangeLogGT applies the GT predicate on the "change_log" field.
func ChangeLogGT(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGT(FieldChangeLog, v))
}

// ChangeLogGTE applies the GTE predicate on the "change_log" field.
func ChangeLogGTE(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldGTE(FieldChangeLog, v))
}

// ChangeLogLT applies the LT predicate on the "change_log" field.
func ChangeLogLT(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLT(FieldChangeLog, v))
}

// ChangeLogLTE applies the LTE predicate on the "change_log" field.
func ChangeLogLTE(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldLTE(FieldChangeLog, v))
}

// ChangeLogContains applies the Contains predicate on the "change_log" field.
func ChangeLogContains(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldContains(FieldChangeLog, v))
}

// ChangeLogHasPrefix applies the HasPrefix predicate on the "change_log" field.
func ChangeLogHasPrefix(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldHasPrefix(FieldChangeLog, v))
}

// ChangeLogHasSuffix applies the HasSuffix predicate on the "change_log" field.
func ChangeLogHasSuffix(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldHasSuffix(FieldChangeLog, v))
}

// ChangeLogIsNil applies the IsNil predicate on the "change_log" field.
func ChangeLogIsNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldIsNull(FieldChangeLog))
}

// ChangeLogNotNil applies the NotNil predicate on the "change_log" field.
func ChangeLogNotNil() predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldNotNull(FieldChangeLog))
}

// ChangeLogEqualFold applies the EqualFold predicate on the "change_log" field.
func ChangeLogEqualFold(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldEqualFold(FieldChangeLog, v))
}

// ChangeLogContainsFold applies the ContainsFold predicate on the "change_log" field.
func ChangeLogContainsFold(v string) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.FieldContainsFold(FieldChangeLog, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowVersion) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowVersion) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowVersion) predicate.WorkflowVersion {
	return predicate.WorkflowVersion(sql.NotPredicates(p))
}
