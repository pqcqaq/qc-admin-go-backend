// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OauthAuthorizationCodeUpdate is the builder for updating OauthAuthorizationCode entities.
type OauthAuthorizationCodeUpdate struct {
	config
	hooks    []Hook
	mutation *OauthAuthorizationCodeMutation
}

// Where appends a list predicates to the OauthAuthorizationCodeUpdate builder.
func (_u *OauthAuthorizationCodeUpdate) Where(ps ...predicate.OauthAuthorizationCode) *OauthAuthorizationCodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthAuthorizationCodeUpdate) SetCreateBy(v uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableCreateBy(v *uint64) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthAuthorizationCodeUpdate) AddCreateBy(v int64) *OauthAuthorizationCodeUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthAuthorizationCodeUpdate) ClearCreateBy() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthAuthorizationCodeUpdate) SetUpdateTime(v time.Time) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthAuthorizationCodeUpdate) SetUpdateBy(v uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableUpdateBy(v *uint64) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthAuthorizationCodeUpdate) AddUpdateBy(v int64) *OauthAuthorizationCodeUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthAuthorizationCodeUpdate) ClearUpdateBy() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthAuthorizationCodeUpdate) SetDeleteTime(v time.Time) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableDeleteTime(v *time.Time) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthAuthorizationCodeUpdate) ClearDeleteTime() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdate) SetDeleteBy(v uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableDeleteBy(v *uint64) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdate) AddDeleteBy(v int64) *OauthAuthorizationCodeUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdate) ClearDeleteBy() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetCode sets the "code" field.
func (_u *OauthAuthorizationCodeUpdate) SetCode(v string) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableCode(v *string) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthAuthorizationCodeUpdate) SetApplicationID(v uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableApplicationID(v *uint64) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthAuthorizationCodeUpdate) SetUserID(v uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableUserID(v *uint64) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthAuthorizationCodeUpdate) SetRedirectURI(v string) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableRedirectURI(v *string) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthAuthorizationCodeUpdate) SetScope(v []string) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthAuthorizationCodeUpdate) AppendScope(v []string) *OauthAuthorizationCodeUpdate {
	_u.mutation.AppendScope(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthAuthorizationCodeUpdate) SetExpiresAt(v time.Time) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableExpiresAt(v *time.Time) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *OauthAuthorizationCodeUpdate) SetUsedAt(v time.Time) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableUsedAt(v *time.Time) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *OauthAuthorizationCodeUpdate) ClearUsedAt() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetCodeChallenge sets the "code_challenge" field.
func (_u *OauthAuthorizationCodeUpdate) SetCodeChallenge(v string) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetCodeChallenge(v)
	return _u
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableCodeChallenge(v *string) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetCodeChallenge(*v)
	}
	return _u
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (_u *OauthAuthorizationCodeUpdate) ClearCodeChallenge() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearCodeChallenge()
	return _u
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (_u *OauthAuthorizationCodeUpdate) SetCodeChallengeMethod(v string) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetCodeChallengeMethod(v)
	return _u
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableCodeChallengeMethod(v *string) *OauthAuthorizationCodeUpdate {
	if v != nil {
		_u.SetCodeChallengeMethod(*v)
	}
	return _u
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (_u *OauthAuthorizationCodeUpdate) ClearCodeChallengeMethod() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearCodeChallengeMethod()
	return _u
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthAuthorizationCodeUpdate) SetApplication(v *OauthApplication) *OauthAuthorizationCodeUpdate {
	return _u.SetApplicationID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthAuthorizationCodeUpdate) SetUser(v *User) *OauthAuthorizationCodeUpdate {
	return _u.SetUserID(v.ID)
}

// SetTokenID sets the "token" edge to the OauthToken entity by ID.
func (_u *OauthAuthorizationCodeUpdate) SetTokenID(id uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetTokenID(id)
	return _u
}

// SetNillableTokenID sets the "token" edge to the OauthToken entity by ID if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableTokenID(id *uint64) *OauthAuthorizationCodeUpdate {
	if id != nil {
		_u = _u.SetTokenID(*id)
	}
	return _u
}

// SetToken sets the "token" edge to the OauthToken entity.
func (_u *OauthAuthorizationCodeUpdate) SetToken(v *OauthToken) *OauthAuthorizationCodeUpdate {
	return _u.SetTokenID(v.ID)
}

// SetUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID.
func (_u *OauthAuthorizationCodeUpdate) SetUserAuthorizationID(id uint64) *OauthAuthorizationCodeUpdate {
	_u.mutation.SetUserAuthorizationID(id)
	return _u
}

// SetNillableUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdate) SetNillableUserAuthorizationID(id *uint64) *OauthAuthorizationCodeUpdate {
	if id != nil {
		_u = _u.SetUserAuthorizationID(*id)
	}
	return _u
}

// SetUserAuthorization sets the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthAuthorizationCodeUpdate) SetUserAuthorization(v *OauthUserAuthorization) *OauthAuthorizationCodeUpdate {
	return _u.SetUserAuthorizationID(v.ID)
}

// Mutation returns the OauthAuthorizationCodeMutation object of the builder.
func (_u *OauthAuthorizationCodeUpdate) Mutation() *OauthAuthorizationCodeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthAuthorizationCodeUpdate) ClearApplication() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthAuthorizationCodeUpdate) ClearUser() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearToken clears the "token" edge to the OauthToken entity.
func (_u *OauthAuthorizationCodeUpdate) ClearToken() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearToken()
	return _u
}

// ClearUserAuthorization clears the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthAuthorizationCodeUpdate) ClearUserAuthorization() *OauthAuthorizationCodeUpdate {
	_u.mutation.ClearUserAuthorization()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthAuthorizationCodeUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthAuthorizationCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthAuthorizationCodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthAuthorizationCodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthAuthorizationCodeUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthauthorizationcode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthauthorizationcode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthauthorizationcode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthAuthorizationCodeUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := oauthauthorizationcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthauthorizationcode.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallenge(); ok {
		if err := oauthauthorizationcode.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code_challenge": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallengeMethod(); ok {
		if err := oauthauthorizationcode.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code_challenge_method": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAuthorizationCode.application"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAuthorizationCode.user"`)
	}
	return nil
}

func (_u *OauthAuthorizationCodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauthorizationcode.Table, oauthauthorizationcode.Columns, sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthauthorizationcode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthauthorizationcode.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthauthorizationcode.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthauthorizationcode.FieldScope, value)
		})
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthauthorizationcode.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCodeChallenge, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCodeChallengeMethod, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorizationcode.ApplicationTable,
			Columns: []string{oauthauthorizationcode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorizationcode.ApplicationTable,
			Columns: []string{oauthauthorizationcode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthauthorizationcode.UserTable,
			Columns: []string{oauthauthorizationcode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthauthorizationcode.UserTable,
			Columns: []string{oauthauthorizationcode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthauthorizationcode.TokenTable,
			Columns: []string{oauthauthorizationcode.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthauthorizationcode.TokenTable,
			Columns: []string{oauthauthorizationcode.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthauthorizationcode.UserAuthorizationTable,
			Columns: []string{oauthauthorizationcode.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthauthorizationcode.UserAuthorizationTable,
			Columns: []string{oauthauthorizationcode.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauthorizationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthAuthorizationCodeUpdateOne is the builder for updating a single OauthAuthorizationCode entity.
type OauthAuthorizationCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthAuthorizationCodeMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetCreateBy(v uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableCreateBy(v *uint64) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) AddCreateBy(v int64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearCreateBy() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetUpdateTime(v time.Time) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetUpdateBy(v uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableUpdateBy(v *uint64) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) AddUpdateBy(v int64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearUpdateBy() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetDeleteTime(v time.Time) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearDeleteTime() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetDeleteBy(v uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableDeleteBy(v *uint64) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) AddDeleteBy(v int64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearDeleteBy() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetCode sets the "code" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetCode(v string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableCode(v *string) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetApplicationID(v uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableApplicationID(v *uint64) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetUserID(v uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableUserID(v *uint64) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetRedirectURI(v string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableRedirectURI(v *string) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetScope(v []string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthAuthorizationCodeUpdateOne) AppendScope(v []string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.AppendScope(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetExpiresAt(v time.Time) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableExpiresAt(v *time.Time) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetUsedAt(v time.Time) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableUsedAt(v *time.Time) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearUsedAt() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetCodeChallenge sets the "code_challenge" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetCodeChallenge(v string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetCodeChallenge(v)
	return _u
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableCodeChallenge(v *string) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetCodeChallenge(*v)
	}
	return _u
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearCodeChallenge() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearCodeChallenge()
	return _u
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (_u *OauthAuthorizationCodeUpdateOne) SetCodeChallengeMethod(v string) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetCodeChallengeMethod(v)
	return _u
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableCodeChallengeMethod(v *string) *OauthAuthorizationCodeUpdateOne {
	if v != nil {
		_u.SetCodeChallengeMethod(*v)
	}
	return _u
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (_u *OauthAuthorizationCodeUpdateOne) ClearCodeChallengeMethod() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearCodeChallengeMethod()
	return _u
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthAuthorizationCodeUpdateOne) SetApplication(v *OauthApplication) *OauthAuthorizationCodeUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthAuthorizationCodeUpdateOne) SetUser(v *User) *OauthAuthorizationCodeUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetTokenID sets the "token" edge to the OauthToken entity by ID.
func (_u *OauthAuthorizationCodeUpdateOne) SetTokenID(id uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetTokenID(id)
	return _u
}

// SetNillableTokenID sets the "token" edge to the OauthToken entity by ID if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableTokenID(id *uint64) *OauthAuthorizationCodeUpdateOne {
	if id != nil {
		_u = _u.SetTokenID(*id)
	}
	return _u
}

// SetToken sets the "token" edge to the OauthToken entity.
func (_u *OauthAuthorizationCodeUpdateOne) SetToken(v *OauthToken) *OauthAuthorizationCodeUpdateOne {
	return _u.SetTokenID(v.ID)
}

// SetUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID.
func (_u *OauthAuthorizationCodeUpdateOne) SetUserAuthorizationID(id uint64) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.SetUserAuthorizationID(id)
	return _u
}

// SetNillableUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID if the given value is not nil.
func (_u *OauthAuthorizationCodeUpdateOne) SetNillableUserAuthorizationID(id *uint64) *OauthAuthorizationCodeUpdateOne {
	if id != nil {
		_u = _u.SetUserAuthorizationID(*id)
	}
	return _u
}

// SetUserAuthorization sets the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthAuthorizationCodeUpdateOne) SetUserAuthorization(v *OauthUserAuthorization) *OauthAuthorizationCodeUpdateOne {
	return _u.SetUserAuthorizationID(v.ID)
}

// Mutation returns the OauthAuthorizationCodeMutation object of the builder.
func (_u *OauthAuthorizationCodeUpdateOne) Mutation() *OauthAuthorizationCodeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthAuthorizationCodeUpdateOne) ClearApplication() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthAuthorizationCodeUpdateOne) ClearUser() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearToken clears the "token" edge to the OauthToken entity.
func (_u *OauthAuthorizationCodeUpdateOne) ClearToken() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearToken()
	return _u
}

// ClearUserAuthorization clears the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthAuthorizationCodeUpdateOne) ClearUserAuthorization() *OauthAuthorizationCodeUpdateOne {
	_u.mutation.ClearUserAuthorization()
	return _u
}

// Where appends a list predicates to the OauthAuthorizationCodeUpdate builder.
func (_u *OauthAuthorizationCodeUpdateOne) Where(ps ...predicate.OauthAuthorizationCode) *OauthAuthorizationCodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthAuthorizationCodeUpdateOne) Select(field string, fields ...string) *OauthAuthorizationCodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthAuthorizationCode entity.
func (_u *OauthAuthorizationCodeUpdateOne) Save(ctx context.Context) (*OauthAuthorizationCode, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthAuthorizationCodeUpdateOne) SaveX(ctx context.Context) *OauthAuthorizationCode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthAuthorizationCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthAuthorizationCodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthAuthorizationCodeUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthauthorizationcode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthauthorizationcode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthauthorizationcode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthAuthorizationCodeUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := oauthauthorizationcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthauthorizationcode.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallenge(); ok {
		if err := oauthauthorizationcode.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code_challenge": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallengeMethod(); ok {
		if err := oauthauthorizationcode.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "OauthAuthorizationCode.code_challenge_method": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAuthorizationCode.application"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAuthorizationCode.user"`)
	}
	return nil
}

func (_u *OauthAuthorizationCodeUpdateOne) sqlSave(ctx context.Context) (_node *OauthAuthorizationCode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauthorizationcode.Table, oauthauthorizationcode.Columns, sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthAuthorizationCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthauthorizationcode.FieldID)
		for _, f := range fields {
			if !oauthauthorizationcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthauthorizationcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthauthorizationcode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthauthorizationcode.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthauthorizationcode.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthauthorizationcode.FieldScope, value)
		})
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthauthorizationcode.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(oauthauthorizationcode.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCodeChallenge, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthauthorizationcode.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthauthorizationcode.FieldCodeChallengeMethod, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorizationcode.ApplicationTable,
			Columns: []string{oauthauthorizationcode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorizationcode.ApplicationTable,
			Columns: []string{oauthauthorizationcode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthauthorizationcode.UserTable,
			Columns: []string{oauthauthorizationcode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthauthorizationcode.UserTable,
			Columns: []string{oauthauthorizationcode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthauthorizationcode.TokenTable,
			Columns: []string{oauthauthorizationcode.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthauthorizationcode.TokenTable,
			Columns: []string{oauthauthorizationcode.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthauthorizationcode.UserAuthorizationTable,
			Columns: []string{oauthauthorizationcode.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthauthorizationcode.UserAuthorizationTable,
			Columns: []string{oauthauthorizationcode.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthAuthorizationCode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauthorizationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
