// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/scope"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges        PermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// RolePermissions holds the value of the role_permissions edge.
	RolePermissions []*RolePermission `json:"role_permissions,omitempty"`
	// Scope holds the value of the scope edge.
	Scope *Scope `json:"scope,omitempty"`
	// APIAuths holds the value of the api_auths edge.
	APIAuths []*APIAuth `json:"api_auths,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes          [3]bool
	namedRolePermissions map[string][]*RolePermission
	namedAPIAuths        map[string][]*APIAuth
}

// RolePermissionsOrErr returns the RolePermissions value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) RolePermissionsOrErr() ([]*RolePermission, error) {
	if e.loadedTypes[0] {
		return e.RolePermissions, nil
	}
	return nil, &NotLoadedError{edge: "role_permissions"}
}

// ScopeOrErr returns the Scope value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) ScopeOrErr() (*Scope, error) {
	if e.Scope != nil {
		return e.Scope, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: scope.Label}
	}
	return nil, &NotLoadedError{edge: "scope"}
}

// APIAuthsOrErr returns the APIAuths value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) APIAuthsOrErr() ([]*APIAuth, error) {
	if e.loadedTypes[2] {
		return e.APIAuths, nil
	}
	return nil, &NotLoadedError{edge: "api_auths"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permission.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case permission.FieldID, permission.FieldCreateBy, permission.FieldUpdateBy, permission.FieldDeleteBy:
			values[i] = new(sql.NullInt64)
		case permission.FieldName, permission.FieldAction, permission.FieldDescription:
			values[i] = new(sql.NullString)
		case permission.FieldCreateTime, permission.FieldUpdateTime, permission.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (_m *Permission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case permission.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case permission.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case permission.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case permission.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case permission.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case permission.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case permission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case permission.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = value.String
			}
		case permission.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case permission.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Permission.
// This includes values selected through modifiers, order, etc.
func (_m *Permission) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRolePermissions queries the "role_permissions" edge of the Permission entity.
func (_m *Permission) QueryRolePermissions() *RolePermissionQuery {
	return NewPermissionClient(_m.config).QueryRolePermissions(_m)
}

// QueryScope queries the "scope" edge of the Permission entity.
func (_m *Permission) QueryScope() *ScopeQuery {
	return NewPermissionClient(_m.config).QueryScope(_m)
}

// QueryAPIAuths queries the "api_auths" edge of the Permission entity.
func (_m *Permission) QueryAPIAuths() *APIAuthQuery {
	return NewPermissionClient(_m.config).QueryAPIAuths(_m)
}

// Update returns a builder for updating this Permission.
// Note that you need to call Permission.Unwrap() before calling this method if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Permission) Update() *PermissionUpdateOne {
	return NewPermissionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Permission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Permission) Unwrap() *Permission {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(_m.Action)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRolePermissions returns the RolePermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Permission) NamedRolePermissions(name string) ([]*RolePermission, error) {
	if _m.Edges.namedRolePermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRolePermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Permission) appendNamedRolePermissions(name string, edges ...*RolePermission) {
	if _m.Edges.namedRolePermissions == nil {
		_m.Edges.namedRolePermissions = make(map[string][]*RolePermission)
	}
	if len(edges) == 0 {
		_m.Edges.namedRolePermissions[name] = []*RolePermission{}
	} else {
		_m.Edges.namedRolePermissions[name] = append(_m.Edges.namedRolePermissions[name], edges...)
	}
}

// NamedAPIAuths returns the APIAuths named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Permission) NamedAPIAuths(name string) ([]*APIAuth, error) {
	if _m.Edges.namedAPIAuths == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAPIAuths[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Permission) appendNamedAPIAuths(name string, edges ...*APIAuth) {
	if _m.Edges.namedAPIAuths == nil {
		_m.Edges.namedAPIAuths = make(map[string][]*APIAuth)
	}
	if len(edges) == 0 {
		_m.Edges.namedAPIAuths[name] = []*APIAuth{}
	} else {
		_m.Edges.namedAPIAuths[name] = append(_m.Edges.namedAPIAuths[name], edges...)
	}
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission
