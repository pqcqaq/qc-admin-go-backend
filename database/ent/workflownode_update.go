// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowedge"
	"go-backend/database/ent/workflownode"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeUpdate is the builder for updating WorkflowNode entities.
type WorkflowNodeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowNodeMutation
}

// Where appends a list predicates to the WorkflowNodeUpdate builder.
func (_u *WorkflowNodeUpdate) Where(ps ...predicate.WorkflowNode) *WorkflowNodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowNodeUpdate) SetCreateBy(v uint64) *WorkflowNodeUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableCreateBy(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowNodeUpdate) AddCreateBy(v int64) *WorkflowNodeUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowNodeUpdate) ClearCreateBy() *WorkflowNodeUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowNodeUpdate) SetUpdateTime(v time.Time) *WorkflowNodeUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowNodeUpdate) SetUpdateBy(v uint64) *WorkflowNodeUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableUpdateBy(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowNodeUpdate) AddUpdateBy(v int64) *WorkflowNodeUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowNodeUpdate) ClearUpdateBy() *WorkflowNodeUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowNodeUpdate) SetDeleteTime(v time.Time) *WorkflowNodeUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableDeleteTime(v *time.Time) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowNodeUpdate) ClearDeleteTime() *WorkflowNodeUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowNodeUpdate) SetDeleteBy(v uint64) *WorkflowNodeUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableDeleteBy(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowNodeUpdate) AddDeleteBy(v int64) *WorkflowNodeUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowNodeUpdate) ClearDeleteBy() *WorkflowNodeUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *WorkflowNodeUpdate) SetName(v string) *WorkflowNodeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableName(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNodeKey sets the "node_key" field.
func (_u *WorkflowNodeUpdate) SetNodeKey(v string) *WorkflowNodeUpdate {
	_u.mutation.SetNodeKey(v)
	return _u
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableNodeKey(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetNodeKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *WorkflowNodeUpdate) SetType(v workflownode.Type) *WorkflowNodeUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableType(v *workflownode.Type) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowNodeUpdate) SetDescription(v string) *WorkflowNodeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableDescription(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowNodeUpdate) ClearDescription() *WorkflowNodeUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrompt sets the "prompt" field.
func (_u *WorkflowNodeUpdate) SetPrompt(v string) *WorkflowNodeUpdate {
	_u.mutation.SetPrompt(v)
	return _u
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillablePrompt(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetPrompt(*v)
	}
	return _u
}

// ClearPrompt clears the value of the "prompt" field.
func (_u *WorkflowNodeUpdate) ClearPrompt() *WorkflowNodeUpdate {
	_u.mutation.ClearPrompt()
	return _u
}

// SetConfig sets the "config" field.
func (_u *WorkflowNodeUpdate) SetConfig(v map[string]interface{}) *WorkflowNodeUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowNodeUpdate) SetApplicationID(v uint64) *WorkflowNodeUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableApplicationID(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetProcessorLanguage sets the "processor_language" field.
func (_u *WorkflowNodeUpdate) SetProcessorLanguage(v string) *WorkflowNodeUpdate {
	_u.mutation.SetProcessorLanguage(v)
	return _u
}

// SetNillableProcessorLanguage sets the "processor_language" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableProcessorLanguage(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetProcessorLanguage(*v)
	}
	return _u
}

// ClearProcessorLanguage clears the value of the "processor_language" field.
func (_u *WorkflowNodeUpdate) ClearProcessorLanguage() *WorkflowNodeUpdate {
	_u.mutation.ClearProcessorLanguage()
	return _u
}

// SetProcessorCode sets the "processor_code" field.
func (_u *WorkflowNodeUpdate) SetProcessorCode(v string) *WorkflowNodeUpdate {
	_u.mutation.SetProcessorCode(v)
	return _u
}

// SetNillableProcessorCode sets the "processor_code" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableProcessorCode(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetProcessorCode(*v)
	}
	return _u
}

// ClearProcessorCode clears the value of the "processor_code" field.
func (_u *WorkflowNodeUpdate) ClearProcessorCode() *WorkflowNodeUpdate {
	_u.mutation.ClearProcessorCode()
	return _u
}

// SetNextNodeID sets the "next_node_id" field.
func (_u *WorkflowNodeUpdate) SetNextNodeID(v uint64) *WorkflowNodeUpdate {
	_u.mutation.ResetNextNodeID()
	_u.mutation.SetNextNodeID(v)
	return _u
}

// SetNillableNextNodeID sets the "next_node_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableNextNodeID(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetNextNodeID(*v)
	}
	return _u
}

// AddNextNodeID adds value to the "next_node_id" field.
func (_u *WorkflowNodeUpdate) AddNextNodeID(v int64) *WorkflowNodeUpdate {
	_u.mutation.AddNextNodeID(v)
	return _u
}

// ClearNextNodeID clears the value of the "next_node_id" field.
func (_u *WorkflowNodeUpdate) ClearNextNodeID() *WorkflowNodeUpdate {
	_u.mutation.ClearNextNodeID()
	return _u
}

// SetParentNodeID sets the "parent_node_id" field.
func (_u *WorkflowNodeUpdate) SetParentNodeID(v uint64) *WorkflowNodeUpdate {
	_u.mutation.ResetParentNodeID()
	_u.mutation.SetParentNodeID(v)
	return _u
}

// SetNillableParentNodeID sets the "parent_node_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableParentNodeID(v *uint64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetParentNodeID(*v)
	}
	return _u
}

// AddParentNodeID adds value to the "parent_node_id" field.
func (_u *WorkflowNodeUpdate) AddParentNodeID(v int64) *WorkflowNodeUpdate {
	_u.mutation.AddParentNodeID(v)
	return _u
}

// ClearParentNodeID clears the value of the "parent_node_id" field.
func (_u *WorkflowNodeUpdate) ClearParentNodeID() *WorkflowNodeUpdate {
	_u.mutation.ClearParentNodeID()
	return _u
}

// SetBranchNodes sets the "branch_nodes" field.
func (_u *WorkflowNodeUpdate) SetBranchNodes(v map[string]interface{}) *WorkflowNodeUpdate {
	_u.mutation.SetBranchNodes(v)
	return _u
}

// ClearBranchNodes clears the value of the "branch_nodes" field.
func (_u *WorkflowNodeUpdate) ClearBranchNodes() *WorkflowNodeUpdate {
	_u.mutation.ClearBranchNodes()
	return _u
}

// SetParallelConfig sets the "parallel_config" field.
func (_u *WorkflowNodeUpdate) SetParallelConfig(v map[string]interface{}) *WorkflowNodeUpdate {
	_u.mutation.SetParallelConfig(v)
	return _u
}

// ClearParallelConfig clears the value of the "parallel_config" field.
func (_u *WorkflowNodeUpdate) ClearParallelConfig() *WorkflowNodeUpdate {
	_u.mutation.ClearParallelConfig()
	return _u
}

// SetAPIConfig sets the "api_config" field.
func (_u *WorkflowNodeUpdate) SetAPIConfig(v map[string]interface{}) *WorkflowNodeUpdate {
	_u.mutation.SetAPIConfig(v)
	return _u
}

// ClearAPIConfig clears the value of the "api_config" field.
func (_u *WorkflowNodeUpdate) ClearAPIConfig() *WorkflowNodeUpdate {
	_u.mutation.ClearAPIConfig()
	return _u
}

// SetAsync sets the "async" field.
func (_u *WorkflowNodeUpdate) SetAsync(v bool) *WorkflowNodeUpdate {
	_u.mutation.SetAsync(v)
	return _u
}

// SetNillableAsync sets the "async" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableAsync(v *bool) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetAsync(*v)
	}
	return _u
}

// SetTimeout sets the "timeout" field.
func (_u *WorkflowNodeUpdate) SetTimeout(v int) *WorkflowNodeUpdate {
	_u.mutation.ResetTimeout()
	_u.mutation.SetTimeout(v)
	return _u
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableTimeout(v *int) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetTimeout(*v)
	}
	return _u
}

// AddTimeout adds value to the "timeout" field.
func (_u *WorkflowNodeUpdate) AddTimeout(v int) *WorkflowNodeUpdate {
	_u.mutation.AddTimeout(v)
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *WorkflowNodeUpdate) SetRetryCount(v int) *WorkflowNodeUpdate {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableRetryCount(v *int) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *WorkflowNodeUpdate) AddRetryCount(v int) *WorkflowNodeUpdate {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetPositionX sets the "position_x" field.
func (_u *WorkflowNodeUpdate) SetPositionX(v float64) *WorkflowNodeUpdate {
	_u.mutation.ResetPositionX()
	_u.mutation.SetPositionX(v)
	return _u
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillablePositionX(v *float64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetPositionX(*v)
	}
	return _u
}

// AddPositionX adds value to the "position_x" field.
func (_u *WorkflowNodeUpdate) AddPositionX(v float64) *WorkflowNodeUpdate {
	_u.mutation.AddPositionX(v)
	return _u
}

// SetPositionY sets the "position_y" field.
func (_u *WorkflowNodeUpdate) SetPositionY(v float64) *WorkflowNodeUpdate {
	_u.mutation.ResetPositionY()
	_u.mutation.SetPositionY(v)
	return _u
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillablePositionY(v *float64) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetPositionY(*v)
	}
	return _u
}

// AddPositionY adds value to the "position_y" field.
func (_u *WorkflowNodeUpdate) AddPositionY(v float64) *WorkflowNodeUpdate {
	_u.mutation.AddPositionY(v)
	return _u
}

// SetColor sets the "color" field.
func (_u *WorkflowNodeUpdate) SetColor(v string) *WorkflowNodeUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *WorkflowNodeUpdate) SetNillableColor(v *string) *WorkflowNodeUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *WorkflowNodeUpdate) ClearColor() *WorkflowNodeUpdate {
	_u.mutation.ClearColor()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowNodeUpdate) SetApplication(v *WorkflowApplication) *WorkflowNodeUpdate {
	return _u.SetApplicationID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowNodeExecution entity by IDs.
func (_u *WorkflowNodeUpdate) AddExecutionIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowNodeUpdate) AddExecutions(v ...*WorkflowNodeExecution) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// AddOutgoingEdgeIDs adds the "outgoing_edges" edge to the WorkflowEdge entity by IDs.
func (_u *WorkflowNodeUpdate) AddOutgoingEdgeIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.AddOutgoingEdgeIDs(ids...)
	return _u
}

// AddOutgoingEdges adds the "outgoing_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdate) AddOutgoingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOutgoingEdgeIDs(ids...)
}

// AddIncomingEdgeIDs adds the "incoming_edges" edge to the WorkflowEdge entity by IDs.
func (_u *WorkflowNodeUpdate) AddIncomingEdgeIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.AddIncomingEdgeIDs(ids...)
	return _u
}

// AddIncomingEdges adds the "incoming_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdate) AddIncomingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIncomingEdgeIDs(ids...)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (_u *WorkflowNodeUpdate) Mutation() *WorkflowNodeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowNodeUpdate) ClearApplication() *WorkflowNodeUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearExecutions clears all "executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowNodeUpdate) ClearExecutions() *WorkflowNodeUpdate {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowNodeExecution entities by IDs.
func (_u *WorkflowNodeUpdate) RemoveExecutionIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to WorkflowNodeExecution entities.
func (_u *WorkflowNodeUpdate) RemoveExecutions(v ...*WorkflowNodeExecution) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// ClearOutgoingEdges clears all "outgoing_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdate) ClearOutgoingEdges() *WorkflowNodeUpdate {
	_u.mutation.ClearOutgoingEdges()
	return _u
}

// RemoveOutgoingEdgeIDs removes the "outgoing_edges" edge to WorkflowEdge entities by IDs.
func (_u *WorkflowNodeUpdate) RemoveOutgoingEdgeIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.RemoveOutgoingEdgeIDs(ids...)
	return _u
}

// RemoveOutgoingEdges removes "outgoing_edges" edges to WorkflowEdge entities.
func (_u *WorkflowNodeUpdate) RemoveOutgoingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOutgoingEdgeIDs(ids...)
}

// ClearIncomingEdges clears all "incoming_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdate) ClearIncomingEdges() *WorkflowNodeUpdate {
	_u.mutation.ClearIncomingEdges()
	return _u
}

// RemoveIncomingEdgeIDs removes the "incoming_edges" edge to WorkflowEdge entities by IDs.
func (_u *WorkflowNodeUpdate) RemoveIncomingEdgeIDs(ids ...uint64) *WorkflowNodeUpdate {
	_u.mutation.RemoveIncomingEdgeIDs(ids...)
	return _u
}

// RemoveIncomingEdges removes "incoming_edges" edges to WorkflowEdge entities.
func (_u *WorkflowNodeUpdate) RemoveIncomingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIncomingEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowNodeUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowNodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowNodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowNodeUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflownode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowNodeUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflownode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NodeKey(); ok {
		if err := workflownode.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.node_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := workflownode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.type": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNode.application"`)
	}
	return nil
}

func (_u *WorkflowNodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflownode.Table, workflownode.Columns, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflownode.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflownode.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflownode.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflownode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflownode.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflownode.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflownode.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflownode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflownode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflownode.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflownode.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflownode.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NodeKey(); ok {
		_spec.SetField(workflownode.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflownode.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflownode.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Prompt(); ok {
		_spec.SetField(workflownode.FieldPrompt, field.TypeString, value)
	}
	if _u.mutation.PromptCleared() {
		_spec.ClearField(workflownode.FieldPrompt, field.TypeString)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(workflownode.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ProcessorLanguage(); ok {
		_spec.SetField(workflownode.FieldProcessorLanguage, field.TypeString, value)
	}
	if _u.mutation.ProcessorLanguageCleared() {
		_spec.ClearField(workflownode.FieldProcessorLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.ProcessorCode(); ok {
		_spec.SetField(workflownode.FieldProcessorCode, field.TypeString, value)
	}
	if _u.mutation.ProcessorCodeCleared() {
		_spec.ClearField(workflownode.FieldProcessorCode, field.TypeString)
	}
	if value, ok := _u.mutation.NextNodeID(); ok {
		_spec.SetField(workflownode.FieldNextNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNextNodeID(); ok {
		_spec.AddField(workflownode.FieldNextNodeID, field.TypeUint64, value)
	}
	if _u.mutation.NextNodeIDCleared() {
		_spec.ClearField(workflownode.FieldNextNodeID, field.TypeUint64)
	}
	if value, ok := _u.mutation.ParentNodeID(); ok {
		_spec.SetField(workflownode.FieldParentNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedParentNodeID(); ok {
		_spec.AddField(workflownode.FieldParentNodeID, field.TypeUint64, value)
	}
	if _u.mutation.ParentNodeIDCleared() {
		_spec.ClearField(workflownode.FieldParentNodeID, field.TypeUint64)
	}
	if value, ok := _u.mutation.BranchNodes(); ok {
		_spec.SetField(workflownode.FieldBranchNodes, field.TypeJSON, value)
	}
	if _u.mutation.BranchNodesCleared() {
		_spec.ClearField(workflownode.FieldBranchNodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.ParallelConfig(); ok {
		_spec.SetField(workflownode.FieldParallelConfig, field.TypeJSON, value)
	}
	if _u.mutation.ParallelConfigCleared() {
		_spec.ClearField(workflownode.FieldParallelConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.APIConfig(); ok {
		_spec.SetField(workflownode.FieldAPIConfig, field.TypeJSON, value)
	}
	if _u.mutation.APIConfigCleared() {
		_spec.ClearField(workflownode.FieldAPIConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Async(); ok {
		_spec.SetField(workflownode.FieldAsync, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Timeout(); ok {
		_spec.SetField(workflownode.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTimeout(); ok {
		_spec.AddField(workflownode.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(workflownode.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(workflownode.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PositionX(); ok {
		_spec.SetField(workflownode.FieldPositionX, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPositionX(); ok {
		_spec.AddField(workflownode.FieldPositionX, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PositionY(); ok {
		_spec.SetField(workflownode.FieldPositionY, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPositionY(); ok {
		_spec.AddField(workflownode.FieldPositionY, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(workflownode.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(workflownode.FieldColor, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.ApplicationTable,
			Columns: []string{workflownode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.ApplicationTable,
			Columns: []string{workflownode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OutgoingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOutgoingEdgesIDs(); len(nodes) > 0 && !_u.mutation.OutgoingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OutgoingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IncomingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIncomingEdgesIDs(); len(nodes) > 0 && !_u.mutation.IncomingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IncomingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowNodeUpdateOne is the builder for updating a single WorkflowNode entity.
type WorkflowNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowNodeMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowNodeUpdateOne) SetCreateBy(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowNodeUpdateOne) AddCreateBy(v int64) *WorkflowNodeUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowNodeUpdateOne) ClearCreateBy() *WorkflowNodeUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowNodeUpdateOne) SetUpdateTime(v time.Time) *WorkflowNodeUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowNodeUpdateOne) SetUpdateBy(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowNodeUpdateOne) AddUpdateBy(v int64) *WorkflowNodeUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowNodeUpdateOne) ClearUpdateBy() *WorkflowNodeUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowNodeUpdateOne) SetDeleteTime(v time.Time) *WorkflowNodeUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableDeleteTime(v *time.Time) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowNodeUpdateOne) ClearDeleteTime() *WorkflowNodeUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowNodeUpdateOne) SetDeleteBy(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableDeleteBy(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowNodeUpdateOne) AddDeleteBy(v int64) *WorkflowNodeUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowNodeUpdateOne) ClearDeleteBy() *WorkflowNodeUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *WorkflowNodeUpdateOne) SetName(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableName(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNodeKey sets the "node_key" field.
func (_u *WorkflowNodeUpdateOne) SetNodeKey(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetNodeKey(v)
	return _u
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableNodeKey(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetNodeKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *WorkflowNodeUpdateOne) SetType(v workflownode.Type) *WorkflowNodeUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableType(v *workflownode.Type) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowNodeUpdateOne) SetDescription(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableDescription(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowNodeUpdateOne) ClearDescription() *WorkflowNodeUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrompt sets the "prompt" field.
func (_u *WorkflowNodeUpdateOne) SetPrompt(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetPrompt(v)
	return _u
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillablePrompt(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetPrompt(*v)
	}
	return _u
}

// ClearPrompt clears the value of the "prompt" field.
func (_u *WorkflowNodeUpdateOne) ClearPrompt() *WorkflowNodeUpdateOne {
	_u.mutation.ClearPrompt()
	return _u
}

// SetConfig sets the "config" field.
func (_u *WorkflowNodeUpdateOne) SetConfig(v map[string]interface{}) *WorkflowNodeUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowNodeUpdateOne) SetApplicationID(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableApplicationID(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetProcessorLanguage sets the "processor_language" field.
func (_u *WorkflowNodeUpdateOne) SetProcessorLanguage(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetProcessorLanguage(v)
	return _u
}

// SetNillableProcessorLanguage sets the "processor_language" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableProcessorLanguage(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetProcessorLanguage(*v)
	}
	return _u
}

// ClearProcessorLanguage clears the value of the "processor_language" field.
func (_u *WorkflowNodeUpdateOne) ClearProcessorLanguage() *WorkflowNodeUpdateOne {
	_u.mutation.ClearProcessorLanguage()
	return _u
}

// SetProcessorCode sets the "processor_code" field.
func (_u *WorkflowNodeUpdateOne) SetProcessorCode(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetProcessorCode(v)
	return _u
}

// SetNillableProcessorCode sets the "processor_code" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableProcessorCode(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetProcessorCode(*v)
	}
	return _u
}

// ClearProcessorCode clears the value of the "processor_code" field.
func (_u *WorkflowNodeUpdateOne) ClearProcessorCode() *WorkflowNodeUpdateOne {
	_u.mutation.ClearProcessorCode()
	return _u
}

// SetNextNodeID sets the "next_node_id" field.
func (_u *WorkflowNodeUpdateOne) SetNextNodeID(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetNextNodeID()
	_u.mutation.SetNextNodeID(v)
	return _u
}

// SetNillableNextNodeID sets the "next_node_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableNextNodeID(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetNextNodeID(*v)
	}
	return _u
}

// AddNextNodeID adds value to the "next_node_id" field.
func (_u *WorkflowNodeUpdateOne) AddNextNodeID(v int64) *WorkflowNodeUpdateOne {
	_u.mutation.AddNextNodeID(v)
	return _u
}

// ClearNextNodeID clears the value of the "next_node_id" field.
func (_u *WorkflowNodeUpdateOne) ClearNextNodeID() *WorkflowNodeUpdateOne {
	_u.mutation.ClearNextNodeID()
	return _u
}

// SetParentNodeID sets the "parent_node_id" field.
func (_u *WorkflowNodeUpdateOne) SetParentNodeID(v uint64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetParentNodeID()
	_u.mutation.SetParentNodeID(v)
	return _u
}

// SetNillableParentNodeID sets the "parent_node_id" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableParentNodeID(v *uint64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetParentNodeID(*v)
	}
	return _u
}

// AddParentNodeID adds value to the "parent_node_id" field.
func (_u *WorkflowNodeUpdateOne) AddParentNodeID(v int64) *WorkflowNodeUpdateOne {
	_u.mutation.AddParentNodeID(v)
	return _u
}

// ClearParentNodeID clears the value of the "parent_node_id" field.
func (_u *WorkflowNodeUpdateOne) ClearParentNodeID() *WorkflowNodeUpdateOne {
	_u.mutation.ClearParentNodeID()
	return _u
}

// SetBranchNodes sets the "branch_nodes" field.
func (_u *WorkflowNodeUpdateOne) SetBranchNodes(v map[string]interface{}) *WorkflowNodeUpdateOne {
	_u.mutation.SetBranchNodes(v)
	return _u
}

// ClearBranchNodes clears the value of the "branch_nodes" field.
func (_u *WorkflowNodeUpdateOne) ClearBranchNodes() *WorkflowNodeUpdateOne {
	_u.mutation.ClearBranchNodes()
	return _u
}

// SetParallelConfig sets the "parallel_config" field.
func (_u *WorkflowNodeUpdateOne) SetParallelConfig(v map[string]interface{}) *WorkflowNodeUpdateOne {
	_u.mutation.SetParallelConfig(v)
	return _u
}

// ClearParallelConfig clears the value of the "parallel_config" field.
func (_u *WorkflowNodeUpdateOne) ClearParallelConfig() *WorkflowNodeUpdateOne {
	_u.mutation.ClearParallelConfig()
	return _u
}

// SetAPIConfig sets the "api_config" field.
func (_u *WorkflowNodeUpdateOne) SetAPIConfig(v map[string]interface{}) *WorkflowNodeUpdateOne {
	_u.mutation.SetAPIConfig(v)
	return _u
}

// ClearAPIConfig clears the value of the "api_config" field.
func (_u *WorkflowNodeUpdateOne) ClearAPIConfig() *WorkflowNodeUpdateOne {
	_u.mutation.ClearAPIConfig()
	return _u
}

// SetAsync sets the "async" field.
func (_u *WorkflowNodeUpdateOne) SetAsync(v bool) *WorkflowNodeUpdateOne {
	_u.mutation.SetAsync(v)
	return _u
}

// SetNillableAsync sets the "async" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableAsync(v *bool) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetAsync(*v)
	}
	return _u
}

// SetTimeout sets the "timeout" field.
func (_u *WorkflowNodeUpdateOne) SetTimeout(v int) *WorkflowNodeUpdateOne {
	_u.mutation.ResetTimeout()
	_u.mutation.SetTimeout(v)
	return _u
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableTimeout(v *int) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetTimeout(*v)
	}
	return _u
}

// AddTimeout adds value to the "timeout" field.
func (_u *WorkflowNodeUpdateOne) AddTimeout(v int) *WorkflowNodeUpdateOne {
	_u.mutation.AddTimeout(v)
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *WorkflowNodeUpdateOne) SetRetryCount(v int) *WorkflowNodeUpdateOne {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableRetryCount(v *int) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *WorkflowNodeUpdateOne) AddRetryCount(v int) *WorkflowNodeUpdateOne {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetPositionX sets the "position_x" field.
func (_u *WorkflowNodeUpdateOne) SetPositionX(v float64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetPositionX()
	_u.mutation.SetPositionX(v)
	return _u
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillablePositionX(v *float64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetPositionX(*v)
	}
	return _u
}

// AddPositionX adds value to the "position_x" field.
func (_u *WorkflowNodeUpdateOne) AddPositionX(v float64) *WorkflowNodeUpdateOne {
	_u.mutation.AddPositionX(v)
	return _u
}

// SetPositionY sets the "position_y" field.
func (_u *WorkflowNodeUpdateOne) SetPositionY(v float64) *WorkflowNodeUpdateOne {
	_u.mutation.ResetPositionY()
	_u.mutation.SetPositionY(v)
	return _u
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillablePositionY(v *float64) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetPositionY(*v)
	}
	return _u
}

// AddPositionY adds value to the "position_y" field.
func (_u *WorkflowNodeUpdateOne) AddPositionY(v float64) *WorkflowNodeUpdateOne {
	_u.mutation.AddPositionY(v)
	return _u
}

// SetColor sets the "color" field.
func (_u *WorkflowNodeUpdateOne) SetColor(v string) *WorkflowNodeUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *WorkflowNodeUpdateOne) SetNillableColor(v *string) *WorkflowNodeUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *WorkflowNodeUpdateOne) ClearColor() *WorkflowNodeUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowNodeUpdateOne) SetApplication(v *WorkflowApplication) *WorkflowNodeUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowNodeExecution entity by IDs.
func (_u *WorkflowNodeUpdateOne) AddExecutionIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowNodeUpdateOne) AddExecutions(v ...*WorkflowNodeExecution) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// AddOutgoingEdgeIDs adds the "outgoing_edges" edge to the WorkflowEdge entity by IDs.
func (_u *WorkflowNodeUpdateOne) AddOutgoingEdgeIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.AddOutgoingEdgeIDs(ids...)
	return _u
}

// AddOutgoingEdges adds the "outgoing_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdateOne) AddOutgoingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOutgoingEdgeIDs(ids...)
}

// AddIncomingEdgeIDs adds the "incoming_edges" edge to the WorkflowEdge entity by IDs.
func (_u *WorkflowNodeUpdateOne) AddIncomingEdgeIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.AddIncomingEdgeIDs(ids...)
	return _u
}

// AddIncomingEdges adds the "incoming_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdateOne) AddIncomingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIncomingEdgeIDs(ids...)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (_u *WorkflowNodeUpdateOne) Mutation() *WorkflowNodeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowNodeUpdateOne) ClearApplication() *WorkflowNodeUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearExecutions clears all "executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowNodeUpdateOne) ClearExecutions() *WorkflowNodeUpdateOne {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowNodeExecution entities by IDs.
func (_u *WorkflowNodeUpdateOne) RemoveExecutionIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to WorkflowNodeExecution entities.
func (_u *WorkflowNodeUpdateOne) RemoveExecutions(v ...*WorkflowNodeExecution) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// ClearOutgoingEdges clears all "outgoing_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdateOne) ClearOutgoingEdges() *WorkflowNodeUpdateOne {
	_u.mutation.ClearOutgoingEdges()
	return _u
}

// RemoveOutgoingEdgeIDs removes the "outgoing_edges" edge to WorkflowEdge entities by IDs.
func (_u *WorkflowNodeUpdateOne) RemoveOutgoingEdgeIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.RemoveOutgoingEdgeIDs(ids...)
	return _u
}

// RemoveOutgoingEdges removes "outgoing_edges" edges to WorkflowEdge entities.
func (_u *WorkflowNodeUpdateOne) RemoveOutgoingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOutgoingEdgeIDs(ids...)
}

// ClearIncomingEdges clears all "incoming_edges" edges to the WorkflowEdge entity.
func (_u *WorkflowNodeUpdateOne) ClearIncomingEdges() *WorkflowNodeUpdateOne {
	_u.mutation.ClearIncomingEdges()
	return _u
}

// RemoveIncomingEdgeIDs removes the "incoming_edges" edge to WorkflowEdge entities by IDs.
func (_u *WorkflowNodeUpdateOne) RemoveIncomingEdgeIDs(ids ...uint64) *WorkflowNodeUpdateOne {
	_u.mutation.RemoveIncomingEdgeIDs(ids...)
	return _u
}

// RemoveIncomingEdges removes "incoming_edges" edges to WorkflowEdge entities.
func (_u *WorkflowNodeUpdateOne) RemoveIncomingEdges(v ...*WorkflowEdge) *WorkflowNodeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIncomingEdgeIDs(ids...)
}

// Where appends a list predicates to the WorkflowNodeUpdate builder.
func (_u *WorkflowNodeUpdateOne) Where(ps ...predicate.WorkflowNode) *WorkflowNodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowNodeUpdateOne) Select(field string, fields ...string) *WorkflowNodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowNode entity.
func (_u *WorkflowNodeUpdateOne) Save(ctx context.Context) (*WorkflowNode, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowNodeUpdateOne) SaveX(ctx context.Context) *WorkflowNode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowNodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowNodeUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflownode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowNodeUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflownode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NodeKey(); ok {
		if err := workflownode.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.node_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := workflownode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.type": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNode.application"`)
	}
	return nil
}

func (_u *WorkflowNodeUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowNode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflownode.Table, workflownode.Columns, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflownode.FieldID)
		for _, f := range fields {
			if !workflownode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflownode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflownode.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflownode.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflownode.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflownode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflownode.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflownode.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflownode.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflownode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflownode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflownode.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflownode.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflownode.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NodeKey(); ok {
		_spec.SetField(workflownode.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflownode.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflownode.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Prompt(); ok {
		_spec.SetField(workflownode.FieldPrompt, field.TypeString, value)
	}
	if _u.mutation.PromptCleared() {
		_spec.ClearField(workflownode.FieldPrompt, field.TypeString)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(workflownode.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ProcessorLanguage(); ok {
		_spec.SetField(workflownode.FieldProcessorLanguage, field.TypeString, value)
	}
	if _u.mutation.ProcessorLanguageCleared() {
		_spec.ClearField(workflownode.FieldProcessorLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.ProcessorCode(); ok {
		_spec.SetField(workflownode.FieldProcessorCode, field.TypeString, value)
	}
	if _u.mutation.ProcessorCodeCleared() {
		_spec.ClearField(workflownode.FieldProcessorCode, field.TypeString)
	}
	if value, ok := _u.mutation.NextNodeID(); ok {
		_spec.SetField(workflownode.FieldNextNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNextNodeID(); ok {
		_spec.AddField(workflownode.FieldNextNodeID, field.TypeUint64, value)
	}
	if _u.mutation.NextNodeIDCleared() {
		_spec.ClearField(workflownode.FieldNextNodeID, field.TypeUint64)
	}
	if value, ok := _u.mutation.ParentNodeID(); ok {
		_spec.SetField(workflownode.FieldParentNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedParentNodeID(); ok {
		_spec.AddField(workflownode.FieldParentNodeID, field.TypeUint64, value)
	}
	if _u.mutation.ParentNodeIDCleared() {
		_spec.ClearField(workflownode.FieldParentNodeID, field.TypeUint64)
	}
	if value, ok := _u.mutation.BranchNodes(); ok {
		_spec.SetField(workflownode.FieldBranchNodes, field.TypeJSON, value)
	}
	if _u.mutation.BranchNodesCleared() {
		_spec.ClearField(workflownode.FieldBranchNodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.ParallelConfig(); ok {
		_spec.SetField(workflownode.FieldParallelConfig, field.TypeJSON, value)
	}
	if _u.mutation.ParallelConfigCleared() {
		_spec.ClearField(workflownode.FieldParallelConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.APIConfig(); ok {
		_spec.SetField(workflownode.FieldAPIConfig, field.TypeJSON, value)
	}
	if _u.mutation.APIConfigCleared() {
		_spec.ClearField(workflownode.FieldAPIConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Async(); ok {
		_spec.SetField(workflownode.FieldAsync, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Timeout(); ok {
		_spec.SetField(workflownode.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTimeout(); ok {
		_spec.AddField(workflownode.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(workflownode.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(workflownode.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PositionX(); ok {
		_spec.SetField(workflownode.FieldPositionX, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPositionX(); ok {
		_spec.AddField(workflownode.FieldPositionX, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PositionY(); ok {
		_spec.SetField(workflownode.FieldPositionY, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPositionY(); ok {
		_spec.AddField(workflownode.FieldPositionY, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(workflownode.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(workflownode.FieldColor, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.ApplicationTable,
			Columns: []string{workflownode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.ApplicationTable,
			Columns: []string{workflownode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OutgoingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOutgoingEdgesIDs(); len(nodes) > 0 && !_u.mutation.OutgoingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OutgoingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IncomingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIncomingEdgesIDs(); len(nodes) > 0 && !_u.mutation.IncomingEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IncomingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowNode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
