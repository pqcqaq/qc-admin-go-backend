// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowApplication is the model entity for the WorkflowApplication schema.
type WorkflowApplication struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 工作流应用名称
	Name string `json:"name,omitempty"`
	// 工作流应用描述
	Description string `json:"description,omitempty"`
	// 起始节点ID
	StartNodeID uint64 `json:"start_node_id,omitempty"`
	// 客户端密钥
	ClientSecret string `json:"client_secret,omitempty"`
	// 全局变量定义
	Variables map[string]interface{} `json:"variables,omitempty"`
	// 版本号
	Version uint `json:"version,omitempty"`
	// 状态
	Status workflowapplication.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowApplicationQuery when eager-loading is set.
	Edges        WorkflowApplicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowApplicationEdges holds the relations/edges for other nodes in the graph.
type WorkflowApplicationEdges struct {
	// Nodes holds the value of the nodes edge.
	Nodes []*WorkflowNode `json:"nodes,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*WorkflowExecution `json:"executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes     [2]bool
	namedNodes      map[string][]*WorkflowNode
	namedExecutions map[string][]*WorkflowExecution
}

// NodesOrErr returns the Nodes value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowApplicationEdges) NodesOrErr() ([]*WorkflowNode, error) {
	if e.loadedTypes[0] {
		return e.Nodes, nil
	}
	return nil, &NotLoadedError{edge: "nodes"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowApplicationEdges) ExecutionsOrErr() ([]*WorkflowExecution, error) {
	if e.loadedTypes[1] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowapplication.FieldVariables:
			values[i] = new([]byte)
		case workflowapplication.FieldID, workflowapplication.FieldCreateBy, workflowapplication.FieldUpdateBy, workflowapplication.FieldDeleteBy, workflowapplication.FieldStartNodeID, workflowapplication.FieldVersion:
			values[i] = new(sql.NullInt64)
		case workflowapplication.FieldName, workflowapplication.FieldDescription, workflowapplication.FieldClientSecret, workflowapplication.FieldStatus:
			values[i] = new(sql.NullString)
		case workflowapplication.FieldCreateTime, workflowapplication.FieldUpdateTime, workflowapplication.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowApplication fields.
func (_m *WorkflowApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowapplication.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflowapplication.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflowapplication.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflowapplication.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflowapplication.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflowapplication.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case workflowapplication.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case workflowapplication.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case workflowapplication.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case workflowapplication.FieldStartNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_node_id", values[i])
			} else if value.Valid {
				_m.StartNodeID = uint64(value.Int64)
			}
		case workflowapplication.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				_m.ClientSecret = value.String
			}
		case workflowapplication.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case workflowapplication.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = uint(value.Int64)
			}
		case workflowapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = workflowapplication.Status(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowApplication.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowApplication) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryNodes queries the "nodes" edge of the WorkflowApplication entity.
func (_m *WorkflowApplication) QueryNodes() *WorkflowNodeQuery {
	return NewWorkflowApplicationClient(_m.config).QueryNodes(_m)
}

// QueryExecutions queries the "executions" edge of the WorkflowApplication entity.
func (_m *WorkflowApplication) QueryExecutions() *WorkflowExecutionQuery {
	return NewWorkflowApplicationClient(_m.config).QueryExecutions(_m)
}

// Update returns a builder for updating this WorkflowApplication.
// Note that you need to call WorkflowApplication.Unwrap() before calling this method if this WorkflowApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowApplication) Update() *WorkflowApplicationUpdateOne {
	return NewWorkflowApplicationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowApplication) Unwrap() *WorkflowApplication {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowApplication is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowApplication) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("start_node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StartNodeID))
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(_m.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", _m.Variables))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedNodes returns the Nodes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowApplication) NamedNodes(name string) ([]*WorkflowNode, error) {
	if _m.Edges.namedNodes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedNodes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowApplication) appendNamedNodes(name string, edges ...*WorkflowNode) {
	if _m.Edges.namedNodes == nil {
		_m.Edges.namedNodes = make(map[string][]*WorkflowNode)
	}
	if len(edges) == 0 {
		_m.Edges.namedNodes[name] = []*WorkflowNode{}
	} else {
		_m.Edges.namedNodes[name] = append(_m.Edges.namedNodes[name], edges...)
	}
}

// NamedExecutions returns the Executions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowApplication) NamedExecutions(name string) ([]*WorkflowExecution, error) {
	if _m.Edges.namedExecutions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedExecutions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowApplication) appendNamedExecutions(name string, edges ...*WorkflowExecution) {
	if _m.Edges.namedExecutions == nil {
		_m.Edges.namedExecutions = make(map[string][]*WorkflowExecution)
	}
	if len(edges) == 0 {
		_m.Edges.namedExecutions[name] = []*WorkflowExecution{}
	} else {
		_m.Edges.namedExecutions[name] = append(_m.Edges.namedExecutions[name], edges...)
	}
}

// WorkflowApplications is a parsable slice of WorkflowApplication.
type WorkflowApplications []*WorkflowApplication
