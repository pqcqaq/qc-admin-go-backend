// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/role"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// UserRoles holds the value of the user_roles edge.
	UserRoles []*UserRole `json:"user_roles,omitempty"`
	// RolePermissions holds the value of the role_permissions edge.
	RolePermissions []*RolePermission `json:"role_permissions,omitempty"`
	// InheritedBy holds the value of the inherited_by edge.
	InheritedBy []*Role `json:"inherited_by,omitempty"`
	// InheritsFrom holds the value of the inherits_from edge.
	InheritsFrom []*Role `json:"inherits_from,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes          [4]bool
	namedUserRoles       map[string][]*UserRole
	namedRolePermissions map[string][]*RolePermission
	namedInheritedBy     map[string][]*Role
	namedInheritsFrom    map[string][]*Role
}

// UserRolesOrErr returns the UserRoles value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) UserRolesOrErr() ([]*UserRole, error) {
	if e.loadedTypes[0] {
		return e.UserRoles, nil
	}
	return nil, &NotLoadedError{edge: "user_roles"}
}

// RolePermissionsOrErr returns the RolePermissions value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RolePermissionsOrErr() ([]*RolePermission, error) {
	if e.loadedTypes[1] {
		return e.RolePermissions, nil
	}
	return nil, &NotLoadedError{edge: "role_permissions"}
}

// InheritedByOrErr returns the InheritedBy value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) InheritedByOrErr() ([]*Role, error) {
	if e.loadedTypes[2] {
		return e.InheritedBy, nil
	}
	return nil, &NotLoadedError{edge: "inherited_by"}
}

// InheritsFromOrErr returns the InheritsFrom value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) InheritsFromOrErr() ([]*Role, error) {
	if e.loadedTypes[3] {
		return e.InheritsFrom, nil
	}
	return nil, &NotLoadedError{edge: "inherits_from"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldID, role.FieldCreateBy, role.FieldUpdateBy, role.FieldDeleteBy:
			values[i] = new(sql.NullInt64)
		case role.FieldName, role.FieldDescription:
			values[i] = new(sql.NullString)
		case role.FieldCreateTime, role.FieldUpdateTime, role.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (_m *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case role.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case role.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case role.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case role.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case role.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case role.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case role.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (_m *Role) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserRoles queries the "user_roles" edge of the Role entity.
func (_m *Role) QueryUserRoles() *UserRoleQuery {
	return NewRoleClient(_m.config).QueryUserRoles(_m)
}

// QueryRolePermissions queries the "role_permissions" edge of the Role entity.
func (_m *Role) QueryRolePermissions() *RolePermissionQuery {
	return NewRoleClient(_m.config).QueryRolePermissions(_m)
}

// QueryInheritedBy queries the "inherited_by" edge of the Role entity.
func (_m *Role) QueryInheritedBy() *RoleQuery {
	return NewRoleClient(_m.config).QueryInheritedBy(_m)
}

// QueryInheritsFrom queries the "inherits_from" edge of the Role entity.
func (_m *Role) QueryInheritsFrom() *RoleQuery {
	return NewRoleClient(_m.config).QueryInheritsFrom(_m)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Role) Update() *RoleUpdateOne {
	return NewRoleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Role) Unwrap() *Role {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Role is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserRoles returns the UserRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Role) NamedUserRoles(name string) ([]*UserRole, error) {
	if _m.Edges.namedUserRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedUserRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Role) appendNamedUserRoles(name string, edges ...*UserRole) {
	if _m.Edges.namedUserRoles == nil {
		_m.Edges.namedUserRoles = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		_m.Edges.namedUserRoles[name] = []*UserRole{}
	} else {
		_m.Edges.namedUserRoles[name] = append(_m.Edges.namedUserRoles[name], edges...)
	}
}

// NamedRolePermissions returns the RolePermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Role) NamedRolePermissions(name string) ([]*RolePermission, error) {
	if _m.Edges.namedRolePermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRolePermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Role) appendNamedRolePermissions(name string, edges ...*RolePermission) {
	if _m.Edges.namedRolePermissions == nil {
		_m.Edges.namedRolePermissions = make(map[string][]*RolePermission)
	}
	if len(edges) == 0 {
		_m.Edges.namedRolePermissions[name] = []*RolePermission{}
	} else {
		_m.Edges.namedRolePermissions[name] = append(_m.Edges.namedRolePermissions[name], edges...)
	}
}

// NamedInheritedBy returns the InheritedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Role) NamedInheritedBy(name string) ([]*Role, error) {
	if _m.Edges.namedInheritedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInheritedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Role) appendNamedInheritedBy(name string, edges ...*Role) {
	if _m.Edges.namedInheritedBy == nil {
		_m.Edges.namedInheritedBy = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		_m.Edges.namedInheritedBy[name] = []*Role{}
	} else {
		_m.Edges.namedInheritedBy[name] = append(_m.Edges.namedInheritedBy[name], edges...)
	}
}

// NamedInheritsFrom returns the InheritsFrom named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Role) NamedInheritsFrom(name string) ([]*Role, error) {
	if _m.Edges.namedInheritsFrom == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInheritsFrom[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Role) appendNamedInheritsFrom(name string, edges ...*Role) {
	if _m.Edges.namedInheritsFrom == nil {
		_m.Edges.namedInheritsFrom = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		_m.Edges.namedInheritsFrom[name] = []*Role{}
	} else {
		_m.Edges.namedInheritsFrom[name] = append(_m.Edges.namedInheritsFrom[name], edges...)
	}
}

// Roles is a parsable slice of Role.
type Roles []*Role
