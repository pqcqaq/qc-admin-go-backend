// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/loginrecord"
	"go-backend/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LoginRecord is the model entity for the LoginRecord schema.
type LoginRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 用户ID
	UserID uint64 `json:"user_id,omitempty"`
	// 登录标识符(用户名/邮箱/手机号等)
	Identifier string `json:"identifier,omitempty"`
	// 登录方式
	CredentialType loginrecord.CredentialType `json:"credential_type,omitempty"`
	// 登录IP地址(支持IPv6)
	IPAddress string `json:"ip_address,omitempty"`
	// 用户代理信息
	UserAgent string `json:"user_agent,omitempty"`
	// 设备信息
	DeviceInfo string `json:"device_info,omitempty"`
	// 登录地点
	Location string `json:"location,omitempty"`
	// 登录状态
	Status loginrecord.Status `json:"status,omitempty"`
	// 失败原因
	FailureReason string `json:"failure_reason,omitempty"`
	// 会话ID
	SessionID string `json:"session_id,omitempty"`
	// 退出时间
	LogoutTime *time.Time `json:"logout_time,omitempty"`
	// 会话持续时间(秒)
	Duration int `json:"duration,omitempty"`
	// 额外元数据
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginRecordQuery when eager-loading is set.
	Edges        LoginRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LoginRecordEdges holds the relations/edges for other nodes in the graph.
type LoginRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoginRecordEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldMetadata:
			values[i] = new([]byte)
		case loginrecord.FieldID, loginrecord.FieldCreateBy, loginrecord.FieldUpdateBy, loginrecord.FieldUserID, loginrecord.FieldDuration:
			values[i] = new(sql.NullInt64)
		case loginrecord.FieldIdentifier, loginrecord.FieldCredentialType, loginrecord.FieldIPAddress, loginrecord.FieldUserAgent, loginrecord.FieldDeviceInfo, loginrecord.FieldLocation, loginrecord.FieldStatus, loginrecord.FieldFailureReason, loginrecord.FieldSessionID:
			values[i] = new(sql.NullString)
		case loginrecord.FieldCreateTime, loginrecord.FieldUpdateTime, loginrecord.FieldLogoutTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginRecord fields.
func (_m *LoginRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case loginrecord.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case loginrecord.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case loginrecord.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case loginrecord.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case loginrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint64(value.Int64)
			}
		case loginrecord.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				_m.Identifier = value.String
			}
		case loginrecord.FieldCredentialType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential_type", values[i])
			} else if value.Valid {
				_m.CredentialType = loginrecord.CredentialType(value.String)
			}
		case loginrecord.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case loginrecord.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case loginrecord.FieldDeviceInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_info", values[i])
			} else if value.Valid {
				_m.DeviceInfo = value.String
			}
		case loginrecord.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				_m.Location = value.String
			}
		case loginrecord.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = loginrecord.Status(value.String)
			}
		case loginrecord.FieldFailureReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_reason", values[i])
			} else if value.Valid {
				_m.FailureReason = value.String
			}
		case loginrecord.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				_m.SessionID = value.String
			}
		case loginrecord.FieldLogoutTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field logout_time", values[i])
			} else if value.Valid {
				_m.LogoutTime = new(time.Time)
				*_m.LogoutTime = value.Time
			}
		case loginrecord.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = int(value.Int64)
			}
		case loginrecord.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginRecord.
// This includes values selected through modifiers, order, etc.
func (_m *LoginRecord) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LoginRecord entity.
func (_m *LoginRecord) QueryUser() *UserQuery {
	return NewLoginRecordClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this LoginRecord.
// Note that you need to call LoginRecord.Unwrap() before calling this method if this LoginRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *LoginRecord) Update() *LoginRecordUpdateOne {
	return NewLoginRecordClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the LoginRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *LoginRecord) Unwrap() *LoginRecord {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginRecord is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *LoginRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LoginRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(_m.Identifier)
	builder.WriteString(", ")
	builder.WriteString("credential_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.CredentialType))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("device_info=")
	builder.WriteString(_m.DeviceInfo)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(_m.Location)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("failure_reason=")
	builder.WriteString(_m.FailureReason)
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(_m.SessionID)
	builder.WriteString(", ")
	if v := _m.LogoutTime; v != nil {
		builder.WriteString("logout_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Duration))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// LoginRecords is a parsable slice of LoginRecord.
type LoginRecords []*LoginRecord
