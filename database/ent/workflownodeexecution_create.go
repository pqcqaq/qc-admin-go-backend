// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownode"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeExecutionCreate is the builder for creating a WorkflowNodeExecution entity.
type WorkflowNodeExecutionCreate struct {
	config
	mutation *WorkflowNodeExecutionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WorkflowNodeExecutionCreate) SetCreateTime(v time.Time) *WorkflowNodeExecutionCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableCreateTime(v *time.Time) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *WorkflowNodeExecutionCreate) SetCreateBy(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableCreateBy(v *uint64) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WorkflowNodeExecutionCreate) SetUpdateTime(v time.Time) *WorkflowNodeExecutionCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableUpdateTime(v *time.Time) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *WorkflowNodeExecutionCreate) SetUpdateBy(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableUpdateBy(v *uint64) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetExecutionID sets the "execution_id" field.
func (_c *WorkflowNodeExecutionCreate) SetExecutionID(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetExecutionID(v)
	return _c
}

// SetNodeID sets the "node_id" field.
func (_c *WorkflowNodeExecutionCreate) SetNodeID(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetNodeID(v)
	return _c
}

// SetNodeName sets the "node_name" field.
func (_c *WorkflowNodeExecutionCreate) SetNodeName(v string) *WorkflowNodeExecutionCreate {
	_c.mutation.SetNodeName(v)
	return _c
}

// SetNodeType sets the "node_type" field.
func (_c *WorkflowNodeExecutionCreate) SetNodeType(v string) *WorkflowNodeExecutionCreate {
	_c.mutation.SetNodeType(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *WorkflowNodeExecutionCreate) SetStatus(v workflownodeexecution.Status) *WorkflowNodeExecutionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableStatus(v *workflownodeexecution.Status) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetInput sets the "input" field.
func (_c *WorkflowNodeExecutionCreate) SetInput(v map[string]interface{}) *WorkflowNodeExecutionCreate {
	_c.mutation.SetInput(v)
	return _c
}

// SetOutput sets the "output" field.
func (_c *WorkflowNodeExecutionCreate) SetOutput(v map[string]interface{}) *WorkflowNodeExecutionCreate {
	_c.mutation.SetOutput(v)
	return _c
}

// SetExtra sets the "extra" field.
func (_c *WorkflowNodeExecutionCreate) SetExtra(v map[string]interface{}) *WorkflowNodeExecutionCreate {
	_c.mutation.SetExtra(v)
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *WorkflowNodeExecutionCreate) SetStartedAt(v time.Time) *WorkflowNodeExecutionCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableStartedAt(v *time.Time) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetFinishedAt sets the "finished_at" field.
func (_c *WorkflowNodeExecutionCreate) SetFinishedAt(v time.Time) *WorkflowNodeExecutionCreate {
	_c.mutation.SetFinishedAt(v)
	return _c
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableFinishedAt(v *time.Time) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetFinishedAt(*v)
	}
	return _c
}

// SetDurationMs sets the "duration_ms" field.
func (_c *WorkflowNodeExecutionCreate) SetDurationMs(v int) *WorkflowNodeExecutionCreate {
	_c.mutation.SetDurationMs(v)
	return _c
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableDurationMs(v *int) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetDurationMs(*v)
	}
	return _c
}

// SetPromptTokens sets the "prompt_tokens" field.
func (_c *WorkflowNodeExecutionCreate) SetPromptTokens(v int) *WorkflowNodeExecutionCreate {
	_c.mutation.SetPromptTokens(v)
	return _c
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillablePromptTokens(v *int) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetPromptTokens(*v)
	}
	return _c
}

// SetCompletionTokens sets the "completion_tokens" field.
func (_c *WorkflowNodeExecutionCreate) SetCompletionTokens(v int) *WorkflowNodeExecutionCreate {
	_c.mutation.SetCompletionTokens(v)
	return _c
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableCompletionTokens(v *int) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetCompletionTokens(*v)
	}
	return _c
}

// SetTotalTokens sets the "total_tokens" field.
func (_c *WorkflowNodeExecutionCreate) SetTotalTokens(v int) *WorkflowNodeExecutionCreate {
	_c.mutation.SetTotalTokens(v)
	return _c
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableTotalTokens(v *int) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetTotalTokens(*v)
	}
	return _c
}

// SetCost sets the "cost" field.
func (_c *WorkflowNodeExecutionCreate) SetCost(v float64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetCost(v)
	return _c
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableCost(v *float64) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetCost(*v)
	}
	return _c
}

// SetModel sets the "model" field.
func (_c *WorkflowNodeExecutionCreate) SetModel(v string) *WorkflowNodeExecutionCreate {
	_c.mutation.SetModel(v)
	return _c
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableModel(v *string) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetModel(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *WorkflowNodeExecutionCreate) SetErrorMessage(v string) *WorkflowNodeExecutionCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableErrorMessage(v *string) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetErrorStack sets the "error_stack" field.
func (_c *WorkflowNodeExecutionCreate) SetErrorStack(v string) *WorkflowNodeExecutionCreate {
	_c.mutation.SetErrorStack(v)
	return _c
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableErrorStack(v *string) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetErrorStack(*v)
	}
	return _c
}

// SetRetryCount sets the "retry_count" field.
func (_c *WorkflowNodeExecutionCreate) SetRetryCount(v int) *WorkflowNodeExecutionCreate {
	_c.mutation.SetRetryCount(v)
	return _c
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableRetryCount(v *int) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetRetryCount(*v)
	}
	return _c
}

// SetIsAsync sets the "is_async" field.
func (_c *WorkflowNodeExecutionCreate) SetIsAsync(v bool) *WorkflowNodeExecutionCreate {
	_c.mutation.SetIsAsync(v)
	return _c
}

// SetNillableIsAsync sets the "is_async" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableIsAsync(v *bool) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetIsAsync(*v)
	}
	return _c
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (_c *WorkflowNodeExecutionCreate) SetParentExecutionID(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetParentExecutionID(v)
	return _c
}

// SetNillableParentExecutionID sets the "parent_execution_id" field if the given value is not nil.
func (_c *WorkflowNodeExecutionCreate) SetNillableParentExecutionID(v *uint64) *WorkflowNodeExecutionCreate {
	if v != nil {
		_c.SetParentExecutionID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *WorkflowNodeExecutionCreate) SetID(v uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID.
func (_c *WorkflowNodeExecutionCreate) SetWorkflowExecutionID(id uint64) *WorkflowNodeExecutionCreate {
	_c.mutation.SetWorkflowExecutionID(id)
	return _c
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (_c *WorkflowNodeExecutionCreate) SetWorkflowExecution(v *WorkflowExecution) *WorkflowNodeExecutionCreate {
	return _c.SetWorkflowExecutionID(v.ID)
}

// SetNode sets the "node" edge to the WorkflowNode entity.
func (_c *WorkflowNodeExecutionCreate) SetNode(v *WorkflowNode) *WorkflowNodeExecutionCreate {
	return _c.SetNodeID(v.ID)
}

// Mutation returns the WorkflowNodeExecutionMutation object of the builder.
func (_c *WorkflowNodeExecutionCreate) Mutation() *WorkflowNodeExecutionMutation {
	return _c.mutation
}

// Save creates the WorkflowNodeExecution in the database.
func (_c *WorkflowNodeExecutionCreate) Save(ctx context.Context) (*WorkflowNodeExecution, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowNodeExecutionCreate) SaveX(ctx context.Context) *WorkflowNodeExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowNodeExecutionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowNodeExecutionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WorkflowNodeExecutionCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if workflownodeexecution.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownodeexecution.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := workflownodeexecution.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if workflownodeexecution.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownodeexecution.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownodeexecution.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := workflownodeexecution.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		v := workflownodeexecution.DefaultDurationMs
		_c.mutation.SetDurationMs(v)
	}
	if _, ok := _c.mutation.PromptTokens(); !ok {
		v := workflownodeexecution.DefaultPromptTokens
		_c.mutation.SetPromptTokens(v)
	}
	if _, ok := _c.mutation.CompletionTokens(); !ok {
		v := workflownodeexecution.DefaultCompletionTokens
		_c.mutation.SetCompletionTokens(v)
	}
	if _, ok := _c.mutation.TotalTokens(); !ok {
		v := workflownodeexecution.DefaultTotalTokens
		_c.mutation.SetTotalTokens(v)
	}
	if _, ok := _c.mutation.Cost(); !ok {
		v := workflownodeexecution.DefaultCost
		_c.mutation.SetCost(v)
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		v := workflownodeexecution.DefaultRetryCount
		_c.mutation.SetRetryCount(v)
	}
	if _, ok := _c.mutation.IsAsync(); !ok {
		v := workflownodeexecution.DefaultIsAsync
		_c.mutation.SetIsAsync(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowNodeExecutionCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowNodeExecution.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowNodeExecution.update_time"`)}
	}
	if _, ok := _c.mutation.ExecutionID(); !ok {
		return &ValidationError{Name: "execution_id", err: errors.New(`ent: missing required field "WorkflowNodeExecution.execution_id"`)}
	}
	if _, ok := _c.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "WorkflowNodeExecution.node_id"`)}
	}
	if _, ok := _c.mutation.NodeName(); !ok {
		return &ValidationError{Name: "node_name", err: errors.New(`ent: missing required field "WorkflowNodeExecution.node_name"`)}
	}
	if _, ok := _c.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "WorkflowNodeExecution.node_type"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowNodeExecution.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := workflownodeexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowNodeExecution.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "WorkflowNodeExecution.duration_ms"`)}
	}
	if _, ok := _c.mutation.PromptTokens(); !ok {
		return &ValidationError{Name: "prompt_tokens", err: errors.New(`ent: missing required field "WorkflowNodeExecution.prompt_tokens"`)}
	}
	if _, ok := _c.mutation.CompletionTokens(); !ok {
		return &ValidationError{Name: "completion_tokens", err: errors.New(`ent: missing required field "WorkflowNodeExecution.completion_tokens"`)}
	}
	if _, ok := _c.mutation.TotalTokens(); !ok {
		return &ValidationError{Name: "total_tokens", err: errors.New(`ent: missing required field "WorkflowNodeExecution.total_tokens"`)}
	}
	if _, ok := _c.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "WorkflowNodeExecution.cost"`)}
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "WorkflowNodeExecution.retry_count"`)}
	}
	if _, ok := _c.mutation.IsAsync(); !ok {
		return &ValidationError{Name: "is_async", err: errors.New(`ent: missing required field "WorkflowNodeExecution.is_async"`)}
	}
	if len(_c.mutation.WorkflowExecutionIDs()) == 0 {
		return &ValidationError{Name: "workflow_execution", err: errors.New(`ent: missing required edge "WorkflowNodeExecution.workflow_execution"`)}
	}
	if len(_c.mutation.NodeIDs()) == 0 {
		return &ValidationError{Name: "node", err: errors.New(`ent: missing required edge "WorkflowNodeExecution.node"`)}
	}
	return nil
}

func (_c *WorkflowNodeExecutionCreate) sqlSave(ctx context.Context) (*WorkflowNodeExecution, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowNodeExecutionCreate) createSpec() (*WorkflowNodeExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowNodeExecution{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflownodeexecution.Table, sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(workflownodeexecution.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.NodeName(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeName, field.TypeString, value)
		_node.NodeName = value
	}
	if value, ok := _c.mutation.NodeType(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(workflownodeexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Input(); ok {
		_spec.SetField(workflownodeexecution.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := _c.mutation.Output(); ok {
		_spec.SetField(workflownodeexecution.FieldOutput, field.TypeJSON, value)
		_node.Output = value
	}
	if value, ok := _c.mutation.Extra(); ok {
		_spec.SetField(workflownodeexecution.FieldExtra, field.TypeJSON, value)
		_node.Extra = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.FinishedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := _c.mutation.DurationMs(); ok {
		_spec.SetField(workflownodeexecution.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := _c.mutation.PromptTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldPromptTokens, field.TypeInt, value)
		_node.PromptTokens = value
	}
	if value, ok := _c.mutation.CompletionTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldCompletionTokens, field.TypeInt, value)
		_node.CompletionTokens = value
	}
	if value, ok := _c.mutation.TotalTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldTotalTokens, field.TypeInt, value)
		_node.TotalTokens = value
	}
	if value, ok := _c.mutation.Cost(); ok {
		_spec.SetField(workflownodeexecution.FieldCost, field.TypeFloat64, value)
		_node.Cost = value
	}
	if value, ok := _c.mutation.Model(); ok {
		_spec.SetField(workflownodeexecution.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := _c.mutation.ErrorStack(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorStack, field.TypeString, value)
		_node.ErrorStack = value
	}
	if value, ok := _c.mutation.RetryCount(); ok {
		_spec.SetField(workflownodeexecution.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := _c.mutation.IsAsync(); ok {
		_spec.SetField(workflownodeexecution.FieldIsAsync, field.TypeBool, value)
		_node.IsAsync = value
	}
	if value, ok := _c.mutation.ParentExecutionID(); ok {
		_spec.SetField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64, value)
		_node.ParentExecutionID = value
	}
	if nodes := _c.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.WorkflowExecutionTable,
			Columns: []string{workflownodeexecution.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExecutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.NodeTable,
			Columns: []string{workflownodeexecution.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowNodeExecutionCreateBulk is the builder for creating many WorkflowNodeExecution entities in bulk.
type WorkflowNodeExecutionCreateBulk struct {
	config
	err      error
	builders []*WorkflowNodeExecutionCreate
}

// Save creates the WorkflowNodeExecution entities in the database.
func (_c *WorkflowNodeExecutionCreateBulk) Save(ctx context.Context) ([]*WorkflowNodeExecution, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*WorkflowNodeExecution, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowNodeExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowNodeExecutionCreateBulk) SaveX(ctx context.Context) []*WorkflowNodeExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowNodeExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowNodeExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
