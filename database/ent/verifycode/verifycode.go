// Code generated by ent, DO NOT EDIT.

package verifycode

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the verifycode type in the database.
	Label = "verify_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldSenderType holds the string denoting the sender_type field in the database.
	FieldSenderType = "sender_type"
	// FieldSendFor holds the string denoting the send_for field in the database.
	FieldSendFor = "send_for"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldUsedAt holds the string denoting the used_at field in the database.
	FieldUsedAt = "used_at"
	// FieldSendSuccess holds the string denoting the send_success field in the database.
	FieldSendSuccess = "send_success"
	// FieldSendAt holds the string denoting the send_at field in the database.
	FieldSendAt = "send_at"
	// Table holds the table name of the verifycode in the database.
	Table = "sys_verify_codes"
)

// Columns holds all SQL columns for verifycode fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldCode,
	FieldIdentifier,
	FieldSenderType,
	FieldSendFor,
	FieldExpiresAt,
	FieldUsedAt,
	FieldSendSuccess,
	FieldSendAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// SendForValidator is a validator for the "send_for" field. It is called by the builders before save.
	SendForValidator func(string) error
	// DefaultSendSuccess holds the default value on creation for the "send_success" field.
	DefaultSendSuccess bool
)

// SenderType defines the type for the "sender_type" enum field.
type SenderType string

// SenderType values.
const (
	SenderTypeEmail SenderType = "email"
	SenderTypePhone SenderType = "phone"
	SenderTypeSms   SenderType = "sms"
)

func (st SenderType) String() string {
	return string(st)
}

// SenderTypeValidator is a validator for the "sender_type" field enum values. It is called by the builders before save.
func SenderTypeValidator(st SenderType) error {
	switch st {
	case SenderTypeEmail, SenderTypePhone, SenderTypeSms:
		return nil
	default:
		return fmt.Errorf("verifycode: invalid enum value for sender_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the VerifyCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// BySenderType orders the results by the sender_type field.
func BySenderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderType, opts...).ToFunc()
}

// BySendFor orders the results by the send_for field.
func BySendFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendFor, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByUsedAt orders the results by the used_at field.
func ByUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAt, opts...).ToFunc()
}

// BySendSuccess orders the results by the send_success field.
func BySendSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendSuccess, opts...).ToFunc()
}

// BySendAt orders the results by the send_at field.
func BySendAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendAt, opts...).ToFunc()
}
