// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/attachment"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *AttachmentCreate) SetCreateTime(v time.Time) *AttachmentCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableCreateTime(v *time.Time) *AttachmentCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *AttachmentCreate) SetCreateBy(v int64) *AttachmentCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableCreateBy(v *int64) *AttachmentCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *AttachmentCreate) SetUpdateTime(v time.Time) *AttachmentCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableUpdateTime(v *time.Time) *AttachmentCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *AttachmentCreate) SetUpdateBy(v int64) *AttachmentCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableUpdateBy(v *int64) *AttachmentCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *AttachmentCreate) SetDeleteTime(v time.Time) *AttachmentCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableDeleteTime(v *time.Time) *AttachmentCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *AttachmentCreate) SetDeleteBy(v int64) *AttachmentCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableDeleteBy(v *int64) *AttachmentCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetFilename sets the "filename" field.
func (_c *AttachmentCreate) SetFilename(v string) *AttachmentCreate {
	_c.mutation.SetFilename(v)
	return _c
}

// SetPath sets the "path" field.
func (_c *AttachmentCreate) SetPath(v string) *AttachmentCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *AttachmentCreate) SetURL(v string) *AttachmentCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableURL(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetContentType sets the "content_type" field.
func (_c *AttachmentCreate) SetContentType(v string) *AttachmentCreate {
	_c.mutation.SetContentType(v)
	return _c
}

// SetSize sets the "size" field.
func (_c *AttachmentCreate) SetSize(v int64) *AttachmentCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetEtag sets the "etag" field.
func (_c *AttachmentCreate) SetEtag(v string) *AttachmentCreate {
	_c.mutation.SetEtag(v)
	return _c
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableEtag(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetEtag(*v)
	}
	return _c
}

// SetBucket sets the "bucket" field.
func (_c *AttachmentCreate) SetBucket(v string) *AttachmentCreate {
	_c.mutation.SetBucket(v)
	return _c
}

// SetStorageProvider sets the "storage_provider" field.
func (_c *AttachmentCreate) SetStorageProvider(v string) *AttachmentCreate {
	_c.mutation.SetStorageProvider(v)
	return _c
}

// SetNillableStorageProvider sets the "storage_provider" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableStorageProvider(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetStorageProvider(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *AttachmentCreate) SetMetadata(v map[string]any) *AttachmentCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *AttachmentCreate) SetStatus(v attachment.Status) *AttachmentCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableStatus(v *attachment.Status) *AttachmentCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetUploadSessionID sets the "upload_session_id" field.
func (_c *AttachmentCreate) SetUploadSessionID(v string) *AttachmentCreate {
	_c.mutation.SetUploadSessionID(v)
	return _c
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableUploadSessionID(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetUploadSessionID(*v)
	}
	return _c
}

// SetTag1 sets the "tag1" field.
func (_c *AttachmentCreate) SetTag1(v string) *AttachmentCreate {
	_c.mutation.SetTag1(v)
	return _c
}

// SetNillableTag1 sets the "tag1" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableTag1(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetTag1(*v)
	}
	return _c
}

// SetTag2 sets the "tag2" field.
func (_c *AttachmentCreate) SetTag2(v string) *AttachmentCreate {
	_c.mutation.SetTag2(v)
	return _c
}

// SetNillableTag2 sets the "tag2" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableTag2(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetTag2(*v)
	}
	return _c
}

// SetTag3 sets the "tag3" field.
func (_c *AttachmentCreate) SetTag3(v string) *AttachmentCreate {
	_c.mutation.SetTag3(v)
	return _c
}

// SetNillableTag3 sets the "tag3" field if the given value is not nil.
func (_c *AttachmentCreate) SetNillableTag3(v *string) *AttachmentCreate {
	if v != nil {
		_c.SetTag3(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AttachmentCreate) SetID(v uint64) *AttachmentCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the AttachmentMutation object of the builder.
func (_c *AttachmentCreate) Mutation() *AttachmentMutation {
	return _c.mutation
}

// Save creates the Attachment in the database.
func (_c *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttachmentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttachmentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AttachmentCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if attachment.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized attachment.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := attachment.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if attachment.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized attachment.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := attachment.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.StorageProvider(); !ok {
		v := attachment.DefaultStorageProvider
		_c.mutation.SetStorageProvider(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := attachment.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *AttachmentCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Attachment.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Attachment.update_time"`)}
	}
	if _, ok := _c.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Attachment.filename"`)}
	}
	if v, ok := _c.mutation.Filename(); ok {
		if err := attachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Attachment.filename": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Attachment.path"`)}
	}
	if v, ok := _c.mutation.Path(); ok {
		if err := attachment.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Attachment.path": %w`, err)}
		}
	}
	if v, ok := _c.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "Attachment.content_type"`)}
	}
	if v, ok := _c.mutation.ContentType(); ok {
		if err := attachment.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.content_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Attachment.size"`)}
	}
	if v, ok := _c.mutation.Etag(); ok {
		if err := attachment.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Attachment.etag": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent: missing required field "Attachment.bucket"`)}
	}
	if v, ok := _c.mutation.Bucket(); ok {
		if err := attachment.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Attachment.bucket": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StorageProvider(); !ok {
		return &ValidationError{Name: "storage_provider", err: errors.New(`ent: missing required field "Attachment.storage_provider"`)}
	}
	if v, ok := _c.mutation.StorageProvider(); ok {
		if err := attachment.StorageProviderValidator(v); err != nil {
			return &ValidationError{Name: "storage_provider", err: fmt.Errorf(`ent: validator failed for field "Attachment.storage_provider": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Attachment.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := attachment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Attachment.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.UploadSessionID(); ok {
		if err := attachment.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Attachment.upload_session_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Tag1(); ok {
		if err := attachment.Tag1Validator(v); err != nil {
			return &ValidationError{Name: "tag1", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag1": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Tag2(); ok {
		if err := attachment.Tag2Validator(v); err != nil {
			return &ValidationError{Name: "tag2", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag2": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Tag3(); ok {
		if err := attachment.Tag3Validator(v); err != nil {
			return &ValidationError{Name: "tag3", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag3": %w`, err)}
		}
	}
	return nil
}

func (_c *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(attachment.Table, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(attachment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(attachment.FieldCreateBy, field.TypeInt64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(attachment.FieldUpdateBy, field.TypeInt64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(attachment.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Filename(); ok {
		_spec.SetField(attachment.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.ContentType(); ok {
		_spec.SetField(attachment.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.Etag(); ok {
		_spec.SetField(attachment.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := _c.mutation.Bucket(); ok {
		_spec.SetField(attachment.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := _c.mutation.StorageProvider(); ok {
		_spec.SetField(attachment.FieldStorageProvider, field.TypeString, value)
		_node.StorageProvider = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(attachment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.UploadSessionID(); ok {
		_spec.SetField(attachment.FieldUploadSessionID, field.TypeString, value)
		_node.UploadSessionID = value
	}
	if value, ok := _c.mutation.Tag1(); ok {
		_spec.SetField(attachment.FieldTag1, field.TypeString, value)
		_node.Tag1 = value
	}
	if value, ok := _c.mutation.Tag2(); ok {
		_spec.SetField(attachment.FieldTag2, field.TypeString, value)
		_node.Tag2 = value
	}
	if value, ok := _c.mutation.Tag3(); ok {
		_spec.SetField(attachment.FieldTag3, field.TypeString, value)
		_node.Tag3 = value
	}
	return _node, _spec
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	err      error
	builders []*AttachmentCreate
}

// Save creates the Attachment entities in the database.
func (_c *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Attachment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
