// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CredentialCreate is the builder for creating a Credential entity.
type CredentialCreate struct {
	config
	mutation *CredentialMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *CredentialCreate) SetCreateTime(v time.Time) *CredentialCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableCreateTime(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *CredentialCreate) SetCreateBy(v uint64) *CredentialCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableCreateBy(v *uint64) *CredentialCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *CredentialCreate) SetUpdateTime(v time.Time) *CredentialCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableUpdateTime(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *CredentialCreate) SetUpdateBy(v uint64) *CredentialCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableUpdateBy(v *uint64) *CredentialCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *CredentialCreate) SetDeleteTime(v time.Time) *CredentialCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableDeleteTime(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *CredentialCreate) SetDeleteBy(v uint64) *CredentialCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableDeleteBy(v *uint64) *CredentialCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *CredentialCreate) SetUserID(v uint64) *CredentialCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetCredentialType sets the "credential_type" field.
func (_c *CredentialCreate) SetCredentialType(v credential.CredentialType) *CredentialCreate {
	_c.mutation.SetCredentialType(v)
	return _c
}

// SetIdentifier sets the "identifier" field.
func (_c *CredentialCreate) SetIdentifier(v string) *CredentialCreate {
	_c.mutation.SetIdentifier(v)
	return _c
}

// SetSecret sets the "secret" field.
func (_c *CredentialCreate) SetSecret(v string) *CredentialCreate {
	_c.mutation.SetSecret(v)
	return _c
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableSecret(v *string) *CredentialCreate {
	if v != nil {
		_c.SetSecret(*v)
	}
	return _c
}

// SetSalt sets the "salt" field.
func (_c *CredentialCreate) SetSalt(v string) *CredentialCreate {
	_c.mutation.SetSalt(v)
	return _c
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableSalt(v *string) *CredentialCreate {
	if v != nil {
		_c.SetSalt(*v)
	}
	return _c
}

// SetProvider sets the "provider" field.
func (_c *CredentialCreate) SetProvider(v string) *CredentialCreate {
	_c.mutation.SetProvider(v)
	return _c
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableProvider(v *string) *CredentialCreate {
	if v != nil {
		_c.SetProvider(*v)
	}
	return _c
}

// SetIsVerified sets the "is_verified" field.
func (_c *CredentialCreate) SetIsVerified(v bool) *CredentialCreate {
	_c.mutation.SetIsVerified(v)
	return _c
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableIsVerified(v *bool) *CredentialCreate {
	if v != nil {
		_c.SetIsVerified(*v)
	}
	return _c
}

// SetVerifiedAt sets the "verified_at" field.
func (_c *CredentialCreate) SetVerifiedAt(v time.Time) *CredentialCreate {
	_c.mutation.SetVerifiedAt(v)
	return _c
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableVerifiedAt(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetVerifiedAt(*v)
	}
	return _c
}

// SetLastUsedAt sets the "last_used_at" field.
func (_c *CredentialCreate) SetLastUsedAt(v time.Time) *CredentialCreate {
	_c.mutation.SetLastUsedAt(v)
	return _c
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableLastUsedAt(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetLastUsedAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *CredentialCreate) SetExpiresAt(v time.Time) *CredentialCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableExpiresAt(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetExpiresAt(*v)
	}
	return _c
}

// SetFailedAttempts sets the "failed_attempts" field.
func (_c *CredentialCreate) SetFailedAttempts(v int) *CredentialCreate {
	_c.mutation.SetFailedAttempts(v)
	return _c
}

// SetNillableFailedAttempts sets the "failed_attempts" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableFailedAttempts(v *int) *CredentialCreate {
	if v != nil {
		_c.SetFailedAttempts(*v)
	}
	return _c
}

// SetLockedUntil sets the "locked_until" field.
func (_c *CredentialCreate) SetLockedUntil(v time.Time) *CredentialCreate {
	_c.mutation.SetLockedUntil(v)
	return _c
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_c *CredentialCreate) SetNillableLockedUntil(v *time.Time) *CredentialCreate {
	if v != nil {
		_c.SetLockedUntil(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *CredentialCreate) SetMetadata(v map[string]interface{}) *CredentialCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetID sets the "id" field.
func (_c *CredentialCreate) SetID(v uint64) *CredentialCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *CredentialCreate) SetUser(v *User) *CredentialCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (_c *CredentialCreate) Mutation() *CredentialMutation {
	return _c.mutation
}

// Save creates the Credential in the database.
func (_c *CredentialCreate) Save(ctx context.Context) (*Credential, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CredentialCreate) SaveX(ctx context.Context) *Credential {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CredentialCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CredentialCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CredentialCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if credential.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized credential.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := credential.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if credential.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized credential.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := credential.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.IsVerified(); !ok {
		v := credential.DefaultIsVerified
		_c.mutation.SetIsVerified(v)
	}
	if _, ok := _c.mutation.FailedAttempts(); !ok {
		v := credential.DefaultFailedAttempts
		_c.mutation.SetFailedAttempts(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *CredentialCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Credential.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Credential.update_time"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Credential.user_id"`)}
	}
	if _, ok := _c.mutation.CredentialType(); !ok {
		return &ValidationError{Name: "credential_type", err: errors.New(`ent: missing required field "Credential.credential_type"`)}
	}
	if v, ok := _c.mutation.CredentialType(); ok {
		if err := credential.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "Credential.credential_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Credential.identifier"`)}
	}
	if v, ok := _c.mutation.Identifier(); ok {
		if err := credential.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Credential.identifier": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Secret(); ok {
		if err := credential.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Credential.secret": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Salt(); ok {
		if err := credential.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "Credential.salt": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Provider(); ok {
		if err := credential.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Credential.provider": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "Credential.is_verified"`)}
	}
	if _, ok := _c.mutation.FailedAttempts(); !ok {
		return &ValidationError{Name: "failed_attempts", err: errors.New(`ent: missing required field "Credential.failed_attempts"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Credential.user"`)}
	}
	return nil
}

func (_c *CredentialCreate) sqlSave(ctx context.Context) (*Credential, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CredentialCreate) createSpec() (*Credential, *sqlgraph.CreateSpec) {
	var (
		_node = &Credential{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(credential.Table, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(credential.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(credential.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(credential.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(credential.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(credential.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(credential.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.CredentialType(); ok {
		_spec.SetField(credential.FieldCredentialType, field.TypeEnum, value)
		_node.CredentialType = value
	}
	if value, ok := _c.mutation.Identifier(); ok {
		_spec.SetField(credential.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := _c.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := _c.mutation.Salt(); ok {
		_spec.SetField(credential.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	if value, ok := _c.mutation.Provider(); ok {
		_spec.SetField(credential.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := _c.mutation.IsVerified(); ok {
		_spec.SetField(credential.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := _c.mutation.VerifiedAt(); ok {
		_spec.SetField(credential.FieldVerifiedAt, field.TypeTime, value)
		_node.VerifiedAt = &value
	}
	if value, ok := _c.mutation.LastUsedAt(); ok {
		_spec.SetField(credential.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = &value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(credential.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := _c.mutation.FailedAttempts(); ok {
		_spec.SetField(credential.FieldFailedAttempts, field.TypeInt, value)
		_node.FailedAttempts = value
	}
	if value, ok := _c.mutation.LockedUntil(); ok {
		_spec.SetField(credential.FieldLockedUntil, field.TypeTime, value)
		_node.LockedUntil = &value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(credential.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CredentialCreateBulk is the builder for creating many Credential entities in bulk.
type CredentialCreateBulk struct {
	config
	err      error
	builders []*CredentialCreate
}

// Save creates the Credential entities in the database.
func (_c *CredentialCreateBulk) Save(ctx context.Context) ([]*Credential, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Credential, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CredentialCreateBulk) SaveX(ctx context.Context) []*Credential {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CredentialCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
