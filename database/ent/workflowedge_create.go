// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowedge"
	"go-backend/database/ent/workflownode"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowEdgeCreate is the builder for creating a WorkflowEdge entity.
type WorkflowEdgeCreate struct {
	config
	mutation *WorkflowEdgeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WorkflowEdgeCreate) SetCreateTime(v time.Time) *WorkflowEdgeCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableCreateTime(v *time.Time) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *WorkflowEdgeCreate) SetCreateBy(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableCreateBy(v *uint64) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WorkflowEdgeCreate) SetUpdateTime(v time.Time) *WorkflowEdgeCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableUpdateTime(v *time.Time) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *WorkflowEdgeCreate) SetUpdateBy(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableUpdateBy(v *uint64) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *WorkflowEdgeCreate) SetDeleteTime(v time.Time) *WorkflowEdgeCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableDeleteTime(v *time.Time) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *WorkflowEdgeCreate) SetDeleteBy(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableDeleteBy(v *uint64) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetEdgeKey sets the "edge_key" field.
func (_c *WorkflowEdgeCreate) SetEdgeKey(v string) *WorkflowEdgeCreate {
	_c.mutation.SetEdgeKey(v)
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *WorkflowEdgeCreate) SetApplicationID(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetSourceNodeID sets the "source_node_id" field.
func (_c *WorkflowEdgeCreate) SetSourceNodeID(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetSourceNodeID(v)
	return _c
}

// SetTargetNodeID sets the "target_node_id" field.
func (_c *WorkflowEdgeCreate) SetTargetNodeID(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetTargetNodeID(v)
	return _c
}

// SetSourceHandle sets the "source_handle" field.
func (_c *WorkflowEdgeCreate) SetSourceHandle(v string) *WorkflowEdgeCreate {
	_c.mutation.SetSourceHandle(v)
	return _c
}

// SetNillableSourceHandle sets the "source_handle" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableSourceHandle(v *string) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetSourceHandle(*v)
	}
	return _c
}

// SetTargetHandle sets the "target_handle" field.
func (_c *WorkflowEdgeCreate) SetTargetHandle(v string) *WorkflowEdgeCreate {
	_c.mutation.SetTargetHandle(v)
	return _c
}

// SetNillableTargetHandle sets the "target_handle" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableTargetHandle(v *string) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetTargetHandle(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *WorkflowEdgeCreate) SetType(v workflowedge.Type) *WorkflowEdgeCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableType(v *workflowedge.Type) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetLabel sets the "label" field.
func (_c *WorkflowEdgeCreate) SetLabel(v string) *WorkflowEdgeCreate {
	_c.mutation.SetLabel(v)
	return _c
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableLabel(v *string) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetLabel(*v)
	}
	return _c
}

// SetBranchName sets the "branch_name" field.
func (_c *WorkflowEdgeCreate) SetBranchName(v string) *WorkflowEdgeCreate {
	_c.mutation.SetBranchName(v)
	return _c
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableBranchName(v *string) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetBranchName(*v)
	}
	return _c
}

// SetAnimated sets the "animated" field.
func (_c *WorkflowEdgeCreate) SetAnimated(v bool) *WorkflowEdgeCreate {
	_c.mutation.SetAnimated(v)
	return _c
}

// SetNillableAnimated sets the "animated" field if the given value is not nil.
func (_c *WorkflowEdgeCreate) SetNillableAnimated(v *bool) *WorkflowEdgeCreate {
	if v != nil {
		_c.SetAnimated(*v)
	}
	return _c
}

// SetStyle sets the "style" field.
func (_c *WorkflowEdgeCreate) SetStyle(v map[string]interface{}) *WorkflowEdgeCreate {
	_c.mutation.SetStyle(v)
	return _c
}

// SetData sets the "data" field.
func (_c *WorkflowEdgeCreate) SetData(v map[string]interface{}) *WorkflowEdgeCreate {
	_c.mutation.SetData(v)
	return _c
}

// SetID sets the "id" field.
func (_c *WorkflowEdgeCreate) SetID(v uint64) *WorkflowEdgeCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_c *WorkflowEdgeCreate) SetApplication(v *WorkflowApplication) *WorkflowEdgeCreate {
	return _c.SetApplicationID(v.ID)
}

// SetSourceNode sets the "source_node" edge to the WorkflowNode entity.
func (_c *WorkflowEdgeCreate) SetSourceNode(v *WorkflowNode) *WorkflowEdgeCreate {
	return _c.SetSourceNodeID(v.ID)
}

// SetTargetNode sets the "target_node" edge to the WorkflowNode entity.
func (_c *WorkflowEdgeCreate) SetTargetNode(v *WorkflowNode) *WorkflowEdgeCreate {
	return _c.SetTargetNodeID(v.ID)
}

// Mutation returns the WorkflowEdgeMutation object of the builder.
func (_c *WorkflowEdgeCreate) Mutation() *WorkflowEdgeMutation {
	return _c.mutation
}

// Save creates the WorkflowEdge in the database.
func (_c *WorkflowEdgeCreate) Save(ctx context.Context) (*WorkflowEdge, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowEdgeCreate) SaveX(ctx context.Context) *WorkflowEdge {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowEdgeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowEdgeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WorkflowEdgeCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if workflowedge.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowedge.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := workflowedge.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if workflowedge.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowedge.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowedge.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := workflowedge.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Animated(); !ok {
		v := workflowedge.DefaultAnimated
		_c.mutation.SetAnimated(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowEdgeCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowEdge.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowEdge.update_time"`)}
	}
	if _, ok := _c.mutation.EdgeKey(); !ok {
		return &ValidationError{Name: "edge_key", err: errors.New(`ent: missing required field "WorkflowEdge.edge_key"`)}
	}
	if v, ok := _c.mutation.EdgeKey(); ok {
		if err := workflowedge.EdgeKeyValidator(v); err != nil {
			return &ValidationError{Name: "edge_key", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.edge_key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "WorkflowEdge.application_id"`)}
	}
	if _, ok := _c.mutation.SourceNodeID(); !ok {
		return &ValidationError{Name: "source_node_id", err: errors.New(`ent: missing required field "WorkflowEdge.source_node_id"`)}
	}
	if _, ok := _c.mutation.TargetNodeID(); !ok {
		return &ValidationError{Name: "target_node_id", err: errors.New(`ent: missing required field "WorkflowEdge.target_node_id"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WorkflowEdge.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := workflowedge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Animated(); !ok {
		return &ValidationError{Name: "animated", err: errors.New(`ent: missing required field "WorkflowEdge.animated"`)}
	}
	if len(_c.mutation.ApplicationIDs()) == 0 {
		return &ValidationError{Name: "application", err: errors.New(`ent: missing required edge "WorkflowEdge.application"`)}
	}
	if len(_c.mutation.SourceNodeIDs()) == 0 {
		return &ValidationError{Name: "source_node", err: errors.New(`ent: missing required edge "WorkflowEdge.source_node"`)}
	}
	if len(_c.mutation.TargetNodeIDs()) == 0 {
		return &ValidationError{Name: "target_node", err: errors.New(`ent: missing required edge "WorkflowEdge.target_node"`)}
	}
	return nil
}

func (_c *WorkflowEdgeCreate) sqlSave(ctx context.Context) (*WorkflowEdge, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowEdgeCreate) createSpec() (*WorkflowEdge, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowEdge{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflowedge.Table, sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(workflowedge.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(workflowedge.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(workflowedge.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(workflowedge.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(workflowedge.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(workflowedge.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.EdgeKey(); ok {
		_spec.SetField(workflowedge.FieldEdgeKey, field.TypeString, value)
		_node.EdgeKey = value
	}
	if value, ok := _c.mutation.SourceHandle(); ok {
		_spec.SetField(workflowedge.FieldSourceHandle, field.TypeString, value)
		_node.SourceHandle = value
	}
	if value, ok := _c.mutation.TargetHandle(); ok {
		_spec.SetField(workflowedge.FieldTargetHandle, field.TypeString, value)
		_node.TargetHandle = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(workflowedge.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Label(); ok {
		_spec.SetField(workflowedge.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := _c.mutation.BranchName(); ok {
		_spec.SetField(workflowedge.FieldBranchName, field.TypeString, value)
		_node.BranchName = value
	}
	if value, ok := _c.mutation.Animated(); ok {
		_spec.SetField(workflowedge.FieldAnimated, field.TypeBool, value)
		_node.Animated = value
	}
	if value, ok := _c.mutation.Style(); ok {
		_spec.SetField(workflowedge.FieldStyle, field.TypeJSON, value)
		_node.Style = value
	}
	if value, ok := _c.mutation.Data(); ok {
		_spec.SetField(workflowedge.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := _c.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.ApplicationTable,
			Columns: []string{workflowedge.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SourceNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.SourceNodeTable,
			Columns: []string{workflowedge.SourceNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceNodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TargetNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.TargetNodeTable,
			Columns: []string{workflowedge.TargetNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetNodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowEdgeCreateBulk is the builder for creating many WorkflowEdge entities in bulk.
type WorkflowEdgeCreateBulk struct {
	config
	err      error
	builders []*WorkflowEdgeCreate
}

// Save creates the WorkflowEdge entities in the database.
func (_c *WorkflowEdgeCreateBulk) Save(ctx context.Context) ([]*WorkflowEdge, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*WorkflowEdge, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowEdgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowEdgeCreateBulk) SaveX(ctx context.Context) []*WorkflowEdge {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowEdgeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowEdgeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
