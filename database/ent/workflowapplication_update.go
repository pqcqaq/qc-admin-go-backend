// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowApplicationUpdate is the builder for updating WorkflowApplication entities.
type WorkflowApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowApplicationMutation
}

// Where appends a list predicates to the WorkflowApplicationUpdate builder.
func (_u *WorkflowApplicationUpdate) Where(ps ...predicate.WorkflowApplication) *WorkflowApplicationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowApplicationUpdate) SetCreateBy(v uint64) *WorkflowApplicationUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableCreateBy(v *uint64) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowApplicationUpdate) AddCreateBy(v int64) *WorkflowApplicationUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowApplicationUpdate) ClearCreateBy() *WorkflowApplicationUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowApplicationUpdate) SetUpdateTime(v time.Time) *WorkflowApplicationUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowApplicationUpdate) SetUpdateBy(v uint64) *WorkflowApplicationUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableUpdateBy(v *uint64) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowApplicationUpdate) AddUpdateBy(v int64) *WorkflowApplicationUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowApplicationUpdate) ClearUpdateBy() *WorkflowApplicationUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowApplicationUpdate) SetDeleteTime(v time.Time) *WorkflowApplicationUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableDeleteTime(v *time.Time) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowApplicationUpdate) ClearDeleteTime() *WorkflowApplicationUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowApplicationUpdate) SetDeleteBy(v uint64) *WorkflowApplicationUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableDeleteBy(v *uint64) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowApplicationUpdate) AddDeleteBy(v int64) *WorkflowApplicationUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowApplicationUpdate) ClearDeleteBy() *WorkflowApplicationUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *WorkflowApplicationUpdate) SetName(v string) *WorkflowApplicationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableName(v *string) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowApplicationUpdate) SetDescription(v string) *WorkflowApplicationUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableDescription(v *string) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowApplicationUpdate) ClearDescription() *WorkflowApplicationUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetStartNodeID sets the "start_node_id" field.
func (_u *WorkflowApplicationUpdate) SetStartNodeID(v uint64) *WorkflowApplicationUpdate {
	_u.mutation.ResetStartNodeID()
	_u.mutation.SetStartNodeID(v)
	return _u
}

// SetNillableStartNodeID sets the "start_node_id" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableStartNodeID(v *uint64) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetStartNodeID(*v)
	}
	return _u
}

// AddStartNodeID adds value to the "start_node_id" field.
func (_u *WorkflowApplicationUpdate) AddStartNodeID(v int64) *WorkflowApplicationUpdate {
	_u.mutation.AddStartNodeID(v)
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *WorkflowApplicationUpdate) SetClientSecret(v string) *WorkflowApplicationUpdate {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableClientSecret(v *string) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetVariables sets the "variables" field.
func (_u *WorkflowApplicationUpdate) SetVariables(v map[string]interface{}) *WorkflowApplicationUpdate {
	_u.mutation.SetVariables(v)
	return _u
}

// ClearVariables clears the value of the "variables" field.
func (_u *WorkflowApplicationUpdate) ClearVariables() *WorkflowApplicationUpdate {
	_u.mutation.ClearVariables()
	return _u
}

// SetVersion sets the "version" field.
func (_u *WorkflowApplicationUpdate) SetVersion(v uint) *WorkflowApplicationUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableVersion(v *uint) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *WorkflowApplicationUpdate) AddVersion(v int) *WorkflowApplicationUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowApplicationUpdate) SetStatus(v workflowapplication.Status) *WorkflowApplicationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowApplicationUpdate) SetNillableStatus(v *workflowapplication.Status) *WorkflowApplicationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddNodeIDs adds the "nodes" edge to the WorkflowNode entity by IDs.
func (_u *WorkflowApplicationUpdate) AddNodeIDs(ids ...uint64) *WorkflowApplicationUpdate {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNodes adds the "nodes" edges to the WorkflowNode entity.
func (_u *WorkflowApplicationUpdate) AddNodes(v ...*WorkflowNode) *WorkflowApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (_u *WorkflowApplicationUpdate) AddExecutionIDs(ids ...uint64) *WorkflowApplicationUpdate {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (_u *WorkflowApplicationUpdate) AddExecutions(v ...*WorkflowExecution) *WorkflowApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowApplicationMutation object of the builder.
func (_u *WorkflowApplicationUpdate) Mutation() *WorkflowApplicationMutation {
	return _u.mutation
}

// ClearNodes clears all "nodes" edges to the WorkflowNode entity.
func (_u *WorkflowApplicationUpdate) ClearNodes() *WorkflowApplicationUpdate {
	_u.mutation.ClearNodes()
	return _u
}

// RemoveNodeIDs removes the "nodes" edge to WorkflowNode entities by IDs.
func (_u *WorkflowApplicationUpdate) RemoveNodeIDs(ids ...uint64) *WorkflowApplicationUpdate {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNodes removes "nodes" edges to WorkflowNode entities.
func (_u *WorkflowApplicationUpdate) RemoveNodes(v ...*WorkflowNode) *WorkflowApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (_u *WorkflowApplicationUpdate) ClearExecutions() *WorkflowApplicationUpdate {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (_u *WorkflowApplicationUpdate) RemoveExecutionIDs(ids ...uint64) *WorkflowApplicationUpdate {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (_u *WorkflowApplicationUpdate) RemoveExecutions(v ...*WorkflowExecution) *WorkflowApplicationUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowApplicationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowApplicationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowApplicationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowApplicationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowapplication.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowapplication.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowapplication.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowApplicationUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflowapplication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkflowApplication.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := workflowapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowApplication.status": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowApplicationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowapplication.Table, workflowapplication.Columns, sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowapplication.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowapplication.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowapplication.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflowapplication.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflowapplication.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflowapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflowapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflowapplication.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflowapplication.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflowapplication.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflowapplication.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.StartNodeID(); ok {
		_spec.SetField(workflowapplication.FieldStartNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStartNodeID(); ok {
		_spec.AddField(workflowapplication.FieldStartNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(workflowapplication.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.Variables(); ok {
		_spec.SetField(workflowapplication.FieldVariables, field.TypeJSON, value)
	}
	if _u.mutation.VariablesCleared() {
		_spec.ClearField(workflowapplication.FieldVariables, field.TypeJSON)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(workflowapplication.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(workflowapplication.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflowapplication.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodesIDs(); len(nodes) > 0 && !_u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowApplicationUpdateOne is the builder for updating a single WorkflowApplication entity.
type WorkflowApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowApplicationMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowApplicationUpdateOne) SetCreateBy(v uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowApplicationUpdateOne) AddCreateBy(v int64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowApplicationUpdateOne) ClearCreateBy() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowApplicationUpdateOne) SetUpdateTime(v time.Time) *WorkflowApplicationUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowApplicationUpdateOne) SetUpdateBy(v uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowApplicationUpdateOne) AddUpdateBy(v int64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowApplicationUpdateOne) ClearUpdateBy() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowApplicationUpdateOne) SetDeleteTime(v time.Time) *WorkflowApplicationUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableDeleteTime(v *time.Time) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowApplicationUpdateOne) ClearDeleteTime() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowApplicationUpdateOne) SetDeleteBy(v uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableDeleteBy(v *uint64) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowApplicationUpdateOne) AddDeleteBy(v int64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowApplicationUpdateOne) ClearDeleteBy() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *WorkflowApplicationUpdateOne) SetName(v string) *WorkflowApplicationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableName(v *string) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowApplicationUpdateOne) SetDescription(v string) *WorkflowApplicationUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableDescription(v *string) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowApplicationUpdateOne) ClearDescription() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetStartNodeID sets the "start_node_id" field.
func (_u *WorkflowApplicationUpdateOne) SetStartNodeID(v uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.ResetStartNodeID()
	_u.mutation.SetStartNodeID(v)
	return _u
}

// SetNillableStartNodeID sets the "start_node_id" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableStartNodeID(v *uint64) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetStartNodeID(*v)
	}
	return _u
}

// AddStartNodeID adds value to the "start_node_id" field.
func (_u *WorkflowApplicationUpdateOne) AddStartNodeID(v int64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddStartNodeID(v)
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *WorkflowApplicationUpdateOne) SetClientSecret(v string) *WorkflowApplicationUpdateOne {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableClientSecret(v *string) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetVariables sets the "variables" field.
func (_u *WorkflowApplicationUpdateOne) SetVariables(v map[string]interface{}) *WorkflowApplicationUpdateOne {
	_u.mutation.SetVariables(v)
	return _u
}

// ClearVariables clears the value of the "variables" field.
func (_u *WorkflowApplicationUpdateOne) ClearVariables() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearVariables()
	return _u
}

// SetVersion sets the "version" field.
func (_u *WorkflowApplicationUpdateOne) SetVersion(v uint) *WorkflowApplicationUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableVersion(v *uint) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *WorkflowApplicationUpdateOne) AddVersion(v int) *WorkflowApplicationUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowApplicationUpdateOne) SetStatus(v workflowapplication.Status) *WorkflowApplicationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowApplicationUpdateOne) SetNillableStatus(v *workflowapplication.Status) *WorkflowApplicationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddNodeIDs adds the "nodes" edge to the WorkflowNode entity by IDs.
func (_u *WorkflowApplicationUpdateOne) AddNodeIDs(ids ...uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNodes adds the "nodes" edges to the WorkflowNode entity.
func (_u *WorkflowApplicationUpdateOne) AddNodes(v ...*WorkflowNode) *WorkflowApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (_u *WorkflowApplicationUpdateOne) AddExecutionIDs(ids ...uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (_u *WorkflowApplicationUpdateOne) AddExecutions(v ...*WorkflowExecution) *WorkflowApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowApplicationMutation object of the builder.
func (_u *WorkflowApplicationUpdateOne) Mutation() *WorkflowApplicationMutation {
	return _u.mutation
}

// ClearNodes clears all "nodes" edges to the WorkflowNode entity.
func (_u *WorkflowApplicationUpdateOne) ClearNodes() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearNodes()
	return _u
}

// RemoveNodeIDs removes the "nodes" edge to WorkflowNode entities by IDs.
func (_u *WorkflowApplicationUpdateOne) RemoveNodeIDs(ids ...uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNodes removes "nodes" edges to WorkflowNode entities.
func (_u *WorkflowApplicationUpdateOne) RemoveNodes(v ...*WorkflowNode) *WorkflowApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (_u *WorkflowApplicationUpdateOne) ClearExecutions() *WorkflowApplicationUpdateOne {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (_u *WorkflowApplicationUpdateOne) RemoveExecutionIDs(ids ...uint64) *WorkflowApplicationUpdateOne {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (_u *WorkflowApplicationUpdateOne) RemoveExecutions(v ...*WorkflowExecution) *WorkflowApplicationUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the WorkflowApplicationUpdate builder.
func (_u *WorkflowApplicationUpdateOne) Where(ps ...predicate.WorkflowApplication) *WorkflowApplicationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowApplicationUpdateOne) Select(field string, fields ...string) *WorkflowApplicationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowApplication entity.
func (_u *WorkflowApplicationUpdateOne) Save(ctx context.Context) (*WorkflowApplication, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowApplicationUpdateOne) SaveX(ctx context.Context) *WorkflowApplication {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowApplicationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowapplication.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowapplication.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowapplication.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowApplicationUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflowapplication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkflowApplication.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := workflowapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowApplication.status": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowApplicationUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowApplication, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowapplication.Table, workflowapplication.Columns, sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowapplication.FieldID)
		for _, f := range fields {
			if !workflowapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowapplication.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowapplication.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowapplication.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowapplication.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowapplication.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflowapplication.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflowapplication.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflowapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflowapplication.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflowapplication.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflowapplication.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflowapplication.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflowapplication.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.StartNodeID(); ok {
		_spec.SetField(workflowapplication.FieldStartNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStartNodeID(); ok {
		_spec.AddField(workflowapplication.FieldStartNodeID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(workflowapplication.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.Variables(); ok {
		_spec.SetField(workflowapplication.FieldVariables, field.TypeJSON, value)
	}
	if _u.mutation.VariablesCleared() {
		_spec.ClearField(workflowapplication.FieldVariables, field.TypeJSON)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(workflowapplication.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(workflowapplication.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflowapplication.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodesIDs(); len(nodes) > 0 && !_u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.NodesTable,
			Columns: []string{workflowapplication.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowapplication.ExecutionsTable,
			Columns: []string{workflowapplication.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowApplication{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
