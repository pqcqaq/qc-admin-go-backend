// Code generated by ent, DO NOT EDIT.

package workflowexecutionlog

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldUpdateBy, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldExecutionID, v))
}

// NodeExecutionID applies equality check predicate on the "node_execution_id" field. It's identical to NodeExecutionIDEQ.
func NodeExecutionID(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldNodeExecutionID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldMessage, v))
}

// LoggedAt applies equality check predicate on the "logged_at" field. It's identical to LoggedAtEQ.
func LoggedAt(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldLoggedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotNull(FieldUpdateBy))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldExecutionID, vs...))
}

// ExecutionIDGT applies the GT predicate on the "execution_id" field.
func ExecutionIDGT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldExecutionID, v))
}

// ExecutionIDGTE applies the GTE predicate on the "execution_id" field.
func ExecutionIDGTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldExecutionID, v))
}

// ExecutionIDLT applies the LT predicate on the "execution_id" field.
func ExecutionIDLT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldExecutionID, v))
}

// ExecutionIDLTE applies the LTE predicate on the "execution_id" field.
func ExecutionIDLTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldExecutionID, v))
}

// NodeExecutionIDEQ applies the EQ predicate on the "node_execution_id" field.
func NodeExecutionIDEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldNodeExecutionID, v))
}

// NodeExecutionIDNEQ applies the NEQ predicate on the "node_execution_id" field.
func NodeExecutionIDNEQ(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldNodeExecutionID, v))
}

// NodeExecutionIDIn applies the In predicate on the "node_execution_id" field.
func NodeExecutionIDIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldNodeExecutionID, vs...))
}

// NodeExecutionIDNotIn applies the NotIn predicate on the "node_execution_id" field.
func NodeExecutionIDNotIn(vs ...uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldNodeExecutionID, vs...))
}

// NodeExecutionIDGT applies the GT predicate on the "node_execution_id" field.
func NodeExecutionIDGT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldNodeExecutionID, v))
}

// NodeExecutionIDGTE applies the GTE predicate on the "node_execution_id" field.
func NodeExecutionIDGTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldNodeExecutionID, v))
}

// NodeExecutionIDLT applies the LT predicate on the "node_execution_id" field.
func NodeExecutionIDLT(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldNodeExecutionID, v))
}

// NodeExecutionIDLTE applies the LTE predicate on the "node_execution_id" field.
func NodeExecutionIDLTE(v uint64) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldNodeExecutionID, v))
}

// NodeExecutionIDIsNil applies the IsNil predicate on the "node_execution_id" field.
func NodeExecutionIDIsNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIsNull(FieldNodeExecutionID))
}

// NodeExecutionIDNotNil applies the NotNil predicate on the "node_execution_id" field.
func NodeExecutionIDNotNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotNull(FieldNodeExecutionID))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v Level) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v Level) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...Level) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...Level) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldLevel, vs...))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldContainsFold(FieldMessage, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotNull(FieldMetadata))
}

// LoggedAtEQ applies the EQ predicate on the "logged_at" field.
func LoggedAtEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldEQ(FieldLoggedAt, v))
}

// LoggedAtNEQ applies the NEQ predicate on the "logged_at" field.
func LoggedAtNEQ(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNEQ(FieldLoggedAt, v))
}

// LoggedAtIn applies the In predicate on the "logged_at" field.
func LoggedAtIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldIn(FieldLoggedAt, vs...))
}

// LoggedAtNotIn applies the NotIn predicate on the "logged_at" field.
func LoggedAtNotIn(vs ...time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldNotIn(FieldLoggedAt, vs...))
}

// LoggedAtGT applies the GT predicate on the "logged_at" field.
func LoggedAtGT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGT(FieldLoggedAt, v))
}

// LoggedAtGTE applies the GTE predicate on the "logged_at" field.
func LoggedAtGTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldGTE(FieldLoggedAt, v))
}

// LoggedAtLT applies the LT predicate on the "logged_at" field.
func LoggedAtLT(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLT(FieldLoggedAt, v))
}

// LoggedAtLTE applies the LTE predicate on the "logged_at" field.
func LoggedAtLTE(v time.Time) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.FieldLTE(FieldLoggedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowExecutionLog) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowExecutionLog) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowExecutionLog) predicate.WorkflowExecutionLog {
	return predicate.WorkflowExecutionLog(sql.NotPredicates(p))
}
