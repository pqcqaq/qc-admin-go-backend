// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/verifycode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VerifyCodeUpdate is the builder for updating VerifyCode entities.
type VerifyCodeUpdate struct {
	config
	hooks    []Hook
	mutation *VerifyCodeMutation
}

// Where appends a list predicates to the VerifyCodeUpdate builder.
func (_u *VerifyCodeUpdate) Where(ps ...predicate.VerifyCode) *VerifyCodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *VerifyCodeUpdate) SetCreateBy(v int64) *VerifyCodeUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableCreateBy(v *int64) *VerifyCodeUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *VerifyCodeUpdate) AddCreateBy(v int64) *VerifyCodeUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *VerifyCodeUpdate) ClearCreateBy() *VerifyCodeUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *VerifyCodeUpdate) SetUpdateTime(v time.Time) *VerifyCodeUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *VerifyCodeUpdate) SetUpdateBy(v int64) *VerifyCodeUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableUpdateBy(v *int64) *VerifyCodeUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *VerifyCodeUpdate) AddUpdateBy(v int64) *VerifyCodeUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *VerifyCodeUpdate) ClearUpdateBy() *VerifyCodeUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *VerifyCodeUpdate) SetDeleteTime(v time.Time) *VerifyCodeUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableDeleteTime(v *time.Time) *VerifyCodeUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *VerifyCodeUpdate) ClearDeleteTime() *VerifyCodeUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *VerifyCodeUpdate) SetDeleteBy(v int64) *VerifyCodeUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableDeleteBy(v *int64) *VerifyCodeUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *VerifyCodeUpdate) AddDeleteBy(v int64) *VerifyCodeUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *VerifyCodeUpdate) ClearDeleteBy() *VerifyCodeUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetCode sets the "code" field.
func (_u *VerifyCodeUpdate) SetCode(v string) *VerifyCodeUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableCode(v *string) *VerifyCodeUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *VerifyCodeUpdate) SetIdentifier(v string) *VerifyCodeUpdate {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableIdentifier(v *string) *VerifyCodeUpdate {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetSenderType sets the "sender_type" field.
func (_u *VerifyCodeUpdate) SetSenderType(v verifycode.SenderType) *VerifyCodeUpdate {
	_u.mutation.SetSenderType(v)
	return _u
}

// SetNillableSenderType sets the "sender_type" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableSenderType(v *verifycode.SenderType) *VerifyCodeUpdate {
	if v != nil {
		_u.SetSenderType(*v)
	}
	return _u
}

// SetSendFor sets the "send_for" field.
func (_u *VerifyCodeUpdate) SetSendFor(v string) *VerifyCodeUpdate {
	_u.mutation.SetSendFor(v)
	return _u
}

// SetNillableSendFor sets the "send_for" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableSendFor(v *string) *VerifyCodeUpdate {
	if v != nil {
		_u.SetSendFor(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *VerifyCodeUpdate) SetExpiresAt(v time.Time) *VerifyCodeUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableExpiresAt(v *time.Time) *VerifyCodeUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *VerifyCodeUpdate) SetUsedAt(v time.Time) *VerifyCodeUpdate {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableUsedAt(v *time.Time) *VerifyCodeUpdate {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *VerifyCodeUpdate) ClearUsedAt() *VerifyCodeUpdate {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetSendSuccess sets the "send_success" field.
func (_u *VerifyCodeUpdate) SetSendSuccess(v bool) *VerifyCodeUpdate {
	_u.mutation.SetSendSuccess(v)
	return _u
}

// SetNillableSendSuccess sets the "send_success" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableSendSuccess(v *bool) *VerifyCodeUpdate {
	if v != nil {
		_u.SetSendSuccess(*v)
	}
	return _u
}

// SetSendAt sets the "send_at" field.
func (_u *VerifyCodeUpdate) SetSendAt(v time.Time) *VerifyCodeUpdate {
	_u.mutation.SetSendAt(v)
	return _u
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (_u *VerifyCodeUpdate) SetNillableSendAt(v *time.Time) *VerifyCodeUpdate {
	if v != nil {
		_u.SetSendAt(*v)
	}
	return _u
}

// ClearSendAt clears the value of the "send_at" field.
func (_u *VerifyCodeUpdate) ClearSendAt() *VerifyCodeUpdate {
	_u.mutation.ClearSendAt()
	return _u
}

// Mutation returns the VerifyCodeMutation object of the builder.
func (_u *VerifyCodeUpdate) Mutation() *VerifyCodeMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VerifyCodeUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VerifyCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VerifyCodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VerifyCodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VerifyCodeUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if verifycode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized verifycode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := verifycode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *VerifyCodeUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := verifycode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := verifycode.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SenderType(); ok {
		if err := verifycode.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.sender_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SendFor(); ok {
		if err := verifycode.SendForValidator(v); err != nil {
			return &ValidationError{Name: "send_for", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.send_for": %w`, err)}
		}
	}
	return nil
}

func (_u *VerifyCodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verifycode.Table, verifycode.Columns, sqlgraph.NewFieldSpec(verifycode.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(verifycode.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(verifycode.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(verifycode.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(verifycode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(verifycode.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(verifycode.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(verifycode.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(verifycode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(verifycode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(verifycode.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(verifycode.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(verifycode.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(verifycode.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(verifycode.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.SenderType(); ok {
		_spec.SetField(verifycode.FieldSenderType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SendFor(); ok {
		_spec.SetField(verifycode.FieldSendFor, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(verifycode.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(verifycode.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(verifycode.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.SendSuccess(); ok {
		_spec.SetField(verifycode.FieldSendSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SendAt(); ok {
		_spec.SetField(verifycode.FieldSendAt, field.TypeTime, value)
	}
	if _u.mutation.SendAtCleared() {
		_spec.ClearField(verifycode.FieldSendAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verifycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VerifyCodeUpdateOne is the builder for updating a single VerifyCode entity.
type VerifyCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerifyCodeMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *VerifyCodeUpdateOne) SetCreateBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableCreateBy(v *int64) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *VerifyCodeUpdateOne) AddCreateBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *VerifyCodeUpdateOne) ClearCreateBy() *VerifyCodeUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *VerifyCodeUpdateOne) SetUpdateTime(v time.Time) *VerifyCodeUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *VerifyCodeUpdateOne) SetUpdateBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableUpdateBy(v *int64) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *VerifyCodeUpdateOne) AddUpdateBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *VerifyCodeUpdateOne) ClearUpdateBy() *VerifyCodeUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *VerifyCodeUpdateOne) SetDeleteTime(v time.Time) *VerifyCodeUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableDeleteTime(v *time.Time) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *VerifyCodeUpdateOne) ClearDeleteTime() *VerifyCodeUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *VerifyCodeUpdateOne) SetDeleteBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableDeleteBy(v *int64) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *VerifyCodeUpdateOne) AddDeleteBy(v int64) *VerifyCodeUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *VerifyCodeUpdateOne) ClearDeleteBy() *VerifyCodeUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetCode sets the "code" field.
func (_u *VerifyCodeUpdateOne) SetCode(v string) *VerifyCodeUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableCode(v *string) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *VerifyCodeUpdateOne) SetIdentifier(v string) *VerifyCodeUpdateOne {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableIdentifier(v *string) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetSenderType sets the "sender_type" field.
func (_u *VerifyCodeUpdateOne) SetSenderType(v verifycode.SenderType) *VerifyCodeUpdateOne {
	_u.mutation.SetSenderType(v)
	return _u
}

// SetNillableSenderType sets the "sender_type" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableSenderType(v *verifycode.SenderType) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetSenderType(*v)
	}
	return _u
}

// SetSendFor sets the "send_for" field.
func (_u *VerifyCodeUpdateOne) SetSendFor(v string) *VerifyCodeUpdateOne {
	_u.mutation.SetSendFor(v)
	return _u
}

// SetNillableSendFor sets the "send_for" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableSendFor(v *string) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetSendFor(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *VerifyCodeUpdateOne) SetExpiresAt(v time.Time) *VerifyCodeUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableExpiresAt(v *time.Time) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *VerifyCodeUpdateOne) SetUsedAt(v time.Time) *VerifyCodeUpdateOne {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableUsedAt(v *time.Time) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *VerifyCodeUpdateOne) ClearUsedAt() *VerifyCodeUpdateOne {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetSendSuccess sets the "send_success" field.
func (_u *VerifyCodeUpdateOne) SetSendSuccess(v bool) *VerifyCodeUpdateOne {
	_u.mutation.SetSendSuccess(v)
	return _u
}

// SetNillableSendSuccess sets the "send_success" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableSendSuccess(v *bool) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetSendSuccess(*v)
	}
	return _u
}

// SetSendAt sets the "send_at" field.
func (_u *VerifyCodeUpdateOne) SetSendAt(v time.Time) *VerifyCodeUpdateOne {
	_u.mutation.SetSendAt(v)
	return _u
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (_u *VerifyCodeUpdateOne) SetNillableSendAt(v *time.Time) *VerifyCodeUpdateOne {
	if v != nil {
		_u.SetSendAt(*v)
	}
	return _u
}

// ClearSendAt clears the value of the "send_at" field.
func (_u *VerifyCodeUpdateOne) ClearSendAt() *VerifyCodeUpdateOne {
	_u.mutation.ClearSendAt()
	return _u
}

// Mutation returns the VerifyCodeMutation object of the builder.
func (_u *VerifyCodeUpdateOne) Mutation() *VerifyCodeMutation {
	return _u.mutation
}

// Where appends a list predicates to the VerifyCodeUpdate builder.
func (_u *VerifyCodeUpdateOne) Where(ps ...predicate.VerifyCode) *VerifyCodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VerifyCodeUpdateOne) Select(field string, fields ...string) *VerifyCodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated VerifyCode entity.
func (_u *VerifyCodeUpdateOne) Save(ctx context.Context) (*VerifyCode, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VerifyCodeUpdateOne) SaveX(ctx context.Context) *VerifyCode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VerifyCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VerifyCodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VerifyCodeUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if verifycode.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized verifycode.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := verifycode.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *VerifyCodeUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := verifycode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := verifycode.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SenderType(); ok {
		if err := verifycode.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.sender_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SendFor(); ok {
		if err := verifycode.SendForValidator(v); err != nil {
			return &ValidationError{Name: "send_for", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.send_for": %w`, err)}
		}
	}
	return nil
}

func (_u *VerifyCodeUpdateOne) sqlSave(ctx context.Context) (_node *VerifyCode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verifycode.Table, verifycode.Columns, sqlgraph.NewFieldSpec(verifycode.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VerifyCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verifycode.FieldID)
		for _, f := range fields {
			if !verifycode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verifycode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(verifycode.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(verifycode.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(verifycode.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(verifycode.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(verifycode.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(verifycode.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(verifycode.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(verifycode.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(verifycode.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(verifycode.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(verifycode.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(verifycode.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(verifycode.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(verifycode.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.SenderType(); ok {
		_spec.SetField(verifycode.FieldSenderType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SendFor(); ok {
		_spec.SetField(verifycode.FieldSendFor, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(verifycode.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(verifycode.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(verifycode.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.SendSuccess(); ok {
		_spec.SetField(verifycode.FieldSendSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SendAt(); ok {
		_spec.SetField(verifycode.FieldSendAt, field.TypeTime, value)
	}
	if _u.mutation.SendAtCleared() {
		_spec.ClearField(verifycode.FieldSendAt, field.TypeTime)
	}
	_node = &VerifyCode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verifycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
