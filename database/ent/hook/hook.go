// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"go-backend/database/ent"
)

// The APIAuthFunc type is an adapter to allow the use of ordinary
// function as APIAuth mutator.
type APIAuthFunc func(context.Context, *ent.APIAuthMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f APIAuthFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.APIAuthMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.APIAuthMutation", m)
}

// The AddressFunc type is an adapter to allow the use of ordinary
// function as Address mutator.
type AddressFunc func(context.Context, *ent.AddressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AddressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AddressMutation", m)
}

// The AreaFunc type is an adapter to allow the use of ordinary
// function as Area mutator.
type AreaFunc func(context.Context, *ent.AreaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AreaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AreaMutation", m)
}

// The AttachmentFunc type is an adapter to allow the use of ordinary
// function as Attachment mutator.
type AttachmentFunc func(context.Context, *ent.AttachmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AttachmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AttachmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AttachmentMutation", m)
}

// The ClientDeviceFunc type is an adapter to allow the use of ordinary
// function as ClientDevice mutator.
type ClientDeviceFunc func(context.Context, *ent.ClientDeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClientDeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ClientDeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClientDeviceMutation", m)
}

// The CredentialFunc type is an adapter to allow the use of ordinary
// function as Credential mutator.
type CredentialFunc func(context.Context, *ent.CredentialMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CredentialFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CredentialMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CredentialMutation", m)
}

// The LoggingFunc type is an adapter to allow the use of ordinary
// function as Logging mutator.
type LoggingFunc func(context.Context, *ent.LoggingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LoggingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LoggingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LoggingMutation", m)
}

// The LoginRecordFunc type is an adapter to allow the use of ordinary
// function as LoginRecord mutator.
type LoginRecordFunc func(context.Context, *ent.LoginRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LoginRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LoginRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LoginRecordMutation", m)
}

// The OauthApplicationFunc type is an adapter to allow the use of ordinary
// function as OauthApplication mutator.
type OauthApplicationFunc func(context.Context, *ent.OauthApplicationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthApplicationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthApplicationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthApplicationMutation", m)
}

// The OauthAuthorizationCodeFunc type is an adapter to allow the use of ordinary
// function as OauthAuthorizationCode mutator.
type OauthAuthorizationCodeFunc func(context.Context, *ent.OauthAuthorizationCodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthAuthorizationCodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthAuthorizationCodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthAuthorizationCodeMutation", m)
}

// The OauthProviderFunc type is an adapter to allow the use of ordinary
// function as OauthProvider mutator.
type OauthProviderFunc func(context.Context, *ent.OauthProviderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthProviderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthProviderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthProviderMutation", m)
}

// The OauthStateFunc type is an adapter to allow the use of ordinary
// function as OauthState mutator.
type OauthStateFunc func(context.Context, *ent.OauthStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthStateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthStateMutation", m)
}

// The OauthTokenFunc type is an adapter to allow the use of ordinary
// function as OauthToken mutator.
type OauthTokenFunc func(context.Context, *ent.OauthTokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthTokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthTokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthTokenMutation", m)
}

// The OauthUserFunc type is an adapter to allow the use of ordinary
// function as OauthUser mutator.
type OauthUserFunc func(context.Context, *ent.OauthUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthUserMutation", m)
}

// The OauthUserAuthorizationFunc type is an adapter to allow the use of ordinary
// function as OauthUserAuthorization mutator.
type OauthUserAuthorizationFunc func(context.Context, *ent.OauthUserAuthorizationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OauthUserAuthorizationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OauthUserAuthorizationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OauthUserAuthorizationMutation", m)
}

// The PermissionFunc type is an adapter to allow the use of ordinary
// function as Permission mutator.
type PermissionFunc func(context.Context, *ent.PermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
}

// The RolePermissionFunc type is an adapter to allow the use of ordinary
// function as RolePermission mutator.
type RolePermissionFunc func(context.Context, *ent.RolePermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RolePermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RolePermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RolePermissionMutation", m)
}

// The ScanFunc type is an adapter to allow the use of ordinary
// function as Scan mutator.
type ScanFunc func(context.Context, *ent.ScanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScanMutation", m)
}

// The ScopeFunc type is an adapter to allow the use of ordinary
// function as Scope mutator.
type ScopeFunc func(context.Context, *ent.ScopeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScopeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScopeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScopeMutation", m)
}

// The StationFunc type is an adapter to allow the use of ordinary
// function as Station mutator.
type StationFunc func(context.Context, *ent.StationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StationMutation", m)
}

// The SubwayFunc type is an adapter to allow the use of ordinary
// function as Subway mutator.
type SubwayFunc func(context.Context, *ent.SubwayMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubwayFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubwayMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubwayMutation", m)
}

// The SubwayStationFunc type is an adapter to allow the use of ordinary
// function as SubwayStation mutator.
type SubwayStationFunc func(context.Context, *ent.SubwayStationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubwayStationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubwayStationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubwayStationMutation", m)
}

// The SystemMonitorFunc type is an adapter to allow the use of ordinary
// function as SystemMonitor mutator.
type SystemMonitorFunc func(context.Context, *ent.SystemMonitorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemMonitorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemMonitorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemMonitorMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The UserRoleFunc type is an adapter to allow the use of ordinary
// function as UserRole mutator.
type UserRoleFunc func(context.Context, *ent.UserRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserRoleMutation", m)
}

// The VerifyCodeFunc type is an adapter to allow the use of ordinary
// function as VerifyCode mutator.
type VerifyCodeFunc func(context.Context, *ent.VerifyCodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VerifyCodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VerifyCodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VerifyCodeMutation", m)
}

// The WorkflowApplicationFunc type is an adapter to allow the use of ordinary
// function as WorkflowApplication mutator.
type WorkflowApplicationFunc func(context.Context, *ent.WorkflowApplicationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowApplicationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowApplicationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowApplicationMutation", m)
}

// The WorkflowEdgeFunc type is an adapter to allow the use of ordinary
// function as WorkflowEdge mutator.
type WorkflowEdgeFunc func(context.Context, *ent.WorkflowEdgeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowEdgeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowEdgeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowEdgeMutation", m)
}

// The WorkflowExecutionFunc type is an adapter to allow the use of ordinary
// function as WorkflowExecution mutator.
type WorkflowExecutionFunc func(context.Context, *ent.WorkflowExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowExecutionMutation", m)
}

// The WorkflowExecutionLogFunc type is an adapter to allow the use of ordinary
// function as WorkflowExecutionLog mutator.
type WorkflowExecutionLogFunc func(context.Context, *ent.WorkflowExecutionLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowExecutionLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowExecutionLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowExecutionLogMutation", m)
}

// The WorkflowNodeFunc type is an adapter to allow the use of ordinary
// function as WorkflowNode mutator.
type WorkflowNodeFunc func(context.Context, *ent.WorkflowNodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowNodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowNodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowNodeMutation", m)
}

// The WorkflowNodeExecutionFunc type is an adapter to allow the use of ordinary
// function as WorkflowNodeExecution mutator.
type WorkflowNodeExecutionFunc func(context.Context, *ent.WorkflowNodeExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowNodeExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowNodeExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowNodeExecutionMutation", m)
}

// The WorkflowVersionFunc type is an adapter to allow the use of ordinary
// function as WorkflowVersion mutator.
type WorkflowVersionFunc func(context.Context, *ent.WorkflowVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowVersionMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
