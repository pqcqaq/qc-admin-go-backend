// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/verifycode"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VerifyCodeCreate is the builder for creating a VerifyCode entity.
type VerifyCodeCreate struct {
	config
	mutation *VerifyCodeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *VerifyCodeCreate) SetCreateTime(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableCreateTime(v *time.Time) *VerifyCodeCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *VerifyCodeCreate) SetCreateBy(v uint64) *VerifyCodeCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableCreateBy(v *uint64) *VerifyCodeCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *VerifyCodeCreate) SetUpdateTime(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableUpdateTime(v *time.Time) *VerifyCodeCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *VerifyCodeCreate) SetUpdateBy(v uint64) *VerifyCodeCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableUpdateBy(v *uint64) *VerifyCodeCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *VerifyCodeCreate) SetDeleteTime(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableDeleteTime(v *time.Time) *VerifyCodeCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *VerifyCodeCreate) SetDeleteBy(v uint64) *VerifyCodeCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableDeleteBy(v *uint64) *VerifyCodeCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *VerifyCodeCreate) SetCode(v string) *VerifyCodeCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetIdentifier sets the "identifier" field.
func (_c *VerifyCodeCreate) SetIdentifier(v string) *VerifyCodeCreate {
	_c.mutation.SetIdentifier(v)
	return _c
}

// SetSenderType sets the "sender_type" field.
func (_c *VerifyCodeCreate) SetSenderType(v verifycode.SenderType) *VerifyCodeCreate {
	_c.mutation.SetSenderType(v)
	return _c
}

// SetSendFor sets the "send_for" field.
func (_c *VerifyCodeCreate) SetSendFor(v string) *VerifyCodeCreate {
	_c.mutation.SetSendFor(v)
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *VerifyCodeCreate) SetExpiresAt(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetUsedAt sets the "used_at" field.
func (_c *VerifyCodeCreate) SetUsedAt(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetUsedAt(v)
	return _c
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableUsedAt(v *time.Time) *VerifyCodeCreate {
	if v != nil {
		_c.SetUsedAt(*v)
	}
	return _c
}

// SetSendSuccess sets the "send_success" field.
func (_c *VerifyCodeCreate) SetSendSuccess(v bool) *VerifyCodeCreate {
	_c.mutation.SetSendSuccess(v)
	return _c
}

// SetNillableSendSuccess sets the "send_success" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableSendSuccess(v *bool) *VerifyCodeCreate {
	if v != nil {
		_c.SetSendSuccess(*v)
	}
	return _c
}

// SetSendAt sets the "send_at" field.
func (_c *VerifyCodeCreate) SetSendAt(v time.Time) *VerifyCodeCreate {
	_c.mutation.SetSendAt(v)
	return _c
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableSendAt(v *time.Time) *VerifyCodeCreate {
	if v != nil {
		_c.SetSendAt(*v)
	}
	return _c
}

// SetClientID sets the "client_id" field.
func (_c *VerifyCodeCreate) SetClientID(v uint64) *VerifyCodeCreate {
	_c.mutation.SetClientID(v)
	return _c
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_c *VerifyCodeCreate) SetNillableClientID(v *uint64) *VerifyCodeCreate {
	if v != nil {
		_c.SetClientID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *VerifyCodeCreate) SetID(v uint64) *VerifyCodeCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the VerifyCodeMutation object of the builder.
func (_c *VerifyCodeCreate) Mutation() *VerifyCodeMutation {
	return _c.mutation
}

// Save creates the VerifyCode in the database.
func (_c *VerifyCodeCreate) Save(ctx context.Context) (*VerifyCode, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VerifyCodeCreate) SaveX(ctx context.Context) *VerifyCode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VerifyCodeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VerifyCodeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VerifyCodeCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if verifycode.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized verifycode.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := verifycode.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if verifycode.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized verifycode.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := verifycode.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.SendSuccess(); !ok {
		v := verifycode.DefaultSendSuccess
		_c.mutation.SetSendSuccess(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *VerifyCodeCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "VerifyCode.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "VerifyCode.update_time"`)}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "VerifyCode.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := verifycode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "VerifyCode.identifier"`)}
	}
	if v, ok := _c.mutation.Identifier(); ok {
		if err := verifycode.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.identifier": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SenderType(); !ok {
		return &ValidationError{Name: "sender_type", err: errors.New(`ent: missing required field "VerifyCode.sender_type"`)}
	}
	if v, ok := _c.mutation.SenderType(); ok {
		if err := verifycode.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "sender_type", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.sender_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SendFor(); !ok {
		return &ValidationError{Name: "send_for", err: errors.New(`ent: missing required field "VerifyCode.send_for"`)}
	}
	if v, ok := _c.mutation.SendFor(); ok {
		if err := verifycode.SendForValidator(v); err != nil {
			return &ValidationError{Name: "send_for", err: fmt.Errorf(`ent: validator failed for field "VerifyCode.send_for": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "VerifyCode.expires_at"`)}
	}
	if _, ok := _c.mutation.SendSuccess(); !ok {
		return &ValidationError{Name: "send_success", err: errors.New(`ent: missing required field "VerifyCode.send_success"`)}
	}
	return nil
}

func (_c *VerifyCodeCreate) sqlSave(ctx context.Context) (*VerifyCode, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VerifyCodeCreate) createSpec() (*VerifyCode, *sqlgraph.CreateSpec) {
	var (
		_node = &VerifyCode{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(verifycode.Table, sqlgraph.NewFieldSpec(verifycode.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(verifycode.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(verifycode.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(verifycode.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(verifycode.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(verifycode.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(verifycode.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(verifycode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Identifier(); ok {
		_spec.SetField(verifycode.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := _c.mutation.SenderType(); ok {
		_spec.SetField(verifycode.FieldSenderType, field.TypeEnum, value)
		_node.SenderType = value
	}
	if value, ok := _c.mutation.SendFor(); ok {
		_spec.SetField(verifycode.FieldSendFor, field.TypeString, value)
		_node.SendFor = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(verifycode.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.UsedAt(); ok {
		_spec.SetField(verifycode.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if value, ok := _c.mutation.SendSuccess(); ok {
		_spec.SetField(verifycode.FieldSendSuccess, field.TypeBool, value)
		_node.SendSuccess = value
	}
	if value, ok := _c.mutation.SendAt(); ok {
		_spec.SetField(verifycode.FieldSendAt, field.TypeTime, value)
		_node.SendAt = &value
	}
	if value, ok := _c.mutation.ClientID(); ok {
		_spec.SetField(verifycode.FieldClientID, field.TypeUint64, value)
		_node.ClientID = &value
	}
	return _node, _spec
}

// VerifyCodeCreateBulk is the builder for creating many VerifyCode entities in bulk.
type VerifyCodeCreateBulk struct {
	config
	err      error
	builders []*VerifyCodeCreate
}

// Save creates the VerifyCode entities in the database.
func (_c *VerifyCodeCreateBulk) Save(ctx context.Context) ([]*VerifyCode, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*VerifyCode, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VerifyCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VerifyCodeCreateBulk) SaveX(ctx context.Context) []*VerifyCode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VerifyCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VerifyCodeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
