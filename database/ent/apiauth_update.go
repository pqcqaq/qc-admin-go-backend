// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/apiauth"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APIAuthUpdate is the builder for updating APIAuth entities.
type APIAuthUpdate struct {
	config
	hooks    []Hook
	mutation *APIAuthMutation
}

// Where appends a list predicates to the APIAuthUpdate builder.
func (_u *APIAuthUpdate) Where(ps ...predicate.APIAuth) *APIAuthUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *APIAuthUpdate) SetCreateBy(v uint64) *APIAuthUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableCreateBy(v *uint64) *APIAuthUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *APIAuthUpdate) AddCreateBy(v int64) *APIAuthUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *APIAuthUpdate) ClearCreateBy() *APIAuthUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *APIAuthUpdate) SetUpdateTime(v time.Time) *APIAuthUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *APIAuthUpdate) SetUpdateBy(v uint64) *APIAuthUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableUpdateBy(v *uint64) *APIAuthUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *APIAuthUpdate) AddUpdateBy(v int64) *APIAuthUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *APIAuthUpdate) ClearUpdateBy() *APIAuthUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *APIAuthUpdate) SetDeleteTime(v time.Time) *APIAuthUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableDeleteTime(v *time.Time) *APIAuthUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *APIAuthUpdate) ClearDeleteTime() *APIAuthUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *APIAuthUpdate) SetDeleteBy(v uint64) *APIAuthUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableDeleteBy(v *uint64) *APIAuthUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *APIAuthUpdate) AddDeleteBy(v int64) *APIAuthUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *APIAuthUpdate) ClearDeleteBy() *APIAuthUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *APIAuthUpdate) SetName(v string) *APIAuthUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableName(v *string) *APIAuthUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *APIAuthUpdate) SetDescription(v string) *APIAuthUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableDescription(v *string) *APIAuthUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *APIAuthUpdate) ClearDescription() *APIAuthUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetMethod sets the "method" field.
func (_u *APIAuthUpdate) SetMethod(v string) *APIAuthUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableMethod(v *string) *APIAuthUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *APIAuthUpdate) SetPath(v string) *APIAuthUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillablePath(v *string) *APIAuthUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *APIAuthUpdate) SetIsPublic(v bool) *APIAuthUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableIsPublic(v *bool) *APIAuthUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *APIAuthUpdate) SetIsActive(v bool) *APIAuthUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableIsActive(v *bool) *APIAuthUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *APIAuthUpdate) SetType(v apiauth.Type) *APIAuthUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *APIAuthUpdate) SetNillableType(v *apiauth.Type) *APIAuthUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *APIAuthUpdate) SetMetadata(v map[string]interface{}) *APIAuthUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *APIAuthUpdate) ClearMetadata() *APIAuthUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_u *APIAuthUpdate) AddPermissionIDs(ids ...uint64) *APIAuthUpdate {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_u *APIAuthUpdate) AddPermissions(v ...*Permission) *APIAuthUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// Mutation returns the APIAuthMutation object of the builder.
func (_u *APIAuthUpdate) Mutation() *APIAuthMutation {
	return _u.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (_u *APIAuthUpdate) ClearPermissions() *APIAuthUpdate {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (_u *APIAuthUpdate) RemovePermissionIDs(ids ...uint64) *APIAuthUpdate {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (_u *APIAuthUpdate) RemovePermissions(v ...*Permission) *APIAuthUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *APIAuthUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *APIAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *APIAuthUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *APIAuthUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *APIAuthUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if apiauth.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized apiauth.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := apiauth.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *APIAuthUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := apiauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "APIAuth.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := apiauth.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "APIAuth.method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := apiauth.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "APIAuth.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := apiauth.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "APIAuth.type": %w`, err)}
		}
	}
	return nil
}

func (_u *APIAuthUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiauth.Table, apiauth.Columns, sqlgraph.NewFieldSpec(apiauth.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(apiauth.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(apiauth.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(apiauth.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(apiauth.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(apiauth.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(apiauth.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(apiauth.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(apiauth.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(apiauth.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(apiauth.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(apiauth.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(apiauth.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(apiauth.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(apiauth.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(apiauth.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(apiauth.FieldMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(apiauth.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(apiauth.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(apiauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(apiauth.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(apiauth.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(apiauth.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// APIAuthUpdateOne is the builder for updating a single APIAuth entity.
type APIAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APIAuthMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *APIAuthUpdateOne) SetCreateBy(v uint64) *APIAuthUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableCreateBy(v *uint64) *APIAuthUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *APIAuthUpdateOne) AddCreateBy(v int64) *APIAuthUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *APIAuthUpdateOne) ClearCreateBy() *APIAuthUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *APIAuthUpdateOne) SetUpdateTime(v time.Time) *APIAuthUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *APIAuthUpdateOne) SetUpdateBy(v uint64) *APIAuthUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableUpdateBy(v *uint64) *APIAuthUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *APIAuthUpdateOne) AddUpdateBy(v int64) *APIAuthUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *APIAuthUpdateOne) ClearUpdateBy() *APIAuthUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *APIAuthUpdateOne) SetDeleteTime(v time.Time) *APIAuthUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableDeleteTime(v *time.Time) *APIAuthUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *APIAuthUpdateOne) ClearDeleteTime() *APIAuthUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *APIAuthUpdateOne) SetDeleteBy(v uint64) *APIAuthUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableDeleteBy(v *uint64) *APIAuthUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *APIAuthUpdateOne) AddDeleteBy(v int64) *APIAuthUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *APIAuthUpdateOne) ClearDeleteBy() *APIAuthUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *APIAuthUpdateOne) SetName(v string) *APIAuthUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableName(v *string) *APIAuthUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *APIAuthUpdateOne) SetDescription(v string) *APIAuthUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableDescription(v *string) *APIAuthUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *APIAuthUpdateOne) ClearDescription() *APIAuthUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetMethod sets the "method" field.
func (_u *APIAuthUpdateOne) SetMethod(v string) *APIAuthUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableMethod(v *string) *APIAuthUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *APIAuthUpdateOne) SetPath(v string) *APIAuthUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillablePath(v *string) *APIAuthUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *APIAuthUpdateOne) SetIsPublic(v bool) *APIAuthUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableIsPublic(v *bool) *APIAuthUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *APIAuthUpdateOne) SetIsActive(v bool) *APIAuthUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableIsActive(v *bool) *APIAuthUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *APIAuthUpdateOne) SetType(v apiauth.Type) *APIAuthUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *APIAuthUpdateOne) SetNillableType(v *apiauth.Type) *APIAuthUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *APIAuthUpdateOne) SetMetadata(v map[string]interface{}) *APIAuthUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *APIAuthUpdateOne) ClearMetadata() *APIAuthUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_u *APIAuthUpdateOne) AddPermissionIDs(ids ...uint64) *APIAuthUpdateOne {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_u *APIAuthUpdateOne) AddPermissions(v ...*Permission) *APIAuthUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// Mutation returns the APIAuthMutation object of the builder.
func (_u *APIAuthUpdateOne) Mutation() *APIAuthMutation {
	return _u.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (_u *APIAuthUpdateOne) ClearPermissions() *APIAuthUpdateOne {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (_u *APIAuthUpdateOne) RemovePermissionIDs(ids ...uint64) *APIAuthUpdateOne {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (_u *APIAuthUpdateOne) RemovePermissions(v ...*Permission) *APIAuthUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// Where appends a list predicates to the APIAuthUpdate builder.
func (_u *APIAuthUpdateOne) Where(ps ...predicate.APIAuth) *APIAuthUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *APIAuthUpdateOne) Select(field string, fields ...string) *APIAuthUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated APIAuth entity.
func (_u *APIAuthUpdateOne) Save(ctx context.Context) (*APIAuth, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *APIAuthUpdateOne) SaveX(ctx context.Context) *APIAuth {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *APIAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *APIAuthUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *APIAuthUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if apiauth.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized apiauth.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := apiauth.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *APIAuthUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := apiauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "APIAuth.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := apiauth.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "APIAuth.method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := apiauth.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "APIAuth.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := apiauth.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "APIAuth.type": %w`, err)}
		}
	}
	return nil
}

func (_u *APIAuthUpdateOne) sqlSave(ctx context.Context) (_node *APIAuth, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apiauth.Table, apiauth.Columns, sqlgraph.NewFieldSpec(apiauth.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APIAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiauth.FieldID)
		for _, f := range fields {
			if !apiauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(apiauth.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(apiauth.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(apiauth.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(apiauth.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(apiauth.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(apiauth.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(apiauth.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(apiauth.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(apiauth.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(apiauth.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(apiauth.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(apiauth.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(apiauth.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(apiauth.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(apiauth.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(apiauth.FieldMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(apiauth.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(apiauth.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(apiauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(apiauth.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(apiauth.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(apiauth.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APIAuth{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
