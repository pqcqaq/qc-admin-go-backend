// Code generated by ent, DO NOT EDIT.

package workflowedge

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldDeleteBy, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldApplicationID, v))
}

// SourceNodeID applies equality check predicate on the "source_node_id" field. It's identical to SourceNodeIDEQ.
func SourceNodeID(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldSourceNodeID, v))
}

// TargetNodeID applies equality check predicate on the "target_node_id" field. It's identical to TargetNodeIDEQ.
func TargetNodeID(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldTargetNodeID, v))
}

// SourceHandle applies equality check predicate on the "source_handle" field. It's identical to SourceHandleEQ.
func SourceHandle(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldSourceHandle, v))
}

// TargetHandle applies equality check predicate on the "target_handle" field. It's identical to TargetHandleEQ.
func TargetHandle(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldTargetHandle, v))
}

// BranchName applies equality check predicate on the "branch_name" field. It's identical to BranchNameEQ.
func BranchName(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldBranchName, v))
}

// Animated applies equality check predicate on the "animated" field. It's identical to AnimatedEQ.
func Animated(v bool) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldAnimated, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldDeleteBy))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldApplicationID, vs...))
}

// SourceNodeIDEQ applies the EQ predicate on the "source_node_id" field.
func SourceNodeIDEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldSourceNodeID, v))
}

// SourceNodeIDNEQ applies the NEQ predicate on the "source_node_id" field.
func SourceNodeIDNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldSourceNodeID, v))
}

// SourceNodeIDIn applies the In predicate on the "source_node_id" field.
func SourceNodeIDIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldSourceNodeID, vs...))
}

// SourceNodeIDNotIn applies the NotIn predicate on the "source_node_id" field.
func SourceNodeIDNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldSourceNodeID, vs...))
}

// TargetNodeIDEQ applies the EQ predicate on the "target_node_id" field.
func TargetNodeIDEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldTargetNodeID, v))
}

// TargetNodeIDNEQ applies the NEQ predicate on the "target_node_id" field.
func TargetNodeIDNEQ(v uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldTargetNodeID, v))
}

// TargetNodeIDIn applies the In predicate on the "target_node_id" field.
func TargetNodeIDIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldTargetNodeID, vs...))
}

// TargetNodeIDNotIn applies the NotIn predicate on the "target_node_id" field.
func TargetNodeIDNotIn(vs ...uint64) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldTargetNodeID, vs...))
}

// SourceHandleEQ applies the EQ predicate on the "source_handle" field.
func SourceHandleEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldSourceHandle, v))
}

// SourceHandleNEQ applies the NEQ predicate on the "source_handle" field.
func SourceHandleNEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldSourceHandle, v))
}

// SourceHandleIn applies the In predicate on the "source_handle" field.
func SourceHandleIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldSourceHandle, vs...))
}

// SourceHandleNotIn applies the NotIn predicate on the "source_handle" field.
func SourceHandleNotIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldSourceHandle, vs...))
}

// SourceHandleGT applies the GT predicate on the "source_handle" field.
func SourceHandleGT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldSourceHandle, v))
}

// SourceHandleGTE applies the GTE predicate on the "source_handle" field.
func SourceHandleGTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldSourceHandle, v))
}

// SourceHandleLT applies the LT predicate on the "source_handle" field.
func SourceHandleLT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldSourceHandle, v))
}

// SourceHandleLTE applies the LTE predicate on the "source_handle" field.
func SourceHandleLTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldSourceHandle, v))
}

// SourceHandleContains applies the Contains predicate on the "source_handle" field.
func SourceHandleContains(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContains(FieldSourceHandle, v))
}

// SourceHandleHasPrefix applies the HasPrefix predicate on the "source_handle" field.
func SourceHandleHasPrefix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasPrefix(FieldSourceHandle, v))
}

// SourceHandleHasSuffix applies the HasSuffix predicate on the "source_handle" field.
func SourceHandleHasSuffix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasSuffix(FieldSourceHandle, v))
}

// SourceHandleIsNil applies the IsNil predicate on the "source_handle" field.
func SourceHandleIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldSourceHandle))
}

// SourceHandleNotNil applies the NotNil predicate on the "source_handle" field.
func SourceHandleNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldSourceHandle))
}

// SourceHandleEqualFold applies the EqualFold predicate on the "source_handle" field.
func SourceHandleEqualFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEqualFold(FieldSourceHandle, v))
}

// SourceHandleContainsFold applies the ContainsFold predicate on the "source_handle" field.
func SourceHandleContainsFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContainsFold(FieldSourceHandle, v))
}

// TargetHandleEQ applies the EQ predicate on the "target_handle" field.
func TargetHandleEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldTargetHandle, v))
}

// TargetHandleNEQ applies the NEQ predicate on the "target_handle" field.
func TargetHandleNEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldTargetHandle, v))
}

// TargetHandleIn applies the In predicate on the "target_handle" field.
func TargetHandleIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldTargetHandle, vs...))
}

// TargetHandleNotIn applies the NotIn predicate on the "target_handle" field.
func TargetHandleNotIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldTargetHandle, vs...))
}

// TargetHandleGT applies the GT predicate on the "target_handle" field.
func TargetHandleGT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldTargetHandle, v))
}

// TargetHandleGTE applies the GTE predicate on the "target_handle" field.
func TargetHandleGTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldTargetHandle, v))
}

// TargetHandleLT applies the LT predicate on the "target_handle" field.
func TargetHandleLT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldTargetHandle, v))
}

// TargetHandleLTE applies the LTE predicate on the "target_handle" field.
func TargetHandleLTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldTargetHandle, v))
}

// TargetHandleContains applies the Contains predicate on the "target_handle" field.
func TargetHandleContains(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContains(FieldTargetHandle, v))
}

// TargetHandleHasPrefix applies the HasPrefix predicate on the "target_handle" field.
func TargetHandleHasPrefix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasPrefix(FieldTargetHandle, v))
}

// TargetHandleHasSuffix applies the HasSuffix predicate on the "target_handle" field.
func TargetHandleHasSuffix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasSuffix(FieldTargetHandle, v))
}

// TargetHandleIsNil applies the IsNil predicate on the "target_handle" field.
func TargetHandleIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldTargetHandle))
}

// TargetHandleNotNil applies the NotNil predicate on the "target_handle" field.
func TargetHandleNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldTargetHandle))
}

// TargetHandleEqualFold applies the EqualFold predicate on the "target_handle" field.
func TargetHandleEqualFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEqualFold(FieldTargetHandle, v))
}

// TargetHandleContainsFold applies the ContainsFold predicate on the "target_handle" field.
func TargetHandleContainsFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContainsFold(FieldTargetHandle, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldType, vs...))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContainsFold(FieldLabel, v))
}

// BranchNameEQ applies the EQ predicate on the "branch_name" field.
func BranchNameEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldBranchName, v))
}

// BranchNameNEQ applies the NEQ predicate on the "branch_name" field.
func BranchNameNEQ(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldBranchName, v))
}

// BranchNameIn applies the In predicate on the "branch_name" field.
func BranchNameIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIn(FieldBranchName, vs...))
}

// BranchNameNotIn applies the NotIn predicate on the "branch_name" field.
func BranchNameNotIn(vs ...string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotIn(FieldBranchName, vs...))
}

// BranchNameGT applies the GT predicate on the "branch_name" field.
func BranchNameGT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGT(FieldBranchName, v))
}

// BranchNameGTE applies the GTE predicate on the "branch_name" field.
func BranchNameGTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldGTE(FieldBranchName, v))
}

// BranchNameLT applies the LT predicate on the "branch_name" field.
func BranchNameLT(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLT(FieldBranchName, v))
}

// BranchNameLTE applies the LTE predicate on the "branch_name" field.
func BranchNameLTE(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldLTE(FieldBranchName, v))
}

// BranchNameContains applies the Contains predicate on the "branch_name" field.
func BranchNameContains(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContains(FieldBranchName, v))
}

// BranchNameHasPrefix applies the HasPrefix predicate on the "branch_name" field.
func BranchNameHasPrefix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasPrefix(FieldBranchName, v))
}

// BranchNameHasSuffix applies the HasSuffix predicate on the "branch_name" field.
func BranchNameHasSuffix(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldHasSuffix(FieldBranchName, v))
}

// BranchNameIsNil applies the IsNil predicate on the "branch_name" field.
func BranchNameIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldBranchName))
}

// BranchNameNotNil applies the NotNil predicate on the "branch_name" field.
func BranchNameNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldBranchName))
}

// BranchNameEqualFold applies the EqualFold predicate on the "branch_name" field.
func BranchNameEqualFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEqualFold(FieldBranchName, v))
}

// BranchNameContainsFold applies the ContainsFold predicate on the "branch_name" field.
func BranchNameContainsFold(v string) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldContainsFold(FieldBranchName, v))
}

// AnimatedEQ applies the EQ predicate on the "animated" field.
func AnimatedEQ(v bool) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldEQ(FieldAnimated, v))
}

// AnimatedNEQ applies the NEQ predicate on the "animated" field.
func AnimatedNEQ(v bool) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNEQ(FieldAnimated, v))
}

// StyleIsNil applies the IsNil predicate on the "style" field.
func StyleIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldStyle))
}

// StyleNotNil applies the NotNil predicate on the "style" field.
func StyleNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldStyle))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.FieldNotNull(FieldData))
}

// HasApplication applies the HasEdge predicate on the "application" edge.
func HasApplication() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationWith applies the HasEdge predicate on the "application" edge with a given conditions (other predicates).
func HasApplicationWith(preds ...predicate.WorkflowApplication) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := newApplicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceNode applies the HasEdge predicate on the "source_node" edge.
func HasSourceNode() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceNodeTable, SourceNodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceNodeWith applies the HasEdge predicate on the "source_node" edge with a given conditions (other predicates).
func HasSourceNodeWith(preds ...predicate.WorkflowNode) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := newSourceNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetNode applies the HasEdge predicate on the "target_node" edge.
func HasTargetNode() predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargetNodeTable, TargetNodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetNodeWith applies the HasEdge predicate on the "target_node" edge with a given conditions (other predicates).
func HasTargetNodeWith(preds ...predicate.WorkflowNode) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(func(s *sql.Selector) {
		step := newTargetNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowEdge) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowEdge) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowEdge) predicate.WorkflowEdge {
	return predicate.WorkflowEdge(sql.NotPredicates(p))
}
