// Code generated by ent, DO NOT EDIT.

package workflowedge

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflowedge type in the database.
	Label = "workflow_edge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldEdgeKey holds the string denoting the edge_key field in the database.
	FieldEdgeKey = "edge_key"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldSourceNodeID holds the string denoting the source_node_id field in the database.
	FieldSourceNodeID = "source_node_id"
	// FieldTargetNodeID holds the string denoting the target_node_id field in the database.
	FieldTargetNodeID = "target_node_id"
	// FieldSourceHandle holds the string denoting the source_handle field in the database.
	FieldSourceHandle = "source_handle"
	// FieldTargetHandle holds the string denoting the target_handle field in the database.
	FieldTargetHandle = "target_handle"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldBranchName holds the string denoting the branch_name field in the database.
	FieldBranchName = "branch_name"
	// FieldAnimated holds the string denoting the animated field in the database.
	FieldAnimated = "animated"
	// FieldStyle holds the string denoting the style field in the database.
	FieldStyle = "style"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// EdgeSourceNode holds the string denoting the source_node edge name in mutations.
	EdgeSourceNode = "source_node"
	// EdgeTargetNode holds the string denoting the target_node edge name in mutations.
	EdgeTargetNode = "target_node"
	// Table holds the table name of the workflowedge in the database.
	Table = "workflow_edges"
	// ApplicationTable is the table that holds the application relation/edge.
	ApplicationTable = "workflow_edges"
	// ApplicationInverseTable is the table name for the WorkflowApplication entity.
	// It exists in this package in order to avoid circular dependency with the "workflowapplication" package.
	ApplicationInverseTable = "workflow_applications"
	// ApplicationColumn is the table column denoting the application relation/edge.
	ApplicationColumn = "application_id"
	// SourceNodeTable is the table that holds the source_node relation/edge.
	SourceNodeTable = "workflow_edges"
	// SourceNodeInverseTable is the table name for the WorkflowNode entity.
	// It exists in this package in order to avoid circular dependency with the "workflownode" package.
	SourceNodeInverseTable = "workflow_nodes"
	// SourceNodeColumn is the table column denoting the source_node relation/edge.
	SourceNodeColumn = "source_node_id"
	// TargetNodeTable is the table that holds the target_node relation/edge.
	TargetNodeTable = "workflow_edges"
	// TargetNodeInverseTable is the table name for the WorkflowNode entity.
	// It exists in this package in order to avoid circular dependency with the "workflownode" package.
	TargetNodeInverseTable = "workflow_nodes"
	// TargetNodeColumn is the table column denoting the target_node relation/edge.
	TargetNodeColumn = "target_node_id"
)

// Columns holds all SQL columns for workflowedge fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldEdgeKey,
	FieldApplicationID,
	FieldSourceNodeID,
	FieldTargetNodeID,
	FieldSourceHandle,
	FieldTargetHandle,
	FieldType,
	FieldLabel,
	FieldBranchName,
	FieldAnimated,
	FieldStyle,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// EdgeKeyValidator is a validator for the "edge_key" field. It is called by the builders before save.
	EdgeKeyValidator func(string) error
	// DefaultAnimated holds the default value on creation for the "animated" field.
	DefaultAnimated bool
)

// Type defines the type for the "type" enum field.
type Type string

// TypeDefault is the default value of the Type enum.
const DefaultType = TypeDefault

// Type values.
const (
	TypeDefault  Type = "default"
	TypeBranch   Type = "branch"
	TypeParallel Type = "parallel"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDefault, TypeBranch, TypeParallel:
		return nil
	default:
		return fmt.Errorf("workflowedge: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the WorkflowEdge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByEdgeKey orders the results by the edge_key field.
func ByEdgeKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEdgeKey, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// BySourceNodeID orders the results by the source_node_id field.
func BySourceNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceNodeID, opts...).ToFunc()
}

// ByTargetNodeID orders the results by the target_node_id field.
func ByTargetNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetNodeID, opts...).ToFunc()
}

// BySourceHandle orders the results by the source_handle field.
func BySourceHandle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceHandle, opts...).ToFunc()
}

// ByTargetHandle orders the results by the target_handle field.
func ByTargetHandle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetHandle, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByBranchName orders the results by the branch_name field.
func ByBranchName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchName, opts...).ToFunc()
}

// ByAnimated orders the results by the animated field.
func ByAnimated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnimated, opts...).ToFunc()
}

// ByApplicationField orders the results by application field.
func ByApplicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceNodeField orders the results by source_node field.
func BySourceNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceNodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetNodeField orders the results by target_node field.
func ByTargetNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetNodeStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
	)
}
func newSourceNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceNodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SourceNodeTable, SourceNodeColumn),
	)
}
func newTargetNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetNodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TargetNodeTable, TargetNodeColumn),
	)
}
