// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowexecutionlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowExecutionLog is the model entity for the WorkflowExecutionLog schema.
type WorkflowExecutionLog struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 工作流执行ID
	ExecutionID uint64 `json:"execution_id,omitempty"`
	// 节点执行ID
	NodeExecutionID uint64 `json:"node_execution_id,omitempty"`
	// 日志级别
	Level workflowexecutionlog.Level `json:"level,omitempty"`
	// 日志消息
	Message string `json:"message,omitempty"`
	// 元数据
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// 记录时间
	LoggedAt     time.Time `json:"logged_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowExecutionLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowexecutionlog.FieldMetadata:
			values[i] = new([]byte)
		case workflowexecutionlog.FieldID, workflowexecutionlog.FieldCreateBy, workflowexecutionlog.FieldUpdateBy, workflowexecutionlog.FieldExecutionID, workflowexecutionlog.FieldNodeExecutionID:
			values[i] = new(sql.NullInt64)
		case workflowexecutionlog.FieldLevel, workflowexecutionlog.FieldMessage:
			values[i] = new(sql.NullString)
		case workflowexecutionlog.FieldCreateTime, workflowexecutionlog.FieldUpdateTime, workflowexecutionlog.FieldLoggedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowExecutionLog fields.
func (_m *WorkflowExecutionLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowexecutionlog.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflowexecutionlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflowexecutionlog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflowexecutionlog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflowexecutionlog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflowexecutionlog.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				_m.ExecutionID = uint64(value.Int64)
			}
		case workflowexecutionlog.FieldNodeExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field node_execution_id", values[i])
			} else if value.Valid {
				_m.NodeExecutionID = uint64(value.Int64)
			}
		case workflowexecutionlog.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				_m.Level = workflowexecutionlog.Level(value.String)
			}
		case workflowexecutionlog.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case workflowexecutionlog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case workflowexecutionlog.FieldLoggedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field logged_at", values[i])
			} else if value.Valid {
				_m.LoggedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowExecutionLog.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowExecutionLog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this WorkflowExecutionLog.
// Note that you need to call WorkflowExecutionLog.Unwrap() before calling this method if this WorkflowExecutionLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowExecutionLog) Update() *WorkflowExecutionLogUpdateOne {
	return NewWorkflowExecutionLogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowExecutionLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowExecutionLog) Unwrap() *WorkflowExecutionLog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowExecutionLog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowExecutionLog) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowExecutionLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExecutionID))
	builder.WriteString(", ")
	builder.WriteString("node_execution_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NodeExecutionID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", _m.Level))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("logged_at=")
	builder.WriteString(_m.LoggedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowExecutionLogs is a parsable slice of WorkflowExecutionLog.
type WorkflowExecutionLogs []*WorkflowExecutionLog
