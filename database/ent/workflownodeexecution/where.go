// Code generated by ent, DO NOT EDIT.

package workflownodeexecution

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldUpdateBy, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldExecutionID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeID, v))
}

// NodeName applies equality check predicate on the "node_name" field. It's identical to NodeNameEQ.
func NodeName(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeName, v))
}

// NodeType applies equality check predicate on the "node_type" field. It's identical to NodeTypeEQ.
func NodeType(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeType, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldFinishedAt, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldDurationMs, v))
}

// PromptTokens applies equality check predicate on the "prompt_tokens" field. It's identical to PromptTokensEQ.
func PromptTokens(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldPromptTokens, v))
}

// CompletionTokens applies equality check predicate on the "completion_tokens" field. It's identical to CompletionTokensEQ.
func CompletionTokens(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCompletionTokens, v))
}

// TotalTokens applies equality check predicate on the "total_tokens" field. It's identical to TotalTokensEQ.
func TotalTokens(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldTotalTokens, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCost, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldModel, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorStack applies equality check predicate on the "error_stack" field. It's identical to ErrorStackEQ.
func ErrorStack(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldErrorStack, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldRetryCount, v))
}

// IsAsync applies equality check predicate on the "is_async" field. It's identical to IsAsyncEQ.
func IsAsync(v bool) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldIsAsync, v))
}

// ParentExecutionID applies equality check predicate on the "parent_execution_id" field. It's identical to ParentExecutionIDEQ.
func ParentExecutionID(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldParentExecutionID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldUpdateBy))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldExecutionID, vs...))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeNameEQ applies the EQ predicate on the "node_name" field.
func NodeNameEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeName, v))
}

// NodeNameNEQ applies the NEQ predicate on the "node_name" field.
func NodeNameNEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldNodeName, v))
}

// NodeNameIn applies the In predicate on the "node_name" field.
func NodeNameIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldNodeName, vs...))
}

// NodeNameNotIn applies the NotIn predicate on the "node_name" field.
func NodeNameNotIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldNodeName, vs...))
}

// NodeNameGT applies the GT predicate on the "node_name" field.
func NodeNameGT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldNodeName, v))
}

// NodeNameGTE applies the GTE predicate on the "node_name" field.
func NodeNameGTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldNodeName, v))
}

// NodeNameLT applies the LT predicate on the "node_name" field.
func NodeNameLT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldNodeName, v))
}

// NodeNameLTE applies the LTE predicate on the "node_name" field.
func NodeNameLTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldNodeName, v))
}

// NodeNameContains applies the Contains predicate on the "node_name" field.
func NodeNameContains(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContains(FieldNodeName, v))
}

// NodeNameHasPrefix applies the HasPrefix predicate on the "node_name" field.
func NodeNameHasPrefix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasPrefix(FieldNodeName, v))
}

// NodeNameHasSuffix applies the HasSuffix predicate on the "node_name" field.
func NodeNameHasSuffix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasSuffix(FieldNodeName, v))
}

// NodeNameEqualFold applies the EqualFold predicate on the "node_name" field.
func NodeNameEqualFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEqualFold(FieldNodeName, v))
}

// NodeNameContainsFold applies the ContainsFold predicate on the "node_name" field.
func NodeNameContainsFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContainsFold(FieldNodeName, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldNodeType, vs...))
}

// NodeTypeGT applies the GT predicate on the "node_type" field.
func NodeTypeGT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldNodeType, v))
}

// NodeTypeGTE applies the GTE predicate on the "node_type" field.
func NodeTypeGTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldNodeType, v))
}

// NodeTypeLT applies the LT predicate on the "node_type" field.
func NodeTypeLT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldNodeType, v))
}

// NodeTypeLTE applies the LTE predicate on the "node_type" field.
func NodeTypeLTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldNodeType, v))
}

// NodeTypeContains applies the Contains predicate on the "node_type" field.
func NodeTypeContains(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContains(FieldNodeType, v))
}

// NodeTypeHasPrefix applies the HasPrefix predicate on the "node_type" field.
func NodeTypeHasPrefix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasPrefix(FieldNodeType, v))
}

// NodeTypeHasSuffix applies the HasSuffix predicate on the "node_type" field.
func NodeTypeHasSuffix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasSuffix(FieldNodeType, v))
}

// NodeTypeEqualFold applies the EqualFold predicate on the "node_type" field.
func NodeTypeEqualFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEqualFold(FieldNodeType, v))
}

// NodeTypeContainsFold applies the ContainsFold predicate on the "node_type" field.
func NodeTypeContainsFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContainsFold(FieldNodeType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// InputIsNil applies the IsNil predicate on the "input" field.
func InputIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldInput))
}

// InputNotNil applies the NotNil predicate on the "input" field.
func InputNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldInput))
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldOutput))
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldOutput))
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldExtra))
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldExtra))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldFinishedAt))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldDurationMs, v))
}

// PromptTokensEQ applies the EQ predicate on the "prompt_tokens" field.
func PromptTokensEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldPromptTokens, v))
}

// PromptTokensNEQ applies the NEQ predicate on the "prompt_tokens" field.
func PromptTokensNEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldPromptTokens, v))
}

// PromptTokensIn applies the In predicate on the "prompt_tokens" field.
func PromptTokensIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldPromptTokens, vs...))
}

// PromptTokensNotIn applies the NotIn predicate on the "prompt_tokens" field.
func PromptTokensNotIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldPromptTokens, vs...))
}

// PromptTokensGT applies the GT predicate on the "prompt_tokens" field.
func PromptTokensGT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldPromptTokens, v))
}

// PromptTokensGTE applies the GTE predicate on the "prompt_tokens" field.
func PromptTokensGTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldPromptTokens, v))
}

// PromptTokensLT applies the LT predicate on the "prompt_tokens" field.
func PromptTokensLT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldPromptTokens, v))
}

// PromptTokensLTE applies the LTE predicate on the "prompt_tokens" field.
func PromptTokensLTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldPromptTokens, v))
}

// CompletionTokensEQ applies the EQ predicate on the "completion_tokens" field.
func CompletionTokensEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCompletionTokens, v))
}

// CompletionTokensNEQ applies the NEQ predicate on the "completion_tokens" field.
func CompletionTokensNEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldCompletionTokens, v))
}

// CompletionTokensIn applies the In predicate on the "completion_tokens" field.
func CompletionTokensIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldCompletionTokens, vs...))
}

// CompletionTokensNotIn applies the NotIn predicate on the "completion_tokens" field.
func CompletionTokensNotIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldCompletionTokens, vs...))
}

// CompletionTokensGT applies the GT predicate on the "completion_tokens" field.
func CompletionTokensGT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldCompletionTokens, v))
}

// CompletionTokensGTE applies the GTE predicate on the "completion_tokens" field.
func CompletionTokensGTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldCompletionTokens, v))
}

// CompletionTokensLT applies the LT predicate on the "completion_tokens" field.
func CompletionTokensLT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldCompletionTokens, v))
}

// CompletionTokensLTE applies the LTE predicate on the "completion_tokens" field.
func CompletionTokensLTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldCompletionTokens, v))
}

// TotalTokensEQ applies the EQ predicate on the "total_tokens" field.
func TotalTokensEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldTotalTokens, v))
}

// TotalTokensNEQ applies the NEQ predicate on the "total_tokens" field.
func TotalTokensNEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldTotalTokens, v))
}

// TotalTokensIn applies the In predicate on the "total_tokens" field.
func TotalTokensIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldTotalTokens, vs...))
}

// TotalTokensNotIn applies the NotIn predicate on the "total_tokens" field.
func TotalTokensNotIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldTotalTokens, vs...))
}

// TotalTokensGT applies the GT predicate on the "total_tokens" field.
func TotalTokensGT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldTotalTokens, v))
}

// TotalTokensGTE applies the GTE predicate on the "total_tokens" field.
func TotalTokensGTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldTotalTokens, v))
}

// TotalTokensLT applies the LT predicate on the "total_tokens" field.
func TotalTokensLT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldTotalTokens, v))
}

// TotalTokensLTE applies the LTE predicate on the "total_tokens" field.
func TotalTokensLTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldTotalTokens, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldCost, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContainsFold(FieldModel, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContainsFold(FieldErrorMessage, v))
}

// ErrorStackEQ applies the EQ predicate on the "error_stack" field.
func ErrorStackEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldErrorStack, v))
}

// ErrorStackNEQ applies the NEQ predicate on the "error_stack" field.
func ErrorStackNEQ(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldErrorStack, v))
}

// ErrorStackIn applies the In predicate on the "error_stack" field.
func ErrorStackIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldErrorStack, vs...))
}

// ErrorStackNotIn applies the NotIn predicate on the "error_stack" field.
func ErrorStackNotIn(vs ...string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldErrorStack, vs...))
}

// ErrorStackGT applies the GT predicate on the "error_stack" field.
func ErrorStackGT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldErrorStack, v))
}

// ErrorStackGTE applies the GTE predicate on the "error_stack" field.
func ErrorStackGTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldErrorStack, v))
}

// ErrorStackLT applies the LT predicate on the "error_stack" field.
func ErrorStackLT(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldErrorStack, v))
}

// ErrorStackLTE applies the LTE predicate on the "error_stack" field.
func ErrorStackLTE(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldErrorStack, v))
}

// ErrorStackContains applies the Contains predicate on the "error_stack" field.
func ErrorStackContains(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContains(FieldErrorStack, v))
}

// ErrorStackHasPrefix applies the HasPrefix predicate on the "error_stack" field.
func ErrorStackHasPrefix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasPrefix(FieldErrorStack, v))
}

// ErrorStackHasSuffix applies the HasSuffix predicate on the "error_stack" field.
func ErrorStackHasSuffix(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldHasSuffix(FieldErrorStack, v))
}

// ErrorStackIsNil applies the IsNil predicate on the "error_stack" field.
func ErrorStackIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldErrorStack))
}

// ErrorStackNotNil applies the NotNil predicate on the "error_stack" field.
func ErrorStackNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldErrorStack))
}

// ErrorStackEqualFold applies the EqualFold predicate on the "error_stack" field.
func ErrorStackEqualFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEqualFold(FieldErrorStack, v))
}

// ErrorStackContainsFold applies the ContainsFold predicate on the "error_stack" field.
func ErrorStackContainsFold(v string) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldContainsFold(FieldErrorStack, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldRetryCount, v))
}

// IsAsyncEQ applies the EQ predicate on the "is_async" field.
func IsAsyncEQ(v bool) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldIsAsync, v))
}

// IsAsyncNEQ applies the NEQ predicate on the "is_async" field.
func IsAsyncNEQ(v bool) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldIsAsync, v))
}

// ParentExecutionIDEQ applies the EQ predicate on the "parent_execution_id" field.
func ParentExecutionIDEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldEQ(FieldParentExecutionID, v))
}

// ParentExecutionIDNEQ applies the NEQ predicate on the "parent_execution_id" field.
func ParentExecutionIDNEQ(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNEQ(FieldParentExecutionID, v))
}

// ParentExecutionIDIn applies the In predicate on the "parent_execution_id" field.
func ParentExecutionIDIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIn(FieldParentExecutionID, vs...))
}

// ParentExecutionIDNotIn applies the NotIn predicate on the "parent_execution_id" field.
func ParentExecutionIDNotIn(vs ...uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotIn(FieldParentExecutionID, vs...))
}

// ParentExecutionIDGT applies the GT predicate on the "parent_execution_id" field.
func ParentExecutionIDGT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGT(FieldParentExecutionID, v))
}

// ParentExecutionIDGTE applies the GTE predicate on the "parent_execution_id" field.
func ParentExecutionIDGTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldGTE(FieldParentExecutionID, v))
}

// ParentExecutionIDLT applies the LT predicate on the "parent_execution_id" field.
func ParentExecutionIDLT(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLT(FieldParentExecutionID, v))
}

// ParentExecutionIDLTE applies the LTE predicate on the "parent_execution_id" field.
func ParentExecutionIDLTE(v uint64) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldLTE(FieldParentExecutionID, v))
}

// ParentExecutionIDIsNil applies the IsNil predicate on the "parent_execution_id" field.
func ParentExecutionIDIsNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldIsNull(FieldParentExecutionID))
}

// ParentExecutionIDNotNil applies the NotNil predicate on the "parent_execution_id" field.
func ParentExecutionIDNotNil() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.FieldNotNull(FieldParentExecutionID))
}

// HasWorkflowExecution applies the HasEdge predicate on the "workflow_execution" edge.
func HasWorkflowExecution() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowExecutionWith applies the HasEdge predicate on the "workflow_execution" edge with a given conditions (other predicates).
func HasWorkflowExecutionWith(preds ...predicate.WorkflowExecution) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(func(s *sql.Selector) {
		step := newWorkflowExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.WorkflowNode) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowNodeExecution) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowNodeExecution) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowNodeExecution) predicate.WorkflowNodeExecution {
	return predicate.WorkflowNodeExecution(sql.NotPredicates(p))
}
