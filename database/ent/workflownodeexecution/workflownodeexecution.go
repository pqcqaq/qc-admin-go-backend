// Code generated by ent, DO NOT EDIT.

package workflownodeexecution

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflownodeexecution type in the database.
	Label = "workflow_node_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldNodeID holds the string denoting the node_id field in the database.
	FieldNodeID = "node_id"
	// FieldNodeName holds the string denoting the node_name field in the database.
	FieldNodeName = "node_name"
	// FieldNodeType holds the string denoting the node_type field in the database.
	FieldNodeType = "node_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldPromptTokens holds the string denoting the prompt_tokens field in the database.
	FieldPromptTokens = "prompt_tokens"
	// FieldCompletionTokens holds the string denoting the completion_tokens field in the database.
	FieldCompletionTokens = "completion_tokens"
	// FieldTotalTokens holds the string denoting the total_tokens field in the database.
	FieldTotalTokens = "total_tokens"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldErrorStack holds the string denoting the error_stack field in the database.
	FieldErrorStack = "error_stack"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldIsAsync holds the string denoting the is_async field in the database.
	FieldIsAsync = "is_async"
	// FieldParentExecutionID holds the string denoting the parent_execution_id field in the database.
	FieldParentExecutionID = "parent_execution_id"
	// EdgeWorkflowExecution holds the string denoting the workflow_execution edge name in mutations.
	EdgeWorkflowExecution = "workflow_execution"
	// EdgeNode holds the string denoting the node edge name in mutations.
	EdgeNode = "node"
	// Table holds the table name of the workflownodeexecution in the database.
	Table = "workflow_node_executions"
	// WorkflowExecutionTable is the table that holds the workflow_execution relation/edge.
	WorkflowExecutionTable = "workflow_node_executions"
	// WorkflowExecutionInverseTable is the table name for the WorkflowExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflowexecution" package.
	WorkflowExecutionInverseTable = "workflow_executions"
	// WorkflowExecutionColumn is the table column denoting the workflow_execution relation/edge.
	WorkflowExecutionColumn = "execution_id"
	// NodeTable is the table that holds the node relation/edge.
	NodeTable = "workflow_node_executions"
	// NodeInverseTable is the table name for the WorkflowNode entity.
	// It exists in this package in order to avoid circular dependency with the "workflownode" package.
	NodeInverseTable = "workflow_nodes"
	// NodeColumn is the table column denoting the node relation/edge.
	NodeColumn = "node_id"
)

// Columns holds all SQL columns for workflownodeexecution fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldExecutionID,
	FieldNodeID,
	FieldNodeName,
	FieldNodeType,
	FieldStatus,
	FieldInput,
	FieldOutput,
	FieldExtra,
	FieldStartedAt,
	FieldFinishedAt,
	FieldDurationMs,
	FieldPromptTokens,
	FieldCompletionTokens,
	FieldTotalTokens,
	FieldCost,
	FieldModel,
	FieldErrorMessage,
	FieldErrorStack,
	FieldRetryCount,
	FieldIsAsync,
	FieldParentExecutionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultDurationMs holds the default value on creation for the "duration_ms" field.
	DefaultDurationMs int
	// DefaultPromptTokens holds the default value on creation for the "prompt_tokens" field.
	DefaultPromptTokens int
	// DefaultCompletionTokens holds the default value on creation for the "completion_tokens" field.
	DefaultCompletionTokens int
	// DefaultTotalTokens holds the default value on creation for the "total_tokens" field.
	DefaultTotalTokens int
	// DefaultCost holds the default value on creation for the "cost" field.
	DefaultCost float64
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
	// DefaultIsAsync holds the default value on creation for the "is_async" field.
	DefaultIsAsync bool
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
	StatusSkipped   Status = "skipped"
	StatusTimeout   Status = "timeout"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusCompleted, StatusFailed, StatusSkipped, StatusTimeout:
		return nil
	default:
		return fmt.Errorf("workflownodeexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the WorkflowNodeExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByNodeID orders the results by the node_id field.
func ByNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeID, opts...).ToFunc()
}

// ByNodeName orders the results by the node_name field.
func ByNodeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeName, opts...).ToFunc()
}

// ByNodeType orders the results by the node_type field.
func ByNodeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByPromptTokens orders the results by the prompt_tokens field.
func ByPromptTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptTokens, opts...).ToFunc()
}

// ByCompletionTokens orders the results by the completion_tokens field.
func ByCompletionTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionTokens, opts...).ToFunc()
}

// ByTotalTokens orders the results by the total_tokens field.
func ByTotalTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTokens, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByErrorStack orders the results by the error_stack field.
func ByErrorStack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorStack, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByIsAsync orders the results by the is_async field.
func ByIsAsync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAsync, opts...).ToFunc()
}

// ByParentExecutionID orders the results by the parent_execution_id field.
func ByParentExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentExecutionID, opts...).ToFunc()
}

// ByWorkflowExecutionField orders the results by workflow_execution field.
func ByWorkflowExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowExecutionStep(), sql.OrderByField(field, opts...))
	}
}

// ByNodeField orders the results by node field.
func ByNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkflowExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
	)
}
func newNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
	)
}
