// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OauthUserAuthorizationUpdate is the builder for updating OauthUserAuthorization entities.
type OauthUserAuthorizationUpdate struct {
	config
	hooks    []Hook
	mutation *OauthUserAuthorizationMutation
}

// Where appends a list predicates to the OauthUserAuthorizationUpdate builder.
func (_u *OauthUserAuthorizationUpdate) Where(ps ...predicate.OauthUserAuthorization) *OauthUserAuthorizationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthUserAuthorizationUpdate) SetCreateBy(v uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableCreateBy(v *uint64) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthUserAuthorizationUpdate) AddCreateBy(v int64) *OauthUserAuthorizationUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthUserAuthorizationUpdate) ClearCreateBy() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthUserAuthorizationUpdate) SetUpdateTime(v time.Time) *OauthUserAuthorizationUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthUserAuthorizationUpdate) SetUpdateBy(v uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableUpdateBy(v *uint64) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthUserAuthorizationUpdate) AddUpdateBy(v int64) *OauthUserAuthorizationUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthUserAuthorizationUpdate) ClearUpdateBy() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthUserAuthorizationUpdate) SetDeleteTime(v time.Time) *OauthUserAuthorizationUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableDeleteTime(v *time.Time) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthUserAuthorizationUpdate) ClearDeleteTime() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthUserAuthorizationUpdate) SetDeleteBy(v uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableDeleteBy(v *uint64) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthUserAuthorizationUpdate) AddDeleteBy(v int64) *OauthUserAuthorizationUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthUserAuthorizationUpdate) ClearDeleteBy() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthUserAuthorizationUpdate) SetUserID(v uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableUserID(v *uint64) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthUserAuthorizationUpdate) SetApplicationID(v uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableApplicationID(v *uint64) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetAuthorizedAt sets the "authorized_at" field.
func (_u *OauthUserAuthorizationUpdate) SetAuthorizedAt(v time.Time) *OauthUserAuthorizationUpdate {
	_u.mutation.SetAuthorizedAt(v)
	return _u
}

// SetNillableAuthorizedAt sets the "authorized_at" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableAuthorizedAt(v *time.Time) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetAuthorizedAt(*v)
	}
	return _u
}

// SetUsageState sets the "usage_state" field.
func (_u *OauthUserAuthorizationUpdate) SetUsageState(v oauthuserauthorization.UsageState) *OauthUserAuthorizationUpdate {
	_u.mutation.SetUsageState(v)
	return _u
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableUsageState(v *oauthuserauthorization.UsageState) *OauthUserAuthorizationUpdate {
	if v != nil {
		_u.SetUsageState(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthUserAuthorizationUpdate) SetScope(v []string) *OauthUserAuthorizationUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthUserAuthorizationUpdate) AppendScope(v []string) *OauthUserAuthorizationUpdate {
	_u.mutation.AppendScope(v)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthUserAuthorizationUpdate) SetUser(v *User) *OauthUserAuthorizationUpdate {
	return _u.SetUserID(v.ID)
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthUserAuthorizationUpdate) SetApplication(v *OauthApplication) *OauthUserAuthorizationUpdate {
	return _u.SetApplicationID(v.ID)
}

// SetCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID.
func (_u *OauthUserAuthorizationUpdate) SetCodeID(id uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.SetCodeID(id)
	return _u
}

// SetNillableCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableCodeID(id *uint64) *OauthUserAuthorizationUpdate {
	if id != nil {
		_u = _u.SetCodeID(*id)
	}
	return _u
}

// SetCode sets the "code" edge to the OauthAuthorizationCode entity.
func (_u *OauthUserAuthorizationUpdate) SetCode(v *OauthAuthorizationCode) *OauthUserAuthorizationUpdate {
	return _u.SetCodeID(v.ID)
}

// SetTokenID sets the "token" edge to the OauthToken entity by ID.
func (_u *OauthUserAuthorizationUpdate) SetTokenID(id uint64) *OauthUserAuthorizationUpdate {
	_u.mutation.SetTokenID(id)
	return _u
}

// SetNillableTokenID sets the "token" edge to the OauthToken entity by ID if the given value is not nil.
func (_u *OauthUserAuthorizationUpdate) SetNillableTokenID(id *uint64) *OauthUserAuthorizationUpdate {
	if id != nil {
		_u = _u.SetTokenID(*id)
	}
	return _u
}

// SetToken sets the "token" edge to the OauthToken entity.
func (_u *OauthUserAuthorizationUpdate) SetToken(v *OauthToken) *OauthUserAuthorizationUpdate {
	return _u.SetTokenID(v.ID)
}

// Mutation returns the OauthUserAuthorizationMutation object of the builder.
func (_u *OauthUserAuthorizationUpdate) Mutation() *OauthUserAuthorizationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthUserAuthorizationUpdate) ClearUser() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthUserAuthorizationUpdate) ClearApplication() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearCode clears the "code" edge to the OauthAuthorizationCode entity.
func (_u *OauthUserAuthorizationUpdate) ClearCode() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearCode()
	return _u
}

// ClearToken clears the "token" edge to the OauthToken entity.
func (_u *OauthUserAuthorizationUpdate) ClearToken() *OauthUserAuthorizationUpdate {
	_u.mutation.ClearToken()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthUserAuthorizationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthUserAuthorizationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthUserAuthorizationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthUserAuthorizationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthUserAuthorizationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthuserauthorization.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuserauthorization.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuserauthorization.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthUserAuthorizationUpdate) check() error {
	if v, ok := _u.mutation.UsageState(); ok {
		if err := oauthuserauthorization.UsageStateValidator(v); err != nil {
			return &ValidationError{Name: "usage_state", err: fmt.Errorf(`ent: validator failed for field "OauthUserAuthorization.usage_state": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUserAuthorization.user"`)
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUserAuthorization.application"`)
	}
	return nil
}

func (_u *OauthUserAuthorizationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuserauthorization.Table, oauthuserauthorization.Columns, sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthuserauthorization.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.AuthorizedAt(); ok {
		_spec.SetField(oauthuserauthorization.FieldAuthorizedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsageState(); ok {
		_spec.SetField(oauthuserauthorization.FieldUsageState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthuserauthorization.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthuserauthorization.FieldScope, value)
		})
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuserauthorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthUserAuthorizationUpdateOne is the builder for updating a single OauthUserAuthorization entity.
type OauthUserAuthorizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthUserAuthorizationMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthUserAuthorizationUpdateOne) SetCreateBy(v uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableCreateBy(v *uint64) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthUserAuthorizationUpdateOne) AddCreateBy(v int64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthUserAuthorizationUpdateOne) ClearCreateBy() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthUserAuthorizationUpdateOne) SetUpdateTime(v time.Time) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthUserAuthorizationUpdateOne) SetUpdateBy(v uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableUpdateBy(v *uint64) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthUserAuthorizationUpdateOne) AddUpdateBy(v int64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthUserAuthorizationUpdateOne) ClearUpdateBy() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthUserAuthorizationUpdateOne) SetDeleteTime(v time.Time) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthUserAuthorizationUpdateOne) ClearDeleteTime() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthUserAuthorizationUpdateOne) SetDeleteBy(v uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableDeleteBy(v *uint64) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthUserAuthorizationUpdateOne) AddDeleteBy(v int64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthUserAuthorizationUpdateOne) ClearDeleteBy() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthUserAuthorizationUpdateOne) SetUserID(v uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableUserID(v *uint64) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthUserAuthorizationUpdateOne) SetApplicationID(v uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableApplicationID(v *uint64) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetAuthorizedAt sets the "authorized_at" field.
func (_u *OauthUserAuthorizationUpdateOne) SetAuthorizedAt(v time.Time) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetAuthorizedAt(v)
	return _u
}

// SetNillableAuthorizedAt sets the "authorized_at" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableAuthorizedAt(v *time.Time) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetAuthorizedAt(*v)
	}
	return _u
}

// SetUsageState sets the "usage_state" field.
func (_u *OauthUserAuthorizationUpdateOne) SetUsageState(v oauthuserauthorization.UsageState) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetUsageState(v)
	return _u
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableUsageState(v *oauthuserauthorization.UsageState) *OauthUserAuthorizationUpdateOne {
	if v != nil {
		_u.SetUsageState(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthUserAuthorizationUpdateOne) SetScope(v []string) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthUserAuthorizationUpdateOne) AppendScope(v []string) *OauthUserAuthorizationUpdateOne {
	_u.mutation.AppendScope(v)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthUserAuthorizationUpdateOne) SetUser(v *User) *OauthUserAuthorizationUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthUserAuthorizationUpdateOne) SetApplication(v *OauthApplication) *OauthUserAuthorizationUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// SetCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID.
func (_u *OauthUserAuthorizationUpdateOne) SetCodeID(id uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetCodeID(id)
	return _u
}

// SetNillableCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableCodeID(id *uint64) *OauthUserAuthorizationUpdateOne {
	if id != nil {
		_u = _u.SetCodeID(*id)
	}
	return _u
}

// SetCode sets the "code" edge to the OauthAuthorizationCode entity.
func (_u *OauthUserAuthorizationUpdateOne) SetCode(v *OauthAuthorizationCode) *OauthUserAuthorizationUpdateOne {
	return _u.SetCodeID(v.ID)
}

// SetTokenID sets the "token" edge to the OauthToken entity by ID.
func (_u *OauthUserAuthorizationUpdateOne) SetTokenID(id uint64) *OauthUserAuthorizationUpdateOne {
	_u.mutation.SetTokenID(id)
	return _u
}

// SetNillableTokenID sets the "token" edge to the OauthToken entity by ID if the given value is not nil.
func (_u *OauthUserAuthorizationUpdateOne) SetNillableTokenID(id *uint64) *OauthUserAuthorizationUpdateOne {
	if id != nil {
		_u = _u.SetTokenID(*id)
	}
	return _u
}

// SetToken sets the "token" edge to the OauthToken entity.
func (_u *OauthUserAuthorizationUpdateOne) SetToken(v *OauthToken) *OauthUserAuthorizationUpdateOne {
	return _u.SetTokenID(v.ID)
}

// Mutation returns the OauthUserAuthorizationMutation object of the builder.
func (_u *OauthUserAuthorizationUpdateOne) Mutation() *OauthUserAuthorizationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthUserAuthorizationUpdateOne) ClearUser() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthUserAuthorizationUpdateOne) ClearApplication() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearCode clears the "code" edge to the OauthAuthorizationCode entity.
func (_u *OauthUserAuthorizationUpdateOne) ClearCode() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// ClearToken clears the "token" edge to the OauthToken entity.
func (_u *OauthUserAuthorizationUpdateOne) ClearToken() *OauthUserAuthorizationUpdateOne {
	_u.mutation.ClearToken()
	return _u
}

// Where appends a list predicates to the OauthUserAuthorizationUpdate builder.
func (_u *OauthUserAuthorizationUpdateOne) Where(ps ...predicate.OauthUserAuthorization) *OauthUserAuthorizationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthUserAuthorizationUpdateOne) Select(field string, fields ...string) *OauthUserAuthorizationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthUserAuthorization entity.
func (_u *OauthUserAuthorizationUpdateOne) Save(ctx context.Context) (*OauthUserAuthorization, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthUserAuthorizationUpdateOne) SaveX(ctx context.Context) *OauthUserAuthorization {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthUserAuthorizationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthUserAuthorizationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthUserAuthorizationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthuserauthorization.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuserauthorization.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuserauthorization.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthUserAuthorizationUpdateOne) check() error {
	if v, ok := _u.mutation.UsageState(); ok {
		if err := oauthuserauthorization.UsageStateValidator(v); err != nil {
			return &ValidationError{Name: "usage_state", err: fmt.Errorf(`ent: validator failed for field "OauthUserAuthorization.usage_state": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUserAuthorization.user"`)
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUserAuthorization.application"`)
	}
	return nil
}

func (_u *OauthUserAuthorizationUpdateOne) sqlSave(ctx context.Context) (_node *OauthUserAuthorization, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuserauthorization.Table, oauthuserauthorization.Columns, sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthUserAuthorization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthuserauthorization.FieldID)
		for _, f := range fields {
			if !oauthuserauthorization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthuserauthorization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthuserauthorization.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.AuthorizedAt(); ok {
		_spec.SetField(oauthuserauthorization.FieldAuthorizedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsageState(); ok {
		_spec.SetField(oauthuserauthorization.FieldUsageState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthuserauthorization.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthuserauthorization.FieldScope, value)
		})
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthUserAuthorization{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuserauthorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
