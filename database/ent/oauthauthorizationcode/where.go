// Code generated by ent, DO NOT EDIT.

package oauthauthorizationcode

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldDeleteBy, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCode, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldApplicationID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUserID, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldRedirectURI, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldExpiresAt, v))
}

// UsedAt applies equality check predicate on the "used_at" field. It's identical to UsedAtEQ.
func UsedAt(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUsedAt, v))
}

// CodeChallenge applies equality check predicate on the "code_challenge" field. It's identical to CodeChallengeEQ.
func CodeChallenge(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeMethod applies equality check predicate on the "code_challenge_method" field. It's identical to CodeChallengeMethodEQ.
func CodeChallengeMethod(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldDeleteBy))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContainsFold(FieldCode, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldApplicationID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldUserID, vs...))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContainsFold(FieldRedirectURI, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldExpiresAt, v))
}

// UsedAtEQ applies the EQ predicate on the "used_at" field.
func UsedAtEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldUsedAt, v))
}

// UsedAtNEQ applies the NEQ predicate on the "used_at" field.
func UsedAtNEQ(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldUsedAt, v))
}

// UsedAtIn applies the In predicate on the "used_at" field.
func UsedAtIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldUsedAt, vs...))
}

// UsedAtNotIn applies the NotIn predicate on the "used_at" field.
func UsedAtNotIn(vs ...time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldUsedAt, vs...))
}

// UsedAtGT applies the GT predicate on the "used_at" field.
func UsedAtGT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldUsedAt, v))
}

// UsedAtGTE applies the GTE predicate on the "used_at" field.
func UsedAtGTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldUsedAt, v))
}

// UsedAtLT applies the LT predicate on the "used_at" field.
func UsedAtLT(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldUsedAt, v))
}

// UsedAtLTE applies the LTE predicate on the "used_at" field.
func UsedAtLTE(v time.Time) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldUsedAt, v))
}

// UsedAtIsNil applies the IsNil predicate on the "used_at" field.
func UsedAtIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldUsedAt))
}

// UsedAtNotNil applies the NotNil predicate on the "used_at" field.
func UsedAtNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldUsedAt))
}

// CodeChallengeEQ applies the EQ predicate on the "code_challenge" field.
func CodeChallengeEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeNEQ applies the NEQ predicate on the "code_challenge" field.
func CodeChallengeNEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldCodeChallenge, v))
}

// CodeChallengeIn applies the In predicate on the "code_challenge" field.
func CodeChallengeIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldCodeChallenge, vs...))
}

// CodeChallengeNotIn applies the NotIn predicate on the "code_challenge" field.
func CodeChallengeNotIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldCodeChallenge, vs...))
}

// CodeChallengeGT applies the GT predicate on the "code_challenge" field.
func CodeChallengeGT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldCodeChallenge, v))
}

// CodeChallengeGTE applies the GTE predicate on the "code_challenge" field.
func CodeChallengeGTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldCodeChallenge, v))
}

// CodeChallengeLT applies the LT predicate on the "code_challenge" field.
func CodeChallengeLT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldCodeChallenge, v))
}

// CodeChallengeLTE applies the LTE predicate on the "code_challenge" field.
func CodeChallengeLTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldCodeChallenge, v))
}

// CodeChallengeContains applies the Contains predicate on the "code_challenge" field.
func CodeChallengeContains(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContains(FieldCodeChallenge, v))
}

// CodeChallengeHasPrefix applies the HasPrefix predicate on the "code_challenge" field.
func CodeChallengeHasPrefix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasPrefix(FieldCodeChallenge, v))
}

// CodeChallengeHasSuffix applies the HasSuffix predicate on the "code_challenge" field.
func CodeChallengeHasSuffix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasSuffix(FieldCodeChallenge, v))
}

// CodeChallengeIsNil applies the IsNil predicate on the "code_challenge" field.
func CodeChallengeIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldCodeChallenge))
}

// CodeChallengeNotNil applies the NotNil predicate on the "code_challenge" field.
func CodeChallengeNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldCodeChallenge))
}

// CodeChallengeEqualFold applies the EqualFold predicate on the "code_challenge" field.
func CodeChallengeEqualFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEqualFold(FieldCodeChallenge, v))
}

// CodeChallengeContainsFold applies the ContainsFold predicate on the "code_challenge" field.
func CodeChallengeContainsFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContainsFold(FieldCodeChallenge, v))
}

// CodeChallengeMethodEQ applies the EQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodNEQ applies the NEQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodNEQ(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIn applies the In predicate on the "code_challenge_method" field.
func CodeChallengeMethodIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodNotIn applies the NotIn predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotIn(vs ...string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodGT applies the GT predicate on the "code_challenge_method" field.
func CodeChallengeMethodGT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodGTE applies the GTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodGTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldGTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLT applies the LT predicate on the "code_challenge_method" field.
func CodeChallengeMethodLT(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLTE applies the LTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodLTE(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldLTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContains applies the Contains predicate on the "code_challenge_method" field.
func CodeChallengeMethodContains(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContains(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasPrefix applies the HasPrefix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasPrefix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasPrefix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasSuffix applies the HasSuffix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasSuffix(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldHasSuffix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIsNil applies the IsNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodIsNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldIsNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodNotNil applies the NotNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotNil() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldNotNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodEqualFold applies the EqualFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodEqualFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldEqualFold(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContainsFold applies the ContainsFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodContainsFold(v string) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.FieldContainsFold(FieldCodeChallengeMethod, v))
}

// HasApplication applies the HasEdge predicate on the "application" edge.
func HasApplication() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationWith applies the HasEdge predicate on the "application" edge with a given conditions (other predicates).
func HasApplicationWith(preds ...predicate.OauthApplication) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := newApplicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToken applies the HasEdge predicate on the "token" edge.
func HasToken() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TokenTable, TokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenWith applies the HasEdge predicate on the "token" edge with a given conditions (other predicates).
func HasTokenWith(preds ...predicate.OauthToken) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := newTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserAuthorization applies the HasEdge predicate on the "user_authorization" edge.
func HasUserAuthorization() predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserAuthorizationTable, UserAuthorizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAuthorizationWith applies the HasEdge predicate on the "user_authorization" edge with a given conditions (other predicates).
func HasUserAuthorizationWith(preds ...predicate.OauthUserAuthorization) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(func(s *sql.Selector) {
		step := newUserAuthorizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthAuthorizationCode) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthAuthorizationCode) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthAuthorizationCode) predicate.OauthAuthorizationCode {
	return predicate.OauthAuthorizationCode(sql.NotPredicates(p))
}
