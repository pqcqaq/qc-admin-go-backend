// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthProvider is the model entity for the OauthProvider schema.
type OauthProvider struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 提供商类型
	Type oauthprovider.Type `json:"type,omitempty"`
	// 提供商名称
	Name string `json:"name,omitempty"`
	// 授权端点URL
	AuthorizationEndpoint string `json:"authorization_endpoint,omitempty"`
	// 令牌端点URL
	TokenEndpoint string `json:"token_endpoint,omitempty"`
	// 用户信息端点URL
	UserInfoEndpoint string `json:"user_info_endpoint,omitempty"`
	// 撤销端点URL
	RevokeEndpoint string `json:"revoke_endpoint,omitempty"`
	// 刷新令牌端点URL
	RefreshEndpoint string `json:"refresh_endpoint,omitempty"`
	// 在提供商处注册的客户端ID
	ClientID string `json:"client_id,omitempty"`
	// 客户端密钥
	ClientSecret string `json:"-"`
	// 回调URI
	RedirectURI string `json:"redirect_uri,omitempty"`
	// 请求的权限范围
	Scopes []string `json:"scopes,omitempty"`
	// 是否自动注册新用户
	AutoRegister bool `json:"auto_register,omitempty"`
	// 启用状态
	AbleState oauthprovider.AbleState `json:"able_state,omitempty"`
	// 额外的元数据信息
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthProviderQuery when eager-loading is set.
	Edges        OauthProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthProviderEdges holds the relations/edges for other nodes in the graph.
type OauthProviderEdges struct {
	// 创建的状态码
	States []*OauthState `json:"states,omitempty"`
	// 关联的OAuth用户
	OauthUsers []*OauthUser `json:"oauth_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes     [2]bool
	namedStates     map[string][]*OauthState
	namedOauthUsers map[string][]*OauthUser
}

// StatesOrErr returns the States value or an error if the edge
// was not loaded in eager-loading.
func (e OauthProviderEdges) StatesOrErr() ([]*OauthState, error) {
	if e.loadedTypes[0] {
		return e.States, nil
	}
	return nil, &NotLoadedError{edge: "states"}
}

// OauthUsersOrErr returns the OauthUsers value or an error if the edge
// was not loaded in eager-loading.
func (e OauthProviderEdges) OauthUsersOrErr() ([]*OauthUser, error) {
	if e.loadedTypes[1] {
		return e.OauthUsers, nil
	}
	return nil, &NotLoadedError{edge: "oauth_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldScopes, oauthprovider.FieldMetadata:
			values[i] = new([]byte)
		case oauthprovider.FieldAutoRegister:
			values[i] = new(sql.NullBool)
		case oauthprovider.FieldID, oauthprovider.FieldCreateBy, oauthprovider.FieldUpdateBy, oauthprovider.FieldDeleteBy:
			values[i] = new(sql.NullInt64)
		case oauthprovider.FieldType, oauthprovider.FieldName, oauthprovider.FieldAuthorizationEndpoint, oauthprovider.FieldTokenEndpoint, oauthprovider.FieldUserInfoEndpoint, oauthprovider.FieldRevokeEndpoint, oauthprovider.FieldRefreshEndpoint, oauthprovider.FieldClientID, oauthprovider.FieldClientSecret, oauthprovider.FieldRedirectURI, oauthprovider.FieldAbleState:
			values[i] = new(sql.NullString)
		case oauthprovider.FieldCreateTime, oauthprovider.FieldUpdateTime, oauthprovider.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthProvider fields.
func (_m *OauthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthprovider.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthprovider.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthprovider.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthprovider.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthprovider.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthprovider.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthprovider.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = oauthprovider.Type(value.String)
			}
		case oauthprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case oauthprovider.FieldAuthorizationEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authorization_endpoint", values[i])
			} else if value.Valid {
				_m.AuthorizationEndpoint = value.String
			}
		case oauthprovider.FieldTokenEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_endpoint", values[i])
			} else if value.Valid {
				_m.TokenEndpoint = value.String
			}
		case oauthprovider.FieldUserInfoEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_info_endpoint", values[i])
			} else if value.Valid {
				_m.UserInfoEndpoint = value.String
			}
		case oauthprovider.FieldRevokeEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revoke_endpoint", values[i])
			} else if value.Valid {
				_m.RevokeEndpoint = value.String
			}
		case oauthprovider.FieldRefreshEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_endpoint", values[i])
			} else if value.Valid {
				_m.RefreshEndpoint = value.String
			}
		case oauthprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = value.String
			}
		case oauthprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				_m.ClientSecret = value.String
			}
		case oauthprovider.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				_m.RedirectURI = value.String
			}
		case oauthprovider.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case oauthprovider.FieldAutoRegister:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_register", values[i])
			} else if value.Valid {
				_m.AutoRegister = value.Bool
			}
		case oauthprovider.FieldAbleState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field able_state", values[i])
			} else if value.Valid {
				_m.AbleState = oauthprovider.AbleState(value.String)
			}
		case oauthprovider.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthProvider.
// This includes values selected through modifiers, order, etc.
func (_m *OauthProvider) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStates queries the "states" edge of the OauthProvider entity.
func (_m *OauthProvider) QueryStates() *OauthStateQuery {
	return NewOauthProviderClient(_m.config).QueryStates(_m)
}

// QueryOauthUsers queries the "oauth_users" edge of the OauthProvider entity.
func (_m *OauthProvider) QueryOauthUsers() *OauthUserQuery {
	return NewOauthProviderClient(_m.config).QueryOauthUsers(_m)
}

// Update returns a builder for updating this OauthProvider.
// Note that you need to call OauthProvider.Unwrap() before calling this method if this OauthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthProvider) Update() *OauthProviderUpdateOne {
	return NewOauthProviderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthProvider) Unwrap() *OauthProvider {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthProvider is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("OauthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("authorization_endpoint=")
	builder.WriteString(_m.AuthorizationEndpoint)
	builder.WriteString(", ")
	builder.WriteString("token_endpoint=")
	builder.WriteString(_m.TokenEndpoint)
	builder.WriteString(", ")
	builder.WriteString("user_info_endpoint=")
	builder.WriteString(_m.UserInfoEndpoint)
	builder.WriteString(", ")
	builder.WriteString("revoke_endpoint=")
	builder.WriteString(_m.RevokeEndpoint)
	builder.WriteString(", ")
	builder.WriteString("refresh_endpoint=")
	builder.WriteString(_m.RefreshEndpoint)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(_m.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(_m.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteString(", ")
	builder.WriteString("auto_register=")
	builder.WriteString(fmt.Sprintf("%v", _m.AutoRegister))
	builder.WriteString(", ")
	builder.WriteString("able_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.AbleState))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStates returns the States named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthProvider) NamedStates(name string) ([]*OauthState, error) {
	if _m.Edges.namedStates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedStates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthProvider) appendNamedStates(name string, edges ...*OauthState) {
	if _m.Edges.namedStates == nil {
		_m.Edges.namedStates = make(map[string][]*OauthState)
	}
	if len(edges) == 0 {
		_m.Edges.namedStates[name] = []*OauthState{}
	} else {
		_m.Edges.namedStates[name] = append(_m.Edges.namedStates[name], edges...)
	}
}

// NamedOauthUsers returns the OauthUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthProvider) NamedOauthUsers(name string) ([]*OauthUser, error) {
	if _m.Edges.namedOauthUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOauthUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthProvider) appendNamedOauthUsers(name string, edges ...*OauthUser) {
	if _m.Edges.namedOauthUsers == nil {
		_m.Edges.namedOauthUsers = make(map[string][]*OauthUser)
	}
	if len(edges) == 0 {
		_m.Edges.namedOauthUsers[name] = []*OauthUser{}
	} else {
		_m.Edges.namedOauthUsers[name] = append(_m.Edges.namedOauthUsers[name], edges...)
	}
}

// OauthProviders is a parsable slice of OauthProvider.
type OauthProviders []*OauthProvider
