// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/verifycode"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VerifyCode is the model entity for the VerifyCode schema.
type VerifyCode struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 验证码
	Code string `json:"code,omitempty"`
	// 标识符（手机号/邮箱等）
	Identifier string `json:"identifier,omitempty"`
	// 验证码类型
	SenderType verifycode.SenderType `json:"sender_type,omitempty"`
	// 发送目的
	SendFor string `json:"send_for,omitempty"`
	// 过期时间
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// 使用时间
	UsedAt *time.Time `json:"used_at,omitempty"`
	// 发送是否成功
	SendSuccess bool `json:"send_success,omitempty"`
	// 发送时间
	SendAt       *time.Time `json:"send_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VerifyCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verifycode.FieldSendSuccess:
			values[i] = new(sql.NullBool)
		case verifycode.FieldID, verifycode.FieldCreateBy, verifycode.FieldUpdateBy, verifycode.FieldDeleteBy:
			values[i] = new(sql.NullInt64)
		case verifycode.FieldCode, verifycode.FieldIdentifier, verifycode.FieldSenderType, verifycode.FieldSendFor:
			values[i] = new(sql.NullString)
		case verifycode.FieldCreateTime, verifycode.FieldUpdateTime, verifycode.FieldDeleteTime, verifycode.FieldExpiresAt, verifycode.FieldUsedAt, verifycode.FieldSendAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VerifyCode fields.
func (_m *VerifyCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verifycode.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case verifycode.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case verifycode.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case verifycode.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case verifycode.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case verifycode.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case verifycode.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case verifycode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case verifycode.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				_m.Identifier = value.String
			}
		case verifycode.FieldSenderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_type", values[i])
			} else if value.Valid {
				_m.SenderType = verifycode.SenderType(value.String)
			}
		case verifycode.FieldSendFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field send_for", values[i])
			} else if value.Valid {
				_m.SendFor = value.String
			}
		case verifycode.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case verifycode.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				_m.UsedAt = new(time.Time)
				*_m.UsedAt = value.Time
			}
		case verifycode.FieldSendSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field send_success", values[i])
			} else if value.Valid {
				_m.SendSuccess = value.Bool
			}
		case verifycode.FieldSendAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field send_at", values[i])
			} else if value.Valid {
				_m.SendAt = new(time.Time)
				*_m.SendAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VerifyCode.
// This includes values selected through modifiers, order, etc.
func (_m *VerifyCode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this VerifyCode.
// Note that you need to call VerifyCode.Unwrap() before calling this method if this VerifyCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *VerifyCode) Update() *VerifyCodeUpdateOne {
	return NewVerifyCodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the VerifyCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *VerifyCode) Unwrap() *VerifyCode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: VerifyCode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *VerifyCode) String() string {
	var builder strings.Builder
	builder.WriteString("VerifyCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(_m.Identifier)
	builder.WriteString(", ")
	builder.WriteString("sender_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.SenderType))
	builder.WriteString(", ")
	builder.WriteString("send_for=")
	builder.WriteString(_m.SendFor)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("send_success=")
	builder.WriteString(fmt.Sprintf("%v", _m.SendSuccess))
	builder.WriteString(", ")
	if v := _m.SendAt; v != nil {
		builder.WriteString("send_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// VerifyCodes is a parsable slice of VerifyCode.
type VerifyCodes []*VerifyCode
