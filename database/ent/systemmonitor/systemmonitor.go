// Code generated by ent, DO NOT EDIT.

package systemmonitor

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the systemmonitor type in the database.
	Label = "system_monitor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldCPUUsagePercent holds the string denoting the cpu_usage_percent field in the database.
	FieldCPUUsagePercent = "cpu_usage_percent"
	// FieldCPUCores holds the string denoting the cpu_cores field in the database.
	FieldCPUCores = "cpu_cores"
	// FieldMemoryTotal holds the string denoting the memory_total field in the database.
	FieldMemoryTotal = "memory_total"
	// FieldMemoryUsed holds the string denoting the memory_used field in the database.
	FieldMemoryUsed = "memory_used"
	// FieldMemoryFree holds the string denoting the memory_free field in the database.
	FieldMemoryFree = "memory_free"
	// FieldMemoryUsagePercent holds the string denoting the memory_usage_percent field in the database.
	FieldMemoryUsagePercent = "memory_usage_percent"
	// FieldDiskTotal holds the string denoting the disk_total field in the database.
	FieldDiskTotal = "disk_total"
	// FieldDiskUsed holds the string denoting the disk_used field in the database.
	FieldDiskUsed = "disk_used"
	// FieldDiskFree holds the string denoting the disk_free field in the database.
	FieldDiskFree = "disk_free"
	// FieldDiskUsagePercent holds the string denoting the disk_usage_percent field in the database.
	FieldDiskUsagePercent = "disk_usage_percent"
	// FieldNetworkBytesSent holds the string denoting the network_bytes_sent field in the database.
	FieldNetworkBytesSent = "network_bytes_sent"
	// FieldNetworkBytesRecv holds the string denoting the network_bytes_recv field in the database.
	FieldNetworkBytesRecv = "network_bytes_recv"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformVersion holds the string denoting the platform_version field in the database.
	FieldPlatformVersion = "platform_version"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldGoroutinesCount holds the string denoting the goroutines_count field in the database.
	FieldGoroutinesCount = "goroutines_count"
	// FieldHeapAlloc holds the string denoting the heap_alloc field in the database.
	FieldHeapAlloc = "heap_alloc"
	// FieldHeapSys holds the string denoting the heap_sys field in the database.
	FieldHeapSys = "heap_sys"
	// FieldGcCount holds the string denoting the gc_count field in the database.
	FieldGcCount = "gc_count"
	// FieldLoadAvg1 holds the string denoting the load_avg_1 field in the database.
	FieldLoadAvg1 = "load_avg_1"
	// FieldLoadAvg5 holds the string denoting the load_avg_5 field in the database.
	FieldLoadAvg5 = "load_avg_5"
	// FieldLoadAvg15 holds the string denoting the load_avg_15 field in the database.
	FieldLoadAvg15 = "load_avg_15"
	// FieldUptime holds the string denoting the uptime field in the database.
	FieldUptime = "uptime"
	// FieldRecordedAt holds the string denoting the recorded_at field in the database.
	FieldRecordedAt = "recorded_at"
	// Table holds the table name of the systemmonitor in the database.
	Table = "sys_system_monitor"
)

// Columns holds all SQL columns for systemmonitor fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldCPUUsagePercent,
	FieldCPUCores,
	FieldMemoryTotal,
	FieldMemoryUsed,
	FieldMemoryFree,
	FieldMemoryUsagePercent,
	FieldDiskTotal,
	FieldDiskUsed,
	FieldDiskFree,
	FieldDiskUsagePercent,
	FieldNetworkBytesSent,
	FieldNetworkBytesRecv,
	FieldOs,
	FieldPlatform,
	FieldPlatformVersion,
	FieldHostname,
	FieldGoroutinesCount,
	FieldHeapAlloc,
	FieldHeapSys,
	FieldGcCount,
	FieldLoadAvg1,
	FieldLoadAvg5,
	FieldLoadAvg15,
	FieldUptime,
	FieldRecordedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CPUUsagePercentValidator is a validator for the "cpu_usage_percent" field. It is called by the builders before save.
	CPUUsagePercentValidator func(float64) error
	// CPUCoresValidator is a validator for the "cpu_cores" field. It is called by the builders before save.
	CPUCoresValidator func(int) error
	// MemoryUsagePercentValidator is a validator for the "memory_usage_percent" field. It is called by the builders before save.
	MemoryUsagePercentValidator func(float64) error
	// DiskUsagePercentValidator is a validator for the "disk_usage_percent" field. It is called by the builders before save.
	DiskUsagePercentValidator func(float64) error
	// DefaultNetworkBytesSent holds the default value on creation for the "network_bytes_sent" field.
	DefaultNetworkBytesSent uint64
	// DefaultNetworkBytesRecv holds the default value on creation for the "network_bytes_recv" field.
	DefaultNetworkBytesRecv uint64
	// OsValidator is a validator for the "os" field. It is called by the builders before save.
	OsValidator func(string) error
	// PlatformValidator is a validator for the "platform" field. It is called by the builders before save.
	PlatformValidator func(string) error
	// PlatformVersionValidator is a validator for the "platform_version" field. It is called by the builders before save.
	PlatformVersionValidator func(string) error
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// GoroutinesCountValidator is a validator for the "goroutines_count" field. It is called by the builders before save.
	GoroutinesCountValidator func(int) error
)

// OrderOption defines the ordering options for the SystemMonitor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByCPUUsagePercent orders the results by the cpu_usage_percent field.
func ByCPUUsagePercent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUUsagePercent, opts...).ToFunc()
}

// ByCPUCores orders the results by the cpu_cores field.
func ByCPUCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUCores, opts...).ToFunc()
}

// ByMemoryTotal orders the results by the memory_total field.
func ByMemoryTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoryTotal, opts...).ToFunc()
}

// ByMemoryUsed orders the results by the memory_used field.
func ByMemoryUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoryUsed, opts...).ToFunc()
}

// ByMemoryFree orders the results by the memory_free field.
func ByMemoryFree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoryFree, opts...).ToFunc()
}

// ByMemoryUsagePercent orders the results by the memory_usage_percent field.
func ByMemoryUsagePercent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoryUsagePercent, opts...).ToFunc()
}

// ByDiskTotal orders the results by the disk_total field.
func ByDiskTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskTotal, opts...).ToFunc()
}

// ByDiskUsed orders the results by the disk_used field.
func ByDiskUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskUsed, opts...).ToFunc()
}

// ByDiskFree orders the results by the disk_free field.
func ByDiskFree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskFree, opts...).ToFunc()
}

// ByDiskUsagePercent orders the results by the disk_usage_percent field.
func ByDiskUsagePercent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskUsagePercent, opts...).ToFunc()
}

// ByNetworkBytesSent orders the results by the network_bytes_sent field.
func ByNetworkBytesSent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetworkBytesSent, opts...).ToFunc()
}

// ByNetworkBytesRecv orders the results by the network_bytes_recv field.
func ByNetworkBytesRecv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetworkBytesRecv, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByPlatformVersion orders the results by the platform_version field.
func ByPlatformVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformVersion, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByGoroutinesCount orders the results by the goroutines_count field.
func ByGoroutinesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoroutinesCount, opts...).ToFunc()
}

// ByHeapAlloc orders the results by the heap_alloc field.
func ByHeapAlloc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeapAlloc, opts...).ToFunc()
}

// ByHeapSys orders the results by the heap_sys field.
func ByHeapSys(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeapSys, opts...).ToFunc()
}

// ByGcCount orders the results by the gc_count field.
func ByGcCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGcCount, opts...).ToFunc()
}

// ByLoadAvg1 orders the results by the load_avg_1 field.
func ByLoadAvg1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadAvg1, opts...).ToFunc()
}

// ByLoadAvg5 orders the results by the load_avg_5 field.
func ByLoadAvg5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadAvg5, opts...).ToFunc()
}

// ByLoadAvg15 orders the results by the load_avg_15 field.
func ByLoadAvg15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadAvg15, opts...).ToFunc()
}

// ByUptime orders the results by the uptime field.
func ByUptime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUptime, opts...).ToFunc()
}

// ByRecordedAt orders the results by the recorded_at field.
func ByRecordedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordedAt, opts...).ToFunc()
}
