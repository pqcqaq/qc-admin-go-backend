// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoggingUpdate is the builder for updating Logging entities.
type LoggingUpdate struct {
	config
	hooks    []Hook
	mutation *LoggingMutation
}

// Where appends a list predicates to the LoggingUpdate builder.
func (_u *LoggingUpdate) Where(ps ...predicate.Logging) *LoggingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *LoggingUpdate) SetCreateBy(v int64) *LoggingUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableCreateBy(v *int64) *LoggingUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *LoggingUpdate) AddCreateBy(v int64) *LoggingUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *LoggingUpdate) ClearCreateBy() *LoggingUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *LoggingUpdate) SetUpdateTime(v time.Time) *LoggingUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *LoggingUpdate) SetUpdateBy(v int64) *LoggingUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableUpdateBy(v *int64) *LoggingUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *LoggingUpdate) AddUpdateBy(v int64) *LoggingUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *LoggingUpdate) ClearUpdateBy() *LoggingUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *LoggingUpdate) SetDeleteTime(v time.Time) *LoggingUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableDeleteTime(v *time.Time) *LoggingUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *LoggingUpdate) ClearDeleteTime() *LoggingUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *LoggingUpdate) SetDeleteBy(v int64) *LoggingUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableDeleteBy(v *int64) *LoggingUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *LoggingUpdate) AddDeleteBy(v int64) *LoggingUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *LoggingUpdate) ClearDeleteBy() *LoggingUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetLevel sets the "level" field.
func (_u *LoggingUpdate) SetLevel(v logging.Level) *LoggingUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableLevel(v *logging.Level) *LoggingUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *LoggingUpdate) SetType(v logging.Type) *LoggingUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableType(v *logging.Type) *LoggingUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *LoggingUpdate) SetMessage(v string) *LoggingUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableMessage(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMethod sets the "method" field.
func (_u *LoggingUpdate) SetMethod(v string) *LoggingUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableMethod(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *LoggingUpdate) ClearMethod() *LoggingUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// SetPath sets the "path" field.
func (_u *LoggingUpdate) SetPath(v string) *LoggingUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillablePath(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *LoggingUpdate) ClearPath() *LoggingUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetIP sets the "ip" field.
func (_u *LoggingUpdate) SetIP(v string) *LoggingUpdate {
	_u.mutation.SetIP(v)
	return _u
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableIP(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetIP(*v)
	}
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *LoggingUpdate) ClearIP() *LoggingUpdate {
	_u.mutation.ClearIP()
	return _u
}

// SetQuery sets the "query" field.
func (_u *LoggingUpdate) SetQuery(v string) *LoggingUpdate {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableQuery(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *LoggingUpdate) ClearQuery() *LoggingUpdate {
	_u.mutation.ClearQuery()
	return _u
}

// SetCode sets the "code" field.
func (_u *LoggingUpdate) SetCode(v int) *LoggingUpdate {
	_u.mutation.ResetCode()
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableCode(v *int) *LoggingUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// AddCode adds value to the "code" field.
func (_u *LoggingUpdate) AddCode(v int) *LoggingUpdate {
	_u.mutation.AddCode(v)
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *LoggingUpdate) ClearCode() *LoggingUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LoggingUpdate) SetUserAgent(v string) *LoggingUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableUserAgent(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LoggingUpdate) ClearUserAgent() *LoggingUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetData sets the "data" field.
func (_u *LoggingUpdate) SetData(v map[string]interface{}) *LoggingUpdate {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *LoggingUpdate) ClearData() *LoggingUpdate {
	_u.mutation.ClearData()
	return _u
}

// SetStack sets the "stack" field.
func (_u *LoggingUpdate) SetStack(v string) *LoggingUpdate {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *LoggingUpdate) SetNillableStack(v *string) *LoggingUpdate {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// ClearStack clears the value of the "stack" field.
func (_u *LoggingUpdate) ClearStack() *LoggingUpdate {
	_u.mutation.ClearStack()
	return _u
}

// Mutation returns the LoggingMutation object of the builder.
func (_u *LoggingUpdate) Mutation() *LoggingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LoggingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoggingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LoggingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoggingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoggingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if logging.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized logging.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := logging.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoggingUpdate) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := logging.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Logging.level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := logging.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Logging.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := logging.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Logging.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := logging.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Logging.method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := logging.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Logging.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IP(); ok {
		if err := logging.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Logging.ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Query(); ok {
		if err := logging.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`ent: validator failed for field "Logging.query": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := logging.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Logging.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := logging.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Logging.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Stack(); ok {
		if err := logging.StackValidator(v); err != nil {
			return &ValidationError{Name: "stack", err: fmt.Errorf(`ent: validator failed for field "Logging.stack": %w`, err)}
		}
	}
	return nil
}

func (_u *LoggingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logging.Table, logging.Columns, sqlgraph.NewFieldSpec(logging.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(logging.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(logging.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(logging.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(logging.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(logging.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(logging.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(logging.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(logging.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(logging.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(logging.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(logging.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(logging.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(logging.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(logging.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(logging.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(logging.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(logging.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(logging.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(logging.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.IP(); ok {
		_spec.SetField(logging.FieldIP, field.TypeString, value)
	}
	if _u.mutation.IPCleared() {
		_spec.ClearField(logging.FieldIP, field.TypeString)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(logging.FieldQuery, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(logging.FieldQuery, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(logging.FieldCode, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCode(); ok {
		_spec.AddField(logging.FieldCode, field.TypeInt, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(logging.FieldCode, field.TypeInt)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(logging.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(logging.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(logging.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(logging.FieldData, field.TypeJSON)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(logging.FieldStack, field.TypeString, value)
	}
	if _u.mutation.StackCleared() {
		_spec.ClearField(logging.FieldStack, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LoggingUpdateOne is the builder for updating a single Logging entity.
type LoggingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoggingMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *LoggingUpdateOne) SetCreateBy(v int64) *LoggingUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableCreateBy(v *int64) *LoggingUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *LoggingUpdateOne) AddCreateBy(v int64) *LoggingUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *LoggingUpdateOne) ClearCreateBy() *LoggingUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *LoggingUpdateOne) SetUpdateTime(v time.Time) *LoggingUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *LoggingUpdateOne) SetUpdateBy(v int64) *LoggingUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableUpdateBy(v *int64) *LoggingUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *LoggingUpdateOne) AddUpdateBy(v int64) *LoggingUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *LoggingUpdateOne) ClearUpdateBy() *LoggingUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *LoggingUpdateOne) SetDeleteTime(v time.Time) *LoggingUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableDeleteTime(v *time.Time) *LoggingUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *LoggingUpdateOne) ClearDeleteTime() *LoggingUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *LoggingUpdateOne) SetDeleteBy(v int64) *LoggingUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableDeleteBy(v *int64) *LoggingUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *LoggingUpdateOne) AddDeleteBy(v int64) *LoggingUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *LoggingUpdateOne) ClearDeleteBy() *LoggingUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetLevel sets the "level" field.
func (_u *LoggingUpdateOne) SetLevel(v logging.Level) *LoggingUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableLevel(v *logging.Level) *LoggingUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *LoggingUpdateOne) SetType(v logging.Type) *LoggingUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableType(v *logging.Type) *LoggingUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *LoggingUpdateOne) SetMessage(v string) *LoggingUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableMessage(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMethod sets the "method" field.
func (_u *LoggingUpdateOne) SetMethod(v string) *LoggingUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableMethod(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *LoggingUpdateOne) ClearMethod() *LoggingUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// SetPath sets the "path" field.
func (_u *LoggingUpdateOne) SetPath(v string) *LoggingUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillablePath(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *LoggingUpdateOne) ClearPath() *LoggingUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetIP sets the "ip" field.
func (_u *LoggingUpdateOne) SetIP(v string) *LoggingUpdateOne {
	_u.mutation.SetIP(v)
	return _u
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableIP(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetIP(*v)
	}
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *LoggingUpdateOne) ClearIP() *LoggingUpdateOne {
	_u.mutation.ClearIP()
	return _u
}

// SetQuery sets the "query" field.
func (_u *LoggingUpdateOne) SetQuery(v string) *LoggingUpdateOne {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableQuery(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *LoggingUpdateOne) ClearQuery() *LoggingUpdateOne {
	_u.mutation.ClearQuery()
	return _u
}

// SetCode sets the "code" field.
func (_u *LoggingUpdateOne) SetCode(v int) *LoggingUpdateOne {
	_u.mutation.ResetCode()
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableCode(v *int) *LoggingUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// AddCode adds value to the "code" field.
func (_u *LoggingUpdateOne) AddCode(v int) *LoggingUpdateOne {
	_u.mutation.AddCode(v)
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *LoggingUpdateOne) ClearCode() *LoggingUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LoggingUpdateOne) SetUserAgent(v string) *LoggingUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableUserAgent(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LoggingUpdateOne) ClearUserAgent() *LoggingUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetData sets the "data" field.
func (_u *LoggingUpdateOne) SetData(v map[string]interface{}) *LoggingUpdateOne {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *LoggingUpdateOne) ClearData() *LoggingUpdateOne {
	_u.mutation.ClearData()
	return _u
}

// SetStack sets the "stack" field.
func (_u *LoggingUpdateOne) SetStack(v string) *LoggingUpdateOne {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *LoggingUpdateOne) SetNillableStack(v *string) *LoggingUpdateOne {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// ClearStack clears the value of the "stack" field.
func (_u *LoggingUpdateOne) ClearStack() *LoggingUpdateOne {
	_u.mutation.ClearStack()
	return _u
}

// Mutation returns the LoggingMutation object of the builder.
func (_u *LoggingUpdateOne) Mutation() *LoggingMutation {
	return _u.mutation
}

// Where appends a list predicates to the LoggingUpdate builder.
func (_u *LoggingUpdateOne) Where(ps ...predicate.Logging) *LoggingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LoggingUpdateOne) Select(field string, fields ...string) *LoggingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Logging entity.
func (_u *LoggingUpdateOne) Save(ctx context.Context) (*Logging, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoggingUpdateOne) SaveX(ctx context.Context) *Logging {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LoggingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoggingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoggingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if logging.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized logging.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := logging.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoggingUpdateOne) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := logging.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Logging.level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := logging.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Logging.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := logging.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Logging.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := logging.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Logging.method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := logging.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Logging.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IP(); ok {
		if err := logging.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Logging.ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Query(); ok {
		if err := logging.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`ent: validator failed for field "Logging.query": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := logging.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Logging.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := logging.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Logging.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Stack(); ok {
		if err := logging.StackValidator(v); err != nil {
			return &ValidationError{Name: "stack", err: fmt.Errorf(`ent: validator failed for field "Logging.stack": %w`, err)}
		}
	}
	return nil
}

func (_u *LoggingUpdateOne) sqlSave(ctx context.Context) (_node *Logging, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logging.Table, logging.Columns, sqlgraph.NewFieldSpec(logging.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logging.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logging.FieldID)
		for _, f := range fields {
			if !logging.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logging.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(logging.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(logging.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(logging.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(logging.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(logging.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(logging.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(logging.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(logging.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(logging.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(logging.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(logging.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(logging.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(logging.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(logging.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(logging.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(logging.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(logging.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(logging.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(logging.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.IP(); ok {
		_spec.SetField(logging.FieldIP, field.TypeString, value)
	}
	if _u.mutation.IPCleared() {
		_spec.ClearField(logging.FieldIP, field.TypeString)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(logging.FieldQuery, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(logging.FieldQuery, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(logging.FieldCode, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCode(); ok {
		_spec.AddField(logging.FieldCode, field.TypeInt, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(logging.FieldCode, field.TypeInt)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(logging.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(logging.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(logging.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(logging.FieldData, field.TypeJSON)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(logging.FieldStack, field.TypeString, value)
	}
	if _u.mutation.StackCleared() {
		_spec.ClearField(logging.FieldStack, field.TypeString)
	}
	_node = &Logging{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
