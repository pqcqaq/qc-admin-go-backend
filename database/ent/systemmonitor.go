// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/systemmonitor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemMonitor is the model entity for the SystemMonitor schema.
type SystemMonitor struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// CPU使用率(%)
	CPUUsagePercent float64 `json:"cpu_usage_percent,omitempty"`
	// CPU核心数
	CPUCores int `json:"cpu_cores,omitempty"`
	// 总内存(字节)
	MemoryTotal uint64 `json:"memory_total,omitempty"`
	// 已使用内存(字节)
	MemoryUsed uint64 `json:"memory_used,omitempty"`
	// 空闲内存(字节)
	MemoryFree uint64 `json:"memory_free,omitempty"`
	// 内存使用率(%)
	MemoryUsagePercent float64 `json:"memory_usage_percent,omitempty"`
	// 总磁盘空间(字节)
	DiskTotal uint64 `json:"disk_total,omitempty"`
	// 已使用磁盘空间(字节)
	DiskUsed uint64 `json:"disk_used,omitempty"`
	// 空闲磁盘空间(字节)
	DiskFree uint64 `json:"disk_free,omitempty"`
	// 磁盘使用率(%)
	DiskUsagePercent float64 `json:"disk_usage_percent,omitempty"`
	// 网络发送字节数
	NetworkBytesSent uint64 `json:"network_bytes_sent,omitempty"`
	// 网络接收字节数
	NetworkBytesRecv uint64 `json:"network_bytes_recv,omitempty"`
	// 操作系统
	Os string `json:"os,omitempty"`
	// 平台
	Platform string `json:"platform,omitempty"`
	// 平台版本
	PlatformVersion string `json:"platform_version,omitempty"`
	// 主机名
	Hostname string `json:"hostname,omitempty"`
	// Goroutine数量
	GoroutinesCount int `json:"goroutines_count,omitempty"`
	// 堆内存分配(字节)
	HeapAlloc uint64 `json:"heap_alloc,omitempty"`
	// 堆系统内存(字节)
	HeapSys uint64 `json:"heap_sys,omitempty"`
	// GC次数
	GcCount uint32 `json:"gc_count,omitempty"`
	// 1分钟平均负载
	LoadAvg1 float64 `json:"load_avg_1,omitempty"`
	// 5分钟平均负载
	LoadAvg5 float64 `json:"load_avg_5,omitempty"`
	// 15分钟平均负载
	LoadAvg15 float64 `json:"load_avg_15,omitempty"`
	// 系统运行时间(秒)
	Uptime uint64 `json:"uptime,omitempty"`
	// 记录时间
	RecordedAt   time.Time `json:"recorded_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemMonitor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemmonitor.FieldCPUUsagePercent, systemmonitor.FieldMemoryUsagePercent, systemmonitor.FieldDiskUsagePercent, systemmonitor.FieldLoadAvg1, systemmonitor.FieldLoadAvg5, systemmonitor.FieldLoadAvg15:
			values[i] = new(sql.NullFloat64)
		case systemmonitor.FieldID, systemmonitor.FieldCreateBy, systemmonitor.FieldUpdateBy, systemmonitor.FieldCPUCores, systemmonitor.FieldMemoryTotal, systemmonitor.FieldMemoryUsed, systemmonitor.FieldMemoryFree, systemmonitor.FieldDiskTotal, systemmonitor.FieldDiskUsed, systemmonitor.FieldDiskFree, systemmonitor.FieldNetworkBytesSent, systemmonitor.FieldNetworkBytesRecv, systemmonitor.FieldGoroutinesCount, systemmonitor.FieldHeapAlloc, systemmonitor.FieldHeapSys, systemmonitor.FieldGcCount, systemmonitor.FieldUptime:
			values[i] = new(sql.NullInt64)
		case systemmonitor.FieldOs, systemmonitor.FieldPlatform, systemmonitor.FieldPlatformVersion, systemmonitor.FieldHostname:
			values[i] = new(sql.NullString)
		case systemmonitor.FieldCreateTime, systemmonitor.FieldUpdateTime, systemmonitor.FieldRecordedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemMonitor fields.
func (_m *SystemMonitor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemmonitor.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case systemmonitor.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case systemmonitor.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case systemmonitor.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case systemmonitor.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case systemmonitor.FieldCPUUsagePercent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_usage_percent", values[i])
			} else if value.Valid {
				_m.CPUUsagePercent = value.Float64
			}
		case systemmonitor.FieldCPUCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_cores", values[i])
			} else if value.Valid {
				_m.CPUCores = int(value.Int64)
			}
		case systemmonitor.FieldMemoryTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_total", values[i])
			} else if value.Valid {
				_m.MemoryTotal = uint64(value.Int64)
			}
		case systemmonitor.FieldMemoryUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_used", values[i])
			} else if value.Valid {
				_m.MemoryUsed = uint64(value.Int64)
			}
		case systemmonitor.FieldMemoryFree:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_free", values[i])
			} else if value.Valid {
				_m.MemoryFree = uint64(value.Int64)
			}
		case systemmonitor.FieldMemoryUsagePercent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_usage_percent", values[i])
			} else if value.Valid {
				_m.MemoryUsagePercent = value.Float64
			}
		case systemmonitor.FieldDiskTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disk_total", values[i])
			} else if value.Valid {
				_m.DiskTotal = uint64(value.Int64)
			}
		case systemmonitor.FieldDiskUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disk_used", values[i])
			} else if value.Valid {
				_m.DiskUsed = uint64(value.Int64)
			}
		case systemmonitor.FieldDiskFree:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disk_free", values[i])
			} else if value.Valid {
				_m.DiskFree = uint64(value.Int64)
			}
		case systemmonitor.FieldDiskUsagePercent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field disk_usage_percent", values[i])
			} else if value.Valid {
				_m.DiskUsagePercent = value.Float64
			}
		case systemmonitor.FieldNetworkBytesSent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field network_bytes_sent", values[i])
			} else if value.Valid {
				_m.NetworkBytesSent = uint64(value.Int64)
			}
		case systemmonitor.FieldNetworkBytesRecv:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field network_bytes_recv", values[i])
			} else if value.Valid {
				_m.NetworkBytesRecv = uint64(value.Int64)
			}
		case systemmonitor.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				_m.Os = value.String
			}
		case systemmonitor.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				_m.Platform = value.String
			}
		case systemmonitor.FieldPlatformVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_version", values[i])
			} else if value.Valid {
				_m.PlatformVersion = value.String
			}
		case systemmonitor.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				_m.Hostname = value.String
			}
		case systemmonitor.FieldGoroutinesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goroutines_count", values[i])
			} else if value.Valid {
				_m.GoroutinesCount = int(value.Int64)
			}
		case systemmonitor.FieldHeapAlloc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field heap_alloc", values[i])
			} else if value.Valid {
				_m.HeapAlloc = uint64(value.Int64)
			}
		case systemmonitor.FieldHeapSys:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field heap_sys", values[i])
			} else if value.Valid {
				_m.HeapSys = uint64(value.Int64)
			}
		case systemmonitor.FieldGcCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gc_count", values[i])
			} else if value.Valid {
				_m.GcCount = uint32(value.Int64)
			}
		case systemmonitor.FieldLoadAvg1:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field load_avg_1", values[i])
			} else if value.Valid {
				_m.LoadAvg1 = value.Float64
			}
		case systemmonitor.FieldLoadAvg5:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field load_avg_5", values[i])
			} else if value.Valid {
				_m.LoadAvg5 = value.Float64
			}
		case systemmonitor.FieldLoadAvg15:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field load_avg_15", values[i])
			} else if value.Valid {
				_m.LoadAvg15 = value.Float64
			}
		case systemmonitor.FieldUptime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uptime", values[i])
			} else if value.Valid {
				_m.Uptime = uint64(value.Int64)
			}
		case systemmonitor.FieldRecordedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field recorded_at", values[i])
			} else if value.Valid {
				_m.RecordedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemMonitor.
// This includes values selected through modifiers, order, etc.
func (_m *SystemMonitor) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this SystemMonitor.
// Note that you need to call SystemMonitor.Unwrap() before calling this method if this SystemMonitor
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SystemMonitor) Update() *SystemMonitorUpdateOne {
	return NewSystemMonitorClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SystemMonitor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SystemMonitor) Unwrap() *SystemMonitor {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemMonitor is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SystemMonitor) String() string {
	var builder strings.Builder
	builder.WriteString("SystemMonitor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("cpu_usage_percent=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUUsagePercent))
	builder.WriteString(", ")
	builder.WriteString("cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUCores))
	builder.WriteString(", ")
	builder.WriteString("memory_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemoryTotal))
	builder.WriteString(", ")
	builder.WriteString("memory_used=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemoryUsed))
	builder.WriteString(", ")
	builder.WriteString("memory_free=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemoryFree))
	builder.WriteString(", ")
	builder.WriteString("memory_usage_percent=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemoryUsagePercent))
	builder.WriteString(", ")
	builder.WriteString("disk_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiskTotal))
	builder.WriteString(", ")
	builder.WriteString("disk_used=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiskUsed))
	builder.WriteString(", ")
	builder.WriteString("disk_free=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiskFree))
	builder.WriteString(", ")
	builder.WriteString("disk_usage_percent=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiskUsagePercent))
	builder.WriteString(", ")
	builder.WriteString("network_bytes_sent=")
	builder.WriteString(fmt.Sprintf("%v", _m.NetworkBytesSent))
	builder.WriteString(", ")
	builder.WriteString("network_bytes_recv=")
	builder.WriteString(fmt.Sprintf("%v", _m.NetworkBytesRecv))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(_m.Os)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(_m.Platform)
	builder.WriteString(", ")
	builder.WriteString("platform_version=")
	builder.WriteString(_m.PlatformVersion)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(_m.Hostname)
	builder.WriteString(", ")
	builder.WriteString("goroutines_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.GoroutinesCount))
	builder.WriteString(", ")
	builder.WriteString("heap_alloc=")
	builder.WriteString(fmt.Sprintf("%v", _m.HeapAlloc))
	builder.WriteString(", ")
	builder.WriteString("heap_sys=")
	builder.WriteString(fmt.Sprintf("%v", _m.HeapSys))
	builder.WriteString(", ")
	builder.WriteString("gc_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.GcCount))
	builder.WriteString(", ")
	builder.WriteString("load_avg_1=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoadAvg1))
	builder.WriteString(", ")
	builder.WriteString("load_avg_5=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoadAvg5))
	builder.WriteString(", ")
	builder.WriteString("load_avg_15=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoadAvg15))
	builder.WriteString(", ")
	builder.WriteString("uptime=")
	builder.WriteString(fmt.Sprintf("%v", _m.Uptime))
	builder.WriteString(", ")
	builder.WriteString("recorded_at=")
	builder.WriteString(_m.RecordedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemMonitors is a parsable slice of SystemMonitor.
type SystemMonitors []*SystemMonitor
