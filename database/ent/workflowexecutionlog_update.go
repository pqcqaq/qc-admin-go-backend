// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowexecutionlog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowExecutionLogUpdate is the builder for updating WorkflowExecutionLog entities.
type WorkflowExecutionLogUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionLogMutation
}

// Where appends a list predicates to the WorkflowExecutionLogUpdate builder.
func (_u *WorkflowExecutionLogUpdate) Where(ps ...predicate.WorkflowExecutionLog) *WorkflowExecutionLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowExecutionLogUpdate) SetCreateBy(v uint64) *WorkflowExecutionLogUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableCreateBy(v *uint64) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowExecutionLogUpdate) AddCreateBy(v int64) *WorkflowExecutionLogUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowExecutionLogUpdate) ClearCreateBy() *WorkflowExecutionLogUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowExecutionLogUpdate) SetUpdateTime(v time.Time) *WorkflowExecutionLogUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowExecutionLogUpdate) SetUpdateBy(v uint64) *WorkflowExecutionLogUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableUpdateBy(v *uint64) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowExecutionLogUpdate) AddUpdateBy(v int64) *WorkflowExecutionLogUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowExecutionLogUpdate) ClearUpdateBy() *WorkflowExecutionLogUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowExecutionLogUpdate) SetExecutionID(v uint64) *WorkflowExecutionLogUpdate {
	_u.mutation.ResetExecutionID()
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableExecutionID(v *uint64) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// AddExecutionID adds value to the "execution_id" field.
func (_u *WorkflowExecutionLogUpdate) AddExecutionID(v int64) *WorkflowExecutionLogUpdate {
	_u.mutation.AddExecutionID(v)
	return _u
}

// SetNodeExecutionID sets the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdate) SetNodeExecutionID(v uint64) *WorkflowExecutionLogUpdate {
	_u.mutation.ResetNodeExecutionID()
	_u.mutation.SetNodeExecutionID(v)
	return _u
}

// SetNillableNodeExecutionID sets the "node_execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableNodeExecutionID(v *uint64) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetNodeExecutionID(*v)
	}
	return _u
}

// AddNodeExecutionID adds value to the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdate) AddNodeExecutionID(v int64) *WorkflowExecutionLogUpdate {
	_u.mutation.AddNodeExecutionID(v)
	return _u
}

// ClearNodeExecutionID clears the value of the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdate) ClearNodeExecutionID() *WorkflowExecutionLogUpdate {
	_u.mutation.ClearNodeExecutionID()
	return _u
}

// SetLevel sets the "level" field.
func (_u *WorkflowExecutionLogUpdate) SetLevel(v workflowexecutionlog.Level) *WorkflowExecutionLogUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableLevel(v *workflowexecutionlog.Level) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *WorkflowExecutionLogUpdate) SetMessage(v string) *WorkflowExecutionLogUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableMessage(v *string) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *WorkflowExecutionLogUpdate) SetMetadata(v map[string]interface{}) *WorkflowExecutionLogUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *WorkflowExecutionLogUpdate) ClearMetadata() *WorkflowExecutionLogUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetLoggedAt sets the "logged_at" field.
func (_u *WorkflowExecutionLogUpdate) SetLoggedAt(v time.Time) *WorkflowExecutionLogUpdate {
	_u.mutation.SetLoggedAt(v)
	return _u
}

// SetNillableLoggedAt sets the "logged_at" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdate) SetNillableLoggedAt(v *time.Time) *WorkflowExecutionLogUpdate {
	if v != nil {
		_u.SetLoggedAt(*v)
	}
	return _u
}

// Mutation returns the WorkflowExecutionLogMutation object of the builder.
func (_u *WorkflowExecutionLogUpdate) Mutation() *WorkflowExecutionLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowExecutionLogUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowExecutionLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowExecutionLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowExecutionLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowExecutionLogUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowexecutionlog.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecutionlog.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecutionlog.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowExecutionLogUpdate) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := workflowexecutionlog.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecutionLog.level": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowExecutionLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecutionlog.Table, workflowexecutionlog.Columns, sqlgraph.NewFieldSpec(workflowexecutionlog.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowexecutionlog.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowexecutionlog.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowexecutionlog.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecutionlog.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExecutionID(); ok {
		_spec.SetField(workflowexecutionlog.FieldExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedExecutionID(); ok {
		_spec.AddField(workflowexecutionlog.FieldExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.NodeExecutionID(); ok {
		_spec.SetField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNodeExecutionID(); ok {
		_spec.AddField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64, value)
	}
	if _u.mutation.NodeExecutionIDCleared() {
		_spec.ClearField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(workflowexecutionlog.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(workflowexecutionlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(workflowexecutionlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(workflowexecutionlog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.LoggedAt(); ok {
		_spec.SetField(workflowexecutionlog.FieldLoggedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecutionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowExecutionLogUpdateOne is the builder for updating a single WorkflowExecutionLog entity.
type WorkflowExecutionLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowExecutionLogMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowExecutionLogUpdateOne) SetCreateBy(v uint64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowExecutionLogUpdateOne) AddCreateBy(v int64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowExecutionLogUpdateOne) ClearCreateBy() *WorkflowExecutionLogUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowExecutionLogUpdateOne) SetUpdateTime(v time.Time) *WorkflowExecutionLogUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowExecutionLogUpdateOne) SetUpdateBy(v uint64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowExecutionLogUpdateOne) AddUpdateBy(v int64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowExecutionLogUpdateOne) ClearUpdateBy() *WorkflowExecutionLogUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowExecutionLogUpdateOne) SetExecutionID(v uint64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.ResetExecutionID()
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableExecutionID(v *uint64) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// AddExecutionID adds value to the "execution_id" field.
func (_u *WorkflowExecutionLogUpdateOne) AddExecutionID(v int64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.AddExecutionID(v)
	return _u
}

// SetNodeExecutionID sets the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdateOne) SetNodeExecutionID(v uint64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.ResetNodeExecutionID()
	_u.mutation.SetNodeExecutionID(v)
	return _u
}

// SetNillableNodeExecutionID sets the "node_execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableNodeExecutionID(v *uint64) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetNodeExecutionID(*v)
	}
	return _u
}

// AddNodeExecutionID adds value to the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdateOne) AddNodeExecutionID(v int64) *WorkflowExecutionLogUpdateOne {
	_u.mutation.AddNodeExecutionID(v)
	return _u
}

// ClearNodeExecutionID clears the value of the "node_execution_id" field.
func (_u *WorkflowExecutionLogUpdateOne) ClearNodeExecutionID() *WorkflowExecutionLogUpdateOne {
	_u.mutation.ClearNodeExecutionID()
	return _u
}

// SetLevel sets the "level" field.
func (_u *WorkflowExecutionLogUpdateOne) SetLevel(v workflowexecutionlog.Level) *WorkflowExecutionLogUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableLevel(v *workflowexecutionlog.Level) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *WorkflowExecutionLogUpdateOne) SetMessage(v string) *WorkflowExecutionLogUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableMessage(v *string) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *WorkflowExecutionLogUpdateOne) SetMetadata(v map[string]interface{}) *WorkflowExecutionLogUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *WorkflowExecutionLogUpdateOne) ClearMetadata() *WorkflowExecutionLogUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetLoggedAt sets the "logged_at" field.
func (_u *WorkflowExecutionLogUpdateOne) SetLoggedAt(v time.Time) *WorkflowExecutionLogUpdateOne {
	_u.mutation.SetLoggedAt(v)
	return _u
}

// SetNillableLoggedAt sets the "logged_at" field if the given value is not nil.
func (_u *WorkflowExecutionLogUpdateOne) SetNillableLoggedAt(v *time.Time) *WorkflowExecutionLogUpdateOne {
	if v != nil {
		_u.SetLoggedAt(*v)
	}
	return _u
}

// Mutation returns the WorkflowExecutionLogMutation object of the builder.
func (_u *WorkflowExecutionLogUpdateOne) Mutation() *WorkflowExecutionLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the WorkflowExecutionLogUpdate builder.
func (_u *WorkflowExecutionLogUpdateOne) Where(ps ...predicate.WorkflowExecutionLog) *WorkflowExecutionLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowExecutionLogUpdateOne) Select(field string, fields ...string) *WorkflowExecutionLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowExecutionLog entity.
func (_u *WorkflowExecutionLogUpdateOne) Save(ctx context.Context) (*WorkflowExecutionLog, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowExecutionLogUpdateOne) SaveX(ctx context.Context) *WorkflowExecutionLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowExecutionLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowExecutionLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowExecutionLogUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowexecutionlog.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecutionlog.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecutionlog.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowExecutionLogUpdateOne) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := workflowexecutionlog.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecutionLog.level": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowExecutionLogUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecutionLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecutionlog.Table, workflowexecutionlog.Columns, sqlgraph.NewFieldSpec(workflowexecutionlog.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowExecutionLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecutionlog.FieldID)
		for _, f := range fields {
			if !workflowexecutionlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowexecutionlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowexecutionlog.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowexecutionlog.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowexecutionlog.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecutionlog.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowexecutionlog.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExecutionID(); ok {
		_spec.SetField(workflowexecutionlog.FieldExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedExecutionID(); ok {
		_spec.AddField(workflowexecutionlog.FieldExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.NodeExecutionID(); ok {
		_spec.SetField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNodeExecutionID(); ok {
		_spec.AddField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64, value)
	}
	if _u.mutation.NodeExecutionIDCleared() {
		_spec.ClearField(workflowexecutionlog.FieldNodeExecutionID, field.TypeUint64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(workflowexecutionlog.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(workflowexecutionlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(workflowexecutionlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(workflowexecutionlog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.LoggedAt(); ok {
		_spec.SetField(workflowexecutionlog.FieldLoggedAt, field.TypeTime, value)
	}
	_node = &WorkflowExecutionLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecutionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
