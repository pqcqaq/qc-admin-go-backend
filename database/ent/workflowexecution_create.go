// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowExecutionCreate is the builder for creating a WorkflowExecution entity.
type WorkflowExecutionCreate struct {
	config
	mutation *WorkflowExecutionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WorkflowExecutionCreate) SetCreateTime(v time.Time) *WorkflowExecutionCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableCreateTime(v *time.Time) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *WorkflowExecutionCreate) SetCreateBy(v uint64) *WorkflowExecutionCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableCreateBy(v *uint64) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WorkflowExecutionCreate) SetUpdateTime(v time.Time) *WorkflowExecutionCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableUpdateTime(v *time.Time) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *WorkflowExecutionCreate) SetUpdateBy(v uint64) *WorkflowExecutionCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableUpdateBy(v *uint64) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetExecutionID sets the "execution_id" field.
func (_c *WorkflowExecutionCreate) SetExecutionID(v string) *WorkflowExecutionCreate {
	_c.mutation.SetExecutionID(v)
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *WorkflowExecutionCreate) SetApplicationID(v uint64) *WorkflowExecutionCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *WorkflowExecutionCreate) SetStatus(v workflowexecution.Status) *WorkflowExecutionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableStatus(v *workflowexecution.Status) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetInput sets the "input" field.
func (_c *WorkflowExecutionCreate) SetInput(v map[string]interface{}) *WorkflowExecutionCreate {
	_c.mutation.SetInput(v)
	return _c
}

// SetOutput sets the "output" field.
func (_c *WorkflowExecutionCreate) SetOutput(v map[string]interface{}) *WorkflowExecutionCreate {
	_c.mutation.SetOutput(v)
	return _c
}

// SetContext sets the "context" field.
func (_c *WorkflowExecutionCreate) SetContext(v map[string]interface{}) *WorkflowExecutionCreate {
	_c.mutation.SetContext(v)
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *WorkflowExecutionCreate) SetStartedAt(v time.Time) *WorkflowExecutionCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableStartedAt(v *time.Time) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetFinishedAt sets the "finished_at" field.
func (_c *WorkflowExecutionCreate) SetFinishedAt(v time.Time) *WorkflowExecutionCreate {
	_c.mutation.SetFinishedAt(v)
	return _c
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableFinishedAt(v *time.Time) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetFinishedAt(*v)
	}
	return _c
}

// SetDurationMs sets the "duration_ms" field.
func (_c *WorkflowExecutionCreate) SetDurationMs(v int) *WorkflowExecutionCreate {
	_c.mutation.SetDurationMs(v)
	return _c
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableDurationMs(v *int) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetDurationMs(*v)
	}
	return _c
}

// SetTotalTokens sets the "total_tokens" field.
func (_c *WorkflowExecutionCreate) SetTotalTokens(v int) *WorkflowExecutionCreate {
	_c.mutation.SetTotalTokens(v)
	return _c
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableTotalTokens(v *int) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetTotalTokens(*v)
	}
	return _c
}

// SetTotalCost sets the "total_cost" field.
func (_c *WorkflowExecutionCreate) SetTotalCost(v float64) *WorkflowExecutionCreate {
	_c.mutation.SetTotalCost(v)
	return _c
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableTotalCost(v *float64) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetTotalCost(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *WorkflowExecutionCreate) SetErrorMessage(v string) *WorkflowExecutionCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableErrorMessage(v *string) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetErrorStack sets the "error_stack" field.
func (_c *WorkflowExecutionCreate) SetErrorStack(v string) *WorkflowExecutionCreate {
	_c.mutation.SetErrorStack(v)
	return _c
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableErrorStack(v *string) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetErrorStack(*v)
	}
	return _c
}

// SetTriggeredBy sets the "triggered_by" field.
func (_c *WorkflowExecutionCreate) SetTriggeredBy(v string) *WorkflowExecutionCreate {
	_c.mutation.SetTriggeredBy(v)
	return _c
}

// SetNillableTriggeredBy sets the "triggered_by" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableTriggeredBy(v *string) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetTriggeredBy(*v)
	}
	return _c
}

// SetTriggerSource sets the "trigger_source" field.
func (_c *WorkflowExecutionCreate) SetTriggerSource(v string) *WorkflowExecutionCreate {
	_c.mutation.SetTriggerSource(v)
	return _c
}

// SetNillableTriggerSource sets the "trigger_source" field if the given value is not nil.
func (_c *WorkflowExecutionCreate) SetNillableTriggerSource(v *string) *WorkflowExecutionCreate {
	if v != nil {
		_c.SetTriggerSource(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *WorkflowExecutionCreate) SetID(v uint64) *WorkflowExecutionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_c *WorkflowExecutionCreate) SetApplication(v *WorkflowApplication) *WorkflowExecutionCreate {
	return _c.SetApplicationID(v.ID)
}

// AddNodeExecutionIDs adds the "node_executions" edge to the WorkflowNodeExecution entity by IDs.
func (_c *WorkflowExecutionCreate) AddNodeExecutionIDs(ids ...uint64) *WorkflowExecutionCreate {
	_c.mutation.AddNodeExecutionIDs(ids...)
	return _c
}

// AddNodeExecutions adds the "node_executions" edges to the WorkflowNodeExecution entity.
func (_c *WorkflowExecutionCreate) AddNodeExecutions(v ...*WorkflowNodeExecution) *WorkflowExecutionCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNodeExecutionIDs(ids...)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (_c *WorkflowExecutionCreate) Mutation() *WorkflowExecutionMutation {
	return _c.mutation
}

// Save creates the WorkflowExecution in the database.
func (_c *WorkflowExecutionCreate) Save(ctx context.Context) (*WorkflowExecution, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowExecutionCreate) SaveX(ctx context.Context) *WorkflowExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowExecutionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowExecutionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WorkflowExecutionCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if workflowexecution.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecution.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecution.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if workflowexecution.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecution.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecution.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := workflowexecution.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		v := workflowexecution.DefaultDurationMs
		_c.mutation.SetDurationMs(v)
	}
	if _, ok := _c.mutation.TotalTokens(); !ok {
		v := workflowexecution.DefaultTotalTokens
		_c.mutation.SetTotalTokens(v)
	}
	if _, ok := _c.mutation.TotalCost(); !ok {
		v := workflowexecution.DefaultTotalCost
		_c.mutation.SetTotalCost(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowExecutionCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowExecution.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowExecution.update_time"`)}
	}
	if _, ok := _c.mutation.ExecutionID(); !ok {
		return &ValidationError{Name: "execution_id", err: errors.New(`ent: missing required field "WorkflowExecution.execution_id"`)}
	}
	if v, ok := _c.mutation.ExecutionID(); ok {
		if err := workflowexecution.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.execution_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "WorkflowExecution.application_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowExecution.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "WorkflowExecution.duration_ms"`)}
	}
	if _, ok := _c.mutation.TotalTokens(); !ok {
		return &ValidationError{Name: "total_tokens", err: errors.New(`ent: missing required field "WorkflowExecution.total_tokens"`)}
	}
	if _, ok := _c.mutation.TotalCost(); !ok {
		return &ValidationError{Name: "total_cost", err: errors.New(`ent: missing required field "WorkflowExecution.total_cost"`)}
	}
	if len(_c.mutation.ApplicationIDs()) == 0 {
		return &ValidationError{Name: "application", err: errors.New(`ent: missing required edge "WorkflowExecution.application"`)}
	}
	return nil
}

func (_c *WorkflowExecutionCreate) sqlSave(ctx context.Context) (*WorkflowExecution, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowExecutionCreate) createSpec() (*WorkflowExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowExecution{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflowexecution.Table, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(workflowexecution.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(workflowexecution.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(workflowexecution.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.ExecutionID(); ok {
		_spec.SetField(workflowexecution.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Input(); ok {
		_spec.SetField(workflowexecution.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := _c.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
		_node.Output = value
	}
	if value, ok := _c.mutation.Context(); ok {
		_spec.SetField(workflowexecution.FieldContext, field.TypeJSON, value)
		_node.Context = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.FinishedAt(); ok {
		_spec.SetField(workflowexecution.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := _c.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecution.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := _c.mutation.TotalTokens(); ok {
		_spec.SetField(workflowexecution.FieldTotalTokens, field.TypeInt, value)
		_node.TotalTokens = value
	}
	if value, ok := _c.mutation.TotalCost(); ok {
		_spec.SetField(workflowexecution.FieldTotalCost, field.TypeFloat64, value)
		_node.TotalCost = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(workflowexecution.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := _c.mutation.ErrorStack(); ok {
		_spec.SetField(workflowexecution.FieldErrorStack, field.TypeString, value)
		_node.ErrorStack = value
	}
	if value, ok := _c.mutation.TriggeredBy(); ok {
		_spec.SetField(workflowexecution.FieldTriggeredBy, field.TypeString, value)
		_node.TriggeredBy = value
	}
	if value, ok := _c.mutation.TriggerSource(); ok {
		_spec.SetField(workflowexecution.FieldTriggerSource, field.TypeString, value)
		_node.TriggerSource = value
	}
	if nodes := _c.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ApplicationTable,
			Columns: []string{workflowexecution.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NodeExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowExecutionCreateBulk is the builder for creating many WorkflowExecution entities in bulk.
type WorkflowExecutionCreateBulk struct {
	config
	err      error
	builders []*WorkflowExecutionCreate
}

// Save creates the WorkflowExecution entities in the database.
func (_c *WorkflowExecutionCreateBulk) Save(ctx context.Context) ([]*WorkflowExecution, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*WorkflowExecution, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowExecutionCreateBulk) SaveX(ctx context.Context) []*WorkflowExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
