// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/systemmonitor"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemMonitorCreate is the builder for creating a SystemMonitor entity.
type SystemMonitorCreate struct {
	config
	mutation *SystemMonitorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *SystemMonitorCreate) SetCreateTime(v time.Time) *SystemMonitorCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableCreateTime(v *time.Time) *SystemMonitorCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *SystemMonitorCreate) SetCreateBy(v uint64) *SystemMonitorCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableCreateBy(v *uint64) *SystemMonitorCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *SystemMonitorCreate) SetUpdateTime(v time.Time) *SystemMonitorCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableUpdateTime(v *time.Time) *SystemMonitorCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *SystemMonitorCreate) SetUpdateBy(v uint64) *SystemMonitorCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableUpdateBy(v *uint64) *SystemMonitorCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetCPUUsagePercent sets the "cpu_usage_percent" field.
func (_c *SystemMonitorCreate) SetCPUUsagePercent(v float64) *SystemMonitorCreate {
	_c.mutation.SetCPUUsagePercent(v)
	return _c
}

// SetCPUCores sets the "cpu_cores" field.
func (_c *SystemMonitorCreate) SetCPUCores(v int) *SystemMonitorCreate {
	_c.mutation.SetCPUCores(v)
	return _c
}

// SetMemoryTotal sets the "memory_total" field.
func (_c *SystemMonitorCreate) SetMemoryTotal(v uint64) *SystemMonitorCreate {
	_c.mutation.SetMemoryTotal(v)
	return _c
}

// SetMemoryUsed sets the "memory_used" field.
func (_c *SystemMonitorCreate) SetMemoryUsed(v uint64) *SystemMonitorCreate {
	_c.mutation.SetMemoryUsed(v)
	return _c
}

// SetMemoryFree sets the "memory_free" field.
func (_c *SystemMonitorCreate) SetMemoryFree(v uint64) *SystemMonitorCreate {
	_c.mutation.SetMemoryFree(v)
	return _c
}

// SetMemoryUsagePercent sets the "memory_usage_percent" field.
func (_c *SystemMonitorCreate) SetMemoryUsagePercent(v float64) *SystemMonitorCreate {
	_c.mutation.SetMemoryUsagePercent(v)
	return _c
}

// SetDiskTotal sets the "disk_total" field.
func (_c *SystemMonitorCreate) SetDiskTotal(v uint64) *SystemMonitorCreate {
	_c.mutation.SetDiskTotal(v)
	return _c
}

// SetDiskUsed sets the "disk_used" field.
func (_c *SystemMonitorCreate) SetDiskUsed(v uint64) *SystemMonitorCreate {
	_c.mutation.SetDiskUsed(v)
	return _c
}

// SetDiskFree sets the "disk_free" field.
func (_c *SystemMonitorCreate) SetDiskFree(v uint64) *SystemMonitorCreate {
	_c.mutation.SetDiskFree(v)
	return _c
}

// SetDiskUsagePercent sets the "disk_usage_percent" field.
func (_c *SystemMonitorCreate) SetDiskUsagePercent(v float64) *SystemMonitorCreate {
	_c.mutation.SetDiskUsagePercent(v)
	return _c
}

// SetNetworkBytesSent sets the "network_bytes_sent" field.
func (_c *SystemMonitorCreate) SetNetworkBytesSent(v uint64) *SystemMonitorCreate {
	_c.mutation.SetNetworkBytesSent(v)
	return _c
}

// SetNillableNetworkBytesSent sets the "network_bytes_sent" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableNetworkBytesSent(v *uint64) *SystemMonitorCreate {
	if v != nil {
		_c.SetNetworkBytesSent(*v)
	}
	return _c
}

// SetNetworkBytesRecv sets the "network_bytes_recv" field.
func (_c *SystemMonitorCreate) SetNetworkBytesRecv(v uint64) *SystemMonitorCreate {
	_c.mutation.SetNetworkBytesRecv(v)
	return _c
}

// SetNillableNetworkBytesRecv sets the "network_bytes_recv" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableNetworkBytesRecv(v *uint64) *SystemMonitorCreate {
	if v != nil {
		_c.SetNetworkBytesRecv(*v)
	}
	return _c
}

// SetOs sets the "os" field.
func (_c *SystemMonitorCreate) SetOs(v string) *SystemMonitorCreate {
	_c.mutation.SetOs(v)
	return _c
}

// SetPlatform sets the "platform" field.
func (_c *SystemMonitorCreate) SetPlatform(v string) *SystemMonitorCreate {
	_c.mutation.SetPlatform(v)
	return _c
}

// SetPlatformVersion sets the "platform_version" field.
func (_c *SystemMonitorCreate) SetPlatformVersion(v string) *SystemMonitorCreate {
	_c.mutation.SetPlatformVersion(v)
	return _c
}

// SetHostname sets the "hostname" field.
func (_c *SystemMonitorCreate) SetHostname(v string) *SystemMonitorCreate {
	_c.mutation.SetHostname(v)
	return _c
}

// SetGoroutinesCount sets the "goroutines_count" field.
func (_c *SystemMonitorCreate) SetGoroutinesCount(v int) *SystemMonitorCreate {
	_c.mutation.SetGoroutinesCount(v)
	return _c
}

// SetHeapAlloc sets the "heap_alloc" field.
func (_c *SystemMonitorCreate) SetHeapAlloc(v uint64) *SystemMonitorCreate {
	_c.mutation.SetHeapAlloc(v)
	return _c
}

// SetHeapSys sets the "heap_sys" field.
func (_c *SystemMonitorCreate) SetHeapSys(v uint64) *SystemMonitorCreate {
	_c.mutation.SetHeapSys(v)
	return _c
}

// SetGcCount sets the "gc_count" field.
func (_c *SystemMonitorCreate) SetGcCount(v uint32) *SystemMonitorCreate {
	_c.mutation.SetGcCount(v)
	return _c
}

// SetLoadAvg1 sets the "load_avg_1" field.
func (_c *SystemMonitorCreate) SetLoadAvg1(v float64) *SystemMonitorCreate {
	_c.mutation.SetLoadAvg1(v)
	return _c
}

// SetNillableLoadAvg1 sets the "load_avg_1" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableLoadAvg1(v *float64) *SystemMonitorCreate {
	if v != nil {
		_c.SetLoadAvg1(*v)
	}
	return _c
}

// SetLoadAvg5 sets the "load_avg_5" field.
func (_c *SystemMonitorCreate) SetLoadAvg5(v float64) *SystemMonitorCreate {
	_c.mutation.SetLoadAvg5(v)
	return _c
}

// SetNillableLoadAvg5 sets the "load_avg_5" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableLoadAvg5(v *float64) *SystemMonitorCreate {
	if v != nil {
		_c.SetLoadAvg5(*v)
	}
	return _c
}

// SetLoadAvg15 sets the "load_avg_15" field.
func (_c *SystemMonitorCreate) SetLoadAvg15(v float64) *SystemMonitorCreate {
	_c.mutation.SetLoadAvg15(v)
	return _c
}

// SetNillableLoadAvg15 sets the "load_avg_15" field if the given value is not nil.
func (_c *SystemMonitorCreate) SetNillableLoadAvg15(v *float64) *SystemMonitorCreate {
	if v != nil {
		_c.SetLoadAvg15(*v)
	}
	return _c
}

// SetUptime sets the "uptime" field.
func (_c *SystemMonitorCreate) SetUptime(v uint64) *SystemMonitorCreate {
	_c.mutation.SetUptime(v)
	return _c
}

// SetRecordedAt sets the "recorded_at" field.
func (_c *SystemMonitorCreate) SetRecordedAt(v time.Time) *SystemMonitorCreate {
	_c.mutation.SetRecordedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *SystemMonitorCreate) SetID(v uint64) *SystemMonitorCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the SystemMonitorMutation object of the builder.
func (_c *SystemMonitorCreate) Mutation() *SystemMonitorMutation {
	return _c.mutation
}

// Save creates the SystemMonitor in the database.
func (_c *SystemMonitorCreate) Save(ctx context.Context) (*SystemMonitor, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SystemMonitorCreate) SaveX(ctx context.Context) *SystemMonitor {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemMonitorCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemMonitorCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SystemMonitorCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if systemmonitor.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized systemmonitor.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := systemmonitor.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if systemmonitor.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized systemmonitor.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := systemmonitor.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.NetworkBytesSent(); !ok {
		v := systemmonitor.DefaultNetworkBytesSent
		_c.mutation.SetNetworkBytesSent(v)
	}
	if _, ok := _c.mutation.NetworkBytesRecv(); !ok {
		v := systemmonitor.DefaultNetworkBytesRecv
		_c.mutation.SetNetworkBytesRecv(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *SystemMonitorCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SystemMonitor.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SystemMonitor.update_time"`)}
	}
	if _, ok := _c.mutation.CPUUsagePercent(); !ok {
		return &ValidationError{Name: "cpu_usage_percent", err: errors.New(`ent: missing required field "SystemMonitor.cpu_usage_percent"`)}
	}
	if v, ok := _c.mutation.CPUUsagePercent(); ok {
		if err := systemmonitor.CPUUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "cpu_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_usage_percent": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CPUCores(); !ok {
		return &ValidationError{Name: "cpu_cores", err: errors.New(`ent: missing required field "SystemMonitor.cpu_cores"`)}
	}
	if v, ok := _c.mutation.CPUCores(); ok {
		if err := systemmonitor.CPUCoresValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cores", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_cores": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MemoryTotal(); !ok {
		return &ValidationError{Name: "memory_total", err: errors.New(`ent: missing required field "SystemMonitor.memory_total"`)}
	}
	if _, ok := _c.mutation.MemoryUsed(); !ok {
		return &ValidationError{Name: "memory_used", err: errors.New(`ent: missing required field "SystemMonitor.memory_used"`)}
	}
	if _, ok := _c.mutation.MemoryFree(); !ok {
		return &ValidationError{Name: "memory_free", err: errors.New(`ent: missing required field "SystemMonitor.memory_free"`)}
	}
	if _, ok := _c.mutation.MemoryUsagePercent(); !ok {
		return &ValidationError{Name: "memory_usage_percent", err: errors.New(`ent: missing required field "SystemMonitor.memory_usage_percent"`)}
	}
	if v, ok := _c.mutation.MemoryUsagePercent(); ok {
		if err := systemmonitor.MemoryUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "memory_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.memory_usage_percent": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DiskTotal(); !ok {
		return &ValidationError{Name: "disk_total", err: errors.New(`ent: missing required field "SystemMonitor.disk_total"`)}
	}
	if _, ok := _c.mutation.DiskUsed(); !ok {
		return &ValidationError{Name: "disk_used", err: errors.New(`ent: missing required field "SystemMonitor.disk_used"`)}
	}
	if _, ok := _c.mutation.DiskFree(); !ok {
		return &ValidationError{Name: "disk_free", err: errors.New(`ent: missing required field "SystemMonitor.disk_free"`)}
	}
	if _, ok := _c.mutation.DiskUsagePercent(); !ok {
		return &ValidationError{Name: "disk_usage_percent", err: errors.New(`ent: missing required field "SystemMonitor.disk_usage_percent"`)}
	}
	if v, ok := _c.mutation.DiskUsagePercent(); ok {
		if err := systemmonitor.DiskUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "disk_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.disk_usage_percent": %w`, err)}
		}
	}
	if _, ok := _c.mutation.NetworkBytesSent(); !ok {
		return &ValidationError{Name: "network_bytes_sent", err: errors.New(`ent: missing required field "SystemMonitor.network_bytes_sent"`)}
	}
	if _, ok := _c.mutation.NetworkBytesRecv(); !ok {
		return &ValidationError{Name: "network_bytes_recv", err: errors.New(`ent: missing required field "SystemMonitor.network_bytes_recv"`)}
	}
	if _, ok := _c.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "SystemMonitor.os"`)}
	}
	if v, ok := _c.mutation.Os(); ok {
		if err := systemmonitor.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.os": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "SystemMonitor.platform"`)}
	}
	if v, ok := _c.mutation.Platform(); ok {
		if err := systemmonitor.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PlatformVersion(); !ok {
		return &ValidationError{Name: "platform_version", err: errors.New(`ent: missing required field "SystemMonitor.platform_version"`)}
	}
	if v, ok := _c.mutation.PlatformVersion(); ok {
		if err := systemmonitor.PlatformVersionValidator(v); err != nil {
			return &ValidationError{Name: "platform_version", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform_version": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "SystemMonitor.hostname"`)}
	}
	if v, ok := _c.mutation.Hostname(); ok {
		if err := systemmonitor.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.hostname": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GoroutinesCount(); !ok {
		return &ValidationError{Name: "goroutines_count", err: errors.New(`ent: missing required field "SystemMonitor.goroutines_count"`)}
	}
	if v, ok := _c.mutation.GoroutinesCount(); ok {
		if err := systemmonitor.GoroutinesCountValidator(v); err != nil {
			return &ValidationError{Name: "goroutines_count", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.goroutines_count": %w`, err)}
		}
	}
	if _, ok := _c.mutation.HeapAlloc(); !ok {
		return &ValidationError{Name: "heap_alloc", err: errors.New(`ent: missing required field "SystemMonitor.heap_alloc"`)}
	}
	if _, ok := _c.mutation.HeapSys(); !ok {
		return &ValidationError{Name: "heap_sys", err: errors.New(`ent: missing required field "SystemMonitor.heap_sys"`)}
	}
	if _, ok := _c.mutation.GcCount(); !ok {
		return &ValidationError{Name: "gc_count", err: errors.New(`ent: missing required field "SystemMonitor.gc_count"`)}
	}
	if _, ok := _c.mutation.Uptime(); !ok {
		return &ValidationError{Name: "uptime", err: errors.New(`ent: missing required field "SystemMonitor.uptime"`)}
	}
	if _, ok := _c.mutation.RecordedAt(); !ok {
		return &ValidationError{Name: "recorded_at", err: errors.New(`ent: missing required field "SystemMonitor.recorded_at"`)}
	}
	return nil
}

func (_c *SystemMonitorCreate) sqlSave(ctx context.Context) (*SystemMonitor, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SystemMonitorCreate) createSpec() (*SystemMonitor, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemMonitor{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(systemmonitor.Table, sqlgraph.NewFieldSpec(systemmonitor.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(systemmonitor.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(systemmonitor.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(systemmonitor.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(systemmonitor.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.CPUUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldCPUUsagePercent, field.TypeFloat64, value)
		_node.CPUUsagePercent = value
	}
	if value, ok := _c.mutation.CPUCores(); ok {
		_spec.SetField(systemmonitor.FieldCPUCores, field.TypeInt, value)
		_node.CPUCores = value
	}
	if value, ok := _c.mutation.MemoryTotal(); ok {
		_spec.SetField(systemmonitor.FieldMemoryTotal, field.TypeUint64, value)
		_node.MemoryTotal = value
	}
	if value, ok := _c.mutation.MemoryUsed(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsed, field.TypeUint64, value)
		_node.MemoryUsed = value
	}
	if value, ok := _c.mutation.MemoryFree(); ok {
		_spec.SetField(systemmonitor.FieldMemoryFree, field.TypeUint64, value)
		_node.MemoryFree = value
	}
	if value, ok := _c.mutation.MemoryUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsagePercent, field.TypeFloat64, value)
		_node.MemoryUsagePercent = value
	}
	if value, ok := _c.mutation.DiskTotal(); ok {
		_spec.SetField(systemmonitor.FieldDiskTotal, field.TypeUint64, value)
		_node.DiskTotal = value
	}
	if value, ok := _c.mutation.DiskUsed(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsed, field.TypeUint64, value)
		_node.DiskUsed = value
	}
	if value, ok := _c.mutation.DiskFree(); ok {
		_spec.SetField(systemmonitor.FieldDiskFree, field.TypeUint64, value)
		_node.DiskFree = value
	}
	if value, ok := _c.mutation.DiskUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsagePercent, field.TypeFloat64, value)
		_node.DiskUsagePercent = value
	}
	if value, ok := _c.mutation.NetworkBytesSent(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesSent, field.TypeUint64, value)
		_node.NetworkBytesSent = value
	}
	if value, ok := _c.mutation.NetworkBytesRecv(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesRecv, field.TypeUint64, value)
		_node.NetworkBytesRecv = value
	}
	if value, ok := _c.mutation.Os(); ok {
		_spec.SetField(systemmonitor.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := _c.mutation.Platform(); ok {
		_spec.SetField(systemmonitor.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := _c.mutation.PlatformVersion(); ok {
		_spec.SetField(systemmonitor.FieldPlatformVersion, field.TypeString, value)
		_node.PlatformVersion = value
	}
	if value, ok := _c.mutation.Hostname(); ok {
		_spec.SetField(systemmonitor.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := _c.mutation.GoroutinesCount(); ok {
		_spec.SetField(systemmonitor.FieldGoroutinesCount, field.TypeInt, value)
		_node.GoroutinesCount = value
	}
	if value, ok := _c.mutation.HeapAlloc(); ok {
		_spec.SetField(systemmonitor.FieldHeapAlloc, field.TypeUint64, value)
		_node.HeapAlloc = value
	}
	if value, ok := _c.mutation.HeapSys(); ok {
		_spec.SetField(systemmonitor.FieldHeapSys, field.TypeUint64, value)
		_node.HeapSys = value
	}
	if value, ok := _c.mutation.GcCount(); ok {
		_spec.SetField(systemmonitor.FieldGcCount, field.TypeUint32, value)
		_node.GcCount = value
	}
	if value, ok := _c.mutation.LoadAvg1(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg1, field.TypeFloat64, value)
		_node.LoadAvg1 = value
	}
	if value, ok := _c.mutation.LoadAvg5(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg5, field.TypeFloat64, value)
		_node.LoadAvg5 = value
	}
	if value, ok := _c.mutation.LoadAvg15(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg15, field.TypeFloat64, value)
		_node.LoadAvg15 = value
	}
	if value, ok := _c.mutation.Uptime(); ok {
		_spec.SetField(systemmonitor.FieldUptime, field.TypeUint64, value)
		_node.Uptime = value
	}
	if value, ok := _c.mutation.RecordedAt(); ok {
		_spec.SetField(systemmonitor.FieldRecordedAt, field.TypeTime, value)
		_node.RecordedAt = value
	}
	return _node, _spec
}

// SystemMonitorCreateBulk is the builder for creating many SystemMonitor entities in bulk.
type SystemMonitorCreateBulk struct {
	config
	err      error
	builders []*SystemMonitorCreate
}

// Save creates the SystemMonitor entities in the database.
func (_c *SystemMonitorCreateBulk) Save(ctx context.Context) ([]*SystemMonitor, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SystemMonitor, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemMonitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SystemMonitorCreateBulk) SaveX(ctx context.Context) []*SystemMonitor {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemMonitorCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemMonitorCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
