// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/apiauth"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/clientdevice"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/loginrecord"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/role"
	"go-backend/database/ent/rolepermission"
	"go-backend/database/ent/scan"
	"go-backend/database/ent/scope"
	"go-backend/database/ent/user"
	"go-backend/database/ent/userrole"
	"go-backend/database/ent/verifycode"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPIAuth        = "APIAuth"
	TypeAttachment     = "Attachment"
	TypeClientDevice   = "ClientDevice"
	TypeCredential     = "Credential"
	TypeLogging        = "Logging"
	TypeLoginRecord    = "LoginRecord"
	TypePermission     = "Permission"
	TypeRole           = "Role"
	TypeRolePermission = "RolePermission"
	TypeScan           = "Scan"
	TypeScope          = "Scope"
	TypeUser           = "User"
	TypeUserRole       = "UserRole"
	TypeVerifyCode     = "VerifyCode"
)

// APIAuthMutation represents an operation that mutates the APIAuth nodes in the graph.
type APIAuthMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	create_time        *time.Time
	create_by          *uint64
	addcreate_by       *int64
	update_time        *time.Time
	update_by          *uint64
	addupdate_by       *int64
	delete_time        *time.Time
	delete_by          *uint64
	adddelete_by       *int64
	name               *string
	description        *string
	method             *string
	_path              *string
	is_public          *bool
	is_active          *bool
	metadata           *map[string]interface{}
	clearedFields      map[string]struct{}
	permissions        map[uint64]struct{}
	removedpermissions map[uint64]struct{}
	clearedpermissions bool
	done               bool
	oldValue           func(context.Context) (*APIAuth, error)
	predicates         []predicate.APIAuth
}

var _ ent.Mutation = (*APIAuthMutation)(nil)

// apiauthOption allows management of the mutation configuration using functional options.
type apiauthOption func(*APIAuthMutation)

// newAPIAuthMutation creates new mutation for the APIAuth entity.
func newAPIAuthMutation(c config, op Op, opts ...apiauthOption) *APIAuthMutation {
	m := &APIAuthMutation{
		config:        c,
		op:            op,
		typ:           TypeAPIAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIAuthID sets the ID field of the mutation.
func withAPIAuthID(id uint64) apiauthOption {
	return func(m *APIAuthMutation) {
		var (
			err   error
			once  sync.Once
			value *APIAuth
		)
		m.oldValue = func(ctx context.Context) (*APIAuth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().APIAuth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPIAuth sets the old APIAuth of the mutation.
func withAPIAuth(node *APIAuth) apiauthOption {
	return func(m *APIAuthMutation) {
		m.oldValue = func(context.Context) (*APIAuth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIAuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIAuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of APIAuth entities.
func (m *APIAuthMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *APIAuthMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *APIAuthMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().APIAuth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *APIAuthMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *APIAuthMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *APIAuthMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *APIAuthMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *APIAuthMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *APIAuthMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *APIAuthMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *APIAuthMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[apiauth.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *APIAuthMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *APIAuthMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, apiauth.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *APIAuthMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *APIAuthMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *APIAuthMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *APIAuthMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *APIAuthMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *APIAuthMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *APIAuthMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *APIAuthMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[apiauth.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *APIAuthMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *APIAuthMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, apiauth.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *APIAuthMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *APIAuthMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *APIAuthMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[apiauth.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *APIAuthMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *APIAuthMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, apiauth.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *APIAuthMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *APIAuthMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *APIAuthMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *APIAuthMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *APIAuthMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[apiauth.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *APIAuthMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *APIAuthMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, apiauth.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *APIAuthMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *APIAuthMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *APIAuthMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *APIAuthMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *APIAuthMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *APIAuthMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[apiauth.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *APIAuthMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *APIAuthMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, apiauth.FieldDescription)
}

// SetMethod sets the "method" field.
func (m *APIAuthMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *APIAuthMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *APIAuthMutation) ResetMethod() {
	m.method = nil
}

// SetPath sets the "path" field.
func (m *APIAuthMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *APIAuthMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *APIAuthMutation) ResetPath() {
	m._path = nil
}

// SetIsPublic sets the "is_public" field.
func (m *APIAuthMutation) SetIsPublic(b bool) {
	m.is_public = &b
}

// IsPublic returns the value of the "is_public" field in the mutation.
func (m *APIAuthMutation) IsPublic() (r bool, exists bool) {
	v := m.is_public
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPublic returns the old "is_public" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldIsPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPublic: %w", err)
	}
	return oldValue.IsPublic, nil
}

// ResetIsPublic resets all changes to the "is_public" field.
func (m *APIAuthMutation) ResetIsPublic() {
	m.is_public = nil
}

// SetIsActive sets the "is_active" field.
func (m *APIAuthMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *APIAuthMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *APIAuthMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMetadata sets the "metadata" field.
func (m *APIAuthMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *APIAuthMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the APIAuth entity.
// If the APIAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuthMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *APIAuthMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[apiauth.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *APIAuthMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[apiauth.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *APIAuthMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, apiauth.FieldMetadata)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by ids.
func (m *APIAuthMutation) AddPermissionIDs(ids ...uint64) {
	if m.permissions == nil {
		m.permissions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (m *APIAuthMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the Permission entity was cleared.
func (m *APIAuthMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the Permission entity by IDs.
func (m *APIAuthMutation) RemovePermissionIDs(ids ...uint64) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the Permission entity.
func (m *APIAuthMutation) RemovedPermissionsIDs() (ids []uint64) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *APIAuthMutation) PermissionsIDs() (ids []uint64) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *APIAuthMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// Where appends a list predicates to the APIAuthMutation builder.
func (m *APIAuthMutation) Where(ps ...predicate.APIAuth) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the APIAuthMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *APIAuthMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.APIAuth, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *APIAuthMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *APIAuthMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (APIAuth).
func (m *APIAuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIAuthMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.create_time != nil {
		fields = append(fields, apiauth.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, apiauth.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, apiauth.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, apiauth.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, apiauth.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, apiauth.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, apiauth.FieldName)
	}
	if m.description != nil {
		fields = append(fields, apiauth.FieldDescription)
	}
	if m.method != nil {
		fields = append(fields, apiauth.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, apiauth.FieldPath)
	}
	if m.is_public != nil {
		fields = append(fields, apiauth.FieldIsPublic)
	}
	if m.is_active != nil {
		fields = append(fields, apiauth.FieldIsActive)
	}
	if m.metadata != nil {
		fields = append(fields, apiauth.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIAuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apiauth.FieldCreateTime:
		return m.CreateTime()
	case apiauth.FieldCreateBy:
		return m.CreateBy()
	case apiauth.FieldUpdateTime:
		return m.UpdateTime()
	case apiauth.FieldUpdateBy:
		return m.UpdateBy()
	case apiauth.FieldDeleteTime:
		return m.DeleteTime()
	case apiauth.FieldDeleteBy:
		return m.DeleteBy()
	case apiauth.FieldName:
		return m.Name()
	case apiauth.FieldDescription:
		return m.Description()
	case apiauth.FieldMethod:
		return m.Method()
	case apiauth.FieldPath:
		return m.Path()
	case apiauth.FieldIsPublic:
		return m.IsPublic()
	case apiauth.FieldIsActive:
		return m.IsActive()
	case apiauth.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIAuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apiauth.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case apiauth.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case apiauth.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case apiauth.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case apiauth.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case apiauth.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case apiauth.FieldName:
		return m.OldName(ctx)
	case apiauth.FieldDescription:
		return m.OldDescription(ctx)
	case apiauth.FieldMethod:
		return m.OldMethod(ctx)
	case apiauth.FieldPath:
		return m.OldPath(ctx)
	case apiauth.FieldIsPublic:
		return m.OldIsPublic(ctx)
	case apiauth.FieldIsActive:
		return m.OldIsActive(ctx)
	case apiauth.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown APIAuth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIAuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apiauth.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case apiauth.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case apiauth.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case apiauth.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case apiauth.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case apiauth.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case apiauth.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apiauth.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case apiauth.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case apiauth.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case apiauth.FieldIsPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPublic(v)
		return nil
	case apiauth.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case apiauth.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown APIAuth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIAuthMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, apiauth.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, apiauth.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, apiauth.FieldDeleteBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIAuthMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apiauth.FieldCreateBy:
		return m.AddedCreateBy()
	case apiauth.FieldUpdateBy:
		return m.AddedUpdateBy()
	case apiauth.FieldDeleteBy:
		return m.AddedDeleteBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIAuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apiauth.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case apiauth.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case apiauth.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown APIAuth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIAuthMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(apiauth.FieldCreateBy) {
		fields = append(fields, apiauth.FieldCreateBy)
	}
	if m.FieldCleared(apiauth.FieldUpdateBy) {
		fields = append(fields, apiauth.FieldUpdateBy)
	}
	if m.FieldCleared(apiauth.FieldDeleteTime) {
		fields = append(fields, apiauth.FieldDeleteTime)
	}
	if m.FieldCleared(apiauth.FieldDeleteBy) {
		fields = append(fields, apiauth.FieldDeleteBy)
	}
	if m.FieldCleared(apiauth.FieldDescription) {
		fields = append(fields, apiauth.FieldDescription)
	}
	if m.FieldCleared(apiauth.FieldMetadata) {
		fields = append(fields, apiauth.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIAuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIAuthMutation) ClearField(name string) error {
	switch name {
	case apiauth.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case apiauth.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case apiauth.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case apiauth.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case apiauth.FieldDescription:
		m.ClearDescription()
		return nil
	case apiauth.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown APIAuth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIAuthMutation) ResetField(name string) error {
	switch name {
	case apiauth.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case apiauth.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case apiauth.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case apiauth.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case apiauth.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case apiauth.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case apiauth.FieldName:
		m.ResetName()
		return nil
	case apiauth.FieldDescription:
		m.ResetDescription()
		return nil
	case apiauth.FieldMethod:
		m.ResetMethod()
		return nil
	case apiauth.FieldPath:
		m.ResetPath()
		return nil
	case apiauth.FieldIsPublic:
		m.ResetIsPublic()
		return nil
	case apiauth.FieldIsActive:
		m.ResetIsActive()
		return nil
	case apiauth.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown APIAuth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIAuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.permissions != nil {
		edges = append(edges, apiauth.EdgePermissions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIAuthMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apiauth.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIAuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpermissions != nil {
		edges = append(edges, apiauth.EdgePermissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIAuthMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case apiauth.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIAuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpermissions {
		edges = append(edges, apiauth.EdgePermissions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIAuthMutation) EdgeCleared(name string) bool {
	switch name {
	case apiauth.EdgePermissions:
		return m.clearedpermissions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIAuthMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown APIAuth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIAuthMutation) ResetEdge(name string) error {
	switch name {
	case apiauth.EdgePermissions:
		m.ResetPermissions()
		return nil
	}
	return fmt.Errorf("unknown APIAuth edge %s", name)
}

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	create_time       *time.Time
	create_by         *uint64
	addcreate_by      *int64
	update_time       *time.Time
	update_by         *uint64
	addupdate_by      *int64
	delete_time       *time.Time
	delete_by         *uint64
	adddelete_by      *int64
	filename          *string
	_path             *string
	url               *string
	content_type      *string
	size              *int64
	addsize           *int64
	etag              *string
	bucket            *string
	storage_provider  *string
	metadata          *map[string]interface{}
	status            *attachment.Status
	upload_session_id *string
	tag1              *string
	tag2              *string
	tag3              *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Attachment, error)
	predicates        []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id uint64) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attachment entities.
func (m *AttachmentMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AttachmentMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AttachmentMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AttachmentMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *AttachmentMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *AttachmentMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *AttachmentMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *AttachmentMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *AttachmentMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[attachment.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *AttachmentMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *AttachmentMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, attachment.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *AttachmentMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AttachmentMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AttachmentMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *AttachmentMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *AttachmentMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *AttachmentMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *AttachmentMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *AttachmentMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[attachment.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *AttachmentMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *AttachmentMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, attachment.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *AttachmentMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *AttachmentMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *AttachmentMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[attachment.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *AttachmentMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *AttachmentMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, attachment.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *AttachmentMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *AttachmentMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *AttachmentMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *AttachmentMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *AttachmentMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[attachment.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *AttachmentMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *AttachmentMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, attachment.FieldDeleteBy)
}

// SetFilename sets the "filename" field.
func (m *AttachmentMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *AttachmentMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *AttachmentMutation) ResetFilename() {
	m.filename = nil
}

// SetPath sets the "path" field.
func (m *AttachmentMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AttachmentMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *AttachmentMutation) ResetPath() {
	m._path = nil
}

// SetURL sets the "url" field.
func (m *AttachmentMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *AttachmentMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *AttachmentMutation) ClearURL() {
	m.url = nil
	m.clearedFields[attachment.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *AttachmentMutation) URLCleared() bool {
	_, ok := m.clearedFields[attachment.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *AttachmentMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, attachment.FieldURL)
}

// SetContentType sets the "content_type" field.
func (m *AttachmentMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *AttachmentMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *AttachmentMutation) ResetContentType() {
	m.content_type = nil
}

// SetSize sets the "size" field.
func (m *AttachmentMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *AttachmentMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *AttachmentMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *AttachmentMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *AttachmentMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetEtag sets the "etag" field.
func (m *AttachmentMutation) SetEtag(s string) {
	m.etag = &s
}

// Etag returns the value of the "etag" field in the mutation.
func (m *AttachmentMutation) Etag() (r string, exists bool) {
	v := m.etag
	if v == nil {
		return
	}
	return *v, true
}

// OldEtag returns the old "etag" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldEtag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEtag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEtag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEtag: %w", err)
	}
	return oldValue.Etag, nil
}

// ClearEtag clears the value of the "etag" field.
func (m *AttachmentMutation) ClearEtag() {
	m.etag = nil
	m.clearedFields[attachment.FieldEtag] = struct{}{}
}

// EtagCleared returns if the "etag" field was cleared in this mutation.
func (m *AttachmentMutation) EtagCleared() bool {
	_, ok := m.clearedFields[attachment.FieldEtag]
	return ok
}

// ResetEtag resets all changes to the "etag" field.
func (m *AttachmentMutation) ResetEtag() {
	m.etag = nil
	delete(m.clearedFields, attachment.FieldEtag)
}

// SetBucket sets the "bucket" field.
func (m *AttachmentMutation) SetBucket(s string) {
	m.bucket = &s
}

// Bucket returns the value of the "bucket" field in the mutation.
func (m *AttachmentMutation) Bucket() (r string, exists bool) {
	v := m.bucket
	if v == nil {
		return
	}
	return *v, true
}

// OldBucket returns the old "bucket" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldBucket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucket: %w", err)
	}
	return oldValue.Bucket, nil
}

// ResetBucket resets all changes to the "bucket" field.
func (m *AttachmentMutation) ResetBucket() {
	m.bucket = nil
}

// SetStorageProvider sets the "storage_provider" field.
func (m *AttachmentMutation) SetStorageProvider(s string) {
	m.storage_provider = &s
}

// StorageProvider returns the value of the "storage_provider" field in the mutation.
func (m *AttachmentMutation) StorageProvider() (r string, exists bool) {
	v := m.storage_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageProvider returns the old "storage_provider" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldStorageProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageProvider: %w", err)
	}
	return oldValue.StorageProvider, nil
}

// ResetStorageProvider resets all changes to the "storage_provider" field.
func (m *AttachmentMutation) ResetStorageProvider() {
	m.storage_provider = nil
}

// SetMetadata sets the "metadata" field.
func (m *AttachmentMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *AttachmentMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *AttachmentMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[attachment.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *AttachmentMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[attachment.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *AttachmentMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, attachment.FieldMetadata)
}

// SetStatus sets the "status" field.
func (m *AttachmentMutation) SetStatus(a attachment.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *AttachmentMutation) Status() (r attachment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldStatus(ctx context.Context) (v attachment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AttachmentMutation) ResetStatus() {
	m.status = nil
}

// SetUploadSessionID sets the "upload_session_id" field.
func (m *AttachmentMutation) SetUploadSessionID(s string) {
	m.upload_session_id = &s
}

// UploadSessionID returns the value of the "upload_session_id" field in the mutation.
func (m *AttachmentMutation) UploadSessionID() (r string, exists bool) {
	v := m.upload_session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadSessionID returns the old "upload_session_id" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUploadSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadSessionID: %w", err)
	}
	return oldValue.UploadSessionID, nil
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (m *AttachmentMutation) ClearUploadSessionID() {
	m.upload_session_id = nil
	m.clearedFields[attachment.FieldUploadSessionID] = struct{}{}
}

// UploadSessionIDCleared returns if the "upload_session_id" field was cleared in this mutation.
func (m *AttachmentMutation) UploadSessionIDCleared() bool {
	_, ok := m.clearedFields[attachment.FieldUploadSessionID]
	return ok
}

// ResetUploadSessionID resets all changes to the "upload_session_id" field.
func (m *AttachmentMutation) ResetUploadSessionID() {
	m.upload_session_id = nil
	delete(m.clearedFields, attachment.FieldUploadSessionID)
}

// SetTag1 sets the "tag1" field.
func (m *AttachmentMutation) SetTag1(s string) {
	m.tag1 = &s
}

// Tag1 returns the value of the "tag1" field in the mutation.
func (m *AttachmentMutation) Tag1() (r string, exists bool) {
	v := m.tag1
	if v == nil {
		return
	}
	return *v, true
}

// OldTag1 returns the old "tag1" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag1: %w", err)
	}
	return oldValue.Tag1, nil
}

// ClearTag1 clears the value of the "tag1" field.
func (m *AttachmentMutation) ClearTag1() {
	m.tag1 = nil
	m.clearedFields[attachment.FieldTag1] = struct{}{}
}

// Tag1Cleared returns if the "tag1" field was cleared in this mutation.
func (m *AttachmentMutation) Tag1Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag1]
	return ok
}

// ResetTag1 resets all changes to the "tag1" field.
func (m *AttachmentMutation) ResetTag1() {
	m.tag1 = nil
	delete(m.clearedFields, attachment.FieldTag1)
}

// SetTag2 sets the "tag2" field.
func (m *AttachmentMutation) SetTag2(s string) {
	m.tag2 = &s
}

// Tag2 returns the value of the "tag2" field in the mutation.
func (m *AttachmentMutation) Tag2() (r string, exists bool) {
	v := m.tag2
	if v == nil {
		return
	}
	return *v, true
}

// OldTag2 returns the old "tag2" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag2: %w", err)
	}
	return oldValue.Tag2, nil
}

// ClearTag2 clears the value of the "tag2" field.
func (m *AttachmentMutation) ClearTag2() {
	m.tag2 = nil
	m.clearedFields[attachment.FieldTag2] = struct{}{}
}

// Tag2Cleared returns if the "tag2" field was cleared in this mutation.
func (m *AttachmentMutation) Tag2Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag2]
	return ok
}

// ResetTag2 resets all changes to the "tag2" field.
func (m *AttachmentMutation) ResetTag2() {
	m.tag2 = nil
	delete(m.clearedFields, attachment.FieldTag2)
}

// SetTag3 sets the "tag3" field.
func (m *AttachmentMutation) SetTag3(s string) {
	m.tag3 = &s
}

// Tag3 returns the value of the "tag3" field in the mutation.
func (m *AttachmentMutation) Tag3() (r string, exists bool) {
	v := m.tag3
	if v == nil {
		return
	}
	return *v, true
}

// OldTag3 returns the old "tag3" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag3: %w", err)
	}
	return oldValue.Tag3, nil
}

// ClearTag3 clears the value of the "tag3" field.
func (m *AttachmentMutation) ClearTag3() {
	m.tag3 = nil
	m.clearedFields[attachment.FieldTag3] = struct{}{}
}

// Tag3Cleared returns if the "tag3" field was cleared in this mutation.
func (m *AttachmentMutation) Tag3Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag3]
	return ok
}

// ResetTag3 resets all changes to the "tag3" field.
func (m *AttachmentMutation) ResetTag3() {
	m.tag3 = nil
	delete(m.clearedFields, attachment.FieldTag3)
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.create_time != nil {
		fields = append(fields, attachment.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, attachment.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, attachment.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.filename != nil {
		fields = append(fields, attachment.FieldFilename)
	}
	if m._path != nil {
		fields = append(fields, attachment.FieldPath)
	}
	if m.url != nil {
		fields = append(fields, attachment.FieldURL)
	}
	if m.content_type != nil {
		fields = append(fields, attachment.FieldContentType)
	}
	if m.size != nil {
		fields = append(fields, attachment.FieldSize)
	}
	if m.etag != nil {
		fields = append(fields, attachment.FieldEtag)
	}
	if m.bucket != nil {
		fields = append(fields, attachment.FieldBucket)
	}
	if m.storage_provider != nil {
		fields = append(fields, attachment.FieldStorageProvider)
	}
	if m.metadata != nil {
		fields = append(fields, attachment.FieldMetadata)
	}
	if m.status != nil {
		fields = append(fields, attachment.FieldStatus)
	}
	if m.upload_session_id != nil {
		fields = append(fields, attachment.FieldUploadSessionID)
	}
	if m.tag1 != nil {
		fields = append(fields, attachment.FieldTag1)
	}
	if m.tag2 != nil {
		fields = append(fields, attachment.FieldTag2)
	}
	if m.tag3 != nil {
		fields = append(fields, attachment.FieldTag3)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldCreateTime:
		return m.CreateTime()
	case attachment.FieldCreateBy:
		return m.CreateBy()
	case attachment.FieldUpdateTime:
		return m.UpdateTime()
	case attachment.FieldUpdateBy:
		return m.UpdateBy()
	case attachment.FieldDeleteTime:
		return m.DeleteTime()
	case attachment.FieldDeleteBy:
		return m.DeleteBy()
	case attachment.FieldFilename:
		return m.Filename()
	case attachment.FieldPath:
		return m.Path()
	case attachment.FieldURL:
		return m.URL()
	case attachment.FieldContentType:
		return m.ContentType()
	case attachment.FieldSize:
		return m.Size()
	case attachment.FieldEtag:
		return m.Etag()
	case attachment.FieldBucket:
		return m.Bucket()
	case attachment.FieldStorageProvider:
		return m.StorageProvider()
	case attachment.FieldMetadata:
		return m.Metadata()
	case attachment.FieldStatus:
		return m.Status()
	case attachment.FieldUploadSessionID:
		return m.UploadSessionID()
	case attachment.FieldTag1:
		return m.Tag1()
	case attachment.FieldTag2:
		return m.Tag2()
	case attachment.FieldTag3:
		return m.Tag3()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case attachment.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case attachment.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case attachment.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case attachment.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case attachment.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case attachment.FieldFilename:
		return m.OldFilename(ctx)
	case attachment.FieldPath:
		return m.OldPath(ctx)
	case attachment.FieldURL:
		return m.OldURL(ctx)
	case attachment.FieldContentType:
		return m.OldContentType(ctx)
	case attachment.FieldSize:
		return m.OldSize(ctx)
	case attachment.FieldEtag:
		return m.OldEtag(ctx)
	case attachment.FieldBucket:
		return m.OldBucket(ctx)
	case attachment.FieldStorageProvider:
		return m.OldStorageProvider(ctx)
	case attachment.FieldMetadata:
		return m.OldMetadata(ctx)
	case attachment.FieldStatus:
		return m.OldStatus(ctx)
	case attachment.FieldUploadSessionID:
		return m.OldUploadSessionID(ctx)
	case attachment.FieldTag1:
		return m.OldTag1(ctx)
	case attachment.FieldTag2:
		return m.OldTag2(ctx)
	case attachment.FieldTag3:
		return m.OldTag3(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case attachment.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case attachment.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case attachment.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case attachment.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case attachment.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case attachment.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case attachment.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case attachment.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case attachment.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case attachment.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case attachment.FieldEtag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEtag(v)
		return nil
	case attachment.FieldBucket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucket(v)
		return nil
	case attachment.FieldStorageProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageProvider(v)
		return nil
	case attachment.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case attachment.FieldStatus:
		v, ok := value.(attachment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case attachment.FieldUploadSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadSessionID(v)
		return nil
	case attachment.FieldTag1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag1(v)
		return nil
	case attachment.FieldTag2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag2(v)
		return nil
	case attachment.FieldTag3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag3(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.addsize != nil {
		fields = append(fields, attachment.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldCreateBy:
		return m.AddedCreateBy()
	case attachment.FieldUpdateBy:
		return m.AddedUpdateBy()
	case attachment.FieldDeleteBy:
		return m.AddedDeleteBy()
	case attachment.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case attachment.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case attachment.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case attachment.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldCreateBy) {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.FieldCleared(attachment.FieldUpdateBy) {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.FieldCleared(attachment.FieldDeleteTime) {
		fields = append(fields, attachment.FieldDeleteTime)
	}
	if m.FieldCleared(attachment.FieldDeleteBy) {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.FieldCleared(attachment.FieldURL) {
		fields = append(fields, attachment.FieldURL)
	}
	if m.FieldCleared(attachment.FieldEtag) {
		fields = append(fields, attachment.FieldEtag)
	}
	if m.FieldCleared(attachment.FieldMetadata) {
		fields = append(fields, attachment.FieldMetadata)
	}
	if m.FieldCleared(attachment.FieldUploadSessionID) {
		fields = append(fields, attachment.FieldUploadSessionID)
	}
	if m.FieldCleared(attachment.FieldTag1) {
		fields = append(fields, attachment.FieldTag1)
	}
	if m.FieldCleared(attachment.FieldTag2) {
		fields = append(fields, attachment.FieldTag2)
	}
	if m.FieldCleared(attachment.FieldTag3) {
		fields = append(fields, attachment.FieldTag3)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case attachment.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case attachment.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case attachment.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case attachment.FieldURL:
		m.ClearURL()
		return nil
	case attachment.FieldEtag:
		m.ClearEtag()
		return nil
	case attachment.FieldMetadata:
		m.ClearMetadata()
		return nil
	case attachment.FieldUploadSessionID:
		m.ClearUploadSessionID()
		return nil
	case attachment.FieldTag1:
		m.ClearTag1()
		return nil
	case attachment.FieldTag2:
		m.ClearTag2()
		return nil
	case attachment.FieldTag3:
		m.ClearTag3()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case attachment.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case attachment.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case attachment.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case attachment.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case attachment.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case attachment.FieldFilename:
		m.ResetFilename()
		return nil
	case attachment.FieldPath:
		m.ResetPath()
		return nil
	case attachment.FieldURL:
		m.ResetURL()
		return nil
	case attachment.FieldContentType:
		m.ResetContentType()
		return nil
	case attachment.FieldSize:
		m.ResetSize()
		return nil
	case attachment.FieldEtag:
		m.ResetEtag()
		return nil
	case attachment.FieldBucket:
		m.ResetBucket()
		return nil
	case attachment.FieldStorageProvider:
		m.ResetStorageProvider()
		return nil
	case attachment.FieldMetadata:
		m.ResetMetadata()
		return nil
	case attachment.FieldStatus:
		m.ResetStatus()
		return nil
	case attachment.FieldUploadSessionID:
		m.ResetUploadSessionID()
		return nil
	case attachment.FieldTag1:
		m.ResetTag1()
		return nil
	case attachment.FieldTag2:
		m.ResetTag2()
		return nil
	case attachment.FieldTag3:
		m.ResetTag3()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// ClientDeviceMutation represents an operation that mutates the ClientDevice nodes in the graph.
type ClientDeviceMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	create_time             *time.Time
	create_by               *uint64
	addcreate_by            *int64
	update_time             *time.Time
	update_by               *uint64
	addupdate_by            *int64
	delete_time             *time.Time
	delete_by               *uint64
	adddelete_by            *int64
	name                    *string
	code                    *string
	description             *string
	enabled                 *bool
	access_token_expiry     *uint64
	addaccess_token_expiry  *int64
	refresh_token_expiry    *uint64
	addrefresh_token_expiry *int64
	anonymous               *bool
	clearedFields           map[string]struct{}
	roles                   map[uint64]struct{}
	removedroles            map[uint64]struct{}
	clearedroles            bool
	done                    bool
	oldValue                func(context.Context) (*ClientDevice, error)
	predicates              []predicate.ClientDevice
}

var _ ent.Mutation = (*ClientDeviceMutation)(nil)

// clientdeviceOption allows management of the mutation configuration using functional options.
type clientdeviceOption func(*ClientDeviceMutation)

// newClientDeviceMutation creates new mutation for the ClientDevice entity.
func newClientDeviceMutation(c config, op Op, opts ...clientdeviceOption) *ClientDeviceMutation {
	m := &ClientDeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeClientDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClientDeviceID sets the ID field of the mutation.
func withClientDeviceID(id uint64) clientdeviceOption {
	return func(m *ClientDeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *ClientDevice
		)
		m.oldValue = func(ctx context.Context) (*ClientDevice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClientDevice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClientDevice sets the old ClientDevice of the mutation.
func withClientDevice(node *ClientDevice) clientdeviceOption {
	return func(m *ClientDeviceMutation) {
		m.oldValue = func(context.Context) (*ClientDevice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClientDeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClientDeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ClientDevice entities.
func (m *ClientDeviceMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClientDeviceMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClientDeviceMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClientDevice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ClientDeviceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ClientDeviceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ClientDeviceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *ClientDeviceMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *ClientDeviceMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *ClientDeviceMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *ClientDeviceMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *ClientDeviceMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[clientdevice.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *ClientDeviceMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[clientdevice.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *ClientDeviceMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, clientdevice.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *ClientDeviceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ClientDeviceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ClientDeviceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *ClientDeviceMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *ClientDeviceMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *ClientDeviceMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *ClientDeviceMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *ClientDeviceMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[clientdevice.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *ClientDeviceMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[clientdevice.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *ClientDeviceMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, clientdevice.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *ClientDeviceMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *ClientDeviceMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *ClientDeviceMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[clientdevice.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *ClientDeviceMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[clientdevice.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *ClientDeviceMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, clientdevice.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *ClientDeviceMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *ClientDeviceMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *ClientDeviceMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *ClientDeviceMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *ClientDeviceMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[clientdevice.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *ClientDeviceMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[clientdevice.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *ClientDeviceMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, clientdevice.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *ClientDeviceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClientDeviceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClientDeviceMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *ClientDeviceMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ClientDeviceMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ClientDeviceMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the "description" field.
func (m *ClientDeviceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ClientDeviceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ClientDeviceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[clientdevice.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ClientDeviceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[clientdevice.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ClientDeviceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, clientdevice.FieldDescription)
}

// SetEnabled sets the "enabled" field.
func (m *ClientDeviceMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *ClientDeviceMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *ClientDeviceMutation) ResetEnabled() {
	m.enabled = nil
}

// SetAccessTokenExpiry sets the "access_token_expiry" field.
func (m *ClientDeviceMutation) SetAccessTokenExpiry(u uint64) {
	m.access_token_expiry = &u
	m.addaccess_token_expiry = nil
}

// AccessTokenExpiry returns the value of the "access_token_expiry" field in the mutation.
func (m *ClientDeviceMutation) AccessTokenExpiry() (r uint64, exists bool) {
	v := m.access_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessTokenExpiry returns the old "access_token_expiry" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldAccessTokenExpiry(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessTokenExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessTokenExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessTokenExpiry: %w", err)
	}
	return oldValue.AccessTokenExpiry, nil
}

// AddAccessTokenExpiry adds u to the "access_token_expiry" field.
func (m *ClientDeviceMutation) AddAccessTokenExpiry(u int64) {
	if m.addaccess_token_expiry != nil {
		*m.addaccess_token_expiry += u
	} else {
		m.addaccess_token_expiry = &u
	}
}

// AddedAccessTokenExpiry returns the value that was added to the "access_token_expiry" field in this mutation.
func (m *ClientDeviceMutation) AddedAccessTokenExpiry() (r int64, exists bool) {
	v := m.addaccess_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccessTokenExpiry resets all changes to the "access_token_expiry" field.
func (m *ClientDeviceMutation) ResetAccessTokenExpiry() {
	m.access_token_expiry = nil
	m.addaccess_token_expiry = nil
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (m *ClientDeviceMutation) SetRefreshTokenExpiry(u uint64) {
	m.refresh_token_expiry = &u
	m.addrefresh_token_expiry = nil
}

// RefreshTokenExpiry returns the value of the "refresh_token_expiry" field in the mutation.
func (m *ClientDeviceMutation) RefreshTokenExpiry() (r uint64, exists bool) {
	v := m.refresh_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshTokenExpiry returns the old "refresh_token_expiry" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldRefreshTokenExpiry(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshTokenExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshTokenExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshTokenExpiry: %w", err)
	}
	return oldValue.RefreshTokenExpiry, nil
}

// AddRefreshTokenExpiry adds u to the "refresh_token_expiry" field.
func (m *ClientDeviceMutation) AddRefreshTokenExpiry(u int64) {
	if m.addrefresh_token_expiry != nil {
		*m.addrefresh_token_expiry += u
	} else {
		m.addrefresh_token_expiry = &u
	}
}

// AddedRefreshTokenExpiry returns the value that was added to the "refresh_token_expiry" field in this mutation.
func (m *ClientDeviceMutation) AddedRefreshTokenExpiry() (r int64, exists bool) {
	v := m.addrefresh_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// ResetRefreshTokenExpiry resets all changes to the "refresh_token_expiry" field.
func (m *ClientDeviceMutation) ResetRefreshTokenExpiry() {
	m.refresh_token_expiry = nil
	m.addrefresh_token_expiry = nil
}

// SetAnonymous sets the "anonymous" field.
func (m *ClientDeviceMutation) SetAnonymous(b bool) {
	m.anonymous = &b
}

// Anonymous returns the value of the "anonymous" field in the mutation.
func (m *ClientDeviceMutation) Anonymous() (r bool, exists bool) {
	v := m.anonymous
	if v == nil {
		return
	}
	return *v, true
}

// OldAnonymous returns the old "anonymous" field's value of the ClientDevice entity.
// If the ClientDevice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDeviceMutation) OldAnonymous(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnonymous is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnonymous requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnonymous: %w", err)
	}
	return oldValue.Anonymous, nil
}

// ResetAnonymous resets all changes to the "anonymous" field.
func (m *ClientDeviceMutation) ResetAnonymous() {
	m.anonymous = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *ClientDeviceMutation) AddRoleIDs(ids ...uint64) {
	if m.roles == nil {
		m.roles = make(map[uint64]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *ClientDeviceMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *ClientDeviceMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *ClientDeviceMutation) RemoveRoleIDs(ids ...uint64) {
	if m.removedroles == nil {
		m.removedroles = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *ClientDeviceMutation) RemovedRolesIDs() (ids []uint64) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *ClientDeviceMutation) RolesIDs() (ids []uint64) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *ClientDeviceMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the ClientDeviceMutation builder.
func (m *ClientDeviceMutation) Where(ps ...predicate.ClientDevice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClientDeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClientDeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClientDevice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClientDeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClientDeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClientDevice).
func (m *ClientDeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClientDeviceMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.create_time != nil {
		fields = append(fields, clientdevice.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, clientdevice.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, clientdevice.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, clientdevice.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, clientdevice.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, clientdevice.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, clientdevice.FieldName)
	}
	if m.code != nil {
		fields = append(fields, clientdevice.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, clientdevice.FieldDescription)
	}
	if m.enabled != nil {
		fields = append(fields, clientdevice.FieldEnabled)
	}
	if m.access_token_expiry != nil {
		fields = append(fields, clientdevice.FieldAccessTokenExpiry)
	}
	if m.refresh_token_expiry != nil {
		fields = append(fields, clientdevice.FieldRefreshTokenExpiry)
	}
	if m.anonymous != nil {
		fields = append(fields, clientdevice.FieldAnonymous)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClientDeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clientdevice.FieldCreateTime:
		return m.CreateTime()
	case clientdevice.FieldCreateBy:
		return m.CreateBy()
	case clientdevice.FieldUpdateTime:
		return m.UpdateTime()
	case clientdevice.FieldUpdateBy:
		return m.UpdateBy()
	case clientdevice.FieldDeleteTime:
		return m.DeleteTime()
	case clientdevice.FieldDeleteBy:
		return m.DeleteBy()
	case clientdevice.FieldName:
		return m.Name()
	case clientdevice.FieldCode:
		return m.Code()
	case clientdevice.FieldDescription:
		return m.Description()
	case clientdevice.FieldEnabled:
		return m.Enabled()
	case clientdevice.FieldAccessTokenExpiry:
		return m.AccessTokenExpiry()
	case clientdevice.FieldRefreshTokenExpiry:
		return m.RefreshTokenExpiry()
	case clientdevice.FieldAnonymous:
		return m.Anonymous()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClientDeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clientdevice.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case clientdevice.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case clientdevice.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case clientdevice.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case clientdevice.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case clientdevice.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case clientdevice.FieldName:
		return m.OldName(ctx)
	case clientdevice.FieldCode:
		return m.OldCode(ctx)
	case clientdevice.FieldDescription:
		return m.OldDescription(ctx)
	case clientdevice.FieldEnabled:
		return m.OldEnabled(ctx)
	case clientdevice.FieldAccessTokenExpiry:
		return m.OldAccessTokenExpiry(ctx)
	case clientdevice.FieldRefreshTokenExpiry:
		return m.OldRefreshTokenExpiry(ctx)
	case clientdevice.FieldAnonymous:
		return m.OldAnonymous(ctx)
	}
	return nil, fmt.Errorf("unknown ClientDevice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientDeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clientdevice.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case clientdevice.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case clientdevice.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case clientdevice.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case clientdevice.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case clientdevice.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case clientdevice.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case clientdevice.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case clientdevice.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case clientdevice.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case clientdevice.FieldAccessTokenExpiry:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessTokenExpiry(v)
		return nil
	case clientdevice.FieldRefreshTokenExpiry:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshTokenExpiry(v)
		return nil
	case clientdevice.FieldAnonymous:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnonymous(v)
		return nil
	}
	return fmt.Errorf("unknown ClientDevice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClientDeviceMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, clientdevice.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, clientdevice.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, clientdevice.FieldDeleteBy)
	}
	if m.addaccess_token_expiry != nil {
		fields = append(fields, clientdevice.FieldAccessTokenExpiry)
	}
	if m.addrefresh_token_expiry != nil {
		fields = append(fields, clientdevice.FieldRefreshTokenExpiry)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClientDeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case clientdevice.FieldCreateBy:
		return m.AddedCreateBy()
	case clientdevice.FieldUpdateBy:
		return m.AddedUpdateBy()
	case clientdevice.FieldDeleteBy:
		return m.AddedDeleteBy()
	case clientdevice.FieldAccessTokenExpiry:
		return m.AddedAccessTokenExpiry()
	case clientdevice.FieldRefreshTokenExpiry:
		return m.AddedRefreshTokenExpiry()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientDeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case clientdevice.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case clientdevice.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case clientdevice.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case clientdevice.FieldAccessTokenExpiry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccessTokenExpiry(v)
		return nil
	case clientdevice.FieldRefreshTokenExpiry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRefreshTokenExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown ClientDevice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClientDeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(clientdevice.FieldCreateBy) {
		fields = append(fields, clientdevice.FieldCreateBy)
	}
	if m.FieldCleared(clientdevice.FieldUpdateBy) {
		fields = append(fields, clientdevice.FieldUpdateBy)
	}
	if m.FieldCleared(clientdevice.FieldDeleteTime) {
		fields = append(fields, clientdevice.FieldDeleteTime)
	}
	if m.FieldCleared(clientdevice.FieldDeleteBy) {
		fields = append(fields, clientdevice.FieldDeleteBy)
	}
	if m.FieldCleared(clientdevice.FieldDescription) {
		fields = append(fields, clientdevice.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClientDeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClientDeviceMutation) ClearField(name string) error {
	switch name {
	case clientdevice.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case clientdevice.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case clientdevice.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case clientdevice.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case clientdevice.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown ClientDevice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClientDeviceMutation) ResetField(name string) error {
	switch name {
	case clientdevice.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case clientdevice.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case clientdevice.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case clientdevice.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case clientdevice.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case clientdevice.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case clientdevice.FieldName:
		m.ResetName()
		return nil
	case clientdevice.FieldCode:
		m.ResetCode()
		return nil
	case clientdevice.FieldDescription:
		m.ResetDescription()
		return nil
	case clientdevice.FieldEnabled:
		m.ResetEnabled()
		return nil
	case clientdevice.FieldAccessTokenExpiry:
		m.ResetAccessTokenExpiry()
		return nil
	case clientdevice.FieldRefreshTokenExpiry:
		m.ResetRefreshTokenExpiry()
		return nil
	case clientdevice.FieldAnonymous:
		m.ResetAnonymous()
		return nil
	}
	return fmt.Errorf("unknown ClientDevice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClientDeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, clientdevice.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClientDeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clientdevice.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClientDeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, clientdevice.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClientDeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case clientdevice.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClientDeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, clientdevice.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClientDeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case clientdevice.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClientDeviceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ClientDevice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClientDeviceMutation) ResetEdge(name string) error {
	switch name {
	case clientdevice.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown ClientDevice edge %s", name)
}

// CredentialMutation represents an operation that mutates the Credential nodes in the graph.
type CredentialMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	create_time        *time.Time
	create_by          *uint64
	addcreate_by       *int64
	update_time        *time.Time
	update_by          *uint64
	addupdate_by       *int64
	delete_time        *time.Time
	delete_by          *uint64
	adddelete_by       *int64
	credential_type    *credential.CredentialType
	identifier         *string
	secret             *string
	salt               *string
	provider           *string
	is_verified        *bool
	verified_at        *time.Time
	last_used_at       *time.Time
	expires_at         *time.Time
	failed_attempts    *int
	addfailed_attempts *int
	locked_until       *time.Time
	metadata           *map[string]interface{}
	clearedFields      map[string]struct{}
	user               *uint64
	cleareduser        bool
	done               bool
	oldValue           func(context.Context) (*Credential, error)
	predicates         []predicate.Credential
}

var _ ent.Mutation = (*CredentialMutation)(nil)

// credentialOption allows management of the mutation configuration using functional options.
type credentialOption func(*CredentialMutation)

// newCredentialMutation creates new mutation for the Credential entity.
func newCredentialMutation(c config, op Op, opts ...credentialOption) *CredentialMutation {
	m := &CredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCredentialID sets the ID field of the mutation.
func withCredentialID(id uint64) credentialOption {
	return func(m *CredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *Credential
		)
		m.oldValue = func(ctx context.Context) (*Credential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Credential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCredential sets the old Credential of the mutation.
func withCredential(node *Credential) credentialOption {
	return func(m *CredentialMutation) {
		m.oldValue = func(context.Context) (*Credential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Credential entities.
func (m *CredentialMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CredentialMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CredentialMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Credential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *CredentialMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CredentialMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CredentialMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *CredentialMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *CredentialMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *CredentialMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *CredentialMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *CredentialMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[credential.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *CredentialMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[credential.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *CredentialMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, credential.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *CredentialMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CredentialMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CredentialMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *CredentialMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *CredentialMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *CredentialMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *CredentialMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *CredentialMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[credential.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *CredentialMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[credential.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *CredentialMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, credential.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *CredentialMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *CredentialMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *CredentialMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[credential.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *CredentialMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[credential.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *CredentialMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, credential.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *CredentialMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *CredentialMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *CredentialMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *CredentialMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *CredentialMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[credential.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *CredentialMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[credential.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *CredentialMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, credential.FieldDeleteBy)
}

// SetUserID sets the "user_id" field.
func (m *CredentialMutation) SetUserID(u uint64) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CredentialMutation) UserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CredentialMutation) ResetUserID() {
	m.user = nil
}

// SetCredentialType sets the "credential_type" field.
func (m *CredentialMutation) SetCredentialType(ct credential.CredentialType) {
	m.credential_type = &ct
}

// CredentialType returns the value of the "credential_type" field in the mutation.
func (m *CredentialMutation) CredentialType() (r credential.CredentialType, exists bool) {
	v := m.credential_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCredentialType returns the old "credential_type" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldCredentialType(ctx context.Context) (v credential.CredentialType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredentialType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredentialType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredentialType: %w", err)
	}
	return oldValue.CredentialType, nil
}

// ResetCredentialType resets all changes to the "credential_type" field.
func (m *CredentialMutation) ResetCredentialType() {
	m.credential_type = nil
}

// SetIdentifier sets the "identifier" field.
func (m *CredentialMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *CredentialMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *CredentialMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetSecret sets the "secret" field.
func (m *CredentialMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *CredentialMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ClearSecret clears the value of the "secret" field.
func (m *CredentialMutation) ClearSecret() {
	m.secret = nil
	m.clearedFields[credential.FieldSecret] = struct{}{}
}

// SecretCleared returns if the "secret" field was cleared in this mutation.
func (m *CredentialMutation) SecretCleared() bool {
	_, ok := m.clearedFields[credential.FieldSecret]
	return ok
}

// ResetSecret resets all changes to the "secret" field.
func (m *CredentialMutation) ResetSecret() {
	m.secret = nil
	delete(m.clearedFields, credential.FieldSecret)
}

// SetSalt sets the "salt" field.
func (m *CredentialMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *CredentialMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ClearSalt clears the value of the "salt" field.
func (m *CredentialMutation) ClearSalt() {
	m.salt = nil
	m.clearedFields[credential.FieldSalt] = struct{}{}
}

// SaltCleared returns if the "salt" field was cleared in this mutation.
func (m *CredentialMutation) SaltCleared() bool {
	_, ok := m.clearedFields[credential.FieldSalt]
	return ok
}

// ResetSalt resets all changes to the "salt" field.
func (m *CredentialMutation) ResetSalt() {
	m.salt = nil
	delete(m.clearedFields, credential.FieldSalt)
}

// SetProvider sets the "provider" field.
func (m *CredentialMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *CredentialMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *CredentialMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[credential.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *CredentialMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[credential.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *CredentialMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, credential.FieldProvider)
}

// SetIsVerified sets the "is_verified" field.
func (m *CredentialMutation) SetIsVerified(b bool) {
	m.is_verified = &b
}

// IsVerified returns the value of the "is_verified" field in the mutation.
func (m *CredentialMutation) IsVerified() (r bool, exists bool) {
	v := m.is_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsVerified returns the old "is_verified" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldIsVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsVerified: %w", err)
	}
	return oldValue.IsVerified, nil
}

// ResetIsVerified resets all changes to the "is_verified" field.
func (m *CredentialMutation) ResetIsVerified() {
	m.is_verified = nil
}

// SetVerifiedAt sets the "verified_at" field.
func (m *CredentialMutation) SetVerifiedAt(t time.Time) {
	m.verified_at = &t
}

// VerifiedAt returns the value of the "verified_at" field in the mutation.
func (m *CredentialMutation) VerifiedAt() (r time.Time, exists bool) {
	v := m.verified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVerifiedAt returns the old "verified_at" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldVerifiedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerifiedAt: %w", err)
	}
	return oldValue.VerifiedAt, nil
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (m *CredentialMutation) ClearVerifiedAt() {
	m.verified_at = nil
	m.clearedFields[credential.FieldVerifiedAt] = struct{}{}
}

// VerifiedAtCleared returns if the "verified_at" field was cleared in this mutation.
func (m *CredentialMutation) VerifiedAtCleared() bool {
	_, ok := m.clearedFields[credential.FieldVerifiedAt]
	return ok
}

// ResetVerifiedAt resets all changes to the "verified_at" field.
func (m *CredentialMutation) ResetVerifiedAt() {
	m.verified_at = nil
	delete(m.clearedFields, credential.FieldVerifiedAt)
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *CredentialMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *CredentialMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldLastUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (m *CredentialMutation) ClearLastUsedAt() {
	m.last_used_at = nil
	m.clearedFields[credential.FieldLastUsedAt] = struct{}{}
}

// LastUsedAtCleared returns if the "last_used_at" field was cleared in this mutation.
func (m *CredentialMutation) LastUsedAtCleared() bool {
	_, ok := m.clearedFields[credential.FieldLastUsedAt]
	return ok
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *CredentialMutation) ResetLastUsedAt() {
	m.last_used_at = nil
	delete(m.clearedFields, credential.FieldLastUsedAt)
}

// SetExpiresAt sets the "expires_at" field.
func (m *CredentialMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *CredentialMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *CredentialMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[credential.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *CredentialMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[credential.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *CredentialMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, credential.FieldExpiresAt)
}

// SetFailedAttempts sets the "failed_attempts" field.
func (m *CredentialMutation) SetFailedAttempts(i int) {
	m.failed_attempts = &i
	m.addfailed_attempts = nil
}

// FailedAttempts returns the value of the "failed_attempts" field in the mutation.
func (m *CredentialMutation) FailedAttempts() (r int, exists bool) {
	v := m.failed_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedAttempts returns the old "failed_attempts" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldFailedAttempts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedAttempts: %w", err)
	}
	return oldValue.FailedAttempts, nil
}

// AddFailedAttempts adds i to the "failed_attempts" field.
func (m *CredentialMutation) AddFailedAttempts(i int) {
	if m.addfailed_attempts != nil {
		*m.addfailed_attempts += i
	} else {
		m.addfailed_attempts = &i
	}
}

// AddedFailedAttempts returns the value that was added to the "failed_attempts" field in this mutation.
func (m *CredentialMutation) AddedFailedAttempts() (r int, exists bool) {
	v := m.addfailed_attempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetFailedAttempts resets all changes to the "failed_attempts" field.
func (m *CredentialMutation) ResetFailedAttempts() {
	m.failed_attempts = nil
	m.addfailed_attempts = nil
}

// SetLockedUntil sets the "locked_until" field.
func (m *CredentialMutation) SetLockedUntil(t time.Time) {
	m.locked_until = &t
}

// LockedUntil returns the value of the "locked_until" field in the mutation.
func (m *CredentialMutation) LockedUntil() (r time.Time, exists bool) {
	v := m.locked_until
	if v == nil {
		return
	}
	return *v, true
}

// OldLockedUntil returns the old "locked_until" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldLockedUntil(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLockedUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLockedUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLockedUntil: %w", err)
	}
	return oldValue.LockedUntil, nil
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (m *CredentialMutation) ClearLockedUntil() {
	m.locked_until = nil
	m.clearedFields[credential.FieldLockedUntil] = struct{}{}
}

// LockedUntilCleared returns if the "locked_until" field was cleared in this mutation.
func (m *CredentialMutation) LockedUntilCleared() bool {
	_, ok := m.clearedFields[credential.FieldLockedUntil]
	return ok
}

// ResetLockedUntil resets all changes to the "locked_until" field.
func (m *CredentialMutation) ResetLockedUntil() {
	m.locked_until = nil
	delete(m.clearedFields, credential.FieldLockedUntil)
}

// SetMetadata sets the "metadata" field.
func (m *CredentialMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CredentialMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CredentialMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[credential.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CredentialMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[credential.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CredentialMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, credential.FieldMetadata)
}

// ClearUser clears the "user" edge to the User entity.
func (m *CredentialMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[credential.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CredentialMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CredentialMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CredentialMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CredentialMutation builder.
func (m *CredentialMutation) Where(ps ...predicate.Credential) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CredentialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CredentialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Credential, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CredentialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CredentialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Credential).
func (m *CredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CredentialMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.create_time != nil {
		fields = append(fields, credential.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, credential.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, credential.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, credential.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, credential.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, credential.FieldDeleteBy)
	}
	if m.user != nil {
		fields = append(fields, credential.FieldUserID)
	}
	if m.credential_type != nil {
		fields = append(fields, credential.FieldCredentialType)
	}
	if m.identifier != nil {
		fields = append(fields, credential.FieldIdentifier)
	}
	if m.secret != nil {
		fields = append(fields, credential.FieldSecret)
	}
	if m.salt != nil {
		fields = append(fields, credential.FieldSalt)
	}
	if m.provider != nil {
		fields = append(fields, credential.FieldProvider)
	}
	if m.is_verified != nil {
		fields = append(fields, credential.FieldIsVerified)
	}
	if m.verified_at != nil {
		fields = append(fields, credential.FieldVerifiedAt)
	}
	if m.last_used_at != nil {
		fields = append(fields, credential.FieldLastUsedAt)
	}
	if m.expires_at != nil {
		fields = append(fields, credential.FieldExpiresAt)
	}
	if m.failed_attempts != nil {
		fields = append(fields, credential.FieldFailedAttempts)
	}
	if m.locked_until != nil {
		fields = append(fields, credential.FieldLockedUntil)
	}
	if m.metadata != nil {
		fields = append(fields, credential.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case credential.FieldCreateTime:
		return m.CreateTime()
	case credential.FieldCreateBy:
		return m.CreateBy()
	case credential.FieldUpdateTime:
		return m.UpdateTime()
	case credential.FieldUpdateBy:
		return m.UpdateBy()
	case credential.FieldDeleteTime:
		return m.DeleteTime()
	case credential.FieldDeleteBy:
		return m.DeleteBy()
	case credential.FieldUserID:
		return m.UserID()
	case credential.FieldCredentialType:
		return m.CredentialType()
	case credential.FieldIdentifier:
		return m.Identifier()
	case credential.FieldSecret:
		return m.Secret()
	case credential.FieldSalt:
		return m.Salt()
	case credential.FieldProvider:
		return m.Provider()
	case credential.FieldIsVerified:
		return m.IsVerified()
	case credential.FieldVerifiedAt:
		return m.VerifiedAt()
	case credential.FieldLastUsedAt:
		return m.LastUsedAt()
	case credential.FieldExpiresAt:
		return m.ExpiresAt()
	case credential.FieldFailedAttempts:
		return m.FailedAttempts()
	case credential.FieldLockedUntil:
		return m.LockedUntil()
	case credential.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case credential.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case credential.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case credential.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case credential.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case credential.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case credential.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case credential.FieldUserID:
		return m.OldUserID(ctx)
	case credential.FieldCredentialType:
		return m.OldCredentialType(ctx)
	case credential.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case credential.FieldSecret:
		return m.OldSecret(ctx)
	case credential.FieldSalt:
		return m.OldSalt(ctx)
	case credential.FieldProvider:
		return m.OldProvider(ctx)
	case credential.FieldIsVerified:
		return m.OldIsVerified(ctx)
	case credential.FieldVerifiedAt:
		return m.OldVerifiedAt(ctx)
	case credential.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	case credential.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case credential.FieldFailedAttempts:
		return m.OldFailedAttempts(ctx)
	case credential.FieldLockedUntil:
		return m.OldLockedUntil(ctx)
	case credential.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Credential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case credential.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case credential.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case credential.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case credential.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case credential.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case credential.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case credential.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case credential.FieldCredentialType:
		v, ok := value.(credential.CredentialType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredentialType(v)
		return nil
	case credential.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case credential.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case credential.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case credential.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case credential.FieldIsVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsVerified(v)
		return nil
	case credential.FieldVerifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerifiedAt(v)
		return nil
	case credential.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	case credential.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case credential.FieldFailedAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedAttempts(v)
		return nil
	case credential.FieldLockedUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLockedUntil(v)
		return nil
	case credential.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Credential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CredentialMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, credential.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, credential.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, credential.FieldDeleteBy)
	}
	if m.addfailed_attempts != nil {
		fields = append(fields, credential.FieldFailedAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CredentialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case credential.FieldCreateBy:
		return m.AddedCreateBy()
	case credential.FieldUpdateBy:
		return m.AddedUpdateBy()
	case credential.FieldDeleteBy:
		return m.AddedDeleteBy()
	case credential.FieldFailedAttempts:
		return m.AddedFailedAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	case credential.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case credential.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case credential.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case credential.FieldFailedAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFailedAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown Credential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CredentialMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(credential.FieldCreateBy) {
		fields = append(fields, credential.FieldCreateBy)
	}
	if m.FieldCleared(credential.FieldUpdateBy) {
		fields = append(fields, credential.FieldUpdateBy)
	}
	if m.FieldCleared(credential.FieldDeleteTime) {
		fields = append(fields, credential.FieldDeleteTime)
	}
	if m.FieldCleared(credential.FieldDeleteBy) {
		fields = append(fields, credential.FieldDeleteBy)
	}
	if m.FieldCleared(credential.FieldSecret) {
		fields = append(fields, credential.FieldSecret)
	}
	if m.FieldCleared(credential.FieldSalt) {
		fields = append(fields, credential.FieldSalt)
	}
	if m.FieldCleared(credential.FieldProvider) {
		fields = append(fields, credential.FieldProvider)
	}
	if m.FieldCleared(credential.FieldVerifiedAt) {
		fields = append(fields, credential.FieldVerifiedAt)
	}
	if m.FieldCleared(credential.FieldLastUsedAt) {
		fields = append(fields, credential.FieldLastUsedAt)
	}
	if m.FieldCleared(credential.FieldExpiresAt) {
		fields = append(fields, credential.FieldExpiresAt)
	}
	if m.FieldCleared(credential.FieldLockedUntil) {
		fields = append(fields, credential.FieldLockedUntil)
	}
	if m.FieldCleared(credential.FieldMetadata) {
		fields = append(fields, credential.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CredentialMutation) ClearField(name string) error {
	switch name {
	case credential.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case credential.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case credential.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case credential.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case credential.FieldSecret:
		m.ClearSecret()
		return nil
	case credential.FieldSalt:
		m.ClearSalt()
		return nil
	case credential.FieldProvider:
		m.ClearProvider()
		return nil
	case credential.FieldVerifiedAt:
		m.ClearVerifiedAt()
		return nil
	case credential.FieldLastUsedAt:
		m.ClearLastUsedAt()
		return nil
	case credential.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	case credential.FieldLockedUntil:
		m.ClearLockedUntil()
		return nil
	case credential.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Credential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CredentialMutation) ResetField(name string) error {
	switch name {
	case credential.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case credential.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case credential.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case credential.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case credential.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case credential.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case credential.FieldUserID:
		m.ResetUserID()
		return nil
	case credential.FieldCredentialType:
		m.ResetCredentialType()
		return nil
	case credential.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case credential.FieldSecret:
		m.ResetSecret()
		return nil
	case credential.FieldSalt:
		m.ResetSalt()
		return nil
	case credential.FieldProvider:
		m.ResetProvider()
		return nil
	case credential.FieldIsVerified:
		m.ResetIsVerified()
		return nil
	case credential.FieldVerifiedAt:
		m.ResetVerifiedAt()
		return nil
	case credential.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	case credential.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case credential.FieldFailedAttempts:
		m.ResetFailedAttempts()
		return nil
	case credential.FieldLockedUntil:
		m.ResetLockedUntil()
		return nil
	case credential.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Credential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, credential.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case credential.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CredentialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, credential.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case credential.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CredentialMutation) ClearEdge(name string) error {
	switch name {
	case credential.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Credential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CredentialMutation) ResetEdge(name string) error {
	switch name {
	case credential.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Credential edge %s", name)
}

// LoggingMutation represents an operation that mutates the Logging nodes in the graph.
type LoggingMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	create_by     *uint64
	addcreate_by  *int64
	update_time   *time.Time
	update_by     *uint64
	addupdate_by  *int64
	delete_time   *time.Time
	delete_by     *uint64
	adddelete_by  *int64
	level         *logging.Level
	_type         *logging.Type
	message       *string
	method        *string
	_path         *string
	ip            *string
	query         *string
	code          *int
	addcode       *int
	user_agent    *string
	data          *map[string]interface{}
	stack         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Logging, error)
	predicates    []predicate.Logging
}

var _ ent.Mutation = (*LoggingMutation)(nil)

// loggingOption allows management of the mutation configuration using functional options.
type loggingOption func(*LoggingMutation)

// newLoggingMutation creates new mutation for the Logging entity.
func newLoggingMutation(c config, op Op, opts ...loggingOption) *LoggingMutation {
	m := &LoggingMutation{
		config:        c,
		op:            op,
		typ:           TypeLogging,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoggingID sets the ID field of the mutation.
func withLoggingID(id uint64) loggingOption {
	return func(m *LoggingMutation) {
		var (
			err   error
			once  sync.Once
			value *Logging
		)
		m.oldValue = func(ctx context.Context) (*Logging, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Logging.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLogging sets the old Logging of the mutation.
func withLogging(node *Logging) loggingOption {
	return func(m *LoggingMutation) {
		m.oldValue = func(context.Context) (*Logging, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoggingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoggingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Logging entities.
func (m *LoggingMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoggingMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoggingMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Logging.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *LoggingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LoggingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LoggingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *LoggingMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *LoggingMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *LoggingMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *LoggingMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *LoggingMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[logging.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *LoggingMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[logging.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *LoggingMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, logging.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *LoggingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LoggingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LoggingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *LoggingMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *LoggingMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *LoggingMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *LoggingMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *LoggingMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[logging.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *LoggingMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[logging.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *LoggingMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, logging.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *LoggingMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *LoggingMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *LoggingMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[logging.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *LoggingMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[logging.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *LoggingMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, logging.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *LoggingMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *LoggingMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *LoggingMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *LoggingMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *LoggingMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[logging.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *LoggingMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[logging.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *LoggingMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, logging.FieldDeleteBy)
}

// SetLevel sets the "level" field.
func (m *LoggingMutation) SetLevel(l logging.Level) {
	m.level = &l
}

// Level returns the value of the "level" field in the mutation.
func (m *LoggingMutation) Level() (r logging.Level, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldLevel(ctx context.Context) (v logging.Level, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *LoggingMutation) ResetLevel() {
	m.level = nil
}

// SetType sets the "type" field.
func (m *LoggingMutation) SetType(l logging.Type) {
	m._type = &l
}

// GetType returns the value of the "type" field in the mutation.
func (m *LoggingMutation) GetType() (r logging.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldType(ctx context.Context) (v logging.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *LoggingMutation) ResetType() {
	m._type = nil
}

// SetMessage sets the "message" field.
func (m *LoggingMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *LoggingMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *LoggingMutation) ResetMessage() {
	m.message = nil
}

// SetMethod sets the "method" field.
func (m *LoggingMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *LoggingMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *LoggingMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[logging.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *LoggingMutation) MethodCleared() bool {
	_, ok := m.clearedFields[logging.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *LoggingMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, logging.FieldMethod)
}

// SetPath sets the "path" field.
func (m *LoggingMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *LoggingMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *LoggingMutation) ClearPath() {
	m._path = nil
	m.clearedFields[logging.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *LoggingMutation) PathCleared() bool {
	_, ok := m.clearedFields[logging.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *LoggingMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, logging.FieldPath)
}

// SetIP sets the "ip" field.
func (m *LoggingMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *LoggingMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ClearIP clears the value of the "ip" field.
func (m *LoggingMutation) ClearIP() {
	m.ip = nil
	m.clearedFields[logging.FieldIP] = struct{}{}
}

// IPCleared returns if the "ip" field was cleared in this mutation.
func (m *LoggingMutation) IPCleared() bool {
	_, ok := m.clearedFields[logging.FieldIP]
	return ok
}

// ResetIP resets all changes to the "ip" field.
func (m *LoggingMutation) ResetIP() {
	m.ip = nil
	delete(m.clearedFields, logging.FieldIP)
}

// SetQuery sets the "query" field.
func (m *LoggingMutation) SetQuery(s string) {
	m.query = &s
}

// Query returns the value of the "query" field in the mutation.
func (m *LoggingMutation) Query() (r string, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ClearQuery clears the value of the "query" field.
func (m *LoggingMutation) ClearQuery() {
	m.query = nil
	m.clearedFields[logging.FieldQuery] = struct{}{}
}

// QueryCleared returns if the "query" field was cleared in this mutation.
func (m *LoggingMutation) QueryCleared() bool {
	_, ok := m.clearedFields[logging.FieldQuery]
	return ok
}

// ResetQuery resets all changes to the "query" field.
func (m *LoggingMutation) ResetQuery() {
	m.query = nil
	delete(m.clearedFields, logging.FieldQuery)
}

// SetCode sets the "code" field.
func (m *LoggingMutation) SetCode(i int) {
	m.code = &i
	m.addcode = nil
}

// Code returns the value of the "code" field in the mutation.
func (m *LoggingMutation) Code() (r int, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCode(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// AddCode adds i to the "code" field.
func (m *LoggingMutation) AddCode(i int) {
	if m.addcode != nil {
		*m.addcode += i
	} else {
		m.addcode = &i
	}
}

// AddedCode returns the value that was added to the "code" field in this mutation.
func (m *LoggingMutation) AddedCode() (r int, exists bool) {
	v := m.addcode
	if v == nil {
		return
	}
	return *v, true
}

// ClearCode clears the value of the "code" field.
func (m *LoggingMutation) ClearCode() {
	m.code = nil
	m.addcode = nil
	m.clearedFields[logging.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *LoggingMutation) CodeCleared() bool {
	_, ok := m.clearedFields[logging.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *LoggingMutation) ResetCode() {
	m.code = nil
	m.addcode = nil
	delete(m.clearedFields, logging.FieldCode)
}

// SetUserAgent sets the "user_agent" field.
func (m *LoggingMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *LoggingMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *LoggingMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[logging.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *LoggingMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[logging.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *LoggingMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, logging.FieldUserAgent)
}

// SetData sets the "data" field.
func (m *LoggingMutation) SetData(value map[string]interface{}) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *LoggingMutation) Data() (r map[string]interface{}, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *LoggingMutation) ClearData() {
	m.data = nil
	m.clearedFields[logging.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *LoggingMutation) DataCleared() bool {
	_, ok := m.clearedFields[logging.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *LoggingMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, logging.FieldData)
}

// SetStack sets the "stack" field.
func (m *LoggingMutation) SetStack(s string) {
	m.stack = &s
}

// Stack returns the value of the "stack" field in the mutation.
func (m *LoggingMutation) Stack() (r string, exists bool) {
	v := m.stack
	if v == nil {
		return
	}
	return *v, true
}

// OldStack returns the old "stack" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldStack(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStack: %w", err)
	}
	return oldValue.Stack, nil
}

// ClearStack clears the value of the "stack" field.
func (m *LoggingMutation) ClearStack() {
	m.stack = nil
	m.clearedFields[logging.FieldStack] = struct{}{}
}

// StackCleared returns if the "stack" field was cleared in this mutation.
func (m *LoggingMutation) StackCleared() bool {
	_, ok := m.clearedFields[logging.FieldStack]
	return ok
}

// ResetStack resets all changes to the "stack" field.
func (m *LoggingMutation) ResetStack() {
	m.stack = nil
	delete(m.clearedFields, logging.FieldStack)
}

// Where appends a list predicates to the LoggingMutation builder.
func (m *LoggingMutation) Where(ps ...predicate.Logging) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoggingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoggingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Logging, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoggingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoggingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Logging).
func (m *LoggingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoggingMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.create_time != nil {
		fields = append(fields, logging.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, logging.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, logging.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.level != nil {
		fields = append(fields, logging.FieldLevel)
	}
	if m._type != nil {
		fields = append(fields, logging.FieldType)
	}
	if m.message != nil {
		fields = append(fields, logging.FieldMessage)
	}
	if m.method != nil {
		fields = append(fields, logging.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, logging.FieldPath)
	}
	if m.ip != nil {
		fields = append(fields, logging.FieldIP)
	}
	if m.query != nil {
		fields = append(fields, logging.FieldQuery)
	}
	if m.code != nil {
		fields = append(fields, logging.FieldCode)
	}
	if m.user_agent != nil {
		fields = append(fields, logging.FieldUserAgent)
	}
	if m.data != nil {
		fields = append(fields, logging.FieldData)
	}
	if m.stack != nil {
		fields = append(fields, logging.FieldStack)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoggingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case logging.FieldCreateTime:
		return m.CreateTime()
	case logging.FieldCreateBy:
		return m.CreateBy()
	case logging.FieldUpdateTime:
		return m.UpdateTime()
	case logging.FieldUpdateBy:
		return m.UpdateBy()
	case logging.FieldDeleteTime:
		return m.DeleteTime()
	case logging.FieldDeleteBy:
		return m.DeleteBy()
	case logging.FieldLevel:
		return m.Level()
	case logging.FieldType:
		return m.GetType()
	case logging.FieldMessage:
		return m.Message()
	case logging.FieldMethod:
		return m.Method()
	case logging.FieldPath:
		return m.Path()
	case logging.FieldIP:
		return m.IP()
	case logging.FieldQuery:
		return m.Query()
	case logging.FieldCode:
		return m.Code()
	case logging.FieldUserAgent:
		return m.UserAgent()
	case logging.FieldData:
		return m.Data()
	case logging.FieldStack:
		return m.Stack()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoggingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case logging.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case logging.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case logging.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case logging.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case logging.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case logging.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case logging.FieldLevel:
		return m.OldLevel(ctx)
	case logging.FieldType:
		return m.OldType(ctx)
	case logging.FieldMessage:
		return m.OldMessage(ctx)
	case logging.FieldMethod:
		return m.OldMethod(ctx)
	case logging.FieldPath:
		return m.OldPath(ctx)
	case logging.FieldIP:
		return m.OldIP(ctx)
	case logging.FieldQuery:
		return m.OldQuery(ctx)
	case logging.FieldCode:
		return m.OldCode(ctx)
	case logging.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case logging.FieldData:
		return m.OldData(ctx)
	case logging.FieldStack:
		return m.OldStack(ctx)
	}
	return nil, fmt.Errorf("unknown Logging field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case logging.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case logging.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case logging.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case logging.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case logging.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case logging.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case logging.FieldLevel:
		v, ok := value.(logging.Level)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case logging.FieldType:
		v, ok := value.(logging.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case logging.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case logging.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case logging.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case logging.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case logging.FieldQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case logging.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case logging.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case logging.FieldData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case logging.FieldStack:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStack(v)
		return nil
	}
	return fmt.Errorf("unknown Logging field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoggingMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.addcode != nil {
		fields = append(fields, logging.FieldCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoggingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case logging.FieldCreateBy:
		return m.AddedCreateBy()
	case logging.FieldUpdateBy:
		return m.AddedUpdateBy()
	case logging.FieldDeleteBy:
		return m.AddedDeleteBy()
	case logging.FieldCode:
		return m.AddedCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case logging.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case logging.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case logging.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case logging.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCode(v)
		return nil
	}
	return fmt.Errorf("unknown Logging numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoggingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(logging.FieldCreateBy) {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.FieldCleared(logging.FieldUpdateBy) {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.FieldCleared(logging.FieldDeleteTime) {
		fields = append(fields, logging.FieldDeleteTime)
	}
	if m.FieldCleared(logging.FieldDeleteBy) {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.FieldCleared(logging.FieldMethod) {
		fields = append(fields, logging.FieldMethod)
	}
	if m.FieldCleared(logging.FieldPath) {
		fields = append(fields, logging.FieldPath)
	}
	if m.FieldCleared(logging.FieldIP) {
		fields = append(fields, logging.FieldIP)
	}
	if m.FieldCleared(logging.FieldQuery) {
		fields = append(fields, logging.FieldQuery)
	}
	if m.FieldCleared(logging.FieldCode) {
		fields = append(fields, logging.FieldCode)
	}
	if m.FieldCleared(logging.FieldUserAgent) {
		fields = append(fields, logging.FieldUserAgent)
	}
	if m.FieldCleared(logging.FieldData) {
		fields = append(fields, logging.FieldData)
	}
	if m.FieldCleared(logging.FieldStack) {
		fields = append(fields, logging.FieldStack)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoggingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoggingMutation) ClearField(name string) error {
	switch name {
	case logging.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case logging.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case logging.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case logging.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case logging.FieldMethod:
		m.ClearMethod()
		return nil
	case logging.FieldPath:
		m.ClearPath()
		return nil
	case logging.FieldIP:
		m.ClearIP()
		return nil
	case logging.FieldQuery:
		m.ClearQuery()
		return nil
	case logging.FieldCode:
		m.ClearCode()
		return nil
	case logging.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case logging.FieldData:
		m.ClearData()
		return nil
	case logging.FieldStack:
		m.ClearStack()
		return nil
	}
	return fmt.Errorf("unknown Logging nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoggingMutation) ResetField(name string) error {
	switch name {
	case logging.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case logging.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case logging.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case logging.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case logging.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case logging.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case logging.FieldLevel:
		m.ResetLevel()
		return nil
	case logging.FieldType:
		m.ResetType()
		return nil
	case logging.FieldMessage:
		m.ResetMessage()
		return nil
	case logging.FieldMethod:
		m.ResetMethod()
		return nil
	case logging.FieldPath:
		m.ResetPath()
		return nil
	case logging.FieldIP:
		m.ResetIP()
		return nil
	case logging.FieldQuery:
		m.ResetQuery()
		return nil
	case logging.FieldCode:
		m.ResetCode()
		return nil
	case logging.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case logging.FieldData:
		m.ResetData()
		return nil
	case logging.FieldStack:
		m.ResetStack()
		return nil
	}
	return fmt.Errorf("unknown Logging field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoggingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoggingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoggingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoggingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoggingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoggingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoggingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Logging unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoggingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Logging edge %s", name)
}

// LoginRecordMutation represents an operation that mutates the LoginRecord nodes in the graph.
type LoginRecordMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	create_time     *time.Time
	create_by       *uint64
	addcreate_by    *int64
	update_time     *time.Time
	update_by       *uint64
	addupdate_by    *int64
	identifier      *string
	credential_type *loginrecord.CredentialType
	ip_address      *string
	user_agent      *string
	device_info     *string
	location        *string
	status          *loginrecord.Status
	failure_reason  *string
	session_id      *string
	logout_time     *time.Time
	duration        *int
	addduration     *int
	metadata        *map[string]interface{}
	client_id       *uint64
	addclient_id    *int64
	clearedFields   map[string]struct{}
	user            *uint64
	cleareduser     bool
	done            bool
	oldValue        func(context.Context) (*LoginRecord, error)
	predicates      []predicate.LoginRecord
}

var _ ent.Mutation = (*LoginRecordMutation)(nil)

// loginrecordOption allows management of the mutation configuration using functional options.
type loginrecordOption func(*LoginRecordMutation)

// newLoginRecordMutation creates new mutation for the LoginRecord entity.
func newLoginRecordMutation(c config, op Op, opts ...loginrecordOption) *LoginRecordMutation {
	m := &LoginRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeLoginRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoginRecordID sets the ID field of the mutation.
func withLoginRecordID(id uint64) loginrecordOption {
	return func(m *LoginRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *LoginRecord
		)
		m.oldValue = func(ctx context.Context) (*LoginRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LoginRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoginRecord sets the old LoginRecord of the mutation.
func withLoginRecord(node *LoginRecord) loginrecordOption {
	return func(m *LoginRecordMutation) {
		m.oldValue = func(context.Context) (*LoginRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoginRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoginRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LoginRecord entities.
func (m *LoginRecordMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoginRecordMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoginRecordMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LoginRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *LoginRecordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LoginRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LoginRecordMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *LoginRecordMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *LoginRecordMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *LoginRecordMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *LoginRecordMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *LoginRecordMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[loginrecord.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *LoginRecordMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *LoginRecordMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, loginrecord.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *LoginRecordMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LoginRecordMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LoginRecordMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *LoginRecordMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *LoginRecordMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *LoginRecordMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *LoginRecordMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *LoginRecordMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[loginrecord.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *LoginRecordMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *LoginRecordMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, loginrecord.FieldUpdateBy)
}

// SetUserID sets the "user_id" field.
func (m *LoginRecordMutation) SetUserID(u uint64) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LoginRecordMutation) UserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LoginRecordMutation) ResetUserID() {
	m.user = nil
}

// SetIdentifier sets the "identifier" field.
func (m *LoginRecordMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *LoginRecordMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *LoginRecordMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetCredentialType sets the "credential_type" field.
func (m *LoginRecordMutation) SetCredentialType(lt loginrecord.CredentialType) {
	m.credential_type = &lt
}

// CredentialType returns the value of the "credential_type" field in the mutation.
func (m *LoginRecordMutation) CredentialType() (r loginrecord.CredentialType, exists bool) {
	v := m.credential_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCredentialType returns the old "credential_type" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldCredentialType(ctx context.Context) (v loginrecord.CredentialType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredentialType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredentialType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredentialType: %w", err)
	}
	return oldValue.CredentialType, nil
}

// ResetCredentialType resets all changes to the "credential_type" field.
func (m *LoginRecordMutation) ResetCredentialType() {
	m.credential_type = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *LoginRecordMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *LoginRecordMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *LoginRecordMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetUserAgent sets the "user_agent" field.
func (m *LoginRecordMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *LoginRecordMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *LoginRecordMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[loginrecord.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *LoginRecordMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *LoginRecordMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, loginrecord.FieldUserAgent)
}

// SetDeviceInfo sets the "device_info" field.
func (m *LoginRecordMutation) SetDeviceInfo(s string) {
	m.device_info = &s
}

// DeviceInfo returns the value of the "device_info" field in the mutation.
func (m *LoginRecordMutation) DeviceInfo() (r string, exists bool) {
	v := m.device_info
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfo returns the old "device_info" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldDeviceInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfo: %w", err)
	}
	return oldValue.DeviceInfo, nil
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (m *LoginRecordMutation) ClearDeviceInfo() {
	m.device_info = nil
	m.clearedFields[loginrecord.FieldDeviceInfo] = struct{}{}
}

// DeviceInfoCleared returns if the "device_info" field was cleared in this mutation.
func (m *LoginRecordMutation) DeviceInfoCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldDeviceInfo]
	return ok
}

// ResetDeviceInfo resets all changes to the "device_info" field.
func (m *LoginRecordMutation) ResetDeviceInfo() {
	m.device_info = nil
	delete(m.clearedFields, loginrecord.FieldDeviceInfo)
}

// SetLocation sets the "location" field.
func (m *LoginRecordMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *LoginRecordMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *LoginRecordMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[loginrecord.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *LoginRecordMutation) LocationCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *LoginRecordMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, loginrecord.FieldLocation)
}

// SetStatus sets the "status" field.
func (m *LoginRecordMutation) SetStatus(l loginrecord.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LoginRecordMutation) Status() (r loginrecord.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldStatus(ctx context.Context) (v loginrecord.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LoginRecordMutation) ResetStatus() {
	m.status = nil
}

// SetFailureReason sets the "failure_reason" field.
func (m *LoginRecordMutation) SetFailureReason(s string) {
	m.failure_reason = &s
}

// FailureReason returns the value of the "failure_reason" field in the mutation.
func (m *LoginRecordMutation) FailureReason() (r string, exists bool) {
	v := m.failure_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldFailureReason returns the old "failure_reason" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldFailureReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailureReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailureReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailureReason: %w", err)
	}
	return oldValue.FailureReason, nil
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (m *LoginRecordMutation) ClearFailureReason() {
	m.failure_reason = nil
	m.clearedFields[loginrecord.FieldFailureReason] = struct{}{}
}

// FailureReasonCleared returns if the "failure_reason" field was cleared in this mutation.
func (m *LoginRecordMutation) FailureReasonCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldFailureReason]
	return ok
}

// ResetFailureReason resets all changes to the "failure_reason" field.
func (m *LoginRecordMutation) ResetFailureReason() {
	m.failure_reason = nil
	delete(m.clearedFields, loginrecord.FieldFailureReason)
}

// SetSessionID sets the "session_id" field.
func (m *LoginRecordMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *LoginRecordMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ClearSessionID clears the value of the "session_id" field.
func (m *LoginRecordMutation) ClearSessionID() {
	m.session_id = nil
	m.clearedFields[loginrecord.FieldSessionID] = struct{}{}
}

// SessionIDCleared returns if the "session_id" field was cleared in this mutation.
func (m *LoginRecordMutation) SessionIDCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldSessionID]
	return ok
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *LoginRecordMutation) ResetSessionID() {
	m.session_id = nil
	delete(m.clearedFields, loginrecord.FieldSessionID)
}

// SetLogoutTime sets the "logout_time" field.
func (m *LoginRecordMutation) SetLogoutTime(t time.Time) {
	m.logout_time = &t
}

// LogoutTime returns the value of the "logout_time" field in the mutation.
func (m *LoginRecordMutation) LogoutTime() (r time.Time, exists bool) {
	v := m.logout_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoutTime returns the old "logout_time" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldLogoutTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoutTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoutTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoutTime: %w", err)
	}
	return oldValue.LogoutTime, nil
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (m *LoginRecordMutation) ClearLogoutTime() {
	m.logout_time = nil
	m.clearedFields[loginrecord.FieldLogoutTime] = struct{}{}
}

// LogoutTimeCleared returns if the "logout_time" field was cleared in this mutation.
func (m *LoginRecordMutation) LogoutTimeCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldLogoutTime]
	return ok
}

// ResetLogoutTime resets all changes to the "logout_time" field.
func (m *LoginRecordMutation) ResetLogoutTime() {
	m.logout_time = nil
	delete(m.clearedFields, loginrecord.FieldLogoutTime)
}

// SetDuration sets the "duration" field.
func (m *LoginRecordMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *LoginRecordMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *LoginRecordMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *LoginRecordMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *LoginRecordMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[loginrecord.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *LoginRecordMutation) DurationCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *LoginRecordMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, loginrecord.FieldDuration)
}

// SetMetadata sets the "metadata" field.
func (m *LoginRecordMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *LoginRecordMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *LoginRecordMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[loginrecord.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *LoginRecordMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *LoginRecordMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, loginrecord.FieldMetadata)
}

// SetClientID sets the "client_id" field.
func (m *LoginRecordMutation) SetClientID(u uint64) {
	m.client_id = &u
	m.addclient_id = nil
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *LoginRecordMutation) ClientID() (r uint64, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the LoginRecord entity.
// If the LoginRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginRecordMutation) OldClientID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// AddClientID adds u to the "client_id" field.
func (m *LoginRecordMutation) AddClientID(u int64) {
	if m.addclient_id != nil {
		*m.addclient_id += u
	} else {
		m.addclient_id = &u
	}
}

// AddedClientID returns the value that was added to the "client_id" field in this mutation.
func (m *LoginRecordMutation) AddedClientID() (r int64, exists bool) {
	v := m.addclient_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearClientID clears the value of the "client_id" field.
func (m *LoginRecordMutation) ClearClientID() {
	m.client_id = nil
	m.addclient_id = nil
	m.clearedFields[loginrecord.FieldClientID] = struct{}{}
}

// ClientIDCleared returns if the "client_id" field was cleared in this mutation.
func (m *LoginRecordMutation) ClientIDCleared() bool {
	_, ok := m.clearedFields[loginrecord.FieldClientID]
	return ok
}

// ResetClientID resets all changes to the "client_id" field.
func (m *LoginRecordMutation) ResetClientID() {
	m.client_id = nil
	m.addclient_id = nil
	delete(m.clearedFields, loginrecord.FieldClientID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *LoginRecordMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[loginrecord.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LoginRecordMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LoginRecordMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LoginRecordMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the LoginRecordMutation builder.
func (m *LoginRecordMutation) Where(ps ...predicate.LoginRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoginRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoginRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LoginRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoginRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoginRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LoginRecord).
func (m *LoginRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoginRecordMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.create_time != nil {
		fields = append(fields, loginrecord.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, loginrecord.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, loginrecord.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, loginrecord.FieldUpdateBy)
	}
	if m.user != nil {
		fields = append(fields, loginrecord.FieldUserID)
	}
	if m.identifier != nil {
		fields = append(fields, loginrecord.FieldIdentifier)
	}
	if m.credential_type != nil {
		fields = append(fields, loginrecord.FieldCredentialType)
	}
	if m.ip_address != nil {
		fields = append(fields, loginrecord.FieldIPAddress)
	}
	if m.user_agent != nil {
		fields = append(fields, loginrecord.FieldUserAgent)
	}
	if m.device_info != nil {
		fields = append(fields, loginrecord.FieldDeviceInfo)
	}
	if m.location != nil {
		fields = append(fields, loginrecord.FieldLocation)
	}
	if m.status != nil {
		fields = append(fields, loginrecord.FieldStatus)
	}
	if m.failure_reason != nil {
		fields = append(fields, loginrecord.FieldFailureReason)
	}
	if m.session_id != nil {
		fields = append(fields, loginrecord.FieldSessionID)
	}
	if m.logout_time != nil {
		fields = append(fields, loginrecord.FieldLogoutTime)
	}
	if m.duration != nil {
		fields = append(fields, loginrecord.FieldDuration)
	}
	if m.metadata != nil {
		fields = append(fields, loginrecord.FieldMetadata)
	}
	if m.client_id != nil {
		fields = append(fields, loginrecord.FieldClientID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoginRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loginrecord.FieldCreateTime:
		return m.CreateTime()
	case loginrecord.FieldCreateBy:
		return m.CreateBy()
	case loginrecord.FieldUpdateTime:
		return m.UpdateTime()
	case loginrecord.FieldUpdateBy:
		return m.UpdateBy()
	case loginrecord.FieldUserID:
		return m.UserID()
	case loginrecord.FieldIdentifier:
		return m.Identifier()
	case loginrecord.FieldCredentialType:
		return m.CredentialType()
	case loginrecord.FieldIPAddress:
		return m.IPAddress()
	case loginrecord.FieldUserAgent:
		return m.UserAgent()
	case loginrecord.FieldDeviceInfo:
		return m.DeviceInfo()
	case loginrecord.FieldLocation:
		return m.Location()
	case loginrecord.FieldStatus:
		return m.Status()
	case loginrecord.FieldFailureReason:
		return m.FailureReason()
	case loginrecord.FieldSessionID:
		return m.SessionID()
	case loginrecord.FieldLogoutTime:
		return m.LogoutTime()
	case loginrecord.FieldDuration:
		return m.Duration()
	case loginrecord.FieldMetadata:
		return m.Metadata()
	case loginrecord.FieldClientID:
		return m.ClientID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoginRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loginrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case loginrecord.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case loginrecord.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case loginrecord.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case loginrecord.FieldUserID:
		return m.OldUserID(ctx)
	case loginrecord.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case loginrecord.FieldCredentialType:
		return m.OldCredentialType(ctx)
	case loginrecord.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case loginrecord.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case loginrecord.FieldDeviceInfo:
		return m.OldDeviceInfo(ctx)
	case loginrecord.FieldLocation:
		return m.OldLocation(ctx)
	case loginrecord.FieldStatus:
		return m.OldStatus(ctx)
	case loginrecord.FieldFailureReason:
		return m.OldFailureReason(ctx)
	case loginrecord.FieldSessionID:
		return m.OldSessionID(ctx)
	case loginrecord.FieldLogoutTime:
		return m.OldLogoutTime(ctx)
	case loginrecord.FieldDuration:
		return m.OldDuration(ctx)
	case loginrecord.FieldMetadata:
		return m.OldMetadata(ctx)
	case loginrecord.FieldClientID:
		return m.OldClientID(ctx)
	}
	return nil, fmt.Errorf("unknown LoginRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loginrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case loginrecord.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case loginrecord.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case loginrecord.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case loginrecord.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case loginrecord.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case loginrecord.FieldCredentialType:
		v, ok := value.(loginrecord.CredentialType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredentialType(v)
		return nil
	case loginrecord.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case loginrecord.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case loginrecord.FieldDeviceInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfo(v)
		return nil
	case loginrecord.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case loginrecord.FieldStatus:
		v, ok := value.(loginrecord.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case loginrecord.FieldFailureReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailureReason(v)
		return nil
	case loginrecord.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case loginrecord.FieldLogoutTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoutTime(v)
		return nil
	case loginrecord.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case loginrecord.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case loginrecord.FieldClientID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	}
	return fmt.Errorf("unknown LoginRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoginRecordMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, loginrecord.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, loginrecord.FieldUpdateBy)
	}
	if m.addduration != nil {
		fields = append(fields, loginrecord.FieldDuration)
	}
	if m.addclient_id != nil {
		fields = append(fields, loginrecord.FieldClientID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoginRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case loginrecord.FieldCreateBy:
		return m.AddedCreateBy()
	case loginrecord.FieldUpdateBy:
		return m.AddedUpdateBy()
	case loginrecord.FieldDuration:
		return m.AddedDuration()
	case loginrecord.FieldClientID:
		return m.AddedClientID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case loginrecord.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case loginrecord.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case loginrecord.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case loginrecord.FieldClientID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClientID(v)
		return nil
	}
	return fmt.Errorf("unknown LoginRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoginRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(loginrecord.FieldCreateBy) {
		fields = append(fields, loginrecord.FieldCreateBy)
	}
	if m.FieldCleared(loginrecord.FieldUpdateBy) {
		fields = append(fields, loginrecord.FieldUpdateBy)
	}
	if m.FieldCleared(loginrecord.FieldUserAgent) {
		fields = append(fields, loginrecord.FieldUserAgent)
	}
	if m.FieldCleared(loginrecord.FieldDeviceInfo) {
		fields = append(fields, loginrecord.FieldDeviceInfo)
	}
	if m.FieldCleared(loginrecord.FieldLocation) {
		fields = append(fields, loginrecord.FieldLocation)
	}
	if m.FieldCleared(loginrecord.FieldFailureReason) {
		fields = append(fields, loginrecord.FieldFailureReason)
	}
	if m.FieldCleared(loginrecord.FieldSessionID) {
		fields = append(fields, loginrecord.FieldSessionID)
	}
	if m.FieldCleared(loginrecord.FieldLogoutTime) {
		fields = append(fields, loginrecord.FieldLogoutTime)
	}
	if m.FieldCleared(loginrecord.FieldDuration) {
		fields = append(fields, loginrecord.FieldDuration)
	}
	if m.FieldCleared(loginrecord.FieldMetadata) {
		fields = append(fields, loginrecord.FieldMetadata)
	}
	if m.FieldCleared(loginrecord.FieldClientID) {
		fields = append(fields, loginrecord.FieldClientID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoginRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoginRecordMutation) ClearField(name string) error {
	switch name {
	case loginrecord.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case loginrecord.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case loginrecord.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case loginrecord.FieldDeviceInfo:
		m.ClearDeviceInfo()
		return nil
	case loginrecord.FieldLocation:
		m.ClearLocation()
		return nil
	case loginrecord.FieldFailureReason:
		m.ClearFailureReason()
		return nil
	case loginrecord.FieldSessionID:
		m.ClearSessionID()
		return nil
	case loginrecord.FieldLogoutTime:
		m.ClearLogoutTime()
		return nil
	case loginrecord.FieldDuration:
		m.ClearDuration()
		return nil
	case loginrecord.FieldMetadata:
		m.ClearMetadata()
		return nil
	case loginrecord.FieldClientID:
		m.ClearClientID()
		return nil
	}
	return fmt.Errorf("unknown LoginRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoginRecordMutation) ResetField(name string) error {
	switch name {
	case loginrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case loginrecord.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case loginrecord.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case loginrecord.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case loginrecord.FieldUserID:
		m.ResetUserID()
		return nil
	case loginrecord.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case loginrecord.FieldCredentialType:
		m.ResetCredentialType()
		return nil
	case loginrecord.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case loginrecord.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case loginrecord.FieldDeviceInfo:
		m.ResetDeviceInfo()
		return nil
	case loginrecord.FieldLocation:
		m.ResetLocation()
		return nil
	case loginrecord.FieldStatus:
		m.ResetStatus()
		return nil
	case loginrecord.FieldFailureReason:
		m.ResetFailureReason()
		return nil
	case loginrecord.FieldSessionID:
		m.ResetSessionID()
		return nil
	case loginrecord.FieldLogoutTime:
		m.ResetLogoutTime()
		return nil
	case loginrecord.FieldDuration:
		m.ResetDuration()
		return nil
	case loginrecord.FieldMetadata:
		m.ResetMetadata()
		return nil
	case loginrecord.FieldClientID:
		m.ResetClientID()
		return nil
	}
	return fmt.Errorf("unknown LoginRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoginRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, loginrecord.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoginRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case loginrecord.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoginRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoginRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoginRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, loginrecord.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoginRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case loginrecord.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoginRecordMutation) ClearEdge(name string) error {
	switch name {
	case loginrecord.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown LoginRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoginRecordMutation) ResetEdge(name string) error {
	switch name {
	case loginrecord.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown LoginRecord edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	create_time             *time.Time
	create_by               *uint64
	addcreate_by            *int64
	update_time             *time.Time
	update_by               *uint64
	addupdate_by            *int64
	delete_time             *time.Time
	delete_by               *uint64
	adddelete_by            *int64
	name                    *string
	action                  *string
	description             *string
	clearedFields           map[string]struct{}
	role_permissions        map[uint64]struct{}
	removedrole_permissions map[uint64]struct{}
	clearedrole_permissions bool
	scope                   *uint64
	clearedscope            bool
	api_auths               map[uint64]struct{}
	removedapi_auths        map[uint64]struct{}
	clearedapi_auths        bool
	done                    bool
	oldValue                func(context.Context) (*Permission, error)
	predicates              []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id uint64) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *PermissionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PermissionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PermissionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *PermissionMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *PermissionMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *PermissionMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *PermissionMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *PermissionMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[permission.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *PermissionMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[permission.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *PermissionMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, permission.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *PermissionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PermissionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PermissionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *PermissionMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *PermissionMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *PermissionMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *PermissionMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *PermissionMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[permission.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *PermissionMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[permission.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *PermissionMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, permission.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *PermissionMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *PermissionMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *PermissionMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[permission.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *PermissionMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[permission.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *PermissionMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, permission.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *PermissionMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *PermissionMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *PermissionMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *PermissionMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *PermissionMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[permission.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *PermissionMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[permission.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *PermissionMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, permission.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *PermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermissionMutation) ResetName() {
	m.name = nil
}

// SetAction sets the "action" field.
func (m *PermissionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *PermissionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *PermissionMutation) ResetAction() {
	m.action = nil
}

// SetDescription sets the "description" field.
func (m *PermissionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PermissionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PermissionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[permission.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PermissionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[permission.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PermissionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, permission.FieldDescription)
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermission entity by ids.
func (m *PermissionMutation) AddRolePermissionIDs(ids ...uint64) {
	if m.role_permissions == nil {
		m.role_permissions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role_permissions[ids[i]] = struct{}{}
	}
}

// ClearRolePermissions clears the "role_permissions" edge to the RolePermission entity.
func (m *PermissionMutation) ClearRolePermissions() {
	m.clearedrole_permissions = true
}

// RolePermissionsCleared reports if the "role_permissions" edge to the RolePermission entity was cleared.
func (m *PermissionMutation) RolePermissionsCleared() bool {
	return m.clearedrole_permissions
}

// RemoveRolePermissionIDs removes the "role_permissions" edge to the RolePermission entity by IDs.
func (m *PermissionMutation) RemoveRolePermissionIDs(ids ...uint64) {
	if m.removedrole_permissions == nil {
		m.removedrole_permissions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.role_permissions, ids[i])
		m.removedrole_permissions[ids[i]] = struct{}{}
	}
}

// RemovedRolePermissions returns the removed IDs of the "role_permissions" edge to the RolePermission entity.
func (m *PermissionMutation) RemovedRolePermissionsIDs() (ids []uint64) {
	for id := range m.removedrole_permissions {
		ids = append(ids, id)
	}
	return
}

// RolePermissionsIDs returns the "role_permissions" edge IDs in the mutation.
func (m *PermissionMutation) RolePermissionsIDs() (ids []uint64) {
	for id := range m.role_permissions {
		ids = append(ids, id)
	}
	return
}

// ResetRolePermissions resets all changes to the "role_permissions" edge.
func (m *PermissionMutation) ResetRolePermissions() {
	m.role_permissions = nil
	m.clearedrole_permissions = false
	m.removedrole_permissions = nil
}

// SetScopeID sets the "scope" edge to the Scope entity by id.
func (m *PermissionMutation) SetScopeID(id uint64) {
	m.scope = &id
}

// ClearScope clears the "scope" edge to the Scope entity.
func (m *PermissionMutation) ClearScope() {
	m.clearedscope = true
}

// ScopeCleared reports if the "scope" edge to the Scope entity was cleared.
func (m *PermissionMutation) ScopeCleared() bool {
	return m.clearedscope
}

// ScopeID returns the "scope" edge ID in the mutation.
func (m *PermissionMutation) ScopeID() (id uint64, exists bool) {
	if m.scope != nil {
		return *m.scope, true
	}
	return
}

// ScopeIDs returns the "scope" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScopeID instead. It exists only for internal usage by the builders.
func (m *PermissionMutation) ScopeIDs() (ids []uint64) {
	if id := m.scope; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScope resets all changes to the "scope" edge.
func (m *PermissionMutation) ResetScope() {
	m.scope = nil
	m.clearedscope = false
}

// AddAPIAuthIDs adds the "api_auths" edge to the APIAuth entity by ids.
func (m *PermissionMutation) AddAPIAuthIDs(ids ...uint64) {
	if m.api_auths == nil {
		m.api_auths = make(map[uint64]struct{})
	}
	for i := range ids {
		m.api_auths[ids[i]] = struct{}{}
	}
}

// ClearAPIAuths clears the "api_auths" edge to the APIAuth entity.
func (m *PermissionMutation) ClearAPIAuths() {
	m.clearedapi_auths = true
}

// APIAuthsCleared reports if the "api_auths" edge to the APIAuth entity was cleared.
func (m *PermissionMutation) APIAuthsCleared() bool {
	return m.clearedapi_auths
}

// RemoveAPIAuthIDs removes the "api_auths" edge to the APIAuth entity by IDs.
func (m *PermissionMutation) RemoveAPIAuthIDs(ids ...uint64) {
	if m.removedapi_auths == nil {
		m.removedapi_auths = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.api_auths, ids[i])
		m.removedapi_auths[ids[i]] = struct{}{}
	}
}

// RemovedAPIAuths returns the removed IDs of the "api_auths" edge to the APIAuth entity.
func (m *PermissionMutation) RemovedAPIAuthsIDs() (ids []uint64) {
	for id := range m.removedapi_auths {
		ids = append(ids, id)
	}
	return
}

// APIAuthsIDs returns the "api_auths" edge IDs in the mutation.
func (m *PermissionMutation) APIAuthsIDs() (ids []uint64) {
	for id := range m.api_auths {
		ids = append(ids, id)
	}
	return
}

// ResetAPIAuths resets all changes to the "api_auths" edge.
func (m *PermissionMutation) ResetAPIAuths() {
	m.api_auths = nil
	m.clearedapi_auths = false
	m.removedapi_auths = nil
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, permission.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, permission.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, permission.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, permission.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, permission.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, permission.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, permission.FieldName)
	}
	if m.action != nil {
		fields = append(fields, permission.FieldAction)
	}
	if m.description != nil {
		fields = append(fields, permission.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreateTime:
		return m.CreateTime()
	case permission.FieldCreateBy:
		return m.CreateBy()
	case permission.FieldUpdateTime:
		return m.UpdateTime()
	case permission.FieldUpdateBy:
		return m.UpdateBy()
	case permission.FieldDeleteTime:
		return m.DeleteTime()
	case permission.FieldDeleteBy:
		return m.DeleteBy()
	case permission.FieldName:
		return m.Name()
	case permission.FieldAction:
		return m.Action()
	case permission.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case permission.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case permission.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case permission.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case permission.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case permission.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case permission.FieldName:
		return m.OldName(ctx)
	case permission.FieldAction:
		return m.OldAction(ctx)
	case permission.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case permission.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case permission.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case permission.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case permission.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case permission.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case permission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case permission.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case permission.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, permission.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, permission.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, permission.FieldDeleteBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreateBy:
		return m.AddedCreateBy()
	case permission.FieldUpdateBy:
		return m.AddedUpdateBy()
	case permission.FieldDeleteBy:
		return m.AddedDeleteBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case permission.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case permission.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(permission.FieldCreateBy) {
		fields = append(fields, permission.FieldCreateBy)
	}
	if m.FieldCleared(permission.FieldUpdateBy) {
		fields = append(fields, permission.FieldUpdateBy)
	}
	if m.FieldCleared(permission.FieldDeleteTime) {
		fields = append(fields, permission.FieldDeleteTime)
	}
	if m.FieldCleared(permission.FieldDeleteBy) {
		fields = append(fields, permission.FieldDeleteBy)
	}
	if m.FieldCleared(permission.FieldDescription) {
		fields = append(fields, permission.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	switch name {
	case permission.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case permission.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case permission.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case permission.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case permission.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case permission.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case permission.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case permission.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case permission.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case permission.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case permission.FieldName:
		m.ResetName()
		return nil
	case permission.FieldAction:
		m.ResetAction()
		return nil
	case permission.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.role_permissions != nil {
		edges = append(edges, permission.EdgeRolePermissions)
	}
	if m.scope != nil {
		edges = append(edges, permission.EdgeScope)
	}
	if m.api_auths != nil {
		edges = append(edges, permission.EdgeAPIAuths)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRolePermissions:
		ids := make([]ent.Value, 0, len(m.role_permissions))
		for id := range m.role_permissions {
			ids = append(ids, id)
		}
		return ids
	case permission.EdgeScope:
		if id := m.scope; id != nil {
			return []ent.Value{*id}
		}
	case permission.EdgeAPIAuths:
		ids := make([]ent.Value, 0, len(m.api_auths))
		for id := range m.api_auths {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedrole_permissions != nil {
		edges = append(edges, permission.EdgeRolePermissions)
	}
	if m.removedapi_auths != nil {
		edges = append(edges, permission.EdgeAPIAuths)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRolePermissions:
		ids := make([]ent.Value, 0, len(m.removedrole_permissions))
		for id := range m.removedrole_permissions {
			ids = append(ids, id)
		}
		return ids
	case permission.EdgeAPIAuths:
		ids := make([]ent.Value, 0, len(m.removedapi_auths))
		for id := range m.removedapi_auths {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrole_permissions {
		edges = append(edges, permission.EdgeRolePermissions)
	}
	if m.clearedscope {
		edges = append(edges, permission.EdgeScope)
	}
	if m.clearedapi_auths {
		edges = append(edges, permission.EdgeAPIAuths)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case permission.EdgeRolePermissions:
		return m.clearedrole_permissions
	case permission.EdgeScope:
		return m.clearedscope
	case permission.EdgeAPIAuths:
		return m.clearedapi_auths
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	switch name {
	case permission.EdgeScope:
		m.ClearScope()
		return nil
	}
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	case permission.EdgeRolePermissions:
		m.ResetRolePermissions()
		return nil
	case permission.EdgeScope:
		m.ResetScope()
		return nil
	case permission.EdgeAPIAuths:
		m.ResetAPIAuths()
		return nil
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint64
	create_time             *time.Time
	create_by               *uint64
	addcreate_by            *int64
	update_time             *time.Time
	update_by               *uint64
	addupdate_by            *int64
	delete_time             *time.Time
	delete_by               *uint64
	adddelete_by            *int64
	name                    *string
	description             *string
	clearedFields           map[string]struct{}
	user_roles              map[uint64]struct{}
	removeduser_roles       map[uint64]struct{}
	cleareduser_roles       bool
	role_permissions        map[uint64]struct{}
	removedrole_permissions map[uint64]struct{}
	clearedrole_permissions bool
	inherited_by            map[uint64]struct{}
	removedinherited_by     map[uint64]struct{}
	clearedinherited_by     bool
	inherits_from           map[uint64]struct{}
	removedinherits_from    map[uint64]struct{}
	clearedinherits_from    bool
	client_device           map[uint64]struct{}
	removedclient_device    map[uint64]struct{}
	clearedclient_device    bool
	done                    bool
	oldValue                func(context.Context) (*Role, error)
	predicates              []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uint64) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RoleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RoleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RoleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *RoleMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *RoleMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *RoleMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *RoleMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *RoleMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[role.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *RoleMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[role.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *RoleMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, role.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *RoleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RoleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RoleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *RoleMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *RoleMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *RoleMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *RoleMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *RoleMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[role.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *RoleMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[role.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *RoleMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, role.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *RoleMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *RoleMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *RoleMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[role.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *RoleMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[role.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *RoleMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, role.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *RoleMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *RoleMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *RoleMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *RoleMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *RoleMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[role.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *RoleMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[role.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *RoleMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, role.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RoleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RoleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RoleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[role.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RoleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[role.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RoleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, role.FieldDescription)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by ids.
func (m *RoleMutation) AddUserRoleIDs(ids ...uint64) {
	if m.user_roles == nil {
		m.user_roles = make(map[uint64]struct{})
	}
	for i := range ids {
		m.user_roles[ids[i]] = struct{}{}
	}
}

// ClearUserRoles clears the "user_roles" edge to the UserRole entity.
func (m *RoleMutation) ClearUserRoles() {
	m.cleareduser_roles = true
}

// UserRolesCleared reports if the "user_roles" edge to the UserRole entity was cleared.
func (m *RoleMutation) UserRolesCleared() bool {
	return m.cleareduser_roles
}

// RemoveUserRoleIDs removes the "user_roles" edge to the UserRole entity by IDs.
func (m *RoleMutation) RemoveUserRoleIDs(ids ...uint64) {
	if m.removeduser_roles == nil {
		m.removeduser_roles = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.user_roles, ids[i])
		m.removeduser_roles[ids[i]] = struct{}{}
	}
}

// RemovedUserRoles returns the removed IDs of the "user_roles" edge to the UserRole entity.
func (m *RoleMutation) RemovedUserRolesIDs() (ids []uint64) {
	for id := range m.removeduser_roles {
		ids = append(ids, id)
	}
	return
}

// UserRolesIDs returns the "user_roles" edge IDs in the mutation.
func (m *RoleMutation) UserRolesIDs() (ids []uint64) {
	for id := range m.user_roles {
		ids = append(ids, id)
	}
	return
}

// ResetUserRoles resets all changes to the "user_roles" edge.
func (m *RoleMutation) ResetUserRoles() {
	m.user_roles = nil
	m.cleareduser_roles = false
	m.removeduser_roles = nil
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermission entity by ids.
func (m *RoleMutation) AddRolePermissionIDs(ids ...uint64) {
	if m.role_permissions == nil {
		m.role_permissions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role_permissions[ids[i]] = struct{}{}
	}
}

// ClearRolePermissions clears the "role_permissions" edge to the RolePermission entity.
func (m *RoleMutation) ClearRolePermissions() {
	m.clearedrole_permissions = true
}

// RolePermissionsCleared reports if the "role_permissions" edge to the RolePermission entity was cleared.
func (m *RoleMutation) RolePermissionsCleared() bool {
	return m.clearedrole_permissions
}

// RemoveRolePermissionIDs removes the "role_permissions" edge to the RolePermission entity by IDs.
func (m *RoleMutation) RemoveRolePermissionIDs(ids ...uint64) {
	if m.removedrole_permissions == nil {
		m.removedrole_permissions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.role_permissions, ids[i])
		m.removedrole_permissions[ids[i]] = struct{}{}
	}
}

// RemovedRolePermissions returns the removed IDs of the "role_permissions" edge to the RolePermission entity.
func (m *RoleMutation) RemovedRolePermissionsIDs() (ids []uint64) {
	for id := range m.removedrole_permissions {
		ids = append(ids, id)
	}
	return
}

// RolePermissionsIDs returns the "role_permissions" edge IDs in the mutation.
func (m *RoleMutation) RolePermissionsIDs() (ids []uint64) {
	for id := range m.role_permissions {
		ids = append(ids, id)
	}
	return
}

// ResetRolePermissions resets all changes to the "role_permissions" edge.
func (m *RoleMutation) ResetRolePermissions() {
	m.role_permissions = nil
	m.clearedrole_permissions = false
	m.removedrole_permissions = nil
}

// AddInheritedByIDs adds the "inherited_by" edge to the Role entity by ids.
func (m *RoleMutation) AddInheritedByIDs(ids ...uint64) {
	if m.inherited_by == nil {
		m.inherited_by = make(map[uint64]struct{})
	}
	for i := range ids {
		m.inherited_by[ids[i]] = struct{}{}
	}
}

// ClearInheritedBy clears the "inherited_by" edge to the Role entity.
func (m *RoleMutation) ClearInheritedBy() {
	m.clearedinherited_by = true
}

// InheritedByCleared reports if the "inherited_by" edge to the Role entity was cleared.
func (m *RoleMutation) InheritedByCleared() bool {
	return m.clearedinherited_by
}

// RemoveInheritedByIDs removes the "inherited_by" edge to the Role entity by IDs.
func (m *RoleMutation) RemoveInheritedByIDs(ids ...uint64) {
	if m.removedinherited_by == nil {
		m.removedinherited_by = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.inherited_by, ids[i])
		m.removedinherited_by[ids[i]] = struct{}{}
	}
}

// RemovedInheritedBy returns the removed IDs of the "inherited_by" edge to the Role entity.
func (m *RoleMutation) RemovedInheritedByIDs() (ids []uint64) {
	for id := range m.removedinherited_by {
		ids = append(ids, id)
	}
	return
}

// InheritedByIDs returns the "inherited_by" edge IDs in the mutation.
func (m *RoleMutation) InheritedByIDs() (ids []uint64) {
	for id := range m.inherited_by {
		ids = append(ids, id)
	}
	return
}

// ResetInheritedBy resets all changes to the "inherited_by" edge.
func (m *RoleMutation) ResetInheritedBy() {
	m.inherited_by = nil
	m.clearedinherited_by = false
	m.removedinherited_by = nil
}

// AddInheritsFromIDs adds the "inherits_from" edge to the Role entity by ids.
func (m *RoleMutation) AddInheritsFromIDs(ids ...uint64) {
	if m.inherits_from == nil {
		m.inherits_from = make(map[uint64]struct{})
	}
	for i := range ids {
		m.inherits_from[ids[i]] = struct{}{}
	}
}

// ClearInheritsFrom clears the "inherits_from" edge to the Role entity.
func (m *RoleMutation) ClearInheritsFrom() {
	m.clearedinherits_from = true
}

// InheritsFromCleared reports if the "inherits_from" edge to the Role entity was cleared.
func (m *RoleMutation) InheritsFromCleared() bool {
	return m.clearedinherits_from
}

// RemoveInheritsFromIDs removes the "inherits_from" edge to the Role entity by IDs.
func (m *RoleMutation) RemoveInheritsFromIDs(ids ...uint64) {
	if m.removedinherits_from == nil {
		m.removedinherits_from = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.inherits_from, ids[i])
		m.removedinherits_from[ids[i]] = struct{}{}
	}
}

// RemovedInheritsFrom returns the removed IDs of the "inherits_from" edge to the Role entity.
func (m *RoleMutation) RemovedInheritsFromIDs() (ids []uint64) {
	for id := range m.removedinherits_from {
		ids = append(ids, id)
	}
	return
}

// InheritsFromIDs returns the "inherits_from" edge IDs in the mutation.
func (m *RoleMutation) InheritsFromIDs() (ids []uint64) {
	for id := range m.inherits_from {
		ids = append(ids, id)
	}
	return
}

// ResetInheritsFrom resets all changes to the "inherits_from" edge.
func (m *RoleMutation) ResetInheritsFrom() {
	m.inherits_from = nil
	m.clearedinherits_from = false
	m.removedinherits_from = nil
}

// AddClientDeviceIDs adds the "client_device" edge to the ClientDevice entity by ids.
func (m *RoleMutation) AddClientDeviceIDs(ids ...uint64) {
	if m.client_device == nil {
		m.client_device = make(map[uint64]struct{})
	}
	for i := range ids {
		m.client_device[ids[i]] = struct{}{}
	}
}

// ClearClientDevice clears the "client_device" edge to the ClientDevice entity.
func (m *RoleMutation) ClearClientDevice() {
	m.clearedclient_device = true
}

// ClientDeviceCleared reports if the "client_device" edge to the ClientDevice entity was cleared.
func (m *RoleMutation) ClientDeviceCleared() bool {
	return m.clearedclient_device
}

// RemoveClientDeviceIDs removes the "client_device" edge to the ClientDevice entity by IDs.
func (m *RoleMutation) RemoveClientDeviceIDs(ids ...uint64) {
	if m.removedclient_device == nil {
		m.removedclient_device = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.client_device, ids[i])
		m.removedclient_device[ids[i]] = struct{}{}
	}
}

// RemovedClientDevice returns the removed IDs of the "client_device" edge to the ClientDevice entity.
func (m *RoleMutation) RemovedClientDeviceIDs() (ids []uint64) {
	for id := range m.removedclient_device {
		ids = append(ids, id)
	}
	return
}

// ClientDeviceIDs returns the "client_device" edge IDs in the mutation.
func (m *RoleMutation) ClientDeviceIDs() (ids []uint64) {
	for id := range m.client_device {
		ids = append(ids, id)
	}
	return
}

// ResetClientDevice resets all changes to the "client_device" edge.
func (m *RoleMutation) ResetClientDevice() {
	m.client_device = nil
	m.clearedclient_device = false
	m.removedclient_device = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, role.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, role.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, role.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, role.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, role.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, role.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.description != nil {
		fields = append(fields, role.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreateTime:
		return m.CreateTime()
	case role.FieldCreateBy:
		return m.CreateBy()
	case role.FieldUpdateTime:
		return m.UpdateTime()
	case role.FieldUpdateBy:
		return m.UpdateBy()
	case role.FieldDeleteTime:
		return m.DeleteTime()
	case role.FieldDeleteBy:
		return m.DeleteBy()
	case role.FieldName:
		return m.Name()
	case role.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case role.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case role.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case role.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case role.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case role.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case role.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case role.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case role.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case role.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case role.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, role.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, role.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, role.FieldDeleteBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreateBy:
		return m.AddedCreateBy()
	case role.FieldUpdateBy:
		return m.AddedUpdateBy()
	case role.FieldDeleteBy:
		return m.AddedDeleteBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case role.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case role.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(role.FieldCreateBy) {
		fields = append(fields, role.FieldCreateBy)
	}
	if m.FieldCleared(role.FieldUpdateBy) {
		fields = append(fields, role.FieldUpdateBy)
	}
	if m.FieldCleared(role.FieldDeleteTime) {
		fields = append(fields, role.FieldDeleteTime)
	}
	if m.FieldCleared(role.FieldDeleteBy) {
		fields = append(fields, role.FieldDeleteBy)
	}
	if m.FieldCleared(role.FieldDescription) {
		fields = append(fields, role.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	switch name {
	case role.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case role.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case role.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case role.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case role.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case role.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case role.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case role.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case role.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case role.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.user_roles != nil {
		edges = append(edges, role.EdgeUserRoles)
	}
	if m.role_permissions != nil {
		edges = append(edges, role.EdgeRolePermissions)
	}
	if m.inherited_by != nil {
		edges = append(edges, role.EdgeInheritedBy)
	}
	if m.inherits_from != nil {
		edges = append(edges, role.EdgeInheritsFrom)
	}
	if m.client_device != nil {
		edges = append(edges, role.EdgeClientDevice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUserRoles:
		ids := make([]ent.Value, 0, len(m.user_roles))
		for id := range m.user_roles {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeRolePermissions:
		ids := make([]ent.Value, 0, len(m.role_permissions))
		for id := range m.role_permissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeInheritedBy:
		ids := make([]ent.Value, 0, len(m.inherited_by))
		for id := range m.inherited_by {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeInheritsFrom:
		ids := make([]ent.Value, 0, len(m.inherits_from))
		for id := range m.inherits_from {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeClientDevice:
		ids := make([]ent.Value, 0, len(m.client_device))
		for id := range m.client_device {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeduser_roles != nil {
		edges = append(edges, role.EdgeUserRoles)
	}
	if m.removedrole_permissions != nil {
		edges = append(edges, role.EdgeRolePermissions)
	}
	if m.removedinherited_by != nil {
		edges = append(edges, role.EdgeInheritedBy)
	}
	if m.removedinherits_from != nil {
		edges = append(edges, role.EdgeInheritsFrom)
	}
	if m.removedclient_device != nil {
		edges = append(edges, role.EdgeClientDevice)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUserRoles:
		ids := make([]ent.Value, 0, len(m.removeduser_roles))
		for id := range m.removeduser_roles {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeRolePermissions:
		ids := make([]ent.Value, 0, len(m.removedrole_permissions))
		for id := range m.removedrole_permissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeInheritedBy:
		ids := make([]ent.Value, 0, len(m.removedinherited_by))
		for id := range m.removedinherited_by {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeInheritsFrom:
		ids := make([]ent.Value, 0, len(m.removedinherits_from))
		for id := range m.removedinherits_from {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeClientDevice:
		ids := make([]ent.Value, 0, len(m.removedclient_device))
		for id := range m.removedclient_device {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareduser_roles {
		edges = append(edges, role.EdgeUserRoles)
	}
	if m.clearedrole_permissions {
		edges = append(edges, role.EdgeRolePermissions)
	}
	if m.clearedinherited_by {
		edges = append(edges, role.EdgeInheritedBy)
	}
	if m.clearedinherits_from {
		edges = append(edges, role.EdgeInheritsFrom)
	}
	if m.clearedclient_device {
		edges = append(edges, role.EdgeClientDevice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeUserRoles:
		return m.cleareduser_roles
	case role.EdgeRolePermissions:
		return m.clearedrole_permissions
	case role.EdgeInheritedBy:
		return m.clearedinherited_by
	case role.EdgeInheritsFrom:
		return m.clearedinherits_from
	case role.EdgeClientDevice:
		return m.clearedclient_device
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeUserRoles:
		m.ResetUserRoles()
		return nil
	case role.EdgeRolePermissions:
		m.ResetRolePermissions()
		return nil
	case role.EdgeInheritedBy:
		m.ResetInheritedBy()
		return nil
	case role.EdgeInheritsFrom:
		m.ResetInheritsFrom()
		return nil
	case role.EdgeClientDevice:
		m.ResetClientDevice()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// RolePermissionMutation represents an operation that mutates the RolePermission nodes in the graph.
type RolePermissionMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	create_time       *time.Time
	create_by         *uint64
	addcreate_by      *int64
	update_time       *time.Time
	update_by         *uint64
	addupdate_by      *int64
	delete_time       *time.Time
	delete_by         *uint64
	adddelete_by      *int64
	clearedFields     map[string]struct{}
	role              *uint64
	clearedrole       bool
	permission        *uint64
	clearedpermission bool
	done              bool
	oldValue          func(context.Context) (*RolePermission, error)
	predicates        []predicate.RolePermission
}

var _ ent.Mutation = (*RolePermissionMutation)(nil)

// rolepermissionOption allows management of the mutation configuration using functional options.
type rolepermissionOption func(*RolePermissionMutation)

// newRolePermissionMutation creates new mutation for the RolePermission entity.
func newRolePermissionMutation(c config, op Op, opts ...rolepermissionOption) *RolePermissionMutation {
	m := &RolePermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeRolePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRolePermissionID sets the ID field of the mutation.
func withRolePermissionID(id uint64) rolepermissionOption {
	return func(m *RolePermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *RolePermission
		)
		m.oldValue = func(ctx context.Context) (*RolePermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RolePermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRolePermission sets the old RolePermission of the mutation.
func withRolePermission(node *RolePermission) rolepermissionOption {
	return func(m *RolePermissionMutation) {
		m.oldValue = func(context.Context) (*RolePermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RolePermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RolePermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RolePermission entities.
func (m *RolePermissionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RolePermissionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RolePermissionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RolePermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RolePermissionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RolePermissionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RolePermissionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *RolePermissionMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *RolePermissionMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *RolePermissionMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *RolePermissionMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *RolePermissionMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[rolepermission.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *RolePermissionMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[rolepermission.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *RolePermissionMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, rolepermission.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *RolePermissionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RolePermissionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RolePermissionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *RolePermissionMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *RolePermissionMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *RolePermissionMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *RolePermissionMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *RolePermissionMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[rolepermission.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *RolePermissionMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[rolepermission.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *RolePermissionMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, rolepermission.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *RolePermissionMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *RolePermissionMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *RolePermissionMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[rolepermission.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *RolePermissionMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[rolepermission.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *RolePermissionMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, rolepermission.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *RolePermissionMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *RolePermissionMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *RolePermissionMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *RolePermissionMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *RolePermissionMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[rolepermission.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *RolePermissionMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[rolepermission.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *RolePermissionMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, rolepermission.FieldDeleteBy)
}

// SetRoleID sets the "role_id" field.
func (m *RolePermissionMutation) SetRoleID(u uint64) {
	m.role = &u
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RolePermissionMutation) RoleID() (r uint64, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldRoleID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RolePermissionMutation) ResetRoleID() {
	m.role = nil
}

// SetPermissionID sets the "permission_id" field.
func (m *RolePermissionMutation) SetPermissionID(u uint64) {
	m.permission = &u
}

// PermissionID returns the value of the "permission_id" field in the mutation.
func (m *RolePermissionMutation) PermissionID() (r uint64, exists bool) {
	v := m.permission
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionID returns the old "permission_id" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldPermissionID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionID: %w", err)
	}
	return oldValue.PermissionID, nil
}

// ResetPermissionID resets all changes to the "permission_id" field.
func (m *RolePermissionMutation) ResetPermissionID() {
	m.permission = nil
}

// ClearRole clears the "role" edge to the Role entity.
func (m *RolePermissionMutation) ClearRole() {
	m.clearedrole = true
	m.clearedFields[rolepermission.FieldRoleID] = struct{}{}
}

// RoleCleared reports if the "role" edge to the Role entity was cleared.
func (m *RolePermissionMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *RolePermissionMutation) RoleIDs() (ids []uint64) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *RolePermissionMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (m *RolePermissionMutation) ClearPermission() {
	m.clearedpermission = true
	m.clearedFields[rolepermission.FieldPermissionID] = struct{}{}
}

// PermissionCleared reports if the "permission" edge to the Permission entity was cleared.
func (m *RolePermissionMutation) PermissionCleared() bool {
	return m.clearedpermission
}

// PermissionIDs returns the "permission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PermissionID instead. It exists only for internal usage by the builders.
func (m *RolePermissionMutation) PermissionIDs() (ids []uint64) {
	if id := m.permission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPermission resets all changes to the "permission" edge.
func (m *RolePermissionMutation) ResetPermission() {
	m.permission = nil
	m.clearedpermission = false
}

// Where appends a list predicates to the RolePermissionMutation builder.
func (m *RolePermissionMutation) Where(ps ...predicate.RolePermission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RolePermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RolePermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RolePermission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RolePermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RolePermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RolePermission).
func (m *RolePermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RolePermissionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, rolepermission.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, rolepermission.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, rolepermission.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, rolepermission.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, rolepermission.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, rolepermission.FieldDeleteBy)
	}
	if m.role != nil {
		fields = append(fields, rolepermission.FieldRoleID)
	}
	if m.permission != nil {
		fields = append(fields, rolepermission.FieldPermissionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RolePermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rolepermission.FieldCreateTime:
		return m.CreateTime()
	case rolepermission.FieldCreateBy:
		return m.CreateBy()
	case rolepermission.FieldUpdateTime:
		return m.UpdateTime()
	case rolepermission.FieldUpdateBy:
		return m.UpdateBy()
	case rolepermission.FieldDeleteTime:
		return m.DeleteTime()
	case rolepermission.FieldDeleteBy:
		return m.DeleteBy()
	case rolepermission.FieldRoleID:
		return m.RoleID()
	case rolepermission.FieldPermissionID:
		return m.PermissionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RolePermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rolepermission.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case rolepermission.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case rolepermission.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case rolepermission.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case rolepermission.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case rolepermission.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case rolepermission.FieldRoleID:
		return m.OldRoleID(ctx)
	case rolepermission.FieldPermissionID:
		return m.OldPermissionID(ctx)
	}
	return nil, fmt.Errorf("unknown RolePermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rolepermission.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case rolepermission.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case rolepermission.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case rolepermission.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case rolepermission.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case rolepermission.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case rolepermission.FieldRoleID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case rolepermission.FieldPermissionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionID(v)
		return nil
	}
	return fmt.Errorf("unknown RolePermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RolePermissionMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, rolepermission.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, rolepermission.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, rolepermission.FieldDeleteBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RolePermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rolepermission.FieldCreateBy:
		return m.AddedCreateBy()
	case rolepermission.FieldUpdateBy:
		return m.AddedUpdateBy()
	case rolepermission.FieldDeleteBy:
		return m.AddedDeleteBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rolepermission.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case rolepermission.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case rolepermission.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown RolePermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RolePermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rolepermission.FieldCreateBy) {
		fields = append(fields, rolepermission.FieldCreateBy)
	}
	if m.FieldCleared(rolepermission.FieldUpdateBy) {
		fields = append(fields, rolepermission.FieldUpdateBy)
	}
	if m.FieldCleared(rolepermission.FieldDeleteTime) {
		fields = append(fields, rolepermission.FieldDeleteTime)
	}
	if m.FieldCleared(rolepermission.FieldDeleteBy) {
		fields = append(fields, rolepermission.FieldDeleteBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RolePermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RolePermissionMutation) ClearField(name string) error {
	switch name {
	case rolepermission.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case rolepermission.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case rolepermission.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case rolepermission.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	}
	return fmt.Errorf("unknown RolePermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RolePermissionMutation) ResetField(name string) error {
	switch name {
	case rolepermission.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case rolepermission.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case rolepermission.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case rolepermission.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case rolepermission.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case rolepermission.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case rolepermission.FieldRoleID:
		m.ResetRoleID()
		return nil
	case rolepermission.FieldPermissionID:
		m.ResetPermissionID()
		return nil
	}
	return fmt.Errorf("unknown RolePermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RolePermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.role != nil {
		edges = append(edges, rolepermission.EdgeRole)
	}
	if m.permission != nil {
		edges = append(edges, rolepermission.EdgePermission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RolePermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rolepermission.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	case rolepermission.EdgePermission:
		if id := m.permission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RolePermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RolePermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RolePermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrole {
		edges = append(edges, rolepermission.EdgeRole)
	}
	if m.clearedpermission {
		edges = append(edges, rolepermission.EdgePermission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RolePermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case rolepermission.EdgeRole:
		return m.clearedrole
	case rolepermission.EdgePermission:
		return m.clearedpermission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RolePermissionMutation) ClearEdge(name string) error {
	switch name {
	case rolepermission.EdgeRole:
		m.ClearRole()
		return nil
	case rolepermission.EdgePermission:
		m.ClearPermission()
		return nil
	}
	return fmt.Errorf("unknown RolePermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RolePermissionMutation) ResetEdge(name string) error {
	switch name {
	case rolepermission.EdgeRole:
		m.ResetRole()
		return nil
	case rolepermission.EdgePermission:
		m.ResetPermission()
		return nil
	}
	return fmt.Errorf("unknown RolePermission edge %s", name)
}

// ScanMutation represents an operation that mutates the Scan nodes in the graph.
type ScanMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	create_time       *time.Time
	create_by         *uint64
	addcreate_by      *int64
	update_time       *time.Time
	update_by         *uint64
	addupdate_by      *int64
	delete_time       *time.Time
	delete_by         *uint64
	adddelete_by      *int64
	content           *string
	length            *int
	addlength         *int
	success           *bool
	clearedFields     map[string]struct{}
	attachment        *uint64
	clearedattachment bool
	done              bool
	oldValue          func(context.Context) (*Scan, error)
	predicates        []predicate.Scan
}

var _ ent.Mutation = (*ScanMutation)(nil)

// scanOption allows management of the mutation configuration using functional options.
type scanOption func(*ScanMutation)

// newScanMutation creates new mutation for the Scan entity.
func newScanMutation(c config, op Op, opts ...scanOption) *ScanMutation {
	m := &ScanMutation{
		config:        c,
		op:            op,
		typ:           TypeScan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScanID sets the ID field of the mutation.
func withScanID(id uint64) scanOption {
	return func(m *ScanMutation) {
		var (
			err   error
			once  sync.Once
			value *Scan
		)
		m.oldValue = func(ctx context.Context) (*Scan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScan sets the old Scan of the mutation.
func withScan(node *Scan) scanOption {
	return func(m *ScanMutation) {
		m.oldValue = func(context.Context) (*Scan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Scan entities.
func (m *ScanMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScanMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScanMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Scan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ScanMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScanMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScanMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *ScanMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *ScanMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *ScanMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *ScanMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *ScanMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[scan.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *ScanMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[scan.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *ScanMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, scan.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *ScanMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScanMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScanMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *ScanMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *ScanMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *ScanMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *ScanMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *ScanMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[scan.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *ScanMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[scan.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *ScanMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, scan.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *ScanMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *ScanMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *ScanMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[scan.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *ScanMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[scan.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *ScanMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, scan.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *ScanMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *ScanMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *ScanMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *ScanMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *ScanMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[scan.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *ScanMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[scan.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *ScanMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, scan.FieldDeleteBy)
}

// SetContent sets the "content" field.
func (m *ScanMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ScanMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ScanMutation) ResetContent() {
	m.content = nil
}

// SetLength sets the "length" field.
func (m *ScanMutation) SetLength(i int) {
	m.length = &i
	m.addlength = nil
}

// Length returns the value of the "length" field in the mutation.
func (m *ScanMutation) Length() (r int, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old "length" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldLength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds i to the "length" field.
func (m *ScanMutation) AddLength(i int) {
	if m.addlength != nil {
		*m.addlength += i
	} else {
		m.addlength = &i
	}
}

// AddedLength returns the value that was added to the "length" field in this mutation.
func (m *ScanMutation) AddedLength() (r int, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength resets all changes to the "length" field.
func (m *ScanMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// SetSuccess sets the "success" field.
func (m *ScanMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *ScanMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the Scan entity.
// If the Scan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScanMutation) OldSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ResetSuccess resets all changes to the "success" field.
func (m *ScanMutation) ResetSuccess() {
	m.success = nil
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by id.
func (m *ScanMutation) SetAttachmentID(id uint64) {
	m.attachment = &id
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (m *ScanMutation) ClearAttachment() {
	m.clearedattachment = true
}

// AttachmentCleared reports if the "attachment" edge to the Attachment entity was cleared.
func (m *ScanMutation) AttachmentCleared() bool {
	return m.clearedattachment
}

// AttachmentID returns the "attachment" edge ID in the mutation.
func (m *ScanMutation) AttachmentID() (id uint64, exists bool) {
	if m.attachment != nil {
		return *m.attachment, true
	}
	return
}

// AttachmentIDs returns the "attachment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttachmentID instead. It exists only for internal usage by the builders.
func (m *ScanMutation) AttachmentIDs() (ids []uint64) {
	if id := m.attachment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttachment resets all changes to the "attachment" edge.
func (m *ScanMutation) ResetAttachment() {
	m.attachment = nil
	m.clearedattachment = false
}

// Where appends a list predicates to the ScanMutation builder.
func (m *ScanMutation) Where(ps ...predicate.Scan) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScanMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScanMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Scan, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScanMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScanMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Scan).
func (m *ScanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScanMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, scan.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, scan.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, scan.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, scan.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, scan.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, scan.FieldDeleteBy)
	}
	if m.content != nil {
		fields = append(fields, scan.FieldContent)
	}
	if m.length != nil {
		fields = append(fields, scan.FieldLength)
	}
	if m.success != nil {
		fields = append(fields, scan.FieldSuccess)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scan.FieldCreateTime:
		return m.CreateTime()
	case scan.FieldCreateBy:
		return m.CreateBy()
	case scan.FieldUpdateTime:
		return m.UpdateTime()
	case scan.FieldUpdateBy:
		return m.UpdateBy()
	case scan.FieldDeleteTime:
		return m.DeleteTime()
	case scan.FieldDeleteBy:
		return m.DeleteBy()
	case scan.FieldContent:
		return m.Content()
	case scan.FieldLength:
		return m.Length()
	case scan.FieldSuccess:
		return m.Success()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scan.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case scan.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case scan.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case scan.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case scan.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case scan.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case scan.FieldContent:
		return m.OldContent(ctx)
	case scan.FieldLength:
		return m.OldLength(ctx)
	case scan.FieldSuccess:
		return m.OldSuccess(ctx)
	}
	return nil, fmt.Errorf("unknown Scan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scan.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case scan.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case scan.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case scan.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case scan.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case scan.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case scan.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case scan.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	case scan.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	}
	return fmt.Errorf("unknown Scan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScanMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, scan.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, scan.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, scan.FieldDeleteBy)
	}
	if m.addlength != nil {
		fields = append(fields, scan.FieldLength)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case scan.FieldCreateBy:
		return m.AddedCreateBy()
	case scan.FieldUpdateBy:
		return m.AddedUpdateBy()
	case scan.FieldDeleteBy:
		return m.AddedDeleteBy()
	case scan.FieldLength:
		return m.AddedLength()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case scan.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case scan.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case scan.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case scan.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	}
	return fmt.Errorf("unknown Scan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scan.FieldCreateBy) {
		fields = append(fields, scan.FieldCreateBy)
	}
	if m.FieldCleared(scan.FieldUpdateBy) {
		fields = append(fields, scan.FieldUpdateBy)
	}
	if m.FieldCleared(scan.FieldDeleteTime) {
		fields = append(fields, scan.FieldDeleteTime)
	}
	if m.FieldCleared(scan.FieldDeleteBy) {
		fields = append(fields, scan.FieldDeleteBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScanMutation) ClearField(name string) error {
	switch name {
	case scan.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case scan.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case scan.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case scan.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	}
	return fmt.Errorf("unknown Scan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScanMutation) ResetField(name string) error {
	switch name {
	case scan.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case scan.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case scan.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case scan.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case scan.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case scan.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case scan.FieldContent:
		m.ResetContent()
		return nil
	case scan.FieldLength:
		m.ResetLength()
		return nil
	case scan.FieldSuccess:
		m.ResetSuccess()
		return nil
	}
	return fmt.Errorf("unknown Scan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScanMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attachment != nil {
		edges = append(edges, scan.EdgeAttachment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scan.EdgeAttachment:
		if id := m.attachment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScanMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattachment {
		edges = append(edges, scan.EdgeAttachment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScanMutation) EdgeCleared(name string) bool {
	switch name {
	case scan.EdgeAttachment:
		return m.clearedattachment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScanMutation) ClearEdge(name string) error {
	switch name {
	case scan.EdgeAttachment:
		m.ClearAttachment()
		return nil
	}
	return fmt.Errorf("unknown Scan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScanMutation) ResetEdge(name string) error {
	switch name {
	case scan.EdgeAttachment:
		m.ResetAttachment()
		return nil
	}
	return fmt.Errorf("unknown Scan edge %s", name)
}

// ScopeMutation represents an operation that mutates the Scope nodes in the graph.
type ScopeMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	create_time       *time.Time
	create_by         *uint64
	addcreate_by      *int64
	update_time       *time.Time
	update_by         *uint64
	addupdate_by      *int64
	delete_time       *time.Time
	delete_by         *uint64
	adddelete_by      *int64
	name              *string
	_type             *scope.Type
	icon              *string
	description       *string
	action            *string
	_path             *string
	component         *string
	redirect          *string
	_order            *int
	add_order         *int
	hidden            *bool
	disabled          *bool
	clearedFields     map[string]struct{}
	parent            *uint64
	clearedparent     bool
	children          map[uint64]struct{}
	removedchildren   map[uint64]struct{}
	clearedchildren   bool
	permission        *uint64
	clearedpermission bool
	done              bool
	oldValue          func(context.Context) (*Scope, error)
	predicates        []predicate.Scope
}

var _ ent.Mutation = (*ScopeMutation)(nil)

// scopeOption allows management of the mutation configuration using functional options.
type scopeOption func(*ScopeMutation)

// newScopeMutation creates new mutation for the Scope entity.
func newScopeMutation(c config, op Op, opts ...scopeOption) *ScopeMutation {
	m := &ScopeMutation{
		config:        c,
		op:            op,
		typ:           TypeScope,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScopeID sets the ID field of the mutation.
func withScopeID(id uint64) scopeOption {
	return func(m *ScopeMutation) {
		var (
			err   error
			once  sync.Once
			value *Scope
		)
		m.oldValue = func(ctx context.Context) (*Scope, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scope.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScope sets the old Scope of the mutation.
func withScope(node *Scope) scopeOption {
	return func(m *ScopeMutation) {
		m.oldValue = func(context.Context) (*Scope, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScopeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScopeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Scope entities.
func (m *ScopeMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScopeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScopeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Scope.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ScopeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScopeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScopeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *ScopeMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *ScopeMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *ScopeMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *ScopeMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *ScopeMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[scope.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *ScopeMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[scope.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *ScopeMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, scope.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *ScopeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScopeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScopeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *ScopeMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *ScopeMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *ScopeMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *ScopeMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *ScopeMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[scope.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *ScopeMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[scope.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *ScopeMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, scope.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *ScopeMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *ScopeMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *ScopeMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[scope.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *ScopeMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[scope.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *ScopeMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, scope.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *ScopeMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *ScopeMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *ScopeMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *ScopeMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *ScopeMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[scope.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *ScopeMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[scope.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *ScopeMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, scope.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *ScopeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ScopeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ScopeMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ScopeMutation) SetType(s scope.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ScopeMutation) GetType() (r scope.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldType(ctx context.Context) (v scope.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ScopeMutation) ResetType() {
	m._type = nil
}

// SetIcon sets the "icon" field.
func (m *ScopeMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *ScopeMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *ScopeMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[scope.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *ScopeMutation) IconCleared() bool {
	_, ok := m.clearedFields[scope.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *ScopeMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, scope.FieldIcon)
}

// SetDescription sets the "description" field.
func (m *ScopeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ScopeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ScopeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[scope.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ScopeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[scope.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ScopeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, scope.FieldDescription)
}

// SetAction sets the "action" field.
func (m *ScopeMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *ScopeMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ClearAction clears the value of the "action" field.
func (m *ScopeMutation) ClearAction() {
	m.action = nil
	m.clearedFields[scope.FieldAction] = struct{}{}
}

// ActionCleared returns if the "action" field was cleared in this mutation.
func (m *ScopeMutation) ActionCleared() bool {
	_, ok := m.clearedFields[scope.FieldAction]
	return ok
}

// ResetAction resets all changes to the "action" field.
func (m *ScopeMutation) ResetAction() {
	m.action = nil
	delete(m.clearedFields, scope.FieldAction)
}

// SetPath sets the "path" field.
func (m *ScopeMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ScopeMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *ScopeMutation) ClearPath() {
	m._path = nil
	m.clearedFields[scope.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *ScopeMutation) PathCleared() bool {
	_, ok := m.clearedFields[scope.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *ScopeMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, scope.FieldPath)
}

// SetComponent sets the "component" field.
func (m *ScopeMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *ScopeMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ClearComponent clears the value of the "component" field.
func (m *ScopeMutation) ClearComponent() {
	m.component = nil
	m.clearedFields[scope.FieldComponent] = struct{}{}
}

// ComponentCleared returns if the "component" field was cleared in this mutation.
func (m *ScopeMutation) ComponentCleared() bool {
	_, ok := m.clearedFields[scope.FieldComponent]
	return ok
}

// ResetComponent resets all changes to the "component" field.
func (m *ScopeMutation) ResetComponent() {
	m.component = nil
	delete(m.clearedFields, scope.FieldComponent)
}

// SetRedirect sets the "redirect" field.
func (m *ScopeMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the value of the "redirect" field in the mutation.
func (m *ScopeMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirect returns the old "redirect" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldRedirect(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirect: %w", err)
	}
	return oldValue.Redirect, nil
}

// ClearRedirect clears the value of the "redirect" field.
func (m *ScopeMutation) ClearRedirect() {
	m.redirect = nil
	m.clearedFields[scope.FieldRedirect] = struct{}{}
}

// RedirectCleared returns if the "redirect" field was cleared in this mutation.
func (m *ScopeMutation) RedirectCleared() bool {
	_, ok := m.clearedFields[scope.FieldRedirect]
	return ok
}

// ResetRedirect resets all changes to the "redirect" field.
func (m *ScopeMutation) ResetRedirect() {
	m.redirect = nil
	delete(m.clearedFields, scope.FieldRedirect)
}

// SetOrder sets the "order" field.
func (m *ScopeMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *ScopeMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *ScopeMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *ScopeMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *ScopeMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetHidden sets the "hidden" field.
func (m *ScopeMutation) SetHidden(b bool) {
	m.hidden = &b
}

// Hidden returns the value of the "hidden" field in the mutation.
func (m *ScopeMutation) Hidden() (r bool, exists bool) {
	v := m.hidden
	if v == nil {
		return
	}
	return *v, true
}

// OldHidden returns the old "hidden" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldHidden(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHidden is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHidden requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHidden: %w", err)
	}
	return oldValue.Hidden, nil
}

// ResetHidden resets all changes to the "hidden" field.
func (m *ScopeMutation) ResetHidden() {
	m.hidden = nil
}

// SetDisabled sets the "disabled" field.
func (m *ScopeMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *ScopeMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *ScopeMutation) ResetDisabled() {
	m.disabled = nil
}

// SetParentID sets the "parent_id" field.
func (m *ScopeMutation) SetParentID(u uint64) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *ScopeMutation) ParentID() (r uint64, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldParentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *ScopeMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[scope.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *ScopeMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[scope.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *ScopeMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, scope.FieldParentID)
}

// ClearParent clears the "parent" edge to the Scope entity.
func (m *ScopeMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[scope.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Scope entity was cleared.
func (m *ScopeMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ScopeMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ScopeMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Scope entity by ids.
func (m *ScopeMutation) AddChildIDs(ids ...uint64) {
	if m.children == nil {
		m.children = make(map[uint64]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Scope entity.
func (m *ScopeMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Scope entity was cleared.
func (m *ScopeMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Scope entity by IDs.
func (m *ScopeMutation) RemoveChildIDs(ids ...uint64) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Scope entity.
func (m *ScopeMutation) RemovedChildrenIDs() (ids []uint64) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *ScopeMutation) ChildrenIDs() (ids []uint64) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *ScopeMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetPermissionID sets the "permission" edge to the Permission entity by id.
func (m *ScopeMutation) SetPermissionID(id uint64) {
	m.permission = &id
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (m *ScopeMutation) ClearPermission() {
	m.clearedpermission = true
}

// PermissionCleared reports if the "permission" edge to the Permission entity was cleared.
func (m *ScopeMutation) PermissionCleared() bool {
	return m.clearedpermission
}

// PermissionID returns the "permission" edge ID in the mutation.
func (m *ScopeMutation) PermissionID() (id uint64, exists bool) {
	if m.permission != nil {
		return *m.permission, true
	}
	return
}

// PermissionIDs returns the "permission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PermissionID instead. It exists only for internal usage by the builders.
func (m *ScopeMutation) PermissionIDs() (ids []uint64) {
	if id := m.permission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPermission resets all changes to the "permission" edge.
func (m *ScopeMutation) ResetPermission() {
	m.permission = nil
	m.clearedpermission = false
}

// Where appends a list predicates to the ScopeMutation builder.
func (m *ScopeMutation) Where(ps ...predicate.Scope) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScopeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScopeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Scope, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScopeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScopeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Scope).
func (m *ScopeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScopeMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.create_time != nil {
		fields = append(fields, scope.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, scope.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, scope.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, scope.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, scope.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, scope.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, scope.FieldName)
	}
	if m._type != nil {
		fields = append(fields, scope.FieldType)
	}
	if m.icon != nil {
		fields = append(fields, scope.FieldIcon)
	}
	if m.description != nil {
		fields = append(fields, scope.FieldDescription)
	}
	if m.action != nil {
		fields = append(fields, scope.FieldAction)
	}
	if m._path != nil {
		fields = append(fields, scope.FieldPath)
	}
	if m.component != nil {
		fields = append(fields, scope.FieldComponent)
	}
	if m.redirect != nil {
		fields = append(fields, scope.FieldRedirect)
	}
	if m._order != nil {
		fields = append(fields, scope.FieldOrder)
	}
	if m.hidden != nil {
		fields = append(fields, scope.FieldHidden)
	}
	if m.disabled != nil {
		fields = append(fields, scope.FieldDisabled)
	}
	if m.parent != nil {
		fields = append(fields, scope.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScopeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scope.FieldCreateTime:
		return m.CreateTime()
	case scope.FieldCreateBy:
		return m.CreateBy()
	case scope.FieldUpdateTime:
		return m.UpdateTime()
	case scope.FieldUpdateBy:
		return m.UpdateBy()
	case scope.FieldDeleteTime:
		return m.DeleteTime()
	case scope.FieldDeleteBy:
		return m.DeleteBy()
	case scope.FieldName:
		return m.Name()
	case scope.FieldType:
		return m.GetType()
	case scope.FieldIcon:
		return m.Icon()
	case scope.FieldDescription:
		return m.Description()
	case scope.FieldAction:
		return m.Action()
	case scope.FieldPath:
		return m.Path()
	case scope.FieldComponent:
		return m.Component()
	case scope.FieldRedirect:
		return m.Redirect()
	case scope.FieldOrder:
		return m.Order()
	case scope.FieldHidden:
		return m.Hidden()
	case scope.FieldDisabled:
		return m.Disabled()
	case scope.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScopeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scope.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case scope.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case scope.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case scope.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case scope.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case scope.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case scope.FieldName:
		return m.OldName(ctx)
	case scope.FieldType:
		return m.OldType(ctx)
	case scope.FieldIcon:
		return m.OldIcon(ctx)
	case scope.FieldDescription:
		return m.OldDescription(ctx)
	case scope.FieldAction:
		return m.OldAction(ctx)
	case scope.FieldPath:
		return m.OldPath(ctx)
	case scope.FieldComponent:
		return m.OldComponent(ctx)
	case scope.FieldRedirect:
		return m.OldRedirect(ctx)
	case scope.FieldOrder:
		return m.OldOrder(ctx)
	case scope.FieldHidden:
		return m.OldHidden(ctx)
	case scope.FieldDisabled:
		return m.OldDisabled(ctx)
	case scope.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Scope field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scope.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case scope.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case scope.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case scope.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case scope.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case scope.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case scope.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case scope.FieldType:
		v, ok := value.(scope.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case scope.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case scope.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case scope.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case scope.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case scope.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case scope.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case scope.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case scope.FieldHidden:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHidden(v)
		return nil
	case scope.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case scope.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScopeMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, scope.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, scope.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, scope.FieldDeleteBy)
	}
	if m.add_order != nil {
		fields = append(fields, scope.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScopeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case scope.FieldCreateBy:
		return m.AddedCreateBy()
	case scope.FieldUpdateBy:
		return m.AddedUpdateBy()
	case scope.FieldDeleteBy:
		return m.AddedDeleteBy()
	case scope.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case scope.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case scope.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case scope.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case scope.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Scope numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScopeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scope.FieldCreateBy) {
		fields = append(fields, scope.FieldCreateBy)
	}
	if m.FieldCleared(scope.FieldUpdateBy) {
		fields = append(fields, scope.FieldUpdateBy)
	}
	if m.FieldCleared(scope.FieldDeleteTime) {
		fields = append(fields, scope.FieldDeleteTime)
	}
	if m.FieldCleared(scope.FieldDeleteBy) {
		fields = append(fields, scope.FieldDeleteBy)
	}
	if m.FieldCleared(scope.FieldIcon) {
		fields = append(fields, scope.FieldIcon)
	}
	if m.FieldCleared(scope.FieldDescription) {
		fields = append(fields, scope.FieldDescription)
	}
	if m.FieldCleared(scope.FieldAction) {
		fields = append(fields, scope.FieldAction)
	}
	if m.FieldCleared(scope.FieldPath) {
		fields = append(fields, scope.FieldPath)
	}
	if m.FieldCleared(scope.FieldComponent) {
		fields = append(fields, scope.FieldComponent)
	}
	if m.FieldCleared(scope.FieldRedirect) {
		fields = append(fields, scope.FieldRedirect)
	}
	if m.FieldCleared(scope.FieldParentID) {
		fields = append(fields, scope.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScopeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScopeMutation) ClearField(name string) error {
	switch name {
	case scope.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case scope.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case scope.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case scope.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case scope.FieldIcon:
		m.ClearIcon()
		return nil
	case scope.FieldDescription:
		m.ClearDescription()
		return nil
	case scope.FieldAction:
		m.ClearAction()
		return nil
	case scope.FieldPath:
		m.ClearPath()
		return nil
	case scope.FieldComponent:
		m.ClearComponent()
		return nil
	case scope.FieldRedirect:
		m.ClearRedirect()
		return nil
	case scope.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown Scope nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScopeMutation) ResetField(name string) error {
	switch name {
	case scope.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case scope.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case scope.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case scope.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case scope.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case scope.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case scope.FieldName:
		m.ResetName()
		return nil
	case scope.FieldType:
		m.ResetType()
		return nil
	case scope.FieldIcon:
		m.ResetIcon()
		return nil
	case scope.FieldDescription:
		m.ResetDescription()
		return nil
	case scope.FieldAction:
		m.ResetAction()
		return nil
	case scope.FieldPath:
		m.ResetPath()
		return nil
	case scope.FieldComponent:
		m.ResetComponent()
		return nil
	case scope.FieldRedirect:
		m.ResetRedirect()
		return nil
	case scope.FieldOrder:
		m.ResetOrder()
		return nil
	case scope.FieldHidden:
		m.ResetHidden()
		return nil
	case scope.FieldDisabled:
		m.ResetDisabled()
		return nil
	case scope.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScopeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, scope.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, scope.EdgeChildren)
	}
	if m.permission != nil {
		edges = append(edges, scope.EdgePermission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScopeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case scope.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case scope.EdgePermission:
		if id := m.permission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScopeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildren != nil {
		edges = append(edges, scope.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScopeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScopeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, scope.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, scope.EdgeChildren)
	}
	if m.clearedpermission {
		edges = append(edges, scope.EdgePermission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScopeMutation) EdgeCleared(name string) bool {
	switch name {
	case scope.EdgeParent:
		return m.clearedparent
	case scope.EdgeChildren:
		return m.clearedchildren
	case scope.EdgePermission:
		return m.clearedpermission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScopeMutation) ClearEdge(name string) error {
	switch name {
	case scope.EdgeParent:
		m.ClearParent()
		return nil
	case scope.EdgePermission:
		m.ClearPermission()
		return nil
	}
	return fmt.Errorf("unknown Scope unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScopeMutation) ResetEdge(name string) error {
	switch name {
	case scope.EdgeParent:
		m.ResetParent()
		return nil
	case scope.EdgeChildren:
		m.ResetChildren()
		return nil
	case scope.EdgePermission:
		m.ResetPermission()
		return nil
	}
	return fmt.Errorf("unknown Scope edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	create_time          *time.Time
	create_by            *uint64
	addcreate_by         *int64
	update_time          *time.Time
	update_by            *uint64
	addupdate_by         *int64
	delete_time          *time.Time
	delete_by            *uint64
	adddelete_by         *int64
	name                 *string
	age                  *int
	addage               *int
	sex                  *user.Sex
	status               *user.Status
	clearedFields        map[string]struct{}
	user_roles           map[uint64]struct{}
	removeduser_roles    map[uint64]struct{}
	cleareduser_roles    bool
	credentials          map[uint64]struct{}
	removedcredentials   map[uint64]struct{}
	clearedcredentials   bool
	login_records        map[uint64]struct{}
	removedlogin_records map[uint64]struct{}
	clearedlogin_records bool
	avatar               *uint64
	clearedavatar        bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *UserMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *UserMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *UserMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *UserMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *UserMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[user.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *UserMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *UserMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, user.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *UserMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *UserMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *UserMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *UserMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *UserMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[user.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *UserMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *UserMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, user.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[user.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, user.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *UserMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *UserMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *UserMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *UserMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *UserMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[user.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *UserMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *UserMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, user.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetSex sets the "sex" field.
func (m *UserMutation) SetSex(u user.Sex) {
	m.sex = &u
}

// Sex returns the value of the "sex" field in the mutation.
func (m *UserMutation) Sex() (r user.Sex, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSex(ctx context.Context) (v user.Sex, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// ResetSex resets all changes to the "sex" field.
func (m *UserMutation) ResetSex() {
	m.sex = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetAvatarID sets the "avatar_id" field.
func (m *UserMutation) SetAvatarID(u uint64) {
	m.avatar = &u
}

// AvatarID returns the value of the "avatar_id" field in the mutation.
func (m *UserMutation) AvatarID() (r uint64, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarID returns the old "avatar_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarID: %w", err)
	}
	return oldValue.AvatarID, nil
}

// ClearAvatarID clears the value of the "avatar_id" field.
func (m *UserMutation) ClearAvatarID() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatarID] = struct{}{}
}

// AvatarIDCleared returns if the "avatar_id" field was cleared in this mutation.
func (m *UserMutation) AvatarIDCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarID]
	return ok
}

// ResetAvatarID resets all changes to the "avatar_id" field.
func (m *UserMutation) ResetAvatarID() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatarID)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by ids.
func (m *UserMutation) AddUserRoleIDs(ids ...uint64) {
	if m.user_roles == nil {
		m.user_roles = make(map[uint64]struct{})
	}
	for i := range ids {
		m.user_roles[ids[i]] = struct{}{}
	}
}

// ClearUserRoles clears the "user_roles" edge to the UserRole entity.
func (m *UserMutation) ClearUserRoles() {
	m.cleareduser_roles = true
}

// UserRolesCleared reports if the "user_roles" edge to the UserRole entity was cleared.
func (m *UserMutation) UserRolesCleared() bool {
	return m.cleareduser_roles
}

// RemoveUserRoleIDs removes the "user_roles" edge to the UserRole entity by IDs.
func (m *UserMutation) RemoveUserRoleIDs(ids ...uint64) {
	if m.removeduser_roles == nil {
		m.removeduser_roles = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.user_roles, ids[i])
		m.removeduser_roles[ids[i]] = struct{}{}
	}
}

// RemovedUserRoles returns the removed IDs of the "user_roles" edge to the UserRole entity.
func (m *UserMutation) RemovedUserRolesIDs() (ids []uint64) {
	for id := range m.removeduser_roles {
		ids = append(ids, id)
	}
	return
}

// UserRolesIDs returns the "user_roles" edge IDs in the mutation.
func (m *UserMutation) UserRolesIDs() (ids []uint64) {
	for id := range m.user_roles {
		ids = append(ids, id)
	}
	return
}

// ResetUserRoles resets all changes to the "user_roles" edge.
func (m *UserMutation) ResetUserRoles() {
	m.user_roles = nil
	m.cleareduser_roles = false
	m.removeduser_roles = nil
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by ids.
func (m *UserMutation) AddCredentialIDs(ids ...uint64) {
	if m.credentials == nil {
		m.credentials = make(map[uint64]struct{})
	}
	for i := range ids {
		m.credentials[ids[i]] = struct{}{}
	}
}

// ClearCredentials clears the "credentials" edge to the Credential entity.
func (m *UserMutation) ClearCredentials() {
	m.clearedcredentials = true
}

// CredentialsCleared reports if the "credentials" edge to the Credential entity was cleared.
func (m *UserMutation) CredentialsCleared() bool {
	return m.clearedcredentials
}

// RemoveCredentialIDs removes the "credentials" edge to the Credential entity by IDs.
func (m *UserMutation) RemoveCredentialIDs(ids ...uint64) {
	if m.removedcredentials == nil {
		m.removedcredentials = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.credentials, ids[i])
		m.removedcredentials[ids[i]] = struct{}{}
	}
}

// RemovedCredentials returns the removed IDs of the "credentials" edge to the Credential entity.
func (m *UserMutation) RemovedCredentialsIDs() (ids []uint64) {
	for id := range m.removedcredentials {
		ids = append(ids, id)
	}
	return
}

// CredentialsIDs returns the "credentials" edge IDs in the mutation.
func (m *UserMutation) CredentialsIDs() (ids []uint64) {
	for id := range m.credentials {
		ids = append(ids, id)
	}
	return
}

// ResetCredentials resets all changes to the "credentials" edge.
func (m *UserMutation) ResetCredentials() {
	m.credentials = nil
	m.clearedcredentials = false
	m.removedcredentials = nil
}

// AddLoginRecordIDs adds the "login_records" edge to the LoginRecord entity by ids.
func (m *UserMutation) AddLoginRecordIDs(ids ...uint64) {
	if m.login_records == nil {
		m.login_records = make(map[uint64]struct{})
	}
	for i := range ids {
		m.login_records[ids[i]] = struct{}{}
	}
}

// ClearLoginRecords clears the "login_records" edge to the LoginRecord entity.
func (m *UserMutation) ClearLoginRecords() {
	m.clearedlogin_records = true
}

// LoginRecordsCleared reports if the "login_records" edge to the LoginRecord entity was cleared.
func (m *UserMutation) LoginRecordsCleared() bool {
	return m.clearedlogin_records
}

// RemoveLoginRecordIDs removes the "login_records" edge to the LoginRecord entity by IDs.
func (m *UserMutation) RemoveLoginRecordIDs(ids ...uint64) {
	if m.removedlogin_records == nil {
		m.removedlogin_records = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.login_records, ids[i])
		m.removedlogin_records[ids[i]] = struct{}{}
	}
}

// RemovedLoginRecords returns the removed IDs of the "login_records" edge to the LoginRecord entity.
func (m *UserMutation) RemovedLoginRecordsIDs() (ids []uint64) {
	for id := range m.removedlogin_records {
		ids = append(ids, id)
	}
	return
}

// LoginRecordsIDs returns the "login_records" edge IDs in the mutation.
func (m *UserMutation) LoginRecordsIDs() (ids []uint64) {
	for id := range m.login_records {
		ids = append(ids, id)
	}
	return
}

// ResetLoginRecords resets all changes to the "login_records" edge.
func (m *UserMutation) ResetLoginRecords() {
	m.login_records = nil
	m.clearedlogin_records = false
	m.removedlogin_records = nil
}

// ClearAvatar clears the "avatar" edge to the Attachment entity.
func (m *UserMutation) ClearAvatar() {
	m.clearedavatar = true
	m.clearedFields[user.FieldAvatarID] = struct{}{}
}

// AvatarCleared reports if the "avatar" edge to the Attachment entity was cleared.
func (m *UserMutation) AvatarCleared() bool {
	return m.AvatarIDCleared() || m.clearedavatar
}

// AvatarIDs returns the "avatar" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AvatarID instead. It exists only for internal usage by the builders.
func (m *UserMutation) AvatarIDs() (ids []uint64) {
	if id := m.avatar; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAvatar resets all changes to the "avatar" edge.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	m.clearedavatar = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, user.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.sex != nil {
		fields = append(fields, user.FieldSex)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatarID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldCreateBy:
		return m.CreateBy()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUpdateBy:
		return m.UpdateBy()
	case user.FieldDeleteTime:
		return m.DeleteTime()
	case user.FieldDeleteBy:
		return m.DeleteBy()
	case user.FieldName:
		return m.Name()
	case user.FieldAge:
		return m.Age()
	case user.FieldSex:
		return m.Sex()
	case user.FieldStatus:
		return m.Status()
	case user.FieldAvatarID:
		return m.AvatarID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case user.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case user.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldSex:
		return m.OldSex(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldAvatarID:
		return m.OldAvatarID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case user.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case user.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldSex:
		v, ok := value.(user.Sex)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldAvatarID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateBy:
		return m.AddedCreateBy()
	case user.FieldUpdateBy:
		return m.AddedUpdateBy()
	case user.FieldDeleteBy:
		return m.AddedDeleteBy()
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case user.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case user.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreateBy) {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.FieldCleared(user.FieldUpdateBy) {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.FieldCleared(user.FieldDeleteTime) {
		fields = append(fields, user.FieldDeleteTime)
	}
	if m.FieldCleared(user.FieldDeleteBy) {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	if m.FieldCleared(user.FieldAvatarID) {
		fields = append(fields, user.FieldAvatarID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case user.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case user.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case user.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case user.FieldAge:
		m.ClearAge()
		return nil
	case user.FieldAvatarID:
		m.ClearAvatarID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case user.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case user.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldSex:
		m.ResetSex()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldAvatarID:
		m.ResetAvatarID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user_roles != nil {
		edges = append(edges, user.EdgeUserRoles)
	}
	if m.credentials != nil {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.login_records != nil {
		edges = append(edges, user.EdgeLoginRecords)
	}
	if m.avatar != nil {
		edges = append(edges, user.EdgeAvatar)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRoles:
		ids := make([]ent.Value, 0, len(m.user_roles))
		for id := range m.user_roles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.credentials))
		for id := range m.credentials {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLoginRecords:
		ids := make([]ent.Value, 0, len(m.login_records))
		for id := range m.login_records {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAvatar:
		if id := m.avatar; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeduser_roles != nil {
		edges = append(edges, user.EdgeUserRoles)
	}
	if m.removedcredentials != nil {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.removedlogin_records != nil {
		edges = append(edges, user.EdgeLoginRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRoles:
		ids := make([]ent.Value, 0, len(m.removeduser_roles))
		for id := range m.removeduser_roles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.removedcredentials))
		for id := range m.removedcredentials {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLoginRecords:
		ids := make([]ent.Value, 0, len(m.removedlogin_records))
		for id := range m.removedlogin_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser_roles {
		edges = append(edges, user.EdgeUserRoles)
	}
	if m.clearedcredentials {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.clearedlogin_records {
		edges = append(edges, user.EdgeLoginRecords)
	}
	if m.clearedavatar {
		edges = append(edges, user.EdgeAvatar)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserRoles:
		return m.cleareduser_roles
	case user.EdgeCredentials:
		return m.clearedcredentials
	case user.EdgeLoginRecords:
		return m.clearedlogin_records
	case user.EdgeAvatar:
		return m.clearedavatar
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserRoles:
		m.ResetUserRoles()
		return nil
	case user.EdgeCredentials:
		m.ResetCredentials()
		return nil
	case user.EdgeLoginRecords:
		m.ResetLoginRecords()
		return nil
	case user.EdgeAvatar:
		m.ResetAvatar()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserRoleMutation represents an operation that mutates the UserRole nodes in the graph.
type UserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	create_by     *uint64
	addcreate_by  *int64
	update_time   *time.Time
	update_by     *uint64
	addupdate_by  *int64
	delete_time   *time.Time
	delete_by     *uint64
	adddelete_by  *int64
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	role          *uint64
	clearedrole   bool
	done          bool
	oldValue      func(context.Context) (*UserRole, error)
	predicates    []predicate.UserRole
}

var _ ent.Mutation = (*UserRoleMutation)(nil)

// userroleOption allows management of the mutation configuration using functional options.
type userroleOption func(*UserRoleMutation)

// newUserRoleMutation creates new mutation for the UserRole entity.
func newUserRoleMutation(c config, op Op, opts ...userroleOption) *UserRoleMutation {
	m := &UserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserRoleID sets the ID field of the mutation.
func withUserRoleID(id uint64) userroleOption {
	return func(m *UserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *UserRole
		)
		m.oldValue = func(ctx context.Context) (*UserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserRole sets the old UserRole of the mutation.
func withUserRole(node *UserRole) userroleOption {
	return func(m *UserRoleMutation) {
		m.oldValue = func(context.Context) (*UserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserRole entities.
func (m *UserRoleMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserRoleMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserRoleMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserRoleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserRoleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserRoleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *UserRoleMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *UserRoleMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *UserRoleMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *UserRoleMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *UserRoleMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[userrole.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *UserRoleMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *UserRoleMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, userrole.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *UserRoleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserRoleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserRoleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *UserRoleMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *UserRoleMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *UserRoleMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *UserRoleMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *UserRoleMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[userrole.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *UserRoleMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *UserRoleMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, userrole.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserRoleMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserRoleMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserRoleMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userrole.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserRoleMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userrole.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserRoleMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userrole.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *UserRoleMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *UserRoleMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *UserRoleMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *UserRoleMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *UserRoleMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[userrole.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *UserRoleMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *UserRoleMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, userrole.FieldDeleteBy)
}

// SetUserID sets the "user_id" field.
func (m *UserRoleMutation) SetUserID(u uint64) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserRoleMutation) UserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserRoleMutation) ResetUserID() {
	m.user = nil
}

// SetRoleID sets the "role_id" field.
func (m *UserRoleMutation) SetRoleID(u uint64) {
	m.role = &u
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *UserRoleMutation) RoleID() (r uint64, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldRoleID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *UserRoleMutation) ResetRoleID() {
	m.role = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserRoleMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[userrole.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserRoleMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserRoleMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserRoleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRole clears the "role" edge to the Role entity.
func (m *UserRoleMutation) ClearRole() {
	m.clearedrole = true
	m.clearedFields[userrole.FieldRoleID] = struct{}{}
}

// RoleCleared reports if the "role" edge to the Role entity was cleared.
func (m *UserRoleMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *UserRoleMutation) RoleIDs() (ids []uint64) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *UserRoleMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// Where appends a list predicates to the UserRoleMutation builder.
func (m *UserRoleMutation) Where(ps ...predicate.UserRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserRole).
func (m *UserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserRoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, userrole.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, userrole.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, userrole.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, userrole.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, userrole.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, userrole.FieldDeleteBy)
	}
	if m.user != nil {
		fields = append(fields, userrole.FieldUserID)
	}
	if m.role != nil {
		fields = append(fields, userrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userrole.FieldCreateTime:
		return m.CreateTime()
	case userrole.FieldCreateBy:
		return m.CreateBy()
	case userrole.FieldUpdateTime:
		return m.UpdateTime()
	case userrole.FieldUpdateBy:
		return m.UpdateBy()
	case userrole.FieldDeleteTime:
		return m.DeleteTime()
	case userrole.FieldDeleteBy:
		return m.DeleteBy()
	case userrole.FieldUserID:
		return m.UserID()
	case userrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userrole.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userrole.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case userrole.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userrole.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case userrole.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userrole.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case userrole.FieldUserID:
		return m.OldUserID(ctx)
	case userrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown UserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userrole.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userrole.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case userrole.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userrole.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case userrole.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userrole.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case userrole.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userrole.FieldRoleID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserRoleMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, userrole.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, userrole.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, userrole.FieldDeleteBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userrole.FieldCreateBy:
		return m.AddedCreateBy()
	case userrole.FieldUpdateBy:
		return m.AddedUpdateBy()
	case userrole.FieldDeleteBy:
		return m.AddedDeleteBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userrole.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case userrole.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case userrole.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown UserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userrole.FieldCreateBy) {
		fields = append(fields, userrole.FieldCreateBy)
	}
	if m.FieldCleared(userrole.FieldUpdateBy) {
		fields = append(fields, userrole.FieldUpdateBy)
	}
	if m.FieldCleared(userrole.FieldDeleteTime) {
		fields = append(fields, userrole.FieldDeleteTime)
	}
	if m.FieldCleared(userrole.FieldDeleteBy) {
		fields = append(fields, userrole.FieldDeleteBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserRoleMutation) ClearField(name string) error {
	switch name {
	case userrole.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case userrole.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case userrole.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case userrole.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	}
	return fmt.Errorf("unknown UserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserRoleMutation) ResetField(name string) error {
	switch name {
	case userrole.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userrole.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case userrole.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userrole.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case userrole.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userrole.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case userrole.FieldUserID:
		m.ResetUserID()
		return nil
	case userrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, userrole.EdgeUser)
	}
	if m.role != nil {
		edges = append(edges, userrole.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userrole.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userrole.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, userrole.EdgeUser)
	}
	if m.clearedrole {
		edges = append(edges, userrole.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case userrole.EdgeUser:
		return m.cleareduser
	case userrole.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserRoleMutation) ClearEdge(name string) error {
	switch name {
	case userrole.EdgeUser:
		m.ClearUser()
		return nil
	case userrole.EdgeRole:
		m.ClearRole()
		return nil
	}
	return fmt.Errorf("unknown UserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserRoleMutation) ResetEdge(name string) error {
	switch name {
	case userrole.EdgeUser:
		m.ResetUser()
		return nil
	case userrole.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown UserRole edge %s", name)
}

// VerifyCodeMutation represents an operation that mutates the VerifyCode nodes in the graph.
type VerifyCodeMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	create_by     *uint64
	addcreate_by  *int64
	update_time   *time.Time
	update_by     *uint64
	addupdate_by  *int64
	delete_time   *time.Time
	delete_by     *uint64
	adddelete_by  *int64
	code          *string
	identifier    *string
	sender_type   *verifycode.SenderType
	send_for      *string
	expires_at    *time.Time
	used_at       *time.Time
	send_success  *bool
	send_at       *time.Time
	client_id     *uint64
	addclient_id  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VerifyCode, error)
	predicates    []predicate.VerifyCode
}

var _ ent.Mutation = (*VerifyCodeMutation)(nil)

// verifycodeOption allows management of the mutation configuration using functional options.
type verifycodeOption func(*VerifyCodeMutation)

// newVerifyCodeMutation creates new mutation for the VerifyCode entity.
func newVerifyCodeMutation(c config, op Op, opts ...verifycodeOption) *VerifyCodeMutation {
	m := &VerifyCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeVerifyCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVerifyCodeID sets the ID field of the mutation.
func withVerifyCodeID(id uint64) verifycodeOption {
	return func(m *VerifyCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *VerifyCode
		)
		m.oldValue = func(ctx context.Context) (*VerifyCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VerifyCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVerifyCode sets the old VerifyCode of the mutation.
func withVerifyCode(node *VerifyCode) verifycodeOption {
	return func(m *VerifyCodeMutation) {
		m.oldValue = func(context.Context) (*VerifyCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VerifyCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VerifyCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VerifyCode entities.
func (m *VerifyCodeMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VerifyCodeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VerifyCodeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VerifyCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *VerifyCodeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *VerifyCodeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *VerifyCodeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *VerifyCodeMutation) SetCreateBy(u uint64) {
	m.create_by = &u
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *VerifyCodeMutation) CreateBy() (r uint64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldCreateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds u to the "create_by" field.
func (m *VerifyCodeMutation) AddCreateBy(u int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += u
	} else {
		m.addcreate_by = &u
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *VerifyCodeMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *VerifyCodeMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[verifycode.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *VerifyCodeMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *VerifyCodeMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, verifycode.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *VerifyCodeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *VerifyCodeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *VerifyCodeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *VerifyCodeMutation) SetUpdateBy(u uint64) {
	m.update_by = &u
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *VerifyCodeMutation) UpdateBy() (r uint64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldUpdateBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds u to the "update_by" field.
func (m *VerifyCodeMutation) AddUpdateBy(u int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += u
	} else {
		m.addupdate_by = &u
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *VerifyCodeMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *VerifyCodeMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[verifycode.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *VerifyCodeMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *VerifyCodeMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, verifycode.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *VerifyCodeMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *VerifyCodeMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *VerifyCodeMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[verifycode.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *VerifyCodeMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *VerifyCodeMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, verifycode.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *VerifyCodeMutation) SetDeleteBy(u uint64) {
	m.delete_by = &u
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *VerifyCodeMutation) DeleteBy() (r uint64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldDeleteBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds u to the "delete_by" field.
func (m *VerifyCodeMutation) AddDeleteBy(u int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += u
	} else {
		m.adddelete_by = &u
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *VerifyCodeMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *VerifyCodeMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[verifycode.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *VerifyCodeMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *VerifyCodeMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, verifycode.FieldDeleteBy)
}

// SetCode sets the "code" field.
func (m *VerifyCodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *VerifyCodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *VerifyCodeMutation) ResetCode() {
	m.code = nil
}

// SetIdentifier sets the "identifier" field.
func (m *VerifyCodeMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *VerifyCodeMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *VerifyCodeMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetSenderType sets the "sender_type" field.
func (m *VerifyCodeMutation) SetSenderType(vt verifycode.SenderType) {
	m.sender_type = &vt
}

// SenderType returns the value of the "sender_type" field in the mutation.
func (m *VerifyCodeMutation) SenderType() (r verifycode.SenderType, exists bool) {
	v := m.sender_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderType returns the old "sender_type" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldSenderType(ctx context.Context) (v verifycode.SenderType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderType: %w", err)
	}
	return oldValue.SenderType, nil
}

// ResetSenderType resets all changes to the "sender_type" field.
func (m *VerifyCodeMutation) ResetSenderType() {
	m.sender_type = nil
}

// SetSendFor sets the "send_for" field.
func (m *VerifyCodeMutation) SetSendFor(s string) {
	m.send_for = &s
}

// SendFor returns the value of the "send_for" field in the mutation.
func (m *VerifyCodeMutation) SendFor() (r string, exists bool) {
	v := m.send_for
	if v == nil {
		return
	}
	return *v, true
}

// OldSendFor returns the old "send_for" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldSendFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendFor: %w", err)
	}
	return oldValue.SendFor, nil
}

// ResetSendFor resets all changes to the "send_for" field.
func (m *VerifyCodeMutation) ResetSendFor() {
	m.send_for = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *VerifyCodeMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *VerifyCodeMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *VerifyCodeMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetUsedAt sets the "used_at" field.
func (m *VerifyCodeMutation) SetUsedAt(t time.Time) {
	m.used_at = &t
}

// UsedAt returns the value of the "used_at" field in the mutation.
func (m *VerifyCodeMutation) UsedAt() (r time.Time, exists bool) {
	v := m.used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedAt returns the old "used_at" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedAt: %w", err)
	}
	return oldValue.UsedAt, nil
}

// ClearUsedAt clears the value of the "used_at" field.
func (m *VerifyCodeMutation) ClearUsedAt() {
	m.used_at = nil
	m.clearedFields[verifycode.FieldUsedAt] = struct{}{}
}

// UsedAtCleared returns if the "used_at" field was cleared in this mutation.
func (m *VerifyCodeMutation) UsedAtCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldUsedAt]
	return ok
}

// ResetUsedAt resets all changes to the "used_at" field.
func (m *VerifyCodeMutation) ResetUsedAt() {
	m.used_at = nil
	delete(m.clearedFields, verifycode.FieldUsedAt)
}

// SetSendSuccess sets the "send_success" field.
func (m *VerifyCodeMutation) SetSendSuccess(b bool) {
	m.send_success = &b
}

// SendSuccess returns the value of the "send_success" field in the mutation.
func (m *VerifyCodeMutation) SendSuccess() (r bool, exists bool) {
	v := m.send_success
	if v == nil {
		return
	}
	return *v, true
}

// OldSendSuccess returns the old "send_success" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldSendSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendSuccess: %w", err)
	}
	return oldValue.SendSuccess, nil
}

// ResetSendSuccess resets all changes to the "send_success" field.
func (m *VerifyCodeMutation) ResetSendSuccess() {
	m.send_success = nil
}

// SetSendAt sets the "send_at" field.
func (m *VerifyCodeMutation) SetSendAt(t time.Time) {
	m.send_at = &t
}

// SendAt returns the value of the "send_at" field in the mutation.
func (m *VerifyCodeMutation) SendAt() (r time.Time, exists bool) {
	v := m.send_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSendAt returns the old "send_at" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldSendAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendAt: %w", err)
	}
	return oldValue.SendAt, nil
}

// ClearSendAt clears the value of the "send_at" field.
func (m *VerifyCodeMutation) ClearSendAt() {
	m.send_at = nil
	m.clearedFields[verifycode.FieldSendAt] = struct{}{}
}

// SendAtCleared returns if the "send_at" field was cleared in this mutation.
func (m *VerifyCodeMutation) SendAtCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldSendAt]
	return ok
}

// ResetSendAt resets all changes to the "send_at" field.
func (m *VerifyCodeMutation) ResetSendAt() {
	m.send_at = nil
	delete(m.clearedFields, verifycode.FieldSendAt)
}

// SetClientID sets the "client_id" field.
func (m *VerifyCodeMutation) SetClientID(u uint64) {
	m.client_id = &u
	m.addclient_id = nil
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *VerifyCodeMutation) ClientID() (r uint64, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the VerifyCode entity.
// If the VerifyCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerifyCodeMutation) OldClientID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// AddClientID adds u to the "client_id" field.
func (m *VerifyCodeMutation) AddClientID(u int64) {
	if m.addclient_id != nil {
		*m.addclient_id += u
	} else {
		m.addclient_id = &u
	}
}

// AddedClientID returns the value that was added to the "client_id" field in this mutation.
func (m *VerifyCodeMutation) AddedClientID() (r int64, exists bool) {
	v := m.addclient_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearClientID clears the value of the "client_id" field.
func (m *VerifyCodeMutation) ClearClientID() {
	m.client_id = nil
	m.addclient_id = nil
	m.clearedFields[verifycode.FieldClientID] = struct{}{}
}

// ClientIDCleared returns if the "client_id" field was cleared in this mutation.
func (m *VerifyCodeMutation) ClientIDCleared() bool {
	_, ok := m.clearedFields[verifycode.FieldClientID]
	return ok
}

// ResetClientID resets all changes to the "client_id" field.
func (m *VerifyCodeMutation) ResetClientID() {
	m.client_id = nil
	m.addclient_id = nil
	delete(m.clearedFields, verifycode.FieldClientID)
}

// Where appends a list predicates to the VerifyCodeMutation builder.
func (m *VerifyCodeMutation) Where(ps ...predicate.VerifyCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VerifyCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VerifyCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VerifyCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VerifyCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VerifyCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VerifyCode).
func (m *VerifyCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VerifyCodeMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.create_time != nil {
		fields = append(fields, verifycode.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, verifycode.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, verifycode.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, verifycode.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, verifycode.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, verifycode.FieldDeleteBy)
	}
	if m.code != nil {
		fields = append(fields, verifycode.FieldCode)
	}
	if m.identifier != nil {
		fields = append(fields, verifycode.FieldIdentifier)
	}
	if m.sender_type != nil {
		fields = append(fields, verifycode.FieldSenderType)
	}
	if m.send_for != nil {
		fields = append(fields, verifycode.FieldSendFor)
	}
	if m.expires_at != nil {
		fields = append(fields, verifycode.FieldExpiresAt)
	}
	if m.used_at != nil {
		fields = append(fields, verifycode.FieldUsedAt)
	}
	if m.send_success != nil {
		fields = append(fields, verifycode.FieldSendSuccess)
	}
	if m.send_at != nil {
		fields = append(fields, verifycode.FieldSendAt)
	}
	if m.client_id != nil {
		fields = append(fields, verifycode.FieldClientID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VerifyCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case verifycode.FieldCreateTime:
		return m.CreateTime()
	case verifycode.FieldCreateBy:
		return m.CreateBy()
	case verifycode.FieldUpdateTime:
		return m.UpdateTime()
	case verifycode.FieldUpdateBy:
		return m.UpdateBy()
	case verifycode.FieldDeleteTime:
		return m.DeleteTime()
	case verifycode.FieldDeleteBy:
		return m.DeleteBy()
	case verifycode.FieldCode:
		return m.Code()
	case verifycode.FieldIdentifier:
		return m.Identifier()
	case verifycode.FieldSenderType:
		return m.SenderType()
	case verifycode.FieldSendFor:
		return m.SendFor()
	case verifycode.FieldExpiresAt:
		return m.ExpiresAt()
	case verifycode.FieldUsedAt:
		return m.UsedAt()
	case verifycode.FieldSendSuccess:
		return m.SendSuccess()
	case verifycode.FieldSendAt:
		return m.SendAt()
	case verifycode.FieldClientID:
		return m.ClientID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VerifyCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case verifycode.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case verifycode.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case verifycode.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case verifycode.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case verifycode.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case verifycode.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case verifycode.FieldCode:
		return m.OldCode(ctx)
	case verifycode.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case verifycode.FieldSenderType:
		return m.OldSenderType(ctx)
	case verifycode.FieldSendFor:
		return m.OldSendFor(ctx)
	case verifycode.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case verifycode.FieldUsedAt:
		return m.OldUsedAt(ctx)
	case verifycode.FieldSendSuccess:
		return m.OldSendSuccess(ctx)
	case verifycode.FieldSendAt:
		return m.OldSendAt(ctx)
	case verifycode.FieldClientID:
		return m.OldClientID(ctx)
	}
	return nil, fmt.Errorf("unknown VerifyCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerifyCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case verifycode.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case verifycode.FieldCreateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case verifycode.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case verifycode.FieldUpdateBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case verifycode.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case verifycode.FieldDeleteBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case verifycode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case verifycode.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case verifycode.FieldSenderType:
		v, ok := value.(verifycode.SenderType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderType(v)
		return nil
	case verifycode.FieldSendFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendFor(v)
		return nil
	case verifycode.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case verifycode.FieldUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedAt(v)
		return nil
	case verifycode.FieldSendSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendSuccess(v)
		return nil
	case verifycode.FieldSendAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendAt(v)
		return nil
	case verifycode.FieldClientID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	}
	return fmt.Errorf("unknown VerifyCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VerifyCodeMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, verifycode.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, verifycode.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, verifycode.FieldDeleteBy)
	}
	if m.addclient_id != nil {
		fields = append(fields, verifycode.FieldClientID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VerifyCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case verifycode.FieldCreateBy:
		return m.AddedCreateBy()
	case verifycode.FieldUpdateBy:
		return m.AddedUpdateBy()
	case verifycode.FieldDeleteBy:
		return m.AddedDeleteBy()
	case verifycode.FieldClientID:
		return m.AddedClientID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerifyCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case verifycode.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case verifycode.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case verifycode.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case verifycode.FieldClientID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClientID(v)
		return nil
	}
	return fmt.Errorf("unknown VerifyCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VerifyCodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(verifycode.FieldCreateBy) {
		fields = append(fields, verifycode.FieldCreateBy)
	}
	if m.FieldCleared(verifycode.FieldUpdateBy) {
		fields = append(fields, verifycode.FieldUpdateBy)
	}
	if m.FieldCleared(verifycode.FieldDeleteTime) {
		fields = append(fields, verifycode.FieldDeleteTime)
	}
	if m.FieldCleared(verifycode.FieldDeleteBy) {
		fields = append(fields, verifycode.FieldDeleteBy)
	}
	if m.FieldCleared(verifycode.FieldUsedAt) {
		fields = append(fields, verifycode.FieldUsedAt)
	}
	if m.FieldCleared(verifycode.FieldSendAt) {
		fields = append(fields, verifycode.FieldSendAt)
	}
	if m.FieldCleared(verifycode.FieldClientID) {
		fields = append(fields, verifycode.FieldClientID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VerifyCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VerifyCodeMutation) ClearField(name string) error {
	switch name {
	case verifycode.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case verifycode.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case verifycode.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case verifycode.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case verifycode.FieldUsedAt:
		m.ClearUsedAt()
		return nil
	case verifycode.FieldSendAt:
		m.ClearSendAt()
		return nil
	case verifycode.FieldClientID:
		m.ClearClientID()
		return nil
	}
	return fmt.Errorf("unknown VerifyCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VerifyCodeMutation) ResetField(name string) error {
	switch name {
	case verifycode.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case verifycode.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case verifycode.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case verifycode.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case verifycode.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case verifycode.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case verifycode.FieldCode:
		m.ResetCode()
		return nil
	case verifycode.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case verifycode.FieldSenderType:
		m.ResetSenderType()
		return nil
	case verifycode.FieldSendFor:
		m.ResetSendFor()
		return nil
	case verifycode.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case verifycode.FieldUsedAt:
		m.ResetUsedAt()
		return nil
	case verifycode.FieldSendSuccess:
		m.ResetSendSuccess()
		return nil
	case verifycode.FieldSendAt:
		m.ResetSendAt()
		return nil
	case verifycode.FieldClientID:
		m.ResetClientID()
		return nil
	}
	return fmt.Errorf("unknown VerifyCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VerifyCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VerifyCodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VerifyCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VerifyCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VerifyCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VerifyCodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VerifyCodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VerifyCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VerifyCodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VerifyCode edge %s", name)
}
