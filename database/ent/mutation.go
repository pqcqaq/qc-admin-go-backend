// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttachment = "Attachment"
	TypeLogging    = "Logging"
	TypeUser       = "User"
)

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	create_time       *time.Time
	create_by         *int64
	addcreate_by      *int64
	update_time       *time.Time
	update_by         *int64
	addupdate_by      *int64
	delete_time       *time.Time
	delete_by         *int64
	adddelete_by      *int64
	filename          *string
	_path             *string
	url               *string
	content_type      *string
	size              *int64
	addsize           *int64
	etag              *string
	bucket            *string
	storage_provider  *string
	metadata          *map[string]interface{}
	status            *attachment.Status
	upload_session_id *string
	tag1              *string
	tag2              *string
	tag3              *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Attachment, error)
	predicates        []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id uint64) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attachment entities.
func (m *AttachmentMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AttachmentMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AttachmentMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AttachmentMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *AttachmentMutation) SetCreateBy(i int64) {
	m.create_by = &i
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *AttachmentMutation) CreateBy() (r int64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "create_by" field.
func (m *AttachmentMutation) AddCreateBy(i int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += i
	} else {
		m.addcreate_by = &i
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *AttachmentMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *AttachmentMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[attachment.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *AttachmentMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *AttachmentMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, attachment.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *AttachmentMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AttachmentMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AttachmentMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *AttachmentMutation) SetUpdateBy(i int64) {
	m.update_by = &i
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *AttachmentMutation) UpdateBy() (r int64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "update_by" field.
func (m *AttachmentMutation) AddUpdateBy(i int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += i
	} else {
		m.addupdate_by = &i
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *AttachmentMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *AttachmentMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[attachment.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *AttachmentMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *AttachmentMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, attachment.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *AttachmentMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *AttachmentMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *AttachmentMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[attachment.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *AttachmentMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *AttachmentMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, attachment.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *AttachmentMutation) SetDeleteBy(i int64) {
	m.delete_by = &i
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *AttachmentMutation) DeleteBy() (r int64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDeleteBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds i to the "delete_by" field.
func (m *AttachmentMutation) AddDeleteBy(i int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += i
	} else {
		m.adddelete_by = &i
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *AttachmentMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *AttachmentMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[attachment.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *AttachmentMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *AttachmentMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, attachment.FieldDeleteBy)
}

// SetFilename sets the "filename" field.
func (m *AttachmentMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *AttachmentMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *AttachmentMutation) ResetFilename() {
	m.filename = nil
}

// SetPath sets the "path" field.
func (m *AttachmentMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AttachmentMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *AttachmentMutation) ResetPath() {
	m._path = nil
}

// SetURL sets the "url" field.
func (m *AttachmentMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *AttachmentMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *AttachmentMutation) ClearURL() {
	m.url = nil
	m.clearedFields[attachment.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *AttachmentMutation) URLCleared() bool {
	_, ok := m.clearedFields[attachment.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *AttachmentMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, attachment.FieldURL)
}

// SetContentType sets the "content_type" field.
func (m *AttachmentMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *AttachmentMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *AttachmentMutation) ResetContentType() {
	m.content_type = nil
}

// SetSize sets the "size" field.
func (m *AttachmentMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *AttachmentMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *AttachmentMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *AttachmentMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *AttachmentMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetEtag sets the "etag" field.
func (m *AttachmentMutation) SetEtag(s string) {
	m.etag = &s
}

// Etag returns the value of the "etag" field in the mutation.
func (m *AttachmentMutation) Etag() (r string, exists bool) {
	v := m.etag
	if v == nil {
		return
	}
	return *v, true
}

// OldEtag returns the old "etag" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldEtag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEtag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEtag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEtag: %w", err)
	}
	return oldValue.Etag, nil
}

// ClearEtag clears the value of the "etag" field.
func (m *AttachmentMutation) ClearEtag() {
	m.etag = nil
	m.clearedFields[attachment.FieldEtag] = struct{}{}
}

// EtagCleared returns if the "etag" field was cleared in this mutation.
func (m *AttachmentMutation) EtagCleared() bool {
	_, ok := m.clearedFields[attachment.FieldEtag]
	return ok
}

// ResetEtag resets all changes to the "etag" field.
func (m *AttachmentMutation) ResetEtag() {
	m.etag = nil
	delete(m.clearedFields, attachment.FieldEtag)
}

// SetBucket sets the "bucket" field.
func (m *AttachmentMutation) SetBucket(s string) {
	m.bucket = &s
}

// Bucket returns the value of the "bucket" field in the mutation.
func (m *AttachmentMutation) Bucket() (r string, exists bool) {
	v := m.bucket
	if v == nil {
		return
	}
	return *v, true
}

// OldBucket returns the old "bucket" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldBucket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucket: %w", err)
	}
	return oldValue.Bucket, nil
}

// ResetBucket resets all changes to the "bucket" field.
func (m *AttachmentMutation) ResetBucket() {
	m.bucket = nil
}

// SetStorageProvider sets the "storage_provider" field.
func (m *AttachmentMutation) SetStorageProvider(s string) {
	m.storage_provider = &s
}

// StorageProvider returns the value of the "storage_provider" field in the mutation.
func (m *AttachmentMutation) StorageProvider() (r string, exists bool) {
	v := m.storage_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageProvider returns the old "storage_provider" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldStorageProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageProvider: %w", err)
	}
	return oldValue.StorageProvider, nil
}

// ResetStorageProvider resets all changes to the "storage_provider" field.
func (m *AttachmentMutation) ResetStorageProvider() {
	m.storage_provider = nil
}

// SetMetadata sets the "metadata" field.
func (m *AttachmentMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *AttachmentMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *AttachmentMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[attachment.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *AttachmentMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[attachment.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *AttachmentMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, attachment.FieldMetadata)
}

// SetStatus sets the "status" field.
func (m *AttachmentMutation) SetStatus(a attachment.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *AttachmentMutation) Status() (r attachment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldStatus(ctx context.Context) (v attachment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AttachmentMutation) ResetStatus() {
	m.status = nil
}

// SetUploadSessionID sets the "upload_session_id" field.
func (m *AttachmentMutation) SetUploadSessionID(s string) {
	m.upload_session_id = &s
}

// UploadSessionID returns the value of the "upload_session_id" field in the mutation.
func (m *AttachmentMutation) UploadSessionID() (r string, exists bool) {
	v := m.upload_session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadSessionID returns the old "upload_session_id" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUploadSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadSessionID: %w", err)
	}
	return oldValue.UploadSessionID, nil
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (m *AttachmentMutation) ClearUploadSessionID() {
	m.upload_session_id = nil
	m.clearedFields[attachment.FieldUploadSessionID] = struct{}{}
}

// UploadSessionIDCleared returns if the "upload_session_id" field was cleared in this mutation.
func (m *AttachmentMutation) UploadSessionIDCleared() bool {
	_, ok := m.clearedFields[attachment.FieldUploadSessionID]
	return ok
}

// ResetUploadSessionID resets all changes to the "upload_session_id" field.
func (m *AttachmentMutation) ResetUploadSessionID() {
	m.upload_session_id = nil
	delete(m.clearedFields, attachment.FieldUploadSessionID)
}

// SetTag1 sets the "tag1" field.
func (m *AttachmentMutation) SetTag1(s string) {
	m.tag1 = &s
}

// Tag1 returns the value of the "tag1" field in the mutation.
func (m *AttachmentMutation) Tag1() (r string, exists bool) {
	v := m.tag1
	if v == nil {
		return
	}
	return *v, true
}

// OldTag1 returns the old "tag1" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag1: %w", err)
	}
	return oldValue.Tag1, nil
}

// ClearTag1 clears the value of the "tag1" field.
func (m *AttachmentMutation) ClearTag1() {
	m.tag1 = nil
	m.clearedFields[attachment.FieldTag1] = struct{}{}
}

// Tag1Cleared returns if the "tag1" field was cleared in this mutation.
func (m *AttachmentMutation) Tag1Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag1]
	return ok
}

// ResetTag1 resets all changes to the "tag1" field.
func (m *AttachmentMutation) ResetTag1() {
	m.tag1 = nil
	delete(m.clearedFields, attachment.FieldTag1)
}

// SetTag2 sets the "tag2" field.
func (m *AttachmentMutation) SetTag2(s string) {
	m.tag2 = &s
}

// Tag2 returns the value of the "tag2" field in the mutation.
func (m *AttachmentMutation) Tag2() (r string, exists bool) {
	v := m.tag2
	if v == nil {
		return
	}
	return *v, true
}

// OldTag2 returns the old "tag2" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag2: %w", err)
	}
	return oldValue.Tag2, nil
}

// ClearTag2 clears the value of the "tag2" field.
func (m *AttachmentMutation) ClearTag2() {
	m.tag2 = nil
	m.clearedFields[attachment.FieldTag2] = struct{}{}
}

// Tag2Cleared returns if the "tag2" field was cleared in this mutation.
func (m *AttachmentMutation) Tag2Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag2]
	return ok
}

// ResetTag2 resets all changes to the "tag2" field.
func (m *AttachmentMutation) ResetTag2() {
	m.tag2 = nil
	delete(m.clearedFields, attachment.FieldTag2)
}

// SetTag3 sets the "tag3" field.
func (m *AttachmentMutation) SetTag3(s string) {
	m.tag3 = &s
}

// Tag3 returns the value of the "tag3" field in the mutation.
func (m *AttachmentMutation) Tag3() (r string, exists bool) {
	v := m.tag3
	if v == nil {
		return
	}
	return *v, true
}

// OldTag3 returns the old "tag3" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTag3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag3: %w", err)
	}
	return oldValue.Tag3, nil
}

// ClearTag3 clears the value of the "tag3" field.
func (m *AttachmentMutation) ClearTag3() {
	m.tag3 = nil
	m.clearedFields[attachment.FieldTag3] = struct{}{}
}

// Tag3Cleared returns if the "tag3" field was cleared in this mutation.
func (m *AttachmentMutation) Tag3Cleared() bool {
	_, ok := m.clearedFields[attachment.FieldTag3]
	return ok
}

// ResetTag3 resets all changes to the "tag3" field.
func (m *AttachmentMutation) ResetTag3() {
	m.tag3 = nil
	delete(m.clearedFields, attachment.FieldTag3)
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.create_time != nil {
		fields = append(fields, attachment.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, attachment.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, attachment.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.filename != nil {
		fields = append(fields, attachment.FieldFilename)
	}
	if m._path != nil {
		fields = append(fields, attachment.FieldPath)
	}
	if m.url != nil {
		fields = append(fields, attachment.FieldURL)
	}
	if m.content_type != nil {
		fields = append(fields, attachment.FieldContentType)
	}
	if m.size != nil {
		fields = append(fields, attachment.FieldSize)
	}
	if m.etag != nil {
		fields = append(fields, attachment.FieldEtag)
	}
	if m.bucket != nil {
		fields = append(fields, attachment.FieldBucket)
	}
	if m.storage_provider != nil {
		fields = append(fields, attachment.FieldStorageProvider)
	}
	if m.metadata != nil {
		fields = append(fields, attachment.FieldMetadata)
	}
	if m.status != nil {
		fields = append(fields, attachment.FieldStatus)
	}
	if m.upload_session_id != nil {
		fields = append(fields, attachment.FieldUploadSessionID)
	}
	if m.tag1 != nil {
		fields = append(fields, attachment.FieldTag1)
	}
	if m.tag2 != nil {
		fields = append(fields, attachment.FieldTag2)
	}
	if m.tag3 != nil {
		fields = append(fields, attachment.FieldTag3)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldCreateTime:
		return m.CreateTime()
	case attachment.FieldCreateBy:
		return m.CreateBy()
	case attachment.FieldUpdateTime:
		return m.UpdateTime()
	case attachment.FieldUpdateBy:
		return m.UpdateBy()
	case attachment.FieldDeleteTime:
		return m.DeleteTime()
	case attachment.FieldDeleteBy:
		return m.DeleteBy()
	case attachment.FieldFilename:
		return m.Filename()
	case attachment.FieldPath:
		return m.Path()
	case attachment.FieldURL:
		return m.URL()
	case attachment.FieldContentType:
		return m.ContentType()
	case attachment.FieldSize:
		return m.Size()
	case attachment.FieldEtag:
		return m.Etag()
	case attachment.FieldBucket:
		return m.Bucket()
	case attachment.FieldStorageProvider:
		return m.StorageProvider()
	case attachment.FieldMetadata:
		return m.Metadata()
	case attachment.FieldStatus:
		return m.Status()
	case attachment.FieldUploadSessionID:
		return m.UploadSessionID()
	case attachment.FieldTag1:
		return m.Tag1()
	case attachment.FieldTag2:
		return m.Tag2()
	case attachment.FieldTag3:
		return m.Tag3()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case attachment.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case attachment.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case attachment.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case attachment.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case attachment.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case attachment.FieldFilename:
		return m.OldFilename(ctx)
	case attachment.FieldPath:
		return m.OldPath(ctx)
	case attachment.FieldURL:
		return m.OldURL(ctx)
	case attachment.FieldContentType:
		return m.OldContentType(ctx)
	case attachment.FieldSize:
		return m.OldSize(ctx)
	case attachment.FieldEtag:
		return m.OldEtag(ctx)
	case attachment.FieldBucket:
		return m.OldBucket(ctx)
	case attachment.FieldStorageProvider:
		return m.OldStorageProvider(ctx)
	case attachment.FieldMetadata:
		return m.OldMetadata(ctx)
	case attachment.FieldStatus:
		return m.OldStatus(ctx)
	case attachment.FieldUploadSessionID:
		return m.OldUploadSessionID(ctx)
	case attachment.FieldTag1:
		return m.OldTag1(ctx)
	case attachment.FieldTag2:
		return m.OldTag2(ctx)
	case attachment.FieldTag3:
		return m.OldTag3(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case attachment.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case attachment.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case attachment.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case attachment.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case attachment.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case attachment.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case attachment.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case attachment.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case attachment.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case attachment.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case attachment.FieldEtag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEtag(v)
		return nil
	case attachment.FieldBucket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucket(v)
		return nil
	case attachment.FieldStorageProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageProvider(v)
		return nil
	case attachment.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case attachment.FieldStatus:
		v, ok := value.(attachment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case attachment.FieldUploadSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadSessionID(v)
		return nil
	case attachment.FieldTag1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag1(v)
		return nil
	case attachment.FieldTag2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag2(v)
		return nil
	case attachment.FieldTag3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag3(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.addsize != nil {
		fields = append(fields, attachment.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldCreateBy:
		return m.AddedCreateBy()
	case attachment.FieldUpdateBy:
		return m.AddedUpdateBy()
	case attachment.FieldDeleteBy:
		return m.AddedDeleteBy()
	case attachment.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case attachment.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case attachment.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case attachment.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldCreateBy) {
		fields = append(fields, attachment.FieldCreateBy)
	}
	if m.FieldCleared(attachment.FieldUpdateBy) {
		fields = append(fields, attachment.FieldUpdateBy)
	}
	if m.FieldCleared(attachment.FieldDeleteTime) {
		fields = append(fields, attachment.FieldDeleteTime)
	}
	if m.FieldCleared(attachment.FieldDeleteBy) {
		fields = append(fields, attachment.FieldDeleteBy)
	}
	if m.FieldCleared(attachment.FieldURL) {
		fields = append(fields, attachment.FieldURL)
	}
	if m.FieldCleared(attachment.FieldEtag) {
		fields = append(fields, attachment.FieldEtag)
	}
	if m.FieldCleared(attachment.FieldMetadata) {
		fields = append(fields, attachment.FieldMetadata)
	}
	if m.FieldCleared(attachment.FieldUploadSessionID) {
		fields = append(fields, attachment.FieldUploadSessionID)
	}
	if m.FieldCleared(attachment.FieldTag1) {
		fields = append(fields, attachment.FieldTag1)
	}
	if m.FieldCleared(attachment.FieldTag2) {
		fields = append(fields, attachment.FieldTag2)
	}
	if m.FieldCleared(attachment.FieldTag3) {
		fields = append(fields, attachment.FieldTag3)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case attachment.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case attachment.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case attachment.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case attachment.FieldURL:
		m.ClearURL()
		return nil
	case attachment.FieldEtag:
		m.ClearEtag()
		return nil
	case attachment.FieldMetadata:
		m.ClearMetadata()
		return nil
	case attachment.FieldUploadSessionID:
		m.ClearUploadSessionID()
		return nil
	case attachment.FieldTag1:
		m.ClearTag1()
		return nil
	case attachment.FieldTag2:
		m.ClearTag2()
		return nil
	case attachment.FieldTag3:
		m.ClearTag3()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case attachment.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case attachment.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case attachment.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case attachment.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case attachment.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case attachment.FieldFilename:
		m.ResetFilename()
		return nil
	case attachment.FieldPath:
		m.ResetPath()
		return nil
	case attachment.FieldURL:
		m.ResetURL()
		return nil
	case attachment.FieldContentType:
		m.ResetContentType()
		return nil
	case attachment.FieldSize:
		m.ResetSize()
		return nil
	case attachment.FieldEtag:
		m.ResetEtag()
		return nil
	case attachment.FieldBucket:
		m.ResetBucket()
		return nil
	case attachment.FieldStorageProvider:
		m.ResetStorageProvider()
		return nil
	case attachment.FieldMetadata:
		m.ResetMetadata()
		return nil
	case attachment.FieldStatus:
		m.ResetStatus()
		return nil
	case attachment.FieldUploadSessionID:
		m.ResetUploadSessionID()
		return nil
	case attachment.FieldTag1:
		m.ResetTag1()
		return nil
	case attachment.FieldTag2:
		m.ResetTag2()
		return nil
	case attachment.FieldTag3:
		m.ResetTag3()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// LoggingMutation represents an operation that mutates the Logging nodes in the graph.
type LoggingMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	create_by     *int64
	addcreate_by  *int64
	update_time   *time.Time
	update_by     *int64
	addupdate_by  *int64
	delete_time   *time.Time
	delete_by     *int64
	adddelete_by  *int64
	level         *logging.Level
	_type         *logging.Type
	message       *string
	method        *string
	_path         *string
	ip            *string
	query         *string
	code          *int
	addcode       *int
	user_agent    *string
	data          *map[string]interface{}
	stack         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Logging, error)
	predicates    []predicate.Logging
}

var _ ent.Mutation = (*LoggingMutation)(nil)

// loggingOption allows management of the mutation configuration using functional options.
type loggingOption func(*LoggingMutation)

// newLoggingMutation creates new mutation for the Logging entity.
func newLoggingMutation(c config, op Op, opts ...loggingOption) *LoggingMutation {
	m := &LoggingMutation{
		config:        c,
		op:            op,
		typ:           TypeLogging,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoggingID sets the ID field of the mutation.
func withLoggingID(id uint64) loggingOption {
	return func(m *LoggingMutation) {
		var (
			err   error
			once  sync.Once
			value *Logging
		)
		m.oldValue = func(ctx context.Context) (*Logging, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Logging.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLogging sets the old Logging of the mutation.
func withLogging(node *Logging) loggingOption {
	return func(m *LoggingMutation) {
		m.oldValue = func(context.Context) (*Logging, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoggingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoggingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Logging entities.
func (m *LoggingMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoggingMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoggingMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Logging.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *LoggingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LoggingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LoggingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *LoggingMutation) SetCreateBy(i int64) {
	m.create_by = &i
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *LoggingMutation) CreateBy() (r int64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "create_by" field.
func (m *LoggingMutation) AddCreateBy(i int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += i
	} else {
		m.addcreate_by = &i
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *LoggingMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *LoggingMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[logging.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *LoggingMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[logging.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *LoggingMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, logging.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *LoggingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LoggingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LoggingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *LoggingMutation) SetUpdateBy(i int64) {
	m.update_by = &i
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *LoggingMutation) UpdateBy() (r int64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "update_by" field.
func (m *LoggingMutation) AddUpdateBy(i int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += i
	} else {
		m.addupdate_by = &i
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *LoggingMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *LoggingMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[logging.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *LoggingMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[logging.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *LoggingMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, logging.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *LoggingMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *LoggingMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *LoggingMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[logging.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *LoggingMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[logging.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *LoggingMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, logging.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *LoggingMutation) SetDeleteBy(i int64) {
	m.delete_by = &i
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *LoggingMutation) DeleteBy() (r int64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldDeleteBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds i to the "delete_by" field.
func (m *LoggingMutation) AddDeleteBy(i int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += i
	} else {
		m.adddelete_by = &i
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *LoggingMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *LoggingMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[logging.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *LoggingMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[logging.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *LoggingMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, logging.FieldDeleteBy)
}

// SetLevel sets the "level" field.
func (m *LoggingMutation) SetLevel(l logging.Level) {
	m.level = &l
}

// Level returns the value of the "level" field in the mutation.
func (m *LoggingMutation) Level() (r logging.Level, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldLevel(ctx context.Context) (v logging.Level, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *LoggingMutation) ResetLevel() {
	m.level = nil
}

// SetType sets the "type" field.
func (m *LoggingMutation) SetType(l logging.Type) {
	m._type = &l
}

// GetType returns the value of the "type" field in the mutation.
func (m *LoggingMutation) GetType() (r logging.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldType(ctx context.Context) (v logging.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *LoggingMutation) ResetType() {
	m._type = nil
}

// SetMessage sets the "message" field.
func (m *LoggingMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *LoggingMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *LoggingMutation) ResetMessage() {
	m.message = nil
}

// SetMethod sets the "method" field.
func (m *LoggingMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *LoggingMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *LoggingMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[logging.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *LoggingMutation) MethodCleared() bool {
	_, ok := m.clearedFields[logging.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *LoggingMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, logging.FieldMethod)
}

// SetPath sets the "path" field.
func (m *LoggingMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *LoggingMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *LoggingMutation) ClearPath() {
	m._path = nil
	m.clearedFields[logging.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *LoggingMutation) PathCleared() bool {
	_, ok := m.clearedFields[logging.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *LoggingMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, logging.FieldPath)
}

// SetIP sets the "ip" field.
func (m *LoggingMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *LoggingMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ClearIP clears the value of the "ip" field.
func (m *LoggingMutation) ClearIP() {
	m.ip = nil
	m.clearedFields[logging.FieldIP] = struct{}{}
}

// IPCleared returns if the "ip" field was cleared in this mutation.
func (m *LoggingMutation) IPCleared() bool {
	_, ok := m.clearedFields[logging.FieldIP]
	return ok
}

// ResetIP resets all changes to the "ip" field.
func (m *LoggingMutation) ResetIP() {
	m.ip = nil
	delete(m.clearedFields, logging.FieldIP)
}

// SetQuery sets the "query" field.
func (m *LoggingMutation) SetQuery(s string) {
	m.query = &s
}

// Query returns the value of the "query" field in the mutation.
func (m *LoggingMutation) Query() (r string, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ClearQuery clears the value of the "query" field.
func (m *LoggingMutation) ClearQuery() {
	m.query = nil
	m.clearedFields[logging.FieldQuery] = struct{}{}
}

// QueryCleared returns if the "query" field was cleared in this mutation.
func (m *LoggingMutation) QueryCleared() bool {
	_, ok := m.clearedFields[logging.FieldQuery]
	return ok
}

// ResetQuery resets all changes to the "query" field.
func (m *LoggingMutation) ResetQuery() {
	m.query = nil
	delete(m.clearedFields, logging.FieldQuery)
}

// SetCode sets the "code" field.
func (m *LoggingMutation) SetCode(i int) {
	m.code = &i
	m.addcode = nil
}

// Code returns the value of the "code" field in the mutation.
func (m *LoggingMutation) Code() (r int, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldCode(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// AddCode adds i to the "code" field.
func (m *LoggingMutation) AddCode(i int) {
	if m.addcode != nil {
		*m.addcode += i
	} else {
		m.addcode = &i
	}
}

// AddedCode returns the value that was added to the "code" field in this mutation.
func (m *LoggingMutation) AddedCode() (r int, exists bool) {
	v := m.addcode
	if v == nil {
		return
	}
	return *v, true
}

// ClearCode clears the value of the "code" field.
func (m *LoggingMutation) ClearCode() {
	m.code = nil
	m.addcode = nil
	m.clearedFields[logging.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *LoggingMutation) CodeCleared() bool {
	_, ok := m.clearedFields[logging.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *LoggingMutation) ResetCode() {
	m.code = nil
	m.addcode = nil
	delete(m.clearedFields, logging.FieldCode)
}

// SetUserAgent sets the "user_agent" field.
func (m *LoggingMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *LoggingMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *LoggingMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[logging.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *LoggingMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[logging.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *LoggingMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, logging.FieldUserAgent)
}

// SetData sets the "data" field.
func (m *LoggingMutation) SetData(value map[string]interface{}) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *LoggingMutation) Data() (r map[string]interface{}, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *LoggingMutation) ClearData() {
	m.data = nil
	m.clearedFields[logging.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *LoggingMutation) DataCleared() bool {
	_, ok := m.clearedFields[logging.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *LoggingMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, logging.FieldData)
}

// SetStack sets the "stack" field.
func (m *LoggingMutation) SetStack(s string) {
	m.stack = &s
}

// Stack returns the value of the "stack" field in the mutation.
func (m *LoggingMutation) Stack() (r string, exists bool) {
	v := m.stack
	if v == nil {
		return
	}
	return *v, true
}

// OldStack returns the old "stack" field's value of the Logging entity.
// If the Logging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggingMutation) OldStack(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStack: %w", err)
	}
	return oldValue.Stack, nil
}

// ClearStack clears the value of the "stack" field.
func (m *LoggingMutation) ClearStack() {
	m.stack = nil
	m.clearedFields[logging.FieldStack] = struct{}{}
}

// StackCleared returns if the "stack" field was cleared in this mutation.
func (m *LoggingMutation) StackCleared() bool {
	_, ok := m.clearedFields[logging.FieldStack]
	return ok
}

// ResetStack resets all changes to the "stack" field.
func (m *LoggingMutation) ResetStack() {
	m.stack = nil
	delete(m.clearedFields, logging.FieldStack)
}

// Where appends a list predicates to the LoggingMutation builder.
func (m *LoggingMutation) Where(ps ...predicate.Logging) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoggingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoggingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Logging, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoggingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoggingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Logging).
func (m *LoggingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoggingMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.create_time != nil {
		fields = append(fields, logging.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, logging.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, logging.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.level != nil {
		fields = append(fields, logging.FieldLevel)
	}
	if m._type != nil {
		fields = append(fields, logging.FieldType)
	}
	if m.message != nil {
		fields = append(fields, logging.FieldMessage)
	}
	if m.method != nil {
		fields = append(fields, logging.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, logging.FieldPath)
	}
	if m.ip != nil {
		fields = append(fields, logging.FieldIP)
	}
	if m.query != nil {
		fields = append(fields, logging.FieldQuery)
	}
	if m.code != nil {
		fields = append(fields, logging.FieldCode)
	}
	if m.user_agent != nil {
		fields = append(fields, logging.FieldUserAgent)
	}
	if m.data != nil {
		fields = append(fields, logging.FieldData)
	}
	if m.stack != nil {
		fields = append(fields, logging.FieldStack)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoggingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case logging.FieldCreateTime:
		return m.CreateTime()
	case logging.FieldCreateBy:
		return m.CreateBy()
	case logging.FieldUpdateTime:
		return m.UpdateTime()
	case logging.FieldUpdateBy:
		return m.UpdateBy()
	case logging.FieldDeleteTime:
		return m.DeleteTime()
	case logging.FieldDeleteBy:
		return m.DeleteBy()
	case logging.FieldLevel:
		return m.Level()
	case logging.FieldType:
		return m.GetType()
	case logging.FieldMessage:
		return m.Message()
	case logging.FieldMethod:
		return m.Method()
	case logging.FieldPath:
		return m.Path()
	case logging.FieldIP:
		return m.IP()
	case logging.FieldQuery:
		return m.Query()
	case logging.FieldCode:
		return m.Code()
	case logging.FieldUserAgent:
		return m.UserAgent()
	case logging.FieldData:
		return m.Data()
	case logging.FieldStack:
		return m.Stack()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoggingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case logging.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case logging.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case logging.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case logging.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case logging.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case logging.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case logging.FieldLevel:
		return m.OldLevel(ctx)
	case logging.FieldType:
		return m.OldType(ctx)
	case logging.FieldMessage:
		return m.OldMessage(ctx)
	case logging.FieldMethod:
		return m.OldMethod(ctx)
	case logging.FieldPath:
		return m.OldPath(ctx)
	case logging.FieldIP:
		return m.OldIP(ctx)
	case logging.FieldQuery:
		return m.OldQuery(ctx)
	case logging.FieldCode:
		return m.OldCode(ctx)
	case logging.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case logging.FieldData:
		return m.OldData(ctx)
	case logging.FieldStack:
		return m.OldStack(ctx)
	}
	return nil, fmt.Errorf("unknown Logging field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case logging.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case logging.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case logging.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case logging.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case logging.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case logging.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case logging.FieldLevel:
		v, ok := value.(logging.Level)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case logging.FieldType:
		v, ok := value.(logging.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case logging.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case logging.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case logging.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case logging.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case logging.FieldQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case logging.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case logging.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case logging.FieldData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case logging.FieldStack:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStack(v)
		return nil
	}
	return fmt.Errorf("unknown Logging field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoggingMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.addcode != nil {
		fields = append(fields, logging.FieldCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoggingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case logging.FieldCreateBy:
		return m.AddedCreateBy()
	case logging.FieldUpdateBy:
		return m.AddedUpdateBy()
	case logging.FieldDeleteBy:
		return m.AddedDeleteBy()
	case logging.FieldCode:
		return m.AddedCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case logging.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case logging.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case logging.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case logging.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCode(v)
		return nil
	}
	return fmt.Errorf("unknown Logging numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoggingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(logging.FieldCreateBy) {
		fields = append(fields, logging.FieldCreateBy)
	}
	if m.FieldCleared(logging.FieldUpdateBy) {
		fields = append(fields, logging.FieldUpdateBy)
	}
	if m.FieldCleared(logging.FieldDeleteTime) {
		fields = append(fields, logging.FieldDeleteTime)
	}
	if m.FieldCleared(logging.FieldDeleteBy) {
		fields = append(fields, logging.FieldDeleteBy)
	}
	if m.FieldCleared(logging.FieldMethod) {
		fields = append(fields, logging.FieldMethod)
	}
	if m.FieldCleared(logging.FieldPath) {
		fields = append(fields, logging.FieldPath)
	}
	if m.FieldCleared(logging.FieldIP) {
		fields = append(fields, logging.FieldIP)
	}
	if m.FieldCleared(logging.FieldQuery) {
		fields = append(fields, logging.FieldQuery)
	}
	if m.FieldCleared(logging.FieldCode) {
		fields = append(fields, logging.FieldCode)
	}
	if m.FieldCleared(logging.FieldUserAgent) {
		fields = append(fields, logging.FieldUserAgent)
	}
	if m.FieldCleared(logging.FieldData) {
		fields = append(fields, logging.FieldData)
	}
	if m.FieldCleared(logging.FieldStack) {
		fields = append(fields, logging.FieldStack)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoggingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoggingMutation) ClearField(name string) error {
	switch name {
	case logging.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case logging.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case logging.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case logging.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case logging.FieldMethod:
		m.ClearMethod()
		return nil
	case logging.FieldPath:
		m.ClearPath()
		return nil
	case logging.FieldIP:
		m.ClearIP()
		return nil
	case logging.FieldQuery:
		m.ClearQuery()
		return nil
	case logging.FieldCode:
		m.ClearCode()
		return nil
	case logging.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case logging.FieldData:
		m.ClearData()
		return nil
	case logging.FieldStack:
		m.ClearStack()
		return nil
	}
	return fmt.Errorf("unknown Logging nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoggingMutation) ResetField(name string) error {
	switch name {
	case logging.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case logging.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case logging.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case logging.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case logging.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case logging.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case logging.FieldLevel:
		m.ResetLevel()
		return nil
	case logging.FieldType:
		m.ResetType()
		return nil
	case logging.FieldMessage:
		m.ResetMessage()
		return nil
	case logging.FieldMethod:
		m.ResetMethod()
		return nil
	case logging.FieldPath:
		m.ResetPath()
		return nil
	case logging.FieldIP:
		m.ResetIP()
		return nil
	case logging.FieldQuery:
		m.ResetQuery()
		return nil
	case logging.FieldCode:
		m.ResetCode()
		return nil
	case logging.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case logging.FieldData:
		m.ResetData()
		return nil
	case logging.FieldStack:
		m.ResetStack()
		return nil
	}
	return fmt.Errorf("unknown Logging field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoggingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoggingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoggingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoggingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoggingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoggingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoggingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Logging unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoggingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Logging edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	create_time        *time.Time
	create_by          *int64
	addcreate_by       *int64
	update_time        *time.Time
	update_by          *int64
	addupdate_by       *int64
	delete_time        *time.Time
	delete_by          *int64
	adddelete_by       *int64
	name               *string
	email              *string
	age                *int
	addage             *int
	phone              *string
	clearedFields      map[string]struct{}
	attachments        map[uint64]struct{}
	removedattachments map[uint64]struct{}
	clearedattachments bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetCreateBy sets the "create_by" field.
func (m *UserMutation) SetCreateBy(i int64) {
	m.create_by = &i
	m.addcreate_by = nil
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *UserMutation) CreateBy() (r int64, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "create_by" field.
func (m *UserMutation) AddCreateBy(i int64) {
	if m.addcreate_by != nil {
		*m.addcreate_by += i
	} else {
		m.addcreate_by = &i
	}
}

// AddedCreateBy returns the value that was added to the "create_by" field in this mutation.
func (m *UserMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *UserMutation) ClearCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	m.clearedFields[user.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *UserMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *UserMutation) ResetCreateBy() {
	m.create_by = nil
	m.addcreate_by = nil
	delete(m.clearedFields, user.FieldCreateBy)
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *UserMutation) SetUpdateBy(i int64) {
	m.update_by = &i
	m.addupdate_by = nil
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *UserMutation) UpdateBy() (r int64, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "update_by" field.
func (m *UserMutation) AddUpdateBy(i int64) {
	if m.addupdate_by != nil {
		*m.addupdate_by += i
	} else {
		m.addupdate_by = &i
	}
}

// AddedUpdateBy returns the value that was added to the "update_by" field in this mutation.
func (m *UserMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdate_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *UserMutation) ClearUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	m.clearedFields[user.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *UserMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *UserMutation) ResetUpdateBy() {
	m.update_by = nil
	m.addupdate_by = nil
	delete(m.clearedFields, user.FieldUpdateBy)
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[user.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, user.FieldDeleteTime)
}

// SetDeleteBy sets the "delete_by" field.
func (m *UserMutation) SetDeleteBy(i int64) {
	m.delete_by = &i
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *UserMutation) DeleteBy() (r int64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds i to the "delete_by" field.
func (m *UserMutation) AddDeleteBy(i int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += i
	} else {
		m.adddelete_by = &i
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *UserMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *UserMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[user.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *UserMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *UserMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, user.FieldDeleteBy)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by ids.
func (m *UserMutation) AddAttachmentIDs(ids ...uint64) {
	if m.attachments == nil {
		m.attachments = make(map[uint64]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the Attachment entity.
func (m *UserMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the Attachment entity was cleared.
func (m *UserMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the Attachment entity by IDs.
func (m *UserMutation) RemoveAttachmentIDs(ids ...uint64) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the Attachment entity.
func (m *UserMutation) RemovedAttachmentsIDs() (ids []uint64) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *UserMutation) AttachmentsIDs() (ids []uint64) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *UserMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.create_by != nil {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.update_by != nil {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.delete_time != nil {
		fields = append(fields, user.FieldDeleteTime)
	}
	if m.delete_by != nil {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldCreateBy:
		return m.CreateBy()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUpdateBy:
		return m.UpdateBy()
	case user.FieldDeleteTime:
		return m.DeleteTime()
	case user.FieldDeleteBy:
		return m.DeleteBy()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldAge:
		return m.Age()
	case user.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case user.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case user.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case user.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case user.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_by != nil {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.addupdate_by != nil {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateBy:
		return m.AddedCreateBy()
	case user.FieldUpdateBy:
		return m.AddedUpdateBy()
	case user.FieldDeleteBy:
		return m.AddedDeleteBy()
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case user.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case user.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreateBy) {
		fields = append(fields, user.FieldCreateBy)
	}
	if m.FieldCleared(user.FieldUpdateBy) {
		fields = append(fields, user.FieldUpdateBy)
	}
	if m.FieldCleared(user.FieldDeleteTime) {
		fields = append(fields, user.FieldDeleteTime)
	}
	if m.FieldCleared(user.FieldDeleteBy) {
		fields = append(fields, user.FieldDeleteBy)
	}
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case user.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case user.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case user.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case user.FieldAge:
		m.ClearAge()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case user.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case user.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attachments != nil {
		edges = append(edges, user.EdgeAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattachments != nil {
		edges = append(edges, user.EdgeAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattachments {
		edges = append(edges, user.EdgeAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeAttachments:
		return m.clearedattachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
