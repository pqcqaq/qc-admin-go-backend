// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"go-backend/database/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *UserUpdate) SetCreateBy(v int64) *UserUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreateBy(v *int64) *UserUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *UserUpdate) AddCreateBy(v int64) *UserUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *UserUpdate) ClearCreateBy() *UserUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserUpdate) SetUpdateTime(v time.Time) *UserUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *UserUpdate) SetUpdateBy(v int64) *UserUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUpdateBy(v *int64) *UserUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *UserUpdate) AddUpdateBy(v int64) *UserUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *UserUpdate) ClearUpdateBy() *UserUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *UserUpdate) SetDeleteTime(v time.Time) *UserUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeleteTime(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *UserUpdate) ClearDeleteTime() *UserUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *UserUpdate) SetDeleteBy(v int64) *UserUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeleteBy(v *int64) *UserUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *UserUpdate) AddDeleteBy(v int64) *UserUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *UserUpdate) ClearDeleteBy() *UserUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdate) SetAge(v int) *UserUpdate {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdate) AddAge(v int) *UserUpdate {
	_u.mutation.AddAge(v)
	return _u
}

// ClearAge clears the value of the "age" field.
func (_u *UserUpdate) ClearAge() *UserUpdate {
	_u.mutation.ClearAge()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdate) SetPhone(v string) *UserUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdate) ClearPhone() *UserUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (_u *UserUpdate) AddAttachmentIDs(ids ...uint64) *UserUpdate {
	_u.mutation.AddAttachmentIDs(ids...)
	return _u
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (_u *UserUpdate) AddAttachments(v ...*Attachment) *UserUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAttachmentIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (_u *UserUpdate) AddUserRoleIDs(ids ...uint64) *UserUpdate {
	_u.mutation.AddUserRoleIDs(ids...)
	return _u
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (_u *UserUpdate) AddUserRoles(v ...*UserRole) *UserUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (_u *UserUpdate) ClearAttachments() *UserUpdate {
	_u.mutation.ClearAttachments()
	return _u
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (_u *UserUpdate) RemoveAttachmentIDs(ids ...uint64) *UserUpdate {
	_u.mutation.RemoveAttachmentIDs(ids...)
	return _u
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (_u *UserUpdate) RemoveAttachments(v ...*Attachment) *UserUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAttachmentIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (_u *UserUpdate) ClearUserRoles() *UserUpdate {
	_u.mutation.ClearUserRoles()
	return _u
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (_u *UserUpdate) RemoveUserRoleIDs(ids ...uint64) *UserUpdate {
	_u.mutation.RemoveUserRoleIDs(ids...)
	return _u
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (_u *UserUpdate) RemoveUserRoles(v ...*UserRole) *UserUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(user.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(user.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(user.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(user.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(user.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(user.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(user.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(user.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(user.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(user.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(user.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if _u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if _u.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !_u.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !_u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *UserUpdateOne) SetCreateBy(v int64) *UserUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreateBy(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *UserUpdateOne) AddCreateBy(v int64) *UserUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *UserUpdateOne) ClearCreateBy() *UserUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserUpdateOne) SetUpdateTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *UserUpdateOne) SetUpdateBy(v int64) *UserUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUpdateBy(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *UserUpdateOne) AddUpdateBy(v int64) *UserUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *UserUpdateOne) ClearUpdateBy() *UserUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *UserUpdateOne) SetDeleteTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeleteTime(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *UserUpdateOne) ClearDeleteTime() *UserUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *UserUpdateOne) SetDeleteBy(v int64) *UserUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeleteBy(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *UserUpdateOne) AddDeleteBy(v int64) *UserUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *UserUpdateOne) ClearDeleteBy() *UserUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	_u.mutation.AddAge(v)
	return _u
}

// ClearAge clears the value of the "age" field.
func (_u *UserUpdateOne) ClearAge() *UserUpdateOne {
	_u.mutation.ClearAge()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdateOne) ClearPhone() *UserUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (_u *UserUpdateOne) AddAttachmentIDs(ids ...uint64) *UserUpdateOne {
	_u.mutation.AddAttachmentIDs(ids...)
	return _u
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (_u *UserUpdateOne) AddAttachments(v ...*Attachment) *UserUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAttachmentIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (_u *UserUpdateOne) AddUserRoleIDs(ids ...uint64) *UserUpdateOne {
	_u.mutation.AddUserRoleIDs(ids...)
	return _u
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (_u *UserUpdateOne) AddUserRoles(v ...*UserRole) *UserUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (_u *UserUpdateOne) ClearAttachments() *UserUpdateOne {
	_u.mutation.ClearAttachments()
	return _u
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (_u *UserUpdateOne) RemoveAttachmentIDs(ids ...uint64) *UserUpdateOne {
	_u.mutation.RemoveAttachmentIDs(ids...)
	return _u
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (_u *UserUpdateOne) RemoveAttachments(v ...*Attachment) *UserUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAttachmentIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (_u *UserUpdateOne) ClearUserRoles() *UserUpdateOne {
	_u.mutation.ClearUserRoles()
	return _u
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (_u *UserUpdateOne) RemoveUserRoleIDs(ids ...uint64) *UserUpdateOne {
	_u.mutation.RemoveUserRoleIDs(ids...)
	return _u
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (_u *UserUpdateOne) RemoveUserRoles(v ...*UserRole) *UserUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserRoleIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(user.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(user.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(user.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(user.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(user.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(user.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(user.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(user.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(user.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(user.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(user.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if _u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if _u.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !_u.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !_u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
