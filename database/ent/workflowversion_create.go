// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/workflowversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowVersionCreate is the builder for creating a WorkflowVersion entity.
type WorkflowVersionCreate struct {
	config
	mutation *WorkflowVersionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WorkflowVersionCreate) SetCreateTime(v time.Time) *WorkflowVersionCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableCreateTime(v *time.Time) *WorkflowVersionCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *WorkflowVersionCreate) SetCreateBy(v uint64) *WorkflowVersionCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableCreateBy(v *uint64) *WorkflowVersionCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WorkflowVersionCreate) SetUpdateTime(v time.Time) *WorkflowVersionCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableUpdateTime(v *time.Time) *WorkflowVersionCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *WorkflowVersionCreate) SetUpdateBy(v uint64) *WorkflowVersionCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableUpdateBy(v *uint64) *WorkflowVersionCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *WorkflowVersionCreate) SetApplicationID(v uint64) *WorkflowVersionCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetVersion sets the "version" field.
func (_c *WorkflowVersionCreate) SetVersion(v uint) *WorkflowVersionCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetSnapshot sets the "snapshot" field.
func (_c *WorkflowVersionCreate) SetSnapshot(v map[string]interface{}) *WorkflowVersionCreate {
	_c.mutation.SetSnapshot(v)
	return _c
}

// SetChangeLog sets the "change_log" field.
func (_c *WorkflowVersionCreate) SetChangeLog(v string) *WorkflowVersionCreate {
	_c.mutation.SetChangeLog(v)
	return _c
}

// SetNillableChangeLog sets the "change_log" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableChangeLog(v *string) *WorkflowVersionCreate {
	if v != nil {
		_c.SetChangeLog(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *WorkflowVersionCreate) SetCreatedBy(v string) *WorkflowVersionCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *WorkflowVersionCreate) SetNillableCreatedBy(v *string) *WorkflowVersionCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *WorkflowVersionCreate) SetID(v uint64) *WorkflowVersionCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the WorkflowVersionMutation object of the builder.
func (_c *WorkflowVersionCreate) Mutation() *WorkflowVersionMutation {
	return _c.mutation
}

// Save creates the WorkflowVersion in the database.
func (_c *WorkflowVersionCreate) Save(ctx context.Context) (*WorkflowVersion, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowVersionCreate) SaveX(ctx context.Context) *WorkflowVersion {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowVersionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowVersionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WorkflowVersionCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if workflowversion.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowversion.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := workflowversion.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if workflowversion.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowversion.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowversion.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowVersionCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowVersion.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowVersion.update_time"`)}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "WorkflowVersion.application_id"`)}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "WorkflowVersion.version"`)}
	}
	if _, ok := _c.mutation.Snapshot(); !ok {
		return &ValidationError{Name: "snapshot", err: errors.New(`ent: missing required field "WorkflowVersion.snapshot"`)}
	}
	return nil
}

func (_c *WorkflowVersionCreate) sqlSave(ctx context.Context) (*WorkflowVersion, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowVersionCreate) createSpec() (*WorkflowVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowVersion{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflowversion.Table, sqlgraph.NewFieldSpec(workflowversion.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(workflowversion.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(workflowversion.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(workflowversion.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(workflowversion.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.ApplicationID(); ok {
		_spec.SetField(workflowversion.FieldApplicationID, field.TypeUint64, value)
		_node.ApplicationID = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(workflowversion.FieldVersion, field.TypeUint, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.Snapshot(); ok {
		_spec.SetField(workflowversion.FieldSnapshot, field.TypeJSON, value)
		_node.Snapshot = value
	}
	if value, ok := _c.mutation.ChangeLog(); ok {
		_spec.SetField(workflowversion.FieldChangeLog, field.TypeString, value)
		_node.ChangeLog = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(workflowversion.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	return _node, _spec
}

// WorkflowVersionCreateBulk is the builder for creating many WorkflowVersion entities in bulk.
type WorkflowVersionCreateBulk struct {
	config
	err      error
	builders []*WorkflowVersionCreate
}

// Save creates the WorkflowVersion entities in the database.
func (_c *WorkflowVersionCreateBulk) Save(ctx context.Context) ([]*WorkflowVersion, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*WorkflowVersion, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowVersionCreateBulk) SaveX(ctx context.Context) []*WorkflowVersion {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowVersionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
