// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/address"
	"go-backend/database/ent/area"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (_u *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *AddressUpdate) SetCreateBy(v uint64) *AddressUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableCreateBy(v *uint64) *AddressUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AddressUpdate) AddCreateBy(v int64) *AddressUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AddressUpdate) ClearCreateBy() *AddressUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AddressUpdate) SetUpdateTime(v time.Time) *AddressUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AddressUpdate) SetUpdateBy(v uint64) *AddressUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableUpdateBy(v *uint64) *AddressUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AddressUpdate) AddUpdateBy(v int64) *AddressUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AddressUpdate) ClearUpdateBy() *AddressUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AddressUpdate) SetDeleteTime(v time.Time) *AddressUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableDeleteTime(v *time.Time) *AddressUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AddressUpdate) ClearDeleteTime() *AddressUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AddressUpdate) SetDeleteBy(v uint64) *AddressUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableDeleteBy(v *uint64) *AddressUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AddressUpdate) AddDeleteBy(v int64) *AddressUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AddressUpdate) ClearDeleteBy() *AddressUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetDetail sets the "detail" field.
func (_u *AddressUpdate) SetDetail(v string) *AddressUpdate {
	_u.mutation.SetDetail(v)
	return _u
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableDetail(v *string) *AddressUpdate {
	if v != nil {
		_u.SetDetail(*v)
	}
	return _u
}

// SetAreaID sets the "area_id" field.
func (_u *AddressUpdate) SetAreaID(v uint64) *AddressUpdate {
	_u.mutation.SetAreaID(v)
	return _u
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableAreaID(v *uint64) *AddressUpdate {
	if v != nil {
		_u.SetAreaID(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *AddressUpdate) SetPhone(v string) *AddressUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *AddressUpdate) SetNillablePhone(v *string) *AddressUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *AddressUpdate) SetName(v string) *AddressUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableName(v *string) *AddressUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *AddressUpdate) SetIsDefault(v bool) *AddressUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableIsDefault(v *bool) *AddressUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *AddressUpdate) SetRemark(v string) *AddressUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableRemark(v *string) *AddressUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *AddressUpdate) ClearRemark() *AddressUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetEntity sets the "entity" field.
func (_u *AddressUpdate) SetEntity(v string) *AddressUpdate {
	_u.mutation.SetEntity(v)
	return _u
}

// SetNillableEntity sets the "entity" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableEntity(v *string) *AddressUpdate {
	if v != nil {
		_u.SetEntity(*v)
	}
	return _u
}

// ClearEntity clears the value of the "entity" field.
func (_u *AddressUpdate) ClearEntity() *AddressUpdate {
	_u.mutation.ClearEntity()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *AddressUpdate) SetEntityID(v string) *AddressUpdate {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableEntityID(v *string) *AddressUpdate {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *AddressUpdate) ClearEntityID() *AddressUpdate {
	_u.mutation.ClearEntityID()
	return _u
}

// SetArea sets the "area" edge to the Area entity.
func (_u *AddressUpdate) SetArea(v *Area) *AddressUpdate {
	return _u.SetAreaID(v.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (_u *AddressUpdate) Mutation() *AddressMutation {
	return _u.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (_u *AddressUpdate) ClearArea() *AddressUpdate {
	_u.mutation.ClearArea()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AddressUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AddressUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddressUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if address.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized address.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := address.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddressUpdate) check() error {
	if v, ok := _u.mutation.Detail(); ok {
		if err := address.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Address.detail": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := address.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Address.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := address.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Address.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Entity(); ok {
		if err := address.EntityValidator(v); err != nil {
			return &ValidationError{Name: "entity", err: fmt.Errorf(`ent: validator failed for field "Address.entity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EntityID(); ok {
		if err := address.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "Address.entity_id": %w`, err)}
		}
	}
	if _u.mutation.AreaCleared() && len(_u.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.area"`)
	}
	return nil
}

func (_u *AddressUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(address.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(address.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(address.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(address.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(address.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(address.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(address.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(address.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(address.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(address.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(address.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(address.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Detail(); ok {
		_spec.SetField(address.FieldDetail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(address.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(address.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(address.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(address.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(address.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Entity(); ok {
		_spec.SetField(address.FieldEntity, field.TypeString, value)
	}
	if _u.mutation.EntityCleared() {
		_spec.ClearField(address.FieldEntity, field.TypeString)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(address.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(address.FieldEntityID, field.TypeString)
	}
	if _u.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.AreaTable,
			Columns: []string{address.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.AreaTable,
			Columns: []string{address.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *AddressUpdateOne) SetCreateBy(v uint64) *AddressUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableCreateBy(v *uint64) *AddressUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AddressUpdateOne) AddCreateBy(v int64) *AddressUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AddressUpdateOne) ClearCreateBy() *AddressUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AddressUpdateOne) SetUpdateTime(v time.Time) *AddressUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AddressUpdateOne) SetUpdateBy(v uint64) *AddressUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableUpdateBy(v *uint64) *AddressUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AddressUpdateOne) AddUpdateBy(v int64) *AddressUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AddressUpdateOne) ClearUpdateBy() *AddressUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AddressUpdateOne) SetDeleteTime(v time.Time) *AddressUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableDeleteTime(v *time.Time) *AddressUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AddressUpdateOne) ClearDeleteTime() *AddressUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AddressUpdateOne) SetDeleteBy(v uint64) *AddressUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableDeleteBy(v *uint64) *AddressUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AddressUpdateOne) AddDeleteBy(v int64) *AddressUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AddressUpdateOne) ClearDeleteBy() *AddressUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetDetail sets the "detail" field.
func (_u *AddressUpdateOne) SetDetail(v string) *AddressUpdateOne {
	_u.mutation.SetDetail(v)
	return _u
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableDetail(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetDetail(*v)
	}
	return _u
}

// SetAreaID sets the "area_id" field.
func (_u *AddressUpdateOne) SetAreaID(v uint64) *AddressUpdateOne {
	_u.mutation.SetAreaID(v)
	return _u
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableAreaID(v *uint64) *AddressUpdateOne {
	if v != nil {
		_u.SetAreaID(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *AddressUpdateOne) SetPhone(v string) *AddressUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillablePhone(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *AddressUpdateOne) SetName(v string) *AddressUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableName(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *AddressUpdateOne) SetIsDefault(v bool) *AddressUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableIsDefault(v *bool) *AddressUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *AddressUpdateOne) SetRemark(v string) *AddressUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableRemark(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *AddressUpdateOne) ClearRemark() *AddressUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetEntity sets the "entity" field.
func (_u *AddressUpdateOne) SetEntity(v string) *AddressUpdateOne {
	_u.mutation.SetEntity(v)
	return _u
}

// SetNillableEntity sets the "entity" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableEntity(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetEntity(*v)
	}
	return _u
}

// ClearEntity clears the value of the "entity" field.
func (_u *AddressUpdateOne) ClearEntity() *AddressUpdateOne {
	_u.mutation.ClearEntity()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *AddressUpdateOne) SetEntityID(v string) *AddressUpdateOne {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableEntityID(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *AddressUpdateOne) ClearEntityID() *AddressUpdateOne {
	_u.mutation.ClearEntityID()
	return _u
}

// SetArea sets the "area" edge to the Area entity.
func (_u *AddressUpdateOne) SetArea(v *Area) *AddressUpdateOne {
	return _u.SetAreaID(v.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (_u *AddressUpdateOne) Mutation() *AddressMutation {
	return _u.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (_u *AddressUpdateOne) ClearArea() *AddressUpdateOne {
	_u.mutation.ClearArea()
	return _u
}

// Where appends a list predicates to the AddressUpdate builder.
func (_u *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Address entity.
func (_u *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddressUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if address.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized address.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := address.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddressUpdateOne) check() error {
	if v, ok := _u.mutation.Detail(); ok {
		if err := address.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Address.detail": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := address.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Address.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := address.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Address.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Entity(); ok {
		if err := address.EntityValidator(v); err != nil {
			return &ValidationError{Name: "entity", err: fmt.Errorf(`ent: validator failed for field "Address.entity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EntityID(); ok {
		if err := address.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "Address.entity_id": %w`, err)}
		}
	}
	if _u.mutation.AreaCleared() && len(_u.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.area"`)
	}
	return nil
}

func (_u *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(address.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(address.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(address.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(address.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(address.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(address.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(address.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(address.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(address.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(address.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(address.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(address.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Detail(); ok {
		_spec.SetField(address.FieldDetail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(address.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(address.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(address.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(address.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(address.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Entity(); ok {
		_spec.SetField(address.FieldEntity, field.TypeString, value)
	}
	if _u.mutation.EntityCleared() {
		_spec.ClearField(address.FieldEntity, field.TypeString)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(address.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(address.FieldEntityID, field.TypeString)
	}
	if _u.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.AreaTable,
			Columns: []string{address.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.AreaTable,
			Columns: []string{address.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
