// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/address"
	"go-backend/database/ent/area"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaCreate is the builder for creating a Area entity.
type AreaCreate struct {
	config
	mutation *AreaMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *AreaCreate) SetCreateTime(v time.Time) *AreaCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *AreaCreate) SetNillableCreateTime(v *time.Time) *AreaCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *AreaCreate) SetCreateBy(v uint64) *AreaCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *AreaCreate) SetNillableCreateBy(v *uint64) *AreaCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *AreaCreate) SetUpdateTime(v time.Time) *AreaCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *AreaCreate) SetNillableUpdateTime(v *time.Time) *AreaCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *AreaCreate) SetUpdateBy(v uint64) *AreaCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *AreaCreate) SetNillableUpdateBy(v *uint64) *AreaCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *AreaCreate) SetDeleteTime(v time.Time) *AreaCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *AreaCreate) SetNillableDeleteTime(v *time.Time) *AreaCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *AreaCreate) SetDeleteBy(v uint64) *AreaCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *AreaCreate) SetNillableDeleteBy(v *uint64) *AreaCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *AreaCreate) SetName(v string) *AreaCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetLevel sets the "level" field.
func (_c *AreaCreate) SetLevel(v area.Level) *AreaCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetDepth sets the "depth" field.
func (_c *AreaCreate) SetDepth(v int) *AreaCreate {
	_c.mutation.SetDepth(v)
	return _c
}

// SetCode sets the "code" field.
func (_c *AreaCreate) SetCode(v string) *AreaCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetLatitude sets the "latitude" field.
func (_c *AreaCreate) SetLatitude(v float64) *AreaCreate {
	_c.mutation.SetLatitude(v)
	return _c
}

// SetLongitude sets the "longitude" field.
func (_c *AreaCreate) SetLongitude(v float64) *AreaCreate {
	_c.mutation.SetLongitude(v)
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *AreaCreate) SetParentID(v uint64) *AreaCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *AreaCreate) SetNillableParentID(v *uint64) *AreaCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *AreaCreate) SetColor(v string) *AreaCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_c *AreaCreate) SetNillableColor(v *string) *AreaCreate {
	if v != nil {
		_c.SetColor(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AreaCreate) SetID(v uint64) *AreaCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddChildIDs adds the "children" edge to the Area entity by IDs.
func (_c *AreaCreate) AddChildIDs(ids ...uint64) *AreaCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Area entity.
func (_c *AreaCreate) AddChildren(v ...*Area) *AreaCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Area entity.
func (_c *AreaCreate) SetParent(v *Area) *AreaCreate {
	return _c.SetParentID(v.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (_c *AreaCreate) AddAddressIDs(ids ...uint64) *AreaCreate {
	_c.mutation.AddAddressIDs(ids...)
	return _c
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (_c *AreaCreate) AddAddresses(v ...*Address) *AreaCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAddressIDs(ids...)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (_c *AreaCreate) AddStationIDs(ids ...uint64) *AreaCreate {
	_c.mutation.AddStationIDs(ids...)
	return _c
}

// AddStations adds the "stations" edges to the Station entity.
func (_c *AreaCreate) AddStations(v ...*Station) *AreaCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStationIDs(ids...)
}

// AddSubwayIDs adds the "subways" edge to the Subway entity by IDs.
func (_c *AreaCreate) AddSubwayIDs(ids ...uint64) *AreaCreate {
	_c.mutation.AddSubwayIDs(ids...)
	return _c
}

// AddSubways adds the "subways" edges to the Subway entity.
func (_c *AreaCreate) AddSubways(v ...*Subway) *AreaCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubwayIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (_c *AreaCreate) Mutation() *AreaMutation {
	return _c.mutation
}

// Save creates the Area in the database.
func (_c *AreaCreate) Save(ctx context.Context) (*Area, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AreaCreate) SaveX(ctx context.Context) *Area {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AreaCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AreaCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AreaCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if area.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized area.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := area.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if area.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized area.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := area.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *AreaCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Area.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Area.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Area.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Area.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Area.level"`)}
	}
	if v, ok := _c.mutation.Level(); ok {
		if err := area.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Area.level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Depth(); !ok {
		return &ValidationError{Name: "depth", err: errors.New(`ent: missing required field "Area.depth"`)}
	}
	if v, ok := _c.mutation.Depth(); ok {
		if err := area.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Area.depth": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Area.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := area.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Area.code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Area.latitude"`)}
	}
	if _, ok := _c.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Area.longitude"`)}
	}
	if v, ok := _c.mutation.Color(); ok {
		if err := area.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Area.color": %w`, err)}
		}
	}
	return nil
}

func (_c *AreaCreate) sqlSave(ctx context.Context) (*Area, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AreaCreate) createSpec() (*Area, *sqlgraph.CreateSpec) {
	var (
		_node = &Area{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(area.Table, sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(area.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(area.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(area.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(area.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(area.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(area.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(area.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.Depth(); ok {
		_spec.SetField(area.FieldDepth, field.TypeInt, value)
		_node.Depth = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(area.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Latitude(); ok {
		_spec.SetField(area.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := _c.mutation.Longitude(); ok {
		_spec.SetField(area.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(area.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AreaCreateBulk is the builder for creating many Area entities in bulk.
type AreaCreateBulk struct {
	config
	err      error
	builders []*AreaCreate
}

// Save creates the Area entities in the database.
func (_c *AreaCreateBulk) Save(ctx context.Context) ([]*Area, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Area, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AreaCreateBulk) SaveX(ctx context.Context) []*Area {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AreaCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AreaCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
