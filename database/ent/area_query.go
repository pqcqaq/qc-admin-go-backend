// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"go-backend/database/ent/address"
	"go-backend/database/ent/area"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaQuery is the builder for querying Area entities.
type AreaQuery struct {
	config
	ctx                *QueryContext
	order              []area.OrderOption
	inters             []Interceptor
	predicates         []predicate.Area
	withChildren       *AreaQuery
	withParent         *AreaQuery
	withAddresses      *AddressQuery
	withStations       *StationQuery
	withSubways        *SubwayQuery
	modifiers          []func(*sql.Selector)
	withNamedChildren  map[string]*AreaQuery
	withNamedAddresses map[string]*AddressQuery
	withNamedStations  map[string]*StationQuery
	withNamedSubways   map[string]*SubwayQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AreaQuery builder.
func (_q *AreaQuery) Where(ps ...predicate.Area) *AreaQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *AreaQuery) Limit(limit int) *AreaQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *AreaQuery) Offset(offset int) *AreaQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *AreaQuery) Unique(unique bool) *AreaQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *AreaQuery) Order(o ...area.OrderOption) *AreaQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryChildren chains the current query on the "children" edge.
func (_q *AreaQuery) QueryChildren() *AreaQuery {
	query := (&AreaClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, selector),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, area.ChildrenTable, area.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (_q *AreaQuery) QueryParent() *AreaQuery {
	query := (&AreaClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, selector),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, area.ParentTable, area.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddresses chains the current query on the "addresses" edge.
func (_q *AreaQuery) QueryAddresses() *AddressQuery {
	query := (&AddressClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, area.AddressesTable, area.AddressesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStations chains the current query on the "stations" edge.
func (_q *AreaQuery) QueryStations() *StationQuery {
	query := (&StationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, area.StationsTable, area.StationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubways chains the current query on the "subways" edge.
func (_q *AreaQuery) QuerySubways() *SubwayQuery {
	query := (&SubwayClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, selector),
			sqlgraph.To(subway.Table, subway.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, area.SubwaysTable, area.SubwaysColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Area entity from the query.
// Returns a *NotFoundError when no Area was found.
func (_q *AreaQuery) First(ctx context.Context) (*Area, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{area.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *AreaQuery) FirstX(ctx context.Context) *Area {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Area ID from the query.
// Returns a *NotFoundError when no Area ID was found.
func (_q *AreaQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{area.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *AreaQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Area entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Area entity is found.
// Returns a *NotFoundError when no Area entities are found.
func (_q *AreaQuery) Only(ctx context.Context) (*Area, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{area.Label}
	default:
		return nil, &NotSingularError{area.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *AreaQuery) OnlyX(ctx context.Context) *Area {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Area ID in the query.
// Returns a *NotSingularError when more than one Area ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *AreaQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{area.Label}
	default:
		err = &NotSingularError{area.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *AreaQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Areas.
func (_q *AreaQuery) All(ctx context.Context) ([]*Area, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Area, *AreaQuery]()
	return withInterceptors[[]*Area](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *AreaQuery) AllX(ctx context.Context) []*Area {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Area IDs.
func (_q *AreaQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(area.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *AreaQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *AreaQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*AreaQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *AreaQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *AreaQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *AreaQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AreaQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *AreaQuery) Clone() *AreaQuery {
	if _q == nil {
		return nil
	}
	return &AreaQuery{
		config:        _q.config,
		ctx:           _q.ctx.Clone(),
		order:         append([]area.OrderOption{}, _q.order...),
		inters:        append([]Interceptor{}, _q.inters...),
		predicates:    append([]predicate.Area{}, _q.predicates...),
		withChildren:  _q.withChildren.Clone(),
		withParent:    _q.withParent.Clone(),
		withAddresses: _q.withAddresses.Clone(),
		withStations:  _q.withStations.Clone(),
		withSubways:   _q.withSubways.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithChildren(opts ...func(*AreaQuery)) *AreaQuery {
	query := (&AreaClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withChildren = query
	return _q
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithParent(opts ...func(*AreaQuery)) *AreaQuery {
	query := (&AreaClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withParent = query
	return _q
}

// WithAddresses tells the query-builder to eager-load the nodes that are connected to
// the "addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithAddresses(opts ...func(*AddressQuery)) *AreaQuery {
	query := (&AddressClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAddresses = query
	return _q
}

// WithStations tells the query-builder to eager-load the nodes that are connected to
// the "stations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithStations(opts ...func(*StationQuery)) *AreaQuery {
	query := (&StationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withStations = query
	return _q
}

// WithSubways tells the query-builder to eager-load the nodes that are connected to
// the "subways" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithSubways(opts ...func(*SubwayQuery)) *AreaQuery {
	query := (&SubwayClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubways = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Area.Query().
//		GroupBy(area.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *AreaQuery) GroupBy(field string, fields ...string) *AreaGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AreaGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = area.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Area.Query().
//		Select(area.FieldCreateTime).
//		Scan(ctx, &v)
func (_q *AreaQuery) Select(fields ...string) *AreaSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &AreaSelect{AreaQuery: _q}
	sbuild.label = area.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AreaSelect configured with the given aggregations.
func (_q *AreaQuery) Aggregate(fns ...AggregateFunc) *AreaSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *AreaQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !area.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *AreaQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Area, error) {
	var (
		nodes       = []*Area{}
		_spec       = _q.querySpec()
		loadedTypes = [5]bool{
			_q.withChildren != nil,
			_q.withParent != nil,
			_q.withAddresses != nil,
			_q.withStations != nil,
			_q.withSubways != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Area).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Area{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withChildren; query != nil {
		if err := _q.loadChildren(ctx, query, nodes,
			func(n *Area) { n.Edges.Children = []*Area{} },
			func(n *Area, e *Area) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withParent; query != nil {
		if err := _q.loadParent(ctx, query, nodes, nil,
			func(n *Area, e *Area) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAddresses; query != nil {
		if err := _q.loadAddresses(ctx, query, nodes,
			func(n *Area) { n.Edges.Addresses = []*Address{} },
			func(n *Area, e *Address) { n.Edges.Addresses = append(n.Edges.Addresses, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withStations; query != nil {
		if err := _q.loadStations(ctx, query, nodes,
			func(n *Area) { n.Edges.Stations = []*Station{} },
			func(n *Area, e *Station) { n.Edges.Stations = append(n.Edges.Stations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubways; query != nil {
		if err := _q.loadSubways(ctx, query, nodes,
			func(n *Area) { n.Edges.Subways = []*Subway{} },
			func(n *Area, e *Subway) { n.Edges.Subways = append(n.Edges.Subways, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedChildren {
		if err := _q.loadChildren(ctx, query, nodes,
			func(n *Area) { n.appendNamedChildren(name) },
			func(n *Area, e *Area) { n.appendNamedChildren(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAddresses {
		if err := _q.loadAddresses(ctx, query, nodes,
			func(n *Area) { n.appendNamedAddresses(name) },
			func(n *Area, e *Address) { n.appendNamedAddresses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedStations {
		if err := _q.loadStations(ctx, query, nodes,
			func(n *Area) { n.appendNamedStations(name) },
			func(n *Area, e *Station) { n.appendNamedStations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubways {
		if err := _q.loadSubways(ctx, query, nodes,
			func(n *Area) { n.appendNamedSubways(name) },
			func(n *Area, e *Subway) { n.appendNamedSubways(name, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *AreaQuery) loadChildren(ctx context.Context, query *AreaQuery, nodes []*Area, init func(*Area), assign func(*Area, *Area)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Area)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(area.FieldParentID)
	}
	query.Where(predicate.Area(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(area.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AreaQuery) loadParent(ctx context.Context, query *AreaQuery, nodes []*Area, init func(*Area), assign func(*Area, *Area)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Area)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(area.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *AreaQuery) loadAddresses(ctx context.Context, query *AddressQuery, nodes []*Area, init func(*Area), assign func(*Area, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Area)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(address.FieldAreaID)
	}
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(area.AddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AreaQuery) loadStations(ctx context.Context, query *StationQuery, nodes []*Area, init func(*Area), assign func(*Area, *Station)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Area)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(station.FieldAreaID)
	}
	query.Where(predicate.Station(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(area.StationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AreaQuery) loadSubways(ctx context.Context, query *SubwayQuery, nodes []*Area, init func(*Area), assign func(*Area, *Subway)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Area)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subway.FieldAreaID)
	}
	query.Where(predicate.Subway(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(area.SubwaysColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *AreaQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *AreaQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, area.FieldID)
		for i := range fields {
			if fields[i] != area.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withParent != nil {
			_spec.Node.AddColumnOnce(area.FieldParentID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *AreaQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(area.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = area.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (_q *AreaQuery) ForUpdate(opts ...sql.LockOption) *AreaQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return _q
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (_q *AreaQuery) ForShare(opts ...sql.LockOption) *AreaQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return _q
}

// WithNamedChildren tells the query-builder to eager-load the nodes that are connected to the "children"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithNamedChildren(name string, opts ...func(*AreaQuery)) *AreaQuery {
	query := (&AreaClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedChildren == nil {
		_q.withNamedChildren = make(map[string]*AreaQuery)
	}
	_q.withNamedChildren[name] = query
	return _q
}

// WithNamedAddresses tells the query-builder to eager-load the nodes that are connected to the "addresses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithNamedAddresses(name string, opts ...func(*AddressQuery)) *AreaQuery {
	query := (&AddressClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAddresses == nil {
		_q.withNamedAddresses = make(map[string]*AddressQuery)
	}
	_q.withNamedAddresses[name] = query
	return _q
}

// WithNamedStations tells the query-builder to eager-load the nodes that are connected to the "stations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithNamedStations(name string, opts ...func(*StationQuery)) *AreaQuery {
	query := (&StationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedStations == nil {
		_q.withNamedStations = make(map[string]*StationQuery)
	}
	_q.withNamedStations[name] = query
	return _q
}

// WithNamedSubways tells the query-builder to eager-load the nodes that are connected to the "subways"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AreaQuery) WithNamedSubways(name string, opts ...func(*SubwayQuery)) *AreaQuery {
	query := (&SubwayClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubways == nil {
		_q.withNamedSubways = make(map[string]*SubwayQuery)
	}
	_q.withNamedSubways[name] = query
	return _q
}

// AreaGroupBy is the group-by builder for Area entities.
type AreaGroupBy struct {
	selector
	build *AreaQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *AreaGroupBy) Aggregate(fns ...AggregateFunc) *AreaGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *AreaGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AreaQuery, *AreaGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *AreaGroupBy) sqlScan(ctx context.Context, root *AreaQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AreaSelect is the builder for selecting fields of Area entities.
type AreaSelect struct {
	*AreaQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *AreaSelect) Aggregate(fns ...AggregateFunc) *AreaSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *AreaSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AreaQuery, *AreaSelect](ctx, _s.AreaQuery, _s, _s.inters, v)
}

func (_s *AreaSelect) sqlScan(ctx context.Context, root *AreaQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
