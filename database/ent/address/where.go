// Code generated by ent, DO NOT EDIT.

package address

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDeleteBy, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDetail, v))
}

// AreaID applies equality check predicate on the "area_id" field. It's identical to AreaIDEQ.
func AreaID(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAreaID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhone, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldName, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsDefault, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldRemark, v))
}

// Entity applies equality check predicate on the "entity" field. It's identical to EntityEQ.
func Entity(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEntity, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEntityID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldDeleteBy))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldDetail, v))
}

// AreaIDEQ applies the EQ predicate on the "area_id" field.
func AreaIDEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAreaID, v))
}

// AreaIDNEQ applies the NEQ predicate on the "area_id" field.
func AreaIDNEQ(v uint64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAreaID, v))
}

// AreaIDIn applies the In predicate on the "area_id" field.
func AreaIDIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAreaID, vs...))
}

// AreaIDNotIn applies the NotIn predicate on the "area_id" field.
func AreaIDNotIn(vs ...uint64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAreaID, vs...))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldPhone, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldName, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldIsDefault, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldRemark, v))
}

// EntityEQ applies the EQ predicate on the "entity" field.
func EntityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEntity, v))
}

// EntityNEQ applies the NEQ predicate on the "entity" field.
func EntityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldEntity, v))
}

// EntityIn applies the In predicate on the "entity" field.
func EntityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldEntity, vs...))
}

// EntityNotIn applies the NotIn predicate on the "entity" field.
func EntityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldEntity, vs...))
}

// EntityGT applies the GT predicate on the "entity" field.
func EntityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldEntity, v))
}

// EntityGTE applies the GTE predicate on the "entity" field.
func EntityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldEntity, v))
}

// EntityLT applies the LT predicate on the "entity" field.
func EntityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldEntity, v))
}

// EntityLTE applies the LTE predicate on the "entity" field.
func EntityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldEntity, v))
}

// EntityContains applies the Contains predicate on the "entity" field.
func EntityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldEntity, v))
}

// EntityHasPrefix applies the HasPrefix predicate on the "entity" field.
func EntityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldEntity, v))
}

// EntityHasSuffix applies the HasSuffix predicate on the "entity" field.
func EntityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldEntity, v))
}

// EntityIsNil applies the IsNil predicate on the "entity" field.
func EntityIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldEntity))
}

// EntityNotNil applies the NotNil predicate on the "entity" field.
func EntityNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldEntity))
}

// EntityEqualFold applies the EqualFold predicate on the "entity" field.
func EntityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldEntity, v))
}

// EntityContainsFold applies the ContainsFold predicate on the "entity" field.
func EntityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldEntity, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldEntityID, v))
}

// EntityIDContains applies the Contains predicate on the "entity_id" field.
func EntityIDContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldEntityID, v))
}

// EntityIDHasPrefix applies the HasPrefix predicate on the "entity_id" field.
func EntityIDHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldEntityID, v))
}

// EntityIDHasSuffix applies the HasSuffix predicate on the "entity_id" field.
func EntityIDHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldEntityID, v))
}

// EntityIDIsNil applies the IsNil predicate on the "entity_id" field.
func EntityIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldEntityID))
}

// EntityIDNotNil applies the NotNil predicate on the "entity_id" field.
func EntityIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldEntityID))
}

// EntityIDEqualFold applies the EqualFold predicate on the "entity_id" field.
func EntityIDEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldEntityID, v))
}

// EntityIDContainsFold applies the ContainsFold predicate on the "entity_id" field.
func EntityIDContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldEntityID, v))
}

// HasArea applies the HasEdge predicate on the "area" edge.
func HasArea() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AreaTable, AreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaWith applies the HasEdge predicate on the "area" edge with a given conditions (other predicates).
func HasAreaWith(preds ...predicate.Area) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
