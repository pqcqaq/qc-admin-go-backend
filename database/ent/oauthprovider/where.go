// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDeleteBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldName, v))
}

// AuthorizationEndpoint applies equality check predicate on the "authorization_endpoint" field. It's identical to AuthorizationEndpointEQ.
func AuthorizationEndpoint(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthorizationEndpoint, v))
}

// TokenEndpoint applies equality check predicate on the "token_endpoint" field. It's identical to TokenEndpointEQ.
func TokenEndpoint(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTokenEndpoint, v))
}

// UserInfoEndpoint applies equality check predicate on the "user_info_endpoint" field. It's identical to UserInfoEndpointEQ.
func UserInfoEndpoint(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUserInfoEndpoint, v))
}

// RevokeEndpoint applies equality check predicate on the "revoke_endpoint" field. It's identical to RevokeEndpointEQ.
func RevokeEndpoint(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRevokeEndpoint, v))
}

// RefreshEndpoint applies equality check predicate on the "refresh_endpoint" field. It's identical to RefreshEndpointEQ.
func RefreshEndpoint(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRefreshEndpoint, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// AutoRegister applies equality check predicate on the "auto_register" field. It's identical to AutoRegisterEQ.
func AutoRegister(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAutoRegister, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldDeleteBy))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldName, v))
}

// AuthorizationEndpointEQ applies the EQ predicate on the "authorization_endpoint" field.
func AuthorizationEndpointEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointNEQ applies the NEQ predicate on the "authorization_endpoint" field.
func AuthorizationEndpointNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointIn applies the In predicate on the "authorization_endpoint" field.
func AuthorizationEndpointIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldAuthorizationEndpoint, vs...))
}

// AuthorizationEndpointNotIn applies the NotIn predicate on the "authorization_endpoint" field.
func AuthorizationEndpointNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldAuthorizationEndpoint, vs...))
}

// AuthorizationEndpointGT applies the GT predicate on the "authorization_endpoint" field.
func AuthorizationEndpointGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointGTE applies the GTE predicate on the "authorization_endpoint" field.
func AuthorizationEndpointGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointLT applies the LT predicate on the "authorization_endpoint" field.
func AuthorizationEndpointLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointLTE applies the LTE predicate on the "authorization_endpoint" field.
func AuthorizationEndpointLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointContains applies the Contains predicate on the "authorization_endpoint" field.
func AuthorizationEndpointContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointHasPrefix applies the HasPrefix predicate on the "authorization_endpoint" field.
func AuthorizationEndpointHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointHasSuffix applies the HasSuffix predicate on the "authorization_endpoint" field.
func AuthorizationEndpointHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointEqualFold applies the EqualFold predicate on the "authorization_endpoint" field.
func AuthorizationEndpointEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointContainsFold applies the ContainsFold predicate on the "authorization_endpoint" field.
func AuthorizationEndpointContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldAuthorizationEndpoint, v))
}

// TokenEndpointEQ applies the EQ predicate on the "token_endpoint" field.
func TokenEndpointEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTokenEndpoint, v))
}

// TokenEndpointNEQ applies the NEQ predicate on the "token_endpoint" field.
func TokenEndpointNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldTokenEndpoint, v))
}

// TokenEndpointIn applies the In predicate on the "token_endpoint" field.
func TokenEndpointIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldTokenEndpoint, vs...))
}

// TokenEndpointNotIn applies the NotIn predicate on the "token_endpoint" field.
func TokenEndpointNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldTokenEndpoint, vs...))
}

// TokenEndpointGT applies the GT predicate on the "token_endpoint" field.
func TokenEndpointGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldTokenEndpoint, v))
}

// TokenEndpointGTE applies the GTE predicate on the "token_endpoint" field.
func TokenEndpointGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldTokenEndpoint, v))
}

// TokenEndpointLT applies the LT predicate on the "token_endpoint" field.
func TokenEndpointLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldTokenEndpoint, v))
}

// TokenEndpointLTE applies the LTE predicate on the "token_endpoint" field.
func TokenEndpointLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldTokenEndpoint, v))
}

// TokenEndpointContains applies the Contains predicate on the "token_endpoint" field.
func TokenEndpointContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldTokenEndpoint, v))
}

// TokenEndpointHasPrefix applies the HasPrefix predicate on the "token_endpoint" field.
func TokenEndpointHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldTokenEndpoint, v))
}

// TokenEndpointHasSuffix applies the HasSuffix predicate on the "token_endpoint" field.
func TokenEndpointHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldTokenEndpoint, v))
}

// TokenEndpointEqualFold applies the EqualFold predicate on the "token_endpoint" field.
func TokenEndpointEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldTokenEndpoint, v))
}

// TokenEndpointContainsFold applies the ContainsFold predicate on the "token_endpoint" field.
func TokenEndpointContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldTokenEndpoint, v))
}

// UserInfoEndpointEQ applies the EQ predicate on the "user_info_endpoint" field.
func UserInfoEndpointEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointNEQ applies the NEQ predicate on the "user_info_endpoint" field.
func UserInfoEndpointNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointIn applies the In predicate on the "user_info_endpoint" field.
func UserInfoEndpointIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldUserInfoEndpoint, vs...))
}

// UserInfoEndpointNotIn applies the NotIn predicate on the "user_info_endpoint" field.
func UserInfoEndpointNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldUserInfoEndpoint, vs...))
}

// UserInfoEndpointGT applies the GT predicate on the "user_info_endpoint" field.
func UserInfoEndpointGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointGTE applies the GTE predicate on the "user_info_endpoint" field.
func UserInfoEndpointGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointLT applies the LT predicate on the "user_info_endpoint" field.
func UserInfoEndpointLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointLTE applies the LTE predicate on the "user_info_endpoint" field.
func UserInfoEndpointLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointContains applies the Contains predicate on the "user_info_endpoint" field.
func UserInfoEndpointContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointHasPrefix applies the HasPrefix predicate on the "user_info_endpoint" field.
func UserInfoEndpointHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointHasSuffix applies the HasSuffix predicate on the "user_info_endpoint" field.
func UserInfoEndpointHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointEqualFold applies the EqualFold predicate on the "user_info_endpoint" field.
func UserInfoEndpointEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldUserInfoEndpoint, v))
}

// UserInfoEndpointContainsFold applies the ContainsFold predicate on the "user_info_endpoint" field.
func UserInfoEndpointContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldUserInfoEndpoint, v))
}

// RevokeEndpointEQ applies the EQ predicate on the "revoke_endpoint" field.
func RevokeEndpointEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRevokeEndpoint, v))
}

// RevokeEndpointNEQ applies the NEQ predicate on the "revoke_endpoint" field.
func RevokeEndpointNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldRevokeEndpoint, v))
}

// RevokeEndpointIn applies the In predicate on the "revoke_endpoint" field.
func RevokeEndpointIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldRevokeEndpoint, vs...))
}

// RevokeEndpointNotIn applies the NotIn predicate on the "revoke_endpoint" field.
func RevokeEndpointNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldRevokeEndpoint, vs...))
}

// RevokeEndpointGT applies the GT predicate on the "revoke_endpoint" field.
func RevokeEndpointGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldRevokeEndpoint, v))
}

// RevokeEndpointGTE applies the GTE predicate on the "revoke_endpoint" field.
func RevokeEndpointGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldRevokeEndpoint, v))
}

// RevokeEndpointLT applies the LT predicate on the "revoke_endpoint" field.
func RevokeEndpointLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldRevokeEndpoint, v))
}

// RevokeEndpointLTE applies the LTE predicate on the "revoke_endpoint" field.
func RevokeEndpointLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldRevokeEndpoint, v))
}

// RevokeEndpointContains applies the Contains predicate on the "revoke_endpoint" field.
func RevokeEndpointContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldRevokeEndpoint, v))
}

// RevokeEndpointHasPrefix applies the HasPrefix predicate on the "revoke_endpoint" field.
func RevokeEndpointHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldRevokeEndpoint, v))
}

// RevokeEndpointHasSuffix applies the HasSuffix predicate on the "revoke_endpoint" field.
func RevokeEndpointHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldRevokeEndpoint, v))
}

// RevokeEndpointIsNil applies the IsNil predicate on the "revoke_endpoint" field.
func RevokeEndpointIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldRevokeEndpoint))
}

// RevokeEndpointNotNil applies the NotNil predicate on the "revoke_endpoint" field.
func RevokeEndpointNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldRevokeEndpoint))
}

// RevokeEndpointEqualFold applies the EqualFold predicate on the "revoke_endpoint" field.
func RevokeEndpointEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldRevokeEndpoint, v))
}

// RevokeEndpointContainsFold applies the ContainsFold predicate on the "revoke_endpoint" field.
func RevokeEndpointContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldRevokeEndpoint, v))
}

// RefreshEndpointEQ applies the EQ predicate on the "refresh_endpoint" field.
func RefreshEndpointEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRefreshEndpoint, v))
}

// RefreshEndpointNEQ applies the NEQ predicate on the "refresh_endpoint" field.
func RefreshEndpointNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldRefreshEndpoint, v))
}

// RefreshEndpointIn applies the In predicate on the "refresh_endpoint" field.
func RefreshEndpointIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldRefreshEndpoint, vs...))
}

// RefreshEndpointNotIn applies the NotIn predicate on the "refresh_endpoint" field.
func RefreshEndpointNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldRefreshEndpoint, vs...))
}

// RefreshEndpointGT applies the GT predicate on the "refresh_endpoint" field.
func RefreshEndpointGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldRefreshEndpoint, v))
}

// RefreshEndpointGTE applies the GTE predicate on the "refresh_endpoint" field.
func RefreshEndpointGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldRefreshEndpoint, v))
}

// RefreshEndpointLT applies the LT predicate on the "refresh_endpoint" field.
func RefreshEndpointLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldRefreshEndpoint, v))
}

// RefreshEndpointLTE applies the LTE predicate on the "refresh_endpoint" field.
func RefreshEndpointLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldRefreshEndpoint, v))
}

// RefreshEndpointContains applies the Contains predicate on the "refresh_endpoint" field.
func RefreshEndpointContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldRefreshEndpoint, v))
}

// RefreshEndpointHasPrefix applies the HasPrefix predicate on the "refresh_endpoint" field.
func RefreshEndpointHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldRefreshEndpoint, v))
}

// RefreshEndpointHasSuffix applies the HasSuffix predicate on the "refresh_endpoint" field.
func RefreshEndpointHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldRefreshEndpoint, v))
}

// RefreshEndpointIsNil applies the IsNil predicate on the "refresh_endpoint" field.
func RefreshEndpointIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldRefreshEndpoint))
}

// RefreshEndpointNotNil applies the NotNil predicate on the "refresh_endpoint" field.
func RefreshEndpointNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldRefreshEndpoint))
}

// RefreshEndpointEqualFold applies the EqualFold predicate on the "refresh_endpoint" field.
func RefreshEndpointEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldRefreshEndpoint, v))
}

// RefreshEndpointContainsFold applies the ContainsFold predicate on the "refresh_endpoint" field.
func RefreshEndpointContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldRefreshEndpoint, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldClientSecret, v))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldRedirectURI, v))
}

// ScopesIsNil applies the IsNil predicate on the "scopes" field.
func ScopesIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldScopes))
}

// ScopesNotNil applies the NotNil predicate on the "scopes" field.
func ScopesNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldScopes))
}

// AutoRegisterEQ applies the EQ predicate on the "auto_register" field.
func AutoRegisterEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAutoRegister, v))
}

// AutoRegisterNEQ applies the NEQ predicate on the "auto_register" field.
func AutoRegisterNEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldAutoRegister, v))
}

// AbleStateEQ applies the EQ predicate on the "able_state" field.
func AbleStateEQ(v AbleState) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAbleState, v))
}

// AbleStateNEQ applies the NEQ predicate on the "able_state" field.
func AbleStateNEQ(v AbleState) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldAbleState, v))
}

// AbleStateIn applies the In predicate on the "able_state" field.
func AbleStateIn(vs ...AbleState) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldAbleState, vs...))
}

// AbleStateNotIn applies the NotIn predicate on the "able_state" field.
func AbleStateNotIn(vs ...AbleState) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldAbleState, vs...))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldMetadata))
}

// HasStates applies the HasEdge predicate on the "states" edge.
func HasStates() predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatesTable, StatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatesWith applies the HasEdge predicate on the "states" edge with a given conditions (other predicates).
func HasStatesWith(preds ...predicate.OauthState) predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := newStatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthUsers applies the HasEdge predicate on the "oauth_users" edge.
func HasOauthUsers() predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthUsersTable, OauthUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthUsersWith applies the HasEdge predicate on the "oauth_users" edge with a given conditions (other predicates).
func HasOauthUsersWith(preds ...predicate.OauthUser) predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := newOauthUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.NotPredicates(p))
}
