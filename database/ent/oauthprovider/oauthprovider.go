// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthprovider type in the database.
	Label = "oauth_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthorizationEndpoint holds the string denoting the authorization_endpoint field in the database.
	FieldAuthorizationEndpoint = "authorization_endpoint"
	// FieldTokenEndpoint holds the string denoting the token_endpoint field in the database.
	FieldTokenEndpoint = "token_endpoint"
	// FieldUserInfoEndpoint holds the string denoting the user_info_endpoint field in the database.
	FieldUserInfoEndpoint = "user_info_endpoint"
	// FieldRevokeEndpoint holds the string denoting the revoke_endpoint field in the database.
	FieldRevokeEndpoint = "revoke_endpoint"
	// FieldRefreshEndpoint holds the string denoting the refresh_endpoint field in the database.
	FieldRefreshEndpoint = "refresh_endpoint"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldAutoRegister holds the string denoting the auto_register field in the database.
	FieldAutoRegister = "auto_register"
	// FieldAbleState holds the string denoting the able_state field in the database.
	FieldAbleState = "able_state"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeStates holds the string denoting the states edge name in mutations.
	EdgeStates = "states"
	// EdgeOauthUsers holds the string denoting the oauth_users edge name in mutations.
	EdgeOauthUsers = "oauth_users"
	// Table holds the table name of the oauthprovider in the database.
	Table = "oauth_providers"
	// StatesTable is the table that holds the states relation/edge.
	StatesTable = "oauth_states"
	// StatesInverseTable is the table name for the OauthState entity.
	// It exists in this package in order to avoid circular dependency with the "oauthstate" package.
	StatesInverseTable = "oauth_states"
	// StatesColumn is the table column denoting the states relation/edge.
	StatesColumn = "provider_id"
	// OauthUsersTable is the table that holds the oauth_users relation/edge.
	OauthUsersTable = "oauth_users"
	// OauthUsersInverseTable is the table name for the OauthUser entity.
	// It exists in this package in order to avoid circular dependency with the "oauthuser" package.
	OauthUsersInverseTable = "oauth_users"
	// OauthUsersColumn is the table column denoting the oauth_users relation/edge.
	OauthUsersColumn = "provider_id"
)

// Columns holds all SQL columns for oauthprovider fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldType,
	FieldName,
	FieldAuthorizationEndpoint,
	FieldTokenEndpoint,
	FieldUserInfoEndpoint,
	FieldRevokeEndpoint,
	FieldRefreshEndpoint,
	FieldClientID,
	FieldClientSecret,
	FieldRedirectURI,
	FieldScopes,
	FieldAutoRegister,
	FieldAbleState,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AuthorizationEndpointValidator is a validator for the "authorization_endpoint" field. It is called by the builders before save.
	AuthorizationEndpointValidator func(string) error
	// TokenEndpointValidator is a validator for the "token_endpoint" field. It is called by the builders before save.
	TokenEndpointValidator func(string) error
	// UserInfoEndpointValidator is a validator for the "user_info_endpoint" field. It is called by the builders before save.
	UserInfoEndpointValidator func(string) error
	// RevokeEndpointValidator is a validator for the "revoke_endpoint" field. It is called by the builders before save.
	RevokeEndpointValidator func(string) error
	// RefreshEndpointValidator is a validator for the "refresh_endpoint" field. It is called by the builders before save.
	RefreshEndpointValidator func(string) error
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// RedirectURIValidator is a validator for the "redirect_uri" field. It is called by the builders before save.
	RedirectURIValidator func(string) error
	// DefaultAutoRegister holds the default value on creation for the "auto_register" field.
	DefaultAutoRegister bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeOak       Type = "oak"
	TypeGitea     Type = "gitea"
	TypeGithub    Type = "github"
	TypeGoogle    Type = "google"
	TypeGitlab    Type = "gitlab"
	TypeMicrosoft Type = "microsoft"
	TypeWeixin    Type = "weixin"
	TypeCustom    Type = "custom"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeOak, TypeGitea, TypeGithub, TypeGoogle, TypeGitlab, TypeMicrosoft, TypeWeixin, TypeCustom:
		return nil
	default:
		return fmt.Errorf("oauthprovider: invalid enum value for type field: %q", _type)
	}
}

// AbleState defines the type for the "able_state" enum field.
type AbleState string

// AbleStateEnabled is the default value of the AbleState enum.
const DefaultAbleState = AbleStateEnabled

// AbleState values.
const (
	AbleStateEnabled  AbleState = "enabled"
	AbleStateDisabled AbleState = "disabled"
)

func (as AbleState) String() string {
	return string(as)
}

// AbleStateValidator is a validator for the "able_state" field enum values. It is called by the builders before save.
func AbleStateValidator(as AbleState) error {
	switch as {
	case AbleStateEnabled, AbleStateDisabled:
		return nil
	default:
		return fmt.Errorf("oauthprovider: invalid enum value for able_state field: %q", as)
	}
}

// OrderOption defines the ordering options for the OauthProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAuthorizationEndpoint orders the results by the authorization_endpoint field.
func ByAuthorizationEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorizationEndpoint, opts...).ToFunc()
}

// ByTokenEndpoint orders the results by the token_endpoint field.
func ByTokenEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenEndpoint, opts...).ToFunc()
}

// ByUserInfoEndpoint orders the results by the user_info_endpoint field.
func ByUserInfoEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserInfoEndpoint, opts...).ToFunc()
}

// ByRevokeEndpoint orders the results by the revoke_endpoint field.
func ByRevokeEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevokeEndpoint, opts...).ToFunc()
}

// ByRefreshEndpoint orders the results by the refresh_endpoint field.
func ByRefreshEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshEndpoint, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByAutoRegister orders the results by the auto_register field.
func ByAutoRegister(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoRegister, opts...).ToFunc()
}

// ByAbleState orders the results by the able_state field.
func ByAbleState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbleState, opts...).ToFunc()
}

// ByStatesCount orders the results by states count.
func ByStatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatesStep(), opts...)
	}
}

// ByStates orders the results by states terms.
func ByStates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthUsersCount orders the results by oauth_users count.
func ByOauthUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthUsersStep(), opts...)
	}
}

// ByOauthUsers orders the results by oauth_users terms.
func ByOauthUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatesTable, StatesColumn),
	)
}
func newOauthUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthUsersTable, OauthUsersColumn),
	)
}
