// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflownode"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowNode is the model entity for the WorkflowNode schema.
type WorkflowNode struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 节点名称
	Name string `json:"name,omitempty"`
	// 节点唯一标识符
	NodeKey string `json:"node_key,omitempty"`
	// 节点类型
	Type workflownode.Type `json:"type,omitempty"`
	// 节点描述
	Description string `json:"description,omitempty"`
	// 节点提示词
	Prompt string `json:"prompt,omitempty"`
	// 节点配置
	Config map[string]interface{} `json:"config,omitempty"`
	// 所属工作流应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 处理器语言
	ProcessorLanguage string `json:"processor_language,omitempty"`
	// 代码处理器
	ProcessorCode string `json:"processor_code,omitempty"`
	// 下一个节点ID
	NextNodeID uint64 `json:"next_node_id,omitempty"`
	// 父节点ID
	ParentNodeID uint64 `json:"parent_node_id,omitempty"`
	// 分支配置映射（存储完整的分支配置：name, condition, handlerId, targetNodeId）
	BranchNodes map[string]interface{} `json:"branch_nodes,omitempty"`
	// 并行执行配置
	ParallelConfig map[string]interface{} `json:"parallel_config,omitempty"`
	// API调用配置
	APIConfig map[string]interface{} `json:"api_config,omitempty"`
	// 是否异步执行
	Async bool `json:"async,omitempty"`
	// 超时时间(秒)
	Timeout int `json:"timeout,omitempty"`
	// 重试次数
	RetryCount int `json:"retry_count,omitempty"`
	// 画布X坐标
	PositionX float64 `json:"position_x,omitempty"`
	// 画布Y坐标
	PositionY float64 `json:"position_y,omitempty"`
	// 节点颜色
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowNodeQuery when eager-loading is set.
	Edges        WorkflowNodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowNodeEdges holds the relations/edges for other nodes in the graph.
type WorkflowNodeEdges struct {
	// Application holds the value of the application edge.
	Application *WorkflowApplication `json:"application,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*WorkflowNodeExecution `json:"executions,omitempty"`
	// OutgoingEdges holds the value of the outgoing_edges edge.
	OutgoingEdges []*WorkflowEdge `json:"outgoing_edges,omitempty"`
	// IncomingEdges holds the value of the incoming_edges edge.
	IncomingEdges []*WorkflowEdge `json:"incoming_edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes        [4]bool
	namedExecutions    map[string][]*WorkflowNodeExecution
	namedOutgoingEdges map[string][]*WorkflowEdge
	namedIncomingEdges map[string][]*WorkflowEdge
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowNodeEdges) ApplicationOrErr() (*WorkflowApplication, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowapplication.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowNodeEdges) ExecutionsOrErr() ([]*WorkflowNodeExecution, error) {
	if e.loadedTypes[1] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// OutgoingEdgesOrErr returns the OutgoingEdges value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowNodeEdges) OutgoingEdgesOrErr() ([]*WorkflowEdge, error) {
	if e.loadedTypes[2] {
		return e.OutgoingEdges, nil
	}
	return nil, &NotLoadedError{edge: "outgoing_edges"}
}

// IncomingEdgesOrErr returns the IncomingEdges value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowNodeEdges) IncomingEdgesOrErr() ([]*WorkflowEdge, error) {
	if e.loadedTypes[3] {
		return e.IncomingEdges, nil
	}
	return nil, &NotLoadedError{edge: "incoming_edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflownode.FieldConfig, workflownode.FieldBranchNodes, workflownode.FieldParallelConfig, workflownode.FieldAPIConfig:
			values[i] = new([]byte)
		case workflownode.FieldAsync:
			values[i] = new(sql.NullBool)
		case workflownode.FieldPositionX, workflownode.FieldPositionY:
			values[i] = new(sql.NullFloat64)
		case workflownode.FieldID, workflownode.FieldCreateBy, workflownode.FieldUpdateBy, workflownode.FieldDeleteBy, workflownode.FieldApplicationID, workflownode.FieldNextNodeID, workflownode.FieldParentNodeID, workflownode.FieldTimeout, workflownode.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case workflownode.FieldName, workflownode.FieldNodeKey, workflownode.FieldType, workflownode.FieldDescription, workflownode.FieldPrompt, workflownode.FieldProcessorLanguage, workflownode.FieldProcessorCode, workflownode.FieldColor:
			values[i] = new(sql.NullString)
		case workflownode.FieldCreateTime, workflownode.FieldUpdateTime, workflownode.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowNode fields.
func (_m *WorkflowNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflownode.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflownode.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflownode.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflownode.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflownode.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflownode.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case workflownode.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case workflownode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case workflownode.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				_m.NodeKey = value.String
			}
		case workflownode.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = workflownode.Type(value.String)
			}
		case workflownode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case workflownode.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				_m.Prompt = value.String
			}
		case workflownode.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case workflownode.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case workflownode.FieldProcessorLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processor_language", values[i])
			} else if value.Valid {
				_m.ProcessorLanguage = value.String
			}
		case workflownode.FieldProcessorCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processor_code", values[i])
			} else if value.Valid {
				_m.ProcessorCode = value.String
			}
		case workflownode.FieldNextNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_node_id", values[i])
			} else if value.Valid {
				_m.NextNodeID = uint64(value.Int64)
			}
		case workflownode.FieldParentNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_node_id", values[i])
			} else if value.Valid {
				_m.ParentNodeID = uint64(value.Int64)
			}
		case workflownode.FieldBranchNodes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field branch_nodes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.BranchNodes); err != nil {
					return fmt.Errorf("unmarshal field branch_nodes: %w", err)
				}
			}
		case workflownode.FieldParallelConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parallel_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ParallelConfig); err != nil {
					return fmt.Errorf("unmarshal field parallel_config: %w", err)
				}
			}
		case workflownode.FieldAPIConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field api_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.APIConfig); err != nil {
					return fmt.Errorf("unmarshal field api_config: %w", err)
				}
			}
		case workflownode.FieldAsync:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field async", values[i])
			} else if value.Valid {
				_m.Async = value.Bool
			}
		case workflownode.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				_m.Timeout = int(value.Int64)
			}
		case workflownode.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				_m.RetryCount = int(value.Int64)
			}
		case workflownode.FieldPositionX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field position_x", values[i])
			} else if value.Valid {
				_m.PositionX = value.Float64
			}
		case workflownode.FieldPositionY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field position_y", values[i])
			} else if value.Valid {
				_m.PositionY = value.Float64
			}
		case workflownode.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowNode.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowNode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the WorkflowNode entity.
func (_m *WorkflowNode) QueryApplication() *WorkflowApplicationQuery {
	return NewWorkflowNodeClient(_m.config).QueryApplication(_m)
}

// QueryExecutions queries the "executions" edge of the WorkflowNode entity.
func (_m *WorkflowNode) QueryExecutions() *WorkflowNodeExecutionQuery {
	return NewWorkflowNodeClient(_m.config).QueryExecutions(_m)
}

// QueryOutgoingEdges queries the "outgoing_edges" edge of the WorkflowNode entity.
func (_m *WorkflowNode) QueryOutgoingEdges() *WorkflowEdgeQuery {
	return NewWorkflowNodeClient(_m.config).QueryOutgoingEdges(_m)
}

// QueryIncomingEdges queries the "incoming_edges" edge of the WorkflowNode entity.
func (_m *WorkflowNode) QueryIncomingEdges() *WorkflowEdgeQuery {
	return NewWorkflowNodeClient(_m.config).QueryIncomingEdges(_m)
}

// Update returns a builder for updating this WorkflowNode.
// Note that you need to call WorkflowNode.Unwrap() before calling this method if this WorkflowNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowNode) Update() *WorkflowNodeUpdateOne {
	return NewWorkflowNodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowNode) Unwrap() *WorkflowNode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowNode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowNode) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(_m.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(_m.Prompt)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", _m.Config))
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("processor_language=")
	builder.WriteString(_m.ProcessorLanguage)
	builder.WriteString(", ")
	builder.WriteString("processor_code=")
	builder.WriteString(_m.ProcessorCode)
	builder.WriteString(", ")
	builder.WriteString("next_node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NextNodeID))
	builder.WriteString(", ")
	builder.WriteString("parent_node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ParentNodeID))
	builder.WriteString(", ")
	builder.WriteString("branch_nodes=")
	builder.WriteString(fmt.Sprintf("%v", _m.BranchNodes))
	builder.WriteString(", ")
	builder.WriteString("parallel_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.ParallelConfig))
	builder.WriteString(", ")
	builder.WriteString("api_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.APIConfig))
	builder.WriteString(", ")
	builder.WriteString("async=")
	builder.WriteString(fmt.Sprintf("%v", _m.Async))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", _m.Timeout))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("position_x=")
	builder.WriteString(fmt.Sprintf("%v", _m.PositionX))
	builder.WriteString(", ")
	builder.WriteString("position_y=")
	builder.WriteString(fmt.Sprintf("%v", _m.PositionY))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteByte(')')
	return builder.String()
}

// NamedExecutions returns the Executions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowNode) NamedExecutions(name string) ([]*WorkflowNodeExecution, error) {
	if _m.Edges.namedExecutions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedExecutions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowNode) appendNamedExecutions(name string, edges ...*WorkflowNodeExecution) {
	if _m.Edges.namedExecutions == nil {
		_m.Edges.namedExecutions = make(map[string][]*WorkflowNodeExecution)
	}
	if len(edges) == 0 {
		_m.Edges.namedExecutions[name] = []*WorkflowNodeExecution{}
	} else {
		_m.Edges.namedExecutions[name] = append(_m.Edges.namedExecutions[name], edges...)
	}
}

// NamedOutgoingEdges returns the OutgoingEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowNode) NamedOutgoingEdges(name string) ([]*WorkflowEdge, error) {
	if _m.Edges.namedOutgoingEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOutgoingEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowNode) appendNamedOutgoingEdges(name string, edges ...*WorkflowEdge) {
	if _m.Edges.namedOutgoingEdges == nil {
		_m.Edges.namedOutgoingEdges = make(map[string][]*WorkflowEdge)
	}
	if len(edges) == 0 {
		_m.Edges.namedOutgoingEdges[name] = []*WorkflowEdge{}
	} else {
		_m.Edges.namedOutgoingEdges[name] = append(_m.Edges.namedOutgoingEdges[name], edges...)
	}
}

// NamedIncomingEdges returns the IncomingEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowNode) NamedIncomingEdges(name string) ([]*WorkflowEdge, error) {
	if _m.Edges.namedIncomingEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedIncomingEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowNode) appendNamedIncomingEdges(name string, edges ...*WorkflowEdge) {
	if _m.Edges.namedIncomingEdges == nil {
		_m.Edges.namedIncomingEdges = make(map[string][]*WorkflowEdge)
	}
	if len(edges) == 0 {
		_m.Edges.namedIncomingEdges[name] = []*WorkflowEdge{}
	} else {
		_m.Edges.namedIncomingEdges[name] = append(_m.Edges.namedIncomingEdges[name], edges...)
	}
}

// WorkflowNodes is a parsable slice of WorkflowNode.
type WorkflowNodes []*WorkflowNode
