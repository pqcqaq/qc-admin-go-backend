// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/apiauth"
	"go-backend/database/ent/permission"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APIAuthCreate is the builder for creating a APIAuth entity.
type APIAuthCreate struct {
	config
	mutation *APIAuthMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *APIAuthCreate) SetCreateTime(v time.Time) *APIAuthCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableCreateTime(v *time.Time) *APIAuthCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *APIAuthCreate) SetCreateBy(v uint64) *APIAuthCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableCreateBy(v *uint64) *APIAuthCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *APIAuthCreate) SetUpdateTime(v time.Time) *APIAuthCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableUpdateTime(v *time.Time) *APIAuthCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *APIAuthCreate) SetUpdateBy(v uint64) *APIAuthCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableUpdateBy(v *uint64) *APIAuthCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *APIAuthCreate) SetDeleteTime(v time.Time) *APIAuthCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableDeleteTime(v *time.Time) *APIAuthCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *APIAuthCreate) SetDeleteBy(v uint64) *APIAuthCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableDeleteBy(v *uint64) *APIAuthCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *APIAuthCreate) SetName(v string) *APIAuthCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *APIAuthCreate) SetDescription(v string) *APIAuthCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableDescription(v *string) *APIAuthCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetMethod sets the "method" field.
func (_c *APIAuthCreate) SetMethod(v string) *APIAuthCreate {
	_c.mutation.SetMethod(v)
	return _c
}

// SetPath sets the "path" field.
func (_c *APIAuthCreate) SetPath(v string) *APIAuthCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *APIAuthCreate) SetIsPublic(v bool) *APIAuthCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableIsPublic(v *bool) *APIAuthCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *APIAuthCreate) SetIsActive(v bool) *APIAuthCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *APIAuthCreate) SetNillableIsActive(v *bool) *APIAuthCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *APIAuthCreate) SetMetadata(v map[string]interface{}) *APIAuthCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetID sets the "id" field.
func (_c *APIAuthCreate) SetID(v uint64) *APIAuthCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_c *APIAuthCreate) AddPermissionIDs(ids ...uint64) *APIAuthCreate {
	_c.mutation.AddPermissionIDs(ids...)
	return _c
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_c *APIAuthCreate) AddPermissions(v ...*Permission) *APIAuthCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPermissionIDs(ids...)
}

// Mutation returns the APIAuthMutation object of the builder.
func (_c *APIAuthCreate) Mutation() *APIAuthMutation {
	return _c.mutation
}

// Save creates the APIAuth in the database.
func (_c *APIAuthCreate) Save(ctx context.Context) (*APIAuth, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *APIAuthCreate) SaveX(ctx context.Context) *APIAuth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *APIAuthCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *APIAuthCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *APIAuthCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if apiauth.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized apiauth.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := apiauth.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if apiauth.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized apiauth.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := apiauth.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := apiauth.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := apiauth.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *APIAuthCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "APIAuth.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "APIAuth.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "APIAuth.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := apiauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "APIAuth.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "APIAuth.method"`)}
	}
	if v, ok := _c.mutation.Method(); ok {
		if err := apiauth.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "APIAuth.method": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "APIAuth.path"`)}
	}
	if v, ok := _c.mutation.Path(); ok {
		if err := apiauth.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "APIAuth.path": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "APIAuth.is_public"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "APIAuth.is_active"`)}
	}
	return nil
}

func (_c *APIAuthCreate) sqlSave(ctx context.Context) (*APIAuth, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *APIAuthCreate) createSpec() (*APIAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &APIAuth{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(apiauth.Table, sqlgraph.NewFieldSpec(apiauth.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(apiauth.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(apiauth.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(apiauth.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(apiauth.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(apiauth.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(apiauth.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(apiauth.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(apiauth.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Method(); ok {
		_spec.SetField(apiauth.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(apiauth.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(apiauth.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(apiauth.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(apiauth.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// APIAuthCreateBulk is the builder for creating many APIAuth entities in bulk.
type APIAuthCreateBulk struct {
	config
	err      error
	builders []*APIAuthCreate
}

// Save creates the APIAuth entities in the database.
func (_c *APIAuthCreateBulk) Save(ctx context.Context) ([]*APIAuth, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*APIAuth, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *APIAuthCreateBulk) SaveX(ctx context.Context) []*APIAuth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *APIAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *APIAuthCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
