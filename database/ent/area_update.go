// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/address"
	"go-backend/database/ent/area"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaUpdate is the builder for updating Area entities.
type AreaUpdate struct {
	config
	hooks    []Hook
	mutation *AreaMutation
}

// Where appends a list predicates to the AreaUpdate builder.
func (_u *AreaUpdate) Where(ps ...predicate.Area) *AreaUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *AreaUpdate) SetCreateBy(v uint64) *AreaUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableCreateBy(v *uint64) *AreaUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AreaUpdate) AddCreateBy(v int64) *AreaUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AreaUpdate) ClearCreateBy() *AreaUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AreaUpdate) SetUpdateTime(v time.Time) *AreaUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AreaUpdate) SetUpdateBy(v uint64) *AreaUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableUpdateBy(v *uint64) *AreaUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AreaUpdate) AddUpdateBy(v int64) *AreaUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AreaUpdate) ClearUpdateBy() *AreaUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AreaUpdate) SetDeleteTime(v time.Time) *AreaUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableDeleteTime(v *time.Time) *AreaUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AreaUpdate) ClearDeleteTime() *AreaUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AreaUpdate) SetDeleteBy(v uint64) *AreaUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableDeleteBy(v *uint64) *AreaUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AreaUpdate) AddDeleteBy(v int64) *AreaUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AreaUpdate) ClearDeleteBy() *AreaUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *AreaUpdate) SetName(v string) *AreaUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableName(v *string) *AreaUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSpell sets the "spell" field.
func (_u *AreaUpdate) SetSpell(v string) *AreaUpdate {
	_u.mutation.SetSpell(v)
	return _u
}

// SetNillableSpell sets the "spell" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableSpell(v *string) *AreaUpdate {
	if v != nil {
		_u.SetSpell(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *AreaUpdate) SetLevel(v area.Level) *AreaUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableLevel(v *area.Level) *AreaUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetDepth sets the "depth" field.
func (_u *AreaUpdate) SetDepth(v int) *AreaUpdate {
	_u.mutation.ResetDepth()
	_u.mutation.SetDepth(v)
	return _u
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableDepth(v *int) *AreaUpdate {
	if v != nil {
		_u.SetDepth(*v)
	}
	return _u
}

// AddDepth adds value to the "depth" field.
func (_u *AreaUpdate) AddDepth(v int) *AreaUpdate {
	_u.mutation.AddDepth(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *AreaUpdate) SetCode(v string) *AreaUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableCode(v *string) *AreaUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *AreaUpdate) SetLatitude(v float64) *AreaUpdate {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableLatitude(v *float64) *AreaUpdate {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *AreaUpdate) AddLatitude(v float64) *AreaUpdate {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *AreaUpdate) SetLongitude(v float64) *AreaUpdate {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableLongitude(v *float64) *AreaUpdate {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *AreaUpdate) AddLongitude(v float64) *AreaUpdate {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *AreaUpdate) SetParentID(v uint64) *AreaUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableParentID(v *uint64) *AreaUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *AreaUpdate) ClearParentID() *AreaUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetColor sets the "color" field.
func (_u *AreaUpdate) SetColor(v string) *AreaUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *AreaUpdate) SetNillableColor(v *string) *AreaUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *AreaUpdate) ClearColor() *AreaUpdate {
	_u.mutation.ClearColor()
	return _u
}

// AddChildIDs adds the "children" edge to the Area entity by IDs.
func (_u *AreaUpdate) AddChildIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Area entity.
func (_u *AreaUpdate) AddChildren(v ...*Area) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Area entity.
func (_u *AreaUpdate) SetParent(v *Area) *AreaUpdate {
	return _u.SetParentID(v.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (_u *AreaUpdate) AddAddressIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.AddAddressIDs(ids...)
	return _u
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (_u *AreaUpdate) AddAddresses(v ...*Address) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddressIDs(ids...)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (_u *AreaUpdate) AddStationIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.AddStationIDs(ids...)
	return _u
}

// AddStations adds the "stations" edges to the Station entity.
func (_u *AreaUpdate) AddStations(v ...*Station) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStationIDs(ids...)
}

// AddSubwayIDs adds the "subways" edge to the Subway entity by IDs.
func (_u *AreaUpdate) AddSubwayIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.AddSubwayIDs(ids...)
	return _u
}

// AddSubways adds the "subways" edges to the Subway entity.
func (_u *AreaUpdate) AddSubways(v ...*Subway) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubwayIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (_u *AreaUpdate) Mutation() *AreaMutation {
	return _u.mutation
}

// ClearChildren clears all "children" edges to the Area entity.
func (_u *AreaUpdate) ClearChildren() *AreaUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Area entities by IDs.
func (_u *AreaUpdate) RemoveChildIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Area entities.
func (_u *AreaUpdate) RemoveChildren(v ...*Area) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Area entity.
func (_u *AreaUpdate) ClearParent() *AreaUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (_u *AreaUpdate) ClearAddresses() *AreaUpdate {
	_u.mutation.ClearAddresses()
	return _u
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (_u *AreaUpdate) RemoveAddressIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.RemoveAddressIDs(ids...)
	return _u
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (_u *AreaUpdate) RemoveAddresses(v ...*Address) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddressIDs(ids...)
}

// ClearStations clears all "stations" edges to the Station entity.
func (_u *AreaUpdate) ClearStations() *AreaUpdate {
	_u.mutation.ClearStations()
	return _u
}

// RemoveStationIDs removes the "stations" edge to Station entities by IDs.
func (_u *AreaUpdate) RemoveStationIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.RemoveStationIDs(ids...)
	return _u
}

// RemoveStations removes "stations" edges to Station entities.
func (_u *AreaUpdate) RemoveStations(v ...*Station) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStationIDs(ids...)
}

// ClearSubways clears all "subways" edges to the Subway entity.
func (_u *AreaUpdate) ClearSubways() *AreaUpdate {
	_u.mutation.ClearSubways()
	return _u
}

// RemoveSubwayIDs removes the "subways" edge to Subway entities by IDs.
func (_u *AreaUpdate) RemoveSubwayIDs(ids ...uint64) *AreaUpdate {
	_u.mutation.RemoveSubwayIDs(ids...)
	return _u
}

// RemoveSubways removes "subways" edges to Subway entities.
func (_u *AreaUpdate) RemoveSubways(v ...*Subway) *AreaUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubwayIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AreaUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AreaUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AreaUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AreaUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AreaUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if area.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized area.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := area.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AreaUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Area.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Spell(); ok {
		if err := area.SpellValidator(v); err != nil {
			return &ValidationError{Name: "spell", err: fmt.Errorf(`ent: validator failed for field "Area.spell": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Level(); ok {
		if err := area.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Area.level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Depth(); ok {
		if err := area.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Area.depth": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := area.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Area.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := area.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Area.color": %w`, err)}
		}
	}
	return nil
}

func (_u *AreaUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(area.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(area.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(area.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(area.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(area.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(area.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(area.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(area.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(area.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(area.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(area.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(area.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Spell(); ok {
		_spec.SetField(area.FieldSpell, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(area.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Depth(); ok {
		_spec.SetField(area.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDepth(); ok {
		_spec.AddField(area.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(area.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(area.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(area.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(area.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(area.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(area.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(area.FieldColor, field.TypeString)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !_u.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStationsIDs(); len(nodes) > 0 && !_u.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubwaysIDs(); len(nodes) > 0 && !_u.mutation.SubwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AreaUpdateOne is the builder for updating a single Area entity.
type AreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *AreaUpdateOne) SetCreateBy(v uint64) *AreaUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableCreateBy(v *uint64) *AreaUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AreaUpdateOne) AddCreateBy(v int64) *AreaUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AreaUpdateOne) ClearCreateBy() *AreaUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AreaUpdateOne) SetUpdateTime(v time.Time) *AreaUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AreaUpdateOne) SetUpdateBy(v uint64) *AreaUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableUpdateBy(v *uint64) *AreaUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AreaUpdateOne) AddUpdateBy(v int64) *AreaUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AreaUpdateOne) ClearUpdateBy() *AreaUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AreaUpdateOne) SetDeleteTime(v time.Time) *AreaUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableDeleteTime(v *time.Time) *AreaUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AreaUpdateOne) ClearDeleteTime() *AreaUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AreaUpdateOne) SetDeleteBy(v uint64) *AreaUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableDeleteBy(v *uint64) *AreaUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AreaUpdateOne) AddDeleteBy(v int64) *AreaUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AreaUpdateOne) ClearDeleteBy() *AreaUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *AreaUpdateOne) SetName(v string) *AreaUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableName(v *string) *AreaUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSpell sets the "spell" field.
func (_u *AreaUpdateOne) SetSpell(v string) *AreaUpdateOne {
	_u.mutation.SetSpell(v)
	return _u
}

// SetNillableSpell sets the "spell" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableSpell(v *string) *AreaUpdateOne {
	if v != nil {
		_u.SetSpell(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *AreaUpdateOne) SetLevel(v area.Level) *AreaUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableLevel(v *area.Level) *AreaUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetDepth sets the "depth" field.
func (_u *AreaUpdateOne) SetDepth(v int) *AreaUpdateOne {
	_u.mutation.ResetDepth()
	_u.mutation.SetDepth(v)
	return _u
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableDepth(v *int) *AreaUpdateOne {
	if v != nil {
		_u.SetDepth(*v)
	}
	return _u
}

// AddDepth adds value to the "depth" field.
func (_u *AreaUpdateOne) AddDepth(v int) *AreaUpdateOne {
	_u.mutation.AddDepth(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *AreaUpdateOne) SetCode(v string) *AreaUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableCode(v *string) *AreaUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *AreaUpdateOne) SetLatitude(v float64) *AreaUpdateOne {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableLatitude(v *float64) *AreaUpdateOne {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *AreaUpdateOne) AddLatitude(v float64) *AreaUpdateOne {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *AreaUpdateOne) SetLongitude(v float64) *AreaUpdateOne {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableLongitude(v *float64) *AreaUpdateOne {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *AreaUpdateOne) AddLongitude(v float64) *AreaUpdateOne {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *AreaUpdateOne) SetParentID(v uint64) *AreaUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableParentID(v *uint64) *AreaUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *AreaUpdateOne) ClearParentID() *AreaUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetColor sets the "color" field.
func (_u *AreaUpdateOne) SetColor(v string) *AreaUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *AreaUpdateOne) SetNillableColor(v *string) *AreaUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *AreaUpdateOne) ClearColor() *AreaUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// AddChildIDs adds the "children" edge to the Area entity by IDs.
func (_u *AreaUpdateOne) AddChildIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Area entity.
func (_u *AreaUpdateOne) AddChildren(v ...*Area) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Area entity.
func (_u *AreaUpdateOne) SetParent(v *Area) *AreaUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (_u *AreaUpdateOne) AddAddressIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.AddAddressIDs(ids...)
	return _u
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (_u *AreaUpdateOne) AddAddresses(v ...*Address) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddressIDs(ids...)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (_u *AreaUpdateOne) AddStationIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.AddStationIDs(ids...)
	return _u
}

// AddStations adds the "stations" edges to the Station entity.
func (_u *AreaUpdateOne) AddStations(v ...*Station) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStationIDs(ids...)
}

// AddSubwayIDs adds the "subways" edge to the Subway entity by IDs.
func (_u *AreaUpdateOne) AddSubwayIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.AddSubwayIDs(ids...)
	return _u
}

// AddSubways adds the "subways" edges to the Subway entity.
func (_u *AreaUpdateOne) AddSubways(v ...*Subway) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubwayIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (_u *AreaUpdateOne) Mutation() *AreaMutation {
	return _u.mutation
}

// ClearChildren clears all "children" edges to the Area entity.
func (_u *AreaUpdateOne) ClearChildren() *AreaUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Area entities by IDs.
func (_u *AreaUpdateOne) RemoveChildIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Area entities.
func (_u *AreaUpdateOne) RemoveChildren(v ...*Area) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Area entity.
func (_u *AreaUpdateOne) ClearParent() *AreaUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (_u *AreaUpdateOne) ClearAddresses() *AreaUpdateOne {
	_u.mutation.ClearAddresses()
	return _u
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (_u *AreaUpdateOne) RemoveAddressIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.RemoveAddressIDs(ids...)
	return _u
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (_u *AreaUpdateOne) RemoveAddresses(v ...*Address) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddressIDs(ids...)
}

// ClearStations clears all "stations" edges to the Station entity.
func (_u *AreaUpdateOne) ClearStations() *AreaUpdateOne {
	_u.mutation.ClearStations()
	return _u
}

// RemoveStationIDs removes the "stations" edge to Station entities by IDs.
func (_u *AreaUpdateOne) RemoveStationIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.RemoveStationIDs(ids...)
	return _u
}

// RemoveStations removes "stations" edges to Station entities.
func (_u *AreaUpdateOne) RemoveStations(v ...*Station) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStationIDs(ids...)
}

// ClearSubways clears all "subways" edges to the Subway entity.
func (_u *AreaUpdateOne) ClearSubways() *AreaUpdateOne {
	_u.mutation.ClearSubways()
	return _u
}

// RemoveSubwayIDs removes the "subways" edge to Subway entities by IDs.
func (_u *AreaUpdateOne) RemoveSubwayIDs(ids ...uint64) *AreaUpdateOne {
	_u.mutation.RemoveSubwayIDs(ids...)
	return _u
}

// RemoveSubways removes "subways" edges to Subway entities.
func (_u *AreaUpdateOne) RemoveSubways(v ...*Subway) *AreaUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubwayIDs(ids...)
}

// Where appends a list predicates to the AreaUpdate builder.
func (_u *AreaUpdateOne) Where(ps ...predicate.Area) *AreaUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AreaUpdateOne) Select(field string, fields ...string) *AreaUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Area entity.
func (_u *AreaUpdateOne) Save(ctx context.Context) (*Area, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AreaUpdateOne) SaveX(ctx context.Context) *Area {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AreaUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AreaUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AreaUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if area.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized area.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := area.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AreaUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := area.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Area.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Spell(); ok {
		if err := area.SpellValidator(v); err != nil {
			return &ValidationError{Name: "spell", err: fmt.Errorf(`ent: validator failed for field "Area.spell": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Level(); ok {
		if err := area.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Area.level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Depth(); ok {
		if err := area.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Area.depth": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := area.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Area.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := area.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Area.color": %w`, err)}
		}
	}
	return nil
}

func (_u *AreaUpdateOne) sqlSave(ctx context.Context) (_node *Area, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Area.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, area.FieldID)
		for _, f := range fields {
			if !area.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != area.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(area.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(area.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(area.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(area.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(area.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(area.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(area.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(area.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(area.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(area.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(area.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(area.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Spell(); ok {
		_spec.SetField(area.FieldSpell, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(area.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Depth(); ok {
		_spec.SetField(area.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDepth(); ok {
		_spec.AddField(area.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(area.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(area.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(area.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(area.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(area.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(area.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(area.FieldColor, field.TypeString)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !_u.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStationsIDs(); len(nodes) > 0 && !_u.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubwaysIDs(); len(nodes) > 0 && !_u.mutation.SubwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Area{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
