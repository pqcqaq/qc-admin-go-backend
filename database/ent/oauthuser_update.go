// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthUserUpdate is the builder for updating OauthUser entities.
type OauthUserUpdate struct {
	config
	hooks    []Hook
	mutation *OauthUserMutation
}

// Where appends a list predicates to the OauthUserUpdate builder.
func (_u *OauthUserUpdate) Where(ps ...predicate.OauthUser) *OauthUserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthUserUpdate) SetCreateBy(v uint64) *OauthUserUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableCreateBy(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthUserUpdate) AddCreateBy(v int64) *OauthUserUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthUserUpdate) ClearCreateBy() *OauthUserUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthUserUpdate) SetUpdateTime(v time.Time) *OauthUserUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthUserUpdate) SetUpdateBy(v uint64) *OauthUserUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableUpdateBy(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthUserUpdate) AddUpdateBy(v int64) *OauthUserUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthUserUpdate) ClearUpdateBy() *OauthUserUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthUserUpdate) SetDeleteTime(v time.Time) *OauthUserUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableDeleteTime(v *time.Time) *OauthUserUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthUserUpdate) ClearDeleteTime() *OauthUserUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthUserUpdate) SetDeleteBy(v uint64) *OauthUserUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableDeleteBy(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthUserUpdate) AddDeleteBy(v int64) *OauthUserUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthUserUpdate) ClearDeleteBy() *OauthUserUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthUserUpdate) SetProviderID(v uint64) *OauthUserUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableProviderID(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthUserUpdate) SetUserID(v uint64) *OauthUserUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableUserID(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStateID sets the "state_id" field.
func (_u *OauthUserUpdate) SetStateID(v uint64) *OauthUserUpdate {
	_u.mutation.SetStateID(v)
	return _u
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableStateID(v *uint64) *OauthUserUpdate {
	if v != nil {
		_u.SetStateID(*v)
	}
	return _u
}

// ClearStateID clears the value of the "state_id" field.
func (_u *OauthUserUpdate) ClearStateID() *OauthUserUpdate {
	_u.mutation.ClearStateID()
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *OauthUserUpdate) SetProviderUserID(v string) *OauthUserUpdate {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableProviderUserID(v *string) *OauthUserUpdate {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// SetRawUserInfo sets the "raw_user_info" field.
func (_u *OauthUserUpdate) SetRawUserInfo(v map[string]interface{}) *OauthUserUpdate {
	_u.mutation.SetRawUserInfo(v)
	return _u
}

// ClearRawUserInfo clears the value of the "raw_user_info" field.
func (_u *OauthUserUpdate) ClearRawUserInfo() *OauthUserUpdate {
	_u.mutation.ClearRawUserInfo()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthUserUpdate) SetAccessToken(v string) *OauthUserUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableAccessToken(v *string) *OauthUserUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *OauthUserUpdate) ClearAccessToken() *OauthUserUpdate {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthUserUpdate) SetRefreshToken(v string) *OauthUserUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableRefreshToken(v *string) *OauthUserUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *OauthUserUpdate) ClearRefreshToken() *OauthUserUpdate {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetAccessExpiresAt sets the "access_expires_at" field.
func (_u *OauthUserUpdate) SetAccessExpiresAt(v time.Time) *OauthUserUpdate {
	_u.mutation.SetAccessExpiresAt(v)
	return _u
}

// SetNillableAccessExpiresAt sets the "access_expires_at" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableAccessExpiresAt(v *time.Time) *OauthUserUpdate {
	if v != nil {
		_u.SetAccessExpiresAt(*v)
	}
	return _u
}

// ClearAccessExpiresAt clears the value of the "access_expires_at" field.
func (_u *OauthUserUpdate) ClearAccessExpiresAt() *OauthUserUpdate {
	_u.mutation.ClearAccessExpiresAt()
	return _u
}

// SetRefreshExpiresAt sets the "refresh_expires_at" field.
func (_u *OauthUserUpdate) SetRefreshExpiresAt(v time.Time) *OauthUserUpdate {
	_u.mutation.SetRefreshExpiresAt(v)
	return _u
}

// SetNillableRefreshExpiresAt sets the "refresh_expires_at" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableRefreshExpiresAt(v *time.Time) *OauthUserUpdate {
	if v != nil {
		_u.SetRefreshExpiresAt(*v)
	}
	return _u
}

// ClearRefreshExpiresAt clears the value of the "refresh_expires_at" field.
func (_u *OauthUserUpdate) ClearRefreshExpiresAt() *OauthUserUpdate {
	_u.mutation.ClearRefreshExpiresAt()
	return _u
}

// SetLoadState sets the "load_state" field.
func (_u *OauthUserUpdate) SetLoadState(v oauthuser.LoadState) *OauthUserUpdate {
	_u.mutation.SetLoadState(v)
	return _u
}

// SetNillableLoadState sets the "load_state" field if the given value is not nil.
func (_u *OauthUserUpdate) SetNillableLoadState(v *oauthuser.LoadState) *OauthUserUpdate {
	if v != nil {
		_u.SetLoadState(*v)
	}
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthUserUpdate) SetProvider(v *OauthProvider) *OauthUserUpdate {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthUserUpdate) SetUser(v *User) *OauthUserUpdate {
	return _u.SetUserID(v.ID)
}

// SetState sets the "state" edge to the OauthState entity.
func (_u *OauthUserUpdate) SetState(v *OauthState) *OauthUserUpdate {
	return _u.SetStateID(v.ID)
}

// Mutation returns the OauthUserMutation object of the builder.
func (_u *OauthUserUpdate) Mutation() *OauthUserMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthUserUpdate) ClearProvider() *OauthUserUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthUserUpdate) ClearUser() *OauthUserUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearState clears the "state" edge to the OauthState entity.
func (_u *OauthUserUpdate) ClearState() *OauthUserUpdate {
	_u.mutation.ClearState()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthUserUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthUserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthUserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthUserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthUserUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthuser.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuser.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuser.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthUserUpdate) check() error {
	if v, ok := _u.mutation.ProviderUserID(); ok {
		if err := oauthuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthuser.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.refresh_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LoadState(); ok {
		if err := oauthuser.LoadStateValidator(v); err != nil {
			return &ValidationError{Name: "load_state", err: fmt.Errorf(`ent: validator failed for field "OauthUser.load_state": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUser.provider"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUser.user"`)
	}
	return nil
}

func (_u *OauthUserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuser.Table, oauthuser.Columns, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthuser.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthuser.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthuser.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuser.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthuser.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthuser.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuser.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthuser.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuser.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthuser.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthuser.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthuser.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.RawUserInfo(); ok {
		_spec.SetField(oauthuser.FieldRawUserInfo, field.TypeJSON, value)
	}
	if _u.mutation.RawUserInfoCleared() {
		_spec.ClearField(oauthuser.FieldRawUserInfo, field.TypeJSON)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthuser.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthuser.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthuser.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthuser.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.AccessExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldAccessExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.AccessExpiresAtCleared() {
		_spec.ClearField(oauthuser.FieldAccessExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RefreshExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldRefreshExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.RefreshExpiresAtCleared() {
		_spec.ClearField(oauthuser.FieldRefreshExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LoadState(); ok {
		_spec.SetField(oauthuser.FieldLoadState, field.TypeEnum, value)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthUserUpdateOne is the builder for updating a single OauthUser entity.
type OauthUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthUserMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthUserUpdateOne) SetCreateBy(v uint64) *OauthUserUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableCreateBy(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthUserUpdateOne) AddCreateBy(v int64) *OauthUserUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthUserUpdateOne) ClearCreateBy() *OauthUserUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthUserUpdateOne) SetUpdateTime(v time.Time) *OauthUserUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthUserUpdateOne) SetUpdateBy(v uint64) *OauthUserUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableUpdateBy(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthUserUpdateOne) AddUpdateBy(v int64) *OauthUserUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthUserUpdateOne) ClearUpdateBy() *OauthUserUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthUserUpdateOne) SetDeleteTime(v time.Time) *OauthUserUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthUserUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthUserUpdateOne) ClearDeleteTime() *OauthUserUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthUserUpdateOne) SetDeleteBy(v uint64) *OauthUserUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableDeleteBy(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthUserUpdateOne) AddDeleteBy(v int64) *OauthUserUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthUserUpdateOne) ClearDeleteBy() *OauthUserUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthUserUpdateOne) SetProviderID(v uint64) *OauthUserUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableProviderID(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthUserUpdateOne) SetUserID(v uint64) *OauthUserUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableUserID(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStateID sets the "state_id" field.
func (_u *OauthUserUpdateOne) SetStateID(v uint64) *OauthUserUpdateOne {
	_u.mutation.SetStateID(v)
	return _u
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableStateID(v *uint64) *OauthUserUpdateOne {
	if v != nil {
		_u.SetStateID(*v)
	}
	return _u
}

// ClearStateID clears the value of the "state_id" field.
func (_u *OauthUserUpdateOne) ClearStateID() *OauthUserUpdateOne {
	_u.mutation.ClearStateID()
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *OauthUserUpdateOne) SetProviderUserID(v string) *OauthUserUpdateOne {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableProviderUserID(v *string) *OauthUserUpdateOne {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// SetRawUserInfo sets the "raw_user_info" field.
func (_u *OauthUserUpdateOne) SetRawUserInfo(v map[string]interface{}) *OauthUserUpdateOne {
	_u.mutation.SetRawUserInfo(v)
	return _u
}

// ClearRawUserInfo clears the value of the "raw_user_info" field.
func (_u *OauthUserUpdateOne) ClearRawUserInfo() *OauthUserUpdateOne {
	_u.mutation.ClearRawUserInfo()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthUserUpdateOne) SetAccessToken(v string) *OauthUserUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableAccessToken(v *string) *OauthUserUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *OauthUserUpdateOne) ClearAccessToken() *OauthUserUpdateOne {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthUserUpdateOne) SetRefreshToken(v string) *OauthUserUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableRefreshToken(v *string) *OauthUserUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *OauthUserUpdateOne) ClearRefreshToken() *OauthUserUpdateOne {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetAccessExpiresAt sets the "access_expires_at" field.
func (_u *OauthUserUpdateOne) SetAccessExpiresAt(v time.Time) *OauthUserUpdateOne {
	_u.mutation.SetAccessExpiresAt(v)
	return _u
}

// SetNillableAccessExpiresAt sets the "access_expires_at" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableAccessExpiresAt(v *time.Time) *OauthUserUpdateOne {
	if v != nil {
		_u.SetAccessExpiresAt(*v)
	}
	return _u
}

// ClearAccessExpiresAt clears the value of the "access_expires_at" field.
func (_u *OauthUserUpdateOne) ClearAccessExpiresAt() *OauthUserUpdateOne {
	_u.mutation.ClearAccessExpiresAt()
	return _u
}

// SetRefreshExpiresAt sets the "refresh_expires_at" field.
func (_u *OauthUserUpdateOne) SetRefreshExpiresAt(v time.Time) *OauthUserUpdateOne {
	_u.mutation.SetRefreshExpiresAt(v)
	return _u
}

// SetNillableRefreshExpiresAt sets the "refresh_expires_at" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableRefreshExpiresAt(v *time.Time) *OauthUserUpdateOne {
	if v != nil {
		_u.SetRefreshExpiresAt(*v)
	}
	return _u
}

// ClearRefreshExpiresAt clears the value of the "refresh_expires_at" field.
func (_u *OauthUserUpdateOne) ClearRefreshExpiresAt() *OauthUserUpdateOne {
	_u.mutation.ClearRefreshExpiresAt()
	return _u
}

// SetLoadState sets the "load_state" field.
func (_u *OauthUserUpdateOne) SetLoadState(v oauthuser.LoadState) *OauthUserUpdateOne {
	_u.mutation.SetLoadState(v)
	return _u
}

// SetNillableLoadState sets the "load_state" field if the given value is not nil.
func (_u *OauthUserUpdateOne) SetNillableLoadState(v *oauthuser.LoadState) *OauthUserUpdateOne {
	if v != nil {
		_u.SetLoadState(*v)
	}
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthUserUpdateOne) SetProvider(v *OauthProvider) *OauthUserUpdateOne {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthUserUpdateOne) SetUser(v *User) *OauthUserUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetState sets the "state" edge to the OauthState entity.
func (_u *OauthUserUpdateOne) SetState(v *OauthState) *OauthUserUpdateOne {
	return _u.SetStateID(v.ID)
}

// Mutation returns the OauthUserMutation object of the builder.
func (_u *OauthUserUpdateOne) Mutation() *OauthUserMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthUserUpdateOne) ClearProvider() *OauthUserUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthUserUpdateOne) ClearUser() *OauthUserUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearState clears the "state" edge to the OauthState entity.
func (_u *OauthUserUpdateOne) ClearState() *OauthUserUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// Where appends a list predicates to the OauthUserUpdate builder.
func (_u *OauthUserUpdateOne) Where(ps ...predicate.OauthUser) *OauthUserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthUserUpdateOne) Select(field string, fields ...string) *OauthUserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthUser entity.
func (_u *OauthUserUpdateOne) Save(ctx context.Context) (*OauthUser, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthUserUpdateOne) SaveX(ctx context.Context) *OauthUser {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthUserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthUserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthUserUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthuser.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuser.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuser.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthUserUpdateOne) check() error {
	if v, ok := _u.mutation.ProviderUserID(); ok {
		if err := oauthuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthuser.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthUser.refresh_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LoadState(); ok {
		if err := oauthuser.LoadStateValidator(v); err != nil {
			return &ValidationError{Name: "load_state", err: fmt.Errorf(`ent: validator failed for field "OauthUser.load_state": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUser.provider"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthUser.user"`)
	}
	return nil
}

func (_u *OauthUserUpdateOne) sqlSave(ctx context.Context) (_node *OauthUser, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuser.Table, oauthuser.Columns, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthuser.FieldID)
		for _, f := range fields {
			if !oauthuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthuser.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthuser.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthuser.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuser.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthuser.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthuser.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuser.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthuser.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuser.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthuser.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthuser.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthuser.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.RawUserInfo(); ok {
		_spec.SetField(oauthuser.FieldRawUserInfo, field.TypeJSON, value)
	}
	if _u.mutation.RawUserInfoCleared() {
		_spec.ClearField(oauthuser.FieldRawUserInfo, field.TypeJSON)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthuser.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthuser.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthuser.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthuser.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.AccessExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldAccessExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.AccessExpiresAtCleared() {
		_spec.ClearField(oauthuser.FieldAccessExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RefreshExpiresAt(); ok {
		_spec.SetField(oauthuser.FieldRefreshExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.RefreshExpiresAtCleared() {
		_spec.ClearField(oauthuser.FieldRefreshExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LoadState(); ok {
		_spec.SetField(oauthuser.FieldLoadState, field.TypeEnum, value)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthUser{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
