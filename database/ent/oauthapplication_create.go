// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthApplicationCreate is the builder for creating a OauthApplication entity.
type OauthApplicationCreate struct {
	config
	mutation *OauthApplicationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *OauthApplicationCreate) SetCreateTime(v time.Time) *OauthApplicationCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableCreateTime(v *time.Time) *OauthApplicationCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *OauthApplicationCreate) SetCreateBy(v uint64) *OauthApplicationCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableCreateBy(v *uint64) *OauthApplicationCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OauthApplicationCreate) SetUpdateTime(v time.Time) *OauthApplicationCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableUpdateTime(v *time.Time) *OauthApplicationCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *OauthApplicationCreate) SetUpdateBy(v uint64) *OauthApplicationCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableUpdateBy(v *uint64) *OauthApplicationCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *OauthApplicationCreate) SetDeleteTime(v time.Time) *OauthApplicationCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableDeleteTime(v *time.Time) *OauthApplicationCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *OauthApplicationCreate) SetDeleteBy(v uint64) *OauthApplicationCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableDeleteBy(v *uint64) *OauthApplicationCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetClientID sets the "client_id" field.
func (_c *OauthApplicationCreate) SetClientID(v string) *OauthApplicationCreate {
	_c.mutation.SetClientID(v)
	return _c
}

// SetClientSecret sets the "client_secret" field.
func (_c *OauthApplicationCreate) SetClientSecret(v string) *OauthApplicationCreate {
	_c.mutation.SetClientSecret(v)
	return _c
}

// SetName sets the "name" field.
func (_c *OauthApplicationCreate) SetName(v string) *OauthApplicationCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetRedirectUris sets the "redirect_uris" field.
func (_c *OauthApplicationCreate) SetRedirectUris(v []string) *OauthApplicationCreate {
	_c.mutation.SetRedirectUris(v)
	return _c
}

// SetIsConfidential sets the "is_confidential" field.
func (_c *OauthApplicationCreate) SetIsConfidential(v bool) *OauthApplicationCreate {
	_c.mutation.SetIsConfidential(v)
	return _c
}

// SetNillableIsConfidential sets the "is_confidential" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableIsConfidential(v *bool) *OauthApplicationCreate {
	if v != nil {
		_c.SetIsConfidential(*v)
	}
	return _c
}

// SetScopes sets the "scopes" field.
func (_c *OauthApplicationCreate) SetScopes(v []string) *OauthApplicationCreate {
	_c.mutation.SetScopes(v)
	return _c
}

// SetAbleState sets the "able_state" field.
func (_c *OauthApplicationCreate) SetAbleState(v oauthapplication.AbleState) *OauthApplicationCreate {
	_c.mutation.SetAbleState(v)
	return _c
}

// SetNillableAbleState sets the "able_state" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableAbleState(v *oauthapplication.AbleState) *OauthApplicationCreate {
	if v != nil {
		_c.SetAbleState(*v)
	}
	return _c
}

// SetSystemID sets the "system_id" field.
func (_c *OauthApplicationCreate) SetSystemID(v uint64) *OauthApplicationCreate {
	_c.mutation.SetSystemID(v)
	return _c
}

// SetNillableSystemID sets the "system_id" field if the given value is not nil.
func (_c *OauthApplicationCreate) SetNillableSystemID(v *uint64) *OauthApplicationCreate {
	if v != nil {
		_c.SetSystemID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthApplicationCreate) SetID(v uint64) *OauthApplicationCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddAuthorizationCodeIDs adds the "authorization_codes" edge to the OauthAuthorizationCode entity by IDs.
func (_c *OauthApplicationCreate) AddAuthorizationCodeIDs(ids ...uint64) *OauthApplicationCreate {
	_c.mutation.AddAuthorizationCodeIDs(ids...)
	return _c
}

// AddAuthorizationCodes adds the "authorization_codes" edges to the OauthAuthorizationCode entity.
func (_c *OauthApplicationCreate) AddAuthorizationCodes(v ...*OauthAuthorizationCode) *OauthApplicationCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAuthorizationCodeIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the OauthToken entity by IDs.
func (_c *OauthApplicationCreate) AddTokenIDs(ids ...uint64) *OauthApplicationCreate {
	_c.mutation.AddTokenIDs(ids...)
	return _c
}

// AddTokens adds the "tokens" edges to the OauthToken entity.
func (_c *OauthApplicationCreate) AddTokens(v ...*OauthToken) *OauthApplicationCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTokenIDs(ids...)
}

// AddUserAuthorizationIDs adds the "user_authorizations" edge to the OauthUserAuthorization entity by IDs.
func (_c *OauthApplicationCreate) AddUserAuthorizationIDs(ids ...uint64) *OauthApplicationCreate {
	_c.mutation.AddUserAuthorizationIDs(ids...)
	return _c
}

// AddUserAuthorizations adds the "user_authorizations" edges to the OauthUserAuthorization entity.
func (_c *OauthApplicationCreate) AddUserAuthorizations(v ...*OauthUserAuthorization) *OauthApplicationCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserAuthorizationIDs(ids...)
}

// Mutation returns the OauthApplicationMutation object of the builder.
func (_c *OauthApplicationCreate) Mutation() *OauthApplicationMutation {
	return _c.mutation
}

// Save creates the OauthApplication in the database.
func (_c *OauthApplicationCreate) Save(ctx context.Context) (*OauthApplication, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthApplicationCreate) SaveX(ctx context.Context) *OauthApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthApplicationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthApplicationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthApplicationCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if oauthapplication.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthapplication.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := oauthapplication.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if oauthapplication.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthapplication.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthapplication.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.IsConfidential(); !ok {
		v := oauthapplication.DefaultIsConfidential
		_c.mutation.SetIsConfidential(v)
	}
	if _, ok := _c.mutation.AbleState(); !ok {
		v := oauthapplication.DefaultAbleState
		_c.mutation.SetAbleState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthApplicationCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OauthApplication.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OauthApplication.update_time"`)}
	}
	if _, ok := _c.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OauthApplication.client_id"`)}
	}
	if v, ok := _c.mutation.ClientID(); ok {
		if err := oauthapplication.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.client_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OauthApplication.client_secret"`)}
	}
	if v, ok := _c.mutation.ClientSecret(); ok {
		if err := oauthapplication.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.client_secret": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OauthApplication.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := oauthapplication.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RedirectUris(); !ok {
		return &ValidationError{Name: "redirect_uris", err: errors.New(`ent: missing required field "OauthApplication.redirect_uris"`)}
	}
	if _, ok := _c.mutation.IsConfidential(); !ok {
		return &ValidationError{Name: "is_confidential", err: errors.New(`ent: missing required field "OauthApplication.is_confidential"`)}
	}
	if _, ok := _c.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "OauthApplication.scopes"`)}
	}
	if _, ok := _c.mutation.AbleState(); !ok {
		return &ValidationError{Name: "able_state", err: errors.New(`ent: missing required field "OauthApplication.able_state"`)}
	}
	if v, ok := _c.mutation.AbleState(); ok {
		if err := oauthapplication.AbleStateValidator(v); err != nil {
			return &ValidationError{Name: "able_state", err: fmt.Errorf(`ent: validator failed for field "OauthApplication.able_state": %w`, err)}
		}
	}
	return nil
}

func (_c *OauthApplicationCreate) sqlSave(ctx context.Context) (*OauthApplication, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthApplicationCreate) createSpec() (*OauthApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthApplication{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthapplication.Table, sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(oauthapplication.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(oauthapplication.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(oauthapplication.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(oauthapplication.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(oauthapplication.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(oauthapplication.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.ClientID(); ok {
		_spec.SetField(oauthapplication.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := _c.mutation.ClientSecret(); ok {
		_spec.SetField(oauthapplication.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(oauthapplication.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.RedirectUris(); ok {
		_spec.SetField(oauthapplication.FieldRedirectUris, field.TypeJSON, value)
		_node.RedirectUris = value
	}
	if value, ok := _c.mutation.IsConfidential(); ok {
		_spec.SetField(oauthapplication.FieldIsConfidential, field.TypeBool, value)
		_node.IsConfidential = value
	}
	if value, ok := _c.mutation.Scopes(); ok {
		_spec.SetField(oauthapplication.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := _c.mutation.AbleState(); ok {
		_spec.SetField(oauthapplication.FieldAbleState, field.TypeEnum, value)
		_node.AbleState = value
	}
	if value, ok := _c.mutation.SystemID(); ok {
		_spec.SetField(oauthapplication.FieldSystemID, field.TypeUint64, value)
		_node.SystemID = value
	}
	if nodes := _c.mutation.AuthorizationCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthApplicationCreateBulk is the builder for creating many OauthApplication entities in bulk.
type OauthApplicationCreateBulk struct {
	config
	err      error
	builders []*OauthApplicationCreate
}

// Save creates the OauthApplication entities in the database.
func (_c *OauthApplicationCreateBulk) Save(ctx context.Context) ([]*OauthApplication, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthApplication, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthApplicationCreateBulk) SaveX(ctx context.Context) []*OauthApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
