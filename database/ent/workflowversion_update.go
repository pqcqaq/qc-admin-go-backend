// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowVersionUpdate is the builder for updating WorkflowVersion entities.
type WorkflowVersionUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowVersionMutation
}

// Where appends a list predicates to the WorkflowVersionUpdate builder.
func (_u *WorkflowVersionUpdate) Where(ps ...predicate.WorkflowVersion) *WorkflowVersionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowVersionUpdate) SetCreateBy(v uint64) *WorkflowVersionUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableCreateBy(v *uint64) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowVersionUpdate) AddCreateBy(v int64) *WorkflowVersionUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowVersionUpdate) ClearCreateBy() *WorkflowVersionUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowVersionUpdate) SetUpdateTime(v time.Time) *WorkflowVersionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowVersionUpdate) SetUpdateBy(v uint64) *WorkflowVersionUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableUpdateBy(v *uint64) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowVersionUpdate) AddUpdateBy(v int64) *WorkflowVersionUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowVersionUpdate) ClearUpdateBy() *WorkflowVersionUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowVersionUpdate) SetApplicationID(v uint64) *WorkflowVersionUpdate {
	_u.mutation.ResetApplicationID()
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableApplicationID(v *uint64) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// AddApplicationID adds value to the "application_id" field.
func (_u *WorkflowVersionUpdate) AddApplicationID(v int64) *WorkflowVersionUpdate {
	_u.mutation.AddApplicationID(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *WorkflowVersionUpdate) SetVersion(v uint) *WorkflowVersionUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableVersion(v *uint) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *WorkflowVersionUpdate) AddVersion(v int) *WorkflowVersionUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// SetSnapshot sets the "snapshot" field.
func (_u *WorkflowVersionUpdate) SetSnapshot(v map[string]interface{}) *WorkflowVersionUpdate {
	_u.mutation.SetSnapshot(v)
	return _u
}

// SetChangeLog sets the "change_log" field.
func (_u *WorkflowVersionUpdate) SetChangeLog(v string) *WorkflowVersionUpdate {
	_u.mutation.SetChangeLog(v)
	return _u
}

// SetNillableChangeLog sets the "change_log" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableChangeLog(v *string) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetChangeLog(*v)
	}
	return _u
}

// ClearChangeLog clears the value of the "change_log" field.
func (_u *WorkflowVersionUpdate) ClearChangeLog() *WorkflowVersionUpdate {
	_u.mutation.ClearChangeLog()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *WorkflowVersionUpdate) SetCreatedBy(v string) *WorkflowVersionUpdate {
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdate) SetNillableCreatedBy(v *string) *WorkflowVersionUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *WorkflowVersionUpdate) ClearCreatedBy() *WorkflowVersionUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// Mutation returns the WorkflowVersionMutation object of the builder.
func (_u *WorkflowVersionUpdate) Mutation() *WorkflowVersionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowVersionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowVersionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowVersionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowVersionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowversion.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowversion.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowversion.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

func (_u *WorkflowVersionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowversion.Table, workflowversion.Columns, sqlgraph.NewFieldSpec(workflowversion.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowversion.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowversion.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowversion.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowversion.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowversion.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowversion.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowversion.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(workflowversion.FieldApplicationID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedApplicationID(); ok {
		_spec.AddField(workflowversion.FieldApplicationID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(workflowversion.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(workflowversion.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Snapshot(); ok {
		_spec.SetField(workflowversion.FieldSnapshot, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ChangeLog(); ok {
		_spec.SetField(workflowversion.FieldChangeLog, field.TypeString, value)
	}
	if _u.mutation.ChangeLogCleared() {
		_spec.ClearField(workflowversion.FieldChangeLog, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(workflowversion.FieldCreatedBy, field.TypeString, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(workflowversion.FieldCreatedBy, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowVersionUpdateOne is the builder for updating a single WorkflowVersion entity.
type WorkflowVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowVersionMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowVersionUpdateOne) SetCreateBy(v uint64) *WorkflowVersionUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowVersionUpdateOne) AddCreateBy(v int64) *WorkflowVersionUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowVersionUpdateOne) ClearCreateBy() *WorkflowVersionUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowVersionUpdateOne) SetUpdateTime(v time.Time) *WorkflowVersionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowVersionUpdateOne) SetUpdateBy(v uint64) *WorkflowVersionUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowVersionUpdateOne) AddUpdateBy(v int64) *WorkflowVersionUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowVersionUpdateOne) ClearUpdateBy() *WorkflowVersionUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowVersionUpdateOne) SetApplicationID(v uint64) *WorkflowVersionUpdateOne {
	_u.mutation.ResetApplicationID()
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableApplicationID(v *uint64) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// AddApplicationID adds value to the "application_id" field.
func (_u *WorkflowVersionUpdateOne) AddApplicationID(v int64) *WorkflowVersionUpdateOne {
	_u.mutation.AddApplicationID(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *WorkflowVersionUpdateOne) SetVersion(v uint) *WorkflowVersionUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableVersion(v *uint) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *WorkflowVersionUpdateOne) AddVersion(v int) *WorkflowVersionUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// SetSnapshot sets the "snapshot" field.
func (_u *WorkflowVersionUpdateOne) SetSnapshot(v map[string]interface{}) *WorkflowVersionUpdateOne {
	_u.mutation.SetSnapshot(v)
	return _u
}

// SetChangeLog sets the "change_log" field.
func (_u *WorkflowVersionUpdateOne) SetChangeLog(v string) *WorkflowVersionUpdateOne {
	_u.mutation.SetChangeLog(v)
	return _u
}

// SetNillableChangeLog sets the "change_log" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableChangeLog(v *string) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetChangeLog(*v)
	}
	return _u
}

// ClearChangeLog clears the value of the "change_log" field.
func (_u *WorkflowVersionUpdateOne) ClearChangeLog() *WorkflowVersionUpdateOne {
	_u.mutation.ClearChangeLog()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *WorkflowVersionUpdateOne) SetCreatedBy(v string) *WorkflowVersionUpdateOne {
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *WorkflowVersionUpdateOne) SetNillableCreatedBy(v *string) *WorkflowVersionUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *WorkflowVersionUpdateOne) ClearCreatedBy() *WorkflowVersionUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// Mutation returns the WorkflowVersionMutation object of the builder.
func (_u *WorkflowVersionUpdateOne) Mutation() *WorkflowVersionMutation {
	return _u.mutation
}

// Where appends a list predicates to the WorkflowVersionUpdate builder.
func (_u *WorkflowVersionUpdateOne) Where(ps ...predicate.WorkflowVersion) *WorkflowVersionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowVersionUpdateOne) Select(field string, fields ...string) *WorkflowVersionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowVersion entity.
func (_u *WorkflowVersionUpdateOne) Save(ctx context.Context) (*WorkflowVersion, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowVersionUpdateOne) SaveX(ctx context.Context) *WorkflowVersion {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowVersionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowVersionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowversion.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowversion.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowversion.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

func (_u *WorkflowVersionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowversion.Table, workflowversion.Columns, sqlgraph.NewFieldSpec(workflowversion.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowversion.FieldID)
		for _, f := range fields {
			if !workflowversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowversion.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowversion.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowversion.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowversion.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowversion.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowversion.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowversion.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ApplicationID(); ok {
		_spec.SetField(workflowversion.FieldApplicationID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedApplicationID(); ok {
		_spec.AddField(workflowversion.FieldApplicationID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(workflowversion.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(workflowversion.FieldVersion, field.TypeUint, value)
	}
	if value, ok := _u.mutation.Snapshot(); ok {
		_spec.SetField(workflowversion.FieldSnapshot, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ChangeLog(); ok {
		_spec.SetField(workflowversion.FieldChangeLog, field.TypeString, value)
	}
	if _u.mutation.ChangeLogCleared() {
		_spec.ClearField(workflowversion.FieldChangeLog, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(workflowversion.FieldCreatedBy, field.TypeString, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(workflowversion.FieldCreatedBy, field.TypeString)
	}
	_node = &WorkflowVersion{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
