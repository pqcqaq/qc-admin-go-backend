// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/area"
	"go-backend/database/ent/subway"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Subway is the model entity for the Subway schema.
type Subway struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 线路名称(如1号线)
	Name string `json:"name,omitempty"`
	// 所在城市ID
	AreaID uint64 `json:"area_id,omitempty"`
	// 线路颜色标识
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubwayQuery when eager-loading is set.
	Edges        SubwayEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubwayEdges holds the relations/edges for other nodes in the graph.
type SubwayEdges struct {
	// 所在城市
	Area *Area `json:"area,omitempty"`
	// 包含的站点
	SubwayStations []*SubwayStation `json:"subway_stations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes         [2]bool
	namedSubwayStations map[string][]*SubwayStation
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubwayEdges) AreaOrErr() (*Area, error) {
	if e.Area != nil {
		return e.Area, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: area.Label}
	}
	return nil, &NotLoadedError{edge: "area"}
}

// SubwayStationsOrErr returns the SubwayStations value or an error if the edge
// was not loaded in eager-loading.
func (e SubwayEdges) SubwayStationsOrErr() ([]*SubwayStation, error) {
	if e.loadedTypes[1] {
		return e.SubwayStations, nil
	}
	return nil, &NotLoadedError{edge: "subway_stations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subway) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subway.FieldID, subway.FieldCreateBy, subway.FieldUpdateBy, subway.FieldDeleteBy, subway.FieldAreaID:
			values[i] = new(sql.NullInt64)
		case subway.FieldName, subway.FieldColor:
			values[i] = new(sql.NullString)
		case subway.FieldCreateTime, subway.FieldUpdateTime, subway.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subway fields.
func (_m *Subway) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subway.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case subway.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case subway.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case subway.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case subway.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case subway.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case subway.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case subway.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case subway.FieldAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value.Valid {
				_m.AreaID = uint64(value.Int64)
			}
		case subway.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subway.
// This includes values selected through modifiers, order, etc.
func (_m *Subway) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryArea queries the "area" edge of the Subway entity.
func (_m *Subway) QueryArea() *AreaQuery {
	return NewSubwayClient(_m.config).QueryArea(_m)
}

// QuerySubwayStations queries the "subway_stations" edge of the Subway entity.
func (_m *Subway) QuerySubwayStations() *SubwayStationQuery {
	return NewSubwayClient(_m.config).QuerySubwayStations(_m)
}

// Update returns a builder for updating this Subway.
// Note that you need to call Subway.Unwrap() before calling this method if this Subway
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Subway) Update() *SubwayUpdateOne {
	return NewSubwayClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Subway entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Subway) Unwrap() *Subway {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subway is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Subway) String() string {
	var builder strings.Builder
	builder.WriteString("Subway(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("area_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AreaID))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteByte(')')
	return builder.String()
}

// NamedSubwayStations returns the SubwayStations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Subway) NamedSubwayStations(name string) ([]*SubwayStation, error) {
	if _m.Edges.namedSubwayStations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubwayStations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Subway) appendNamedSubwayStations(name string, edges ...*SubwayStation) {
	if _m.Edges.namedSubwayStations == nil {
		_m.Edges.namedSubwayStations = make(map[string][]*SubwayStation)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubwayStations[name] = []*SubwayStation{}
	} else {
		_m.Edges.namedSubwayStations[name] = append(_m.Edges.namedSubwayStations[name], edges...)
	}
}

// Subways is a parsable slice of Subway.
type Subways []*Subway
