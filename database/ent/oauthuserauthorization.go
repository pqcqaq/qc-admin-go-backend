// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthUserAuthorization is the model entity for the OauthUserAuthorization schema.
type OauthUserAuthorization struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 用户ID
	UserID uint64 `json:"user_id,omitempty"`
	// 应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 授权时间
	AuthorizedAt time.Time `json:"authorized_at,omitempty"`
	// 授权状态
	UsageState oauthuserauthorization.UsageState `json:"usage_state,omitempty"`
	// 授权的权限范围
	Scope []string `json:"scope,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthUserAuthorizationQuery when eager-loading is set.
	Edges                                 OauthUserAuthorizationEdges `json:"edges"`
	oauth_application_user_authorizations *uint64
	selectValues                          sql.SelectValues
}

// OauthUserAuthorizationEdges holds the relations/edges for other nodes in the graph.
type OauthUserAuthorizationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Application holds the value of the application edge.
	Application *OauthApplication `json:"application,omitempty"`
	// 关联的授权码
	Code *OauthAuthorizationCode `json:"code,omitempty"`
	// 关联的令牌
	Token *OauthToken `json:"token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserAuthorizationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserAuthorizationEdges) ApplicationOrErr() (*OauthApplication, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oauthapplication.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// CodeOrErr returns the Code value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserAuthorizationEdges) CodeOrErr() (*OauthAuthorizationCode, error) {
	if e.Code != nil {
		return e.Code, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oauthauthorizationcode.Label}
	}
	return nil, &NotLoadedError{edge: "code"}
}

// TokenOrErr returns the Token value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserAuthorizationEdges) TokenOrErr() (*OauthToken, error) {
	if e.Token != nil {
		return e.Token, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: oauthtoken.Label}
	}
	return nil, &NotLoadedError{edge: "token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthUserAuthorization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthuserauthorization.FieldScope:
			values[i] = new([]byte)
		case oauthuserauthorization.FieldID, oauthuserauthorization.FieldCreateBy, oauthuserauthorization.FieldUpdateBy, oauthuserauthorization.FieldDeleteBy, oauthuserauthorization.FieldUserID, oauthuserauthorization.FieldApplicationID:
			values[i] = new(sql.NullInt64)
		case oauthuserauthorization.FieldUsageState:
			values[i] = new(sql.NullString)
		case oauthuserauthorization.FieldCreateTime, oauthuserauthorization.FieldUpdateTime, oauthuserauthorization.FieldDeleteTime, oauthuserauthorization.FieldAuthorizedAt:
			values[i] = new(sql.NullTime)
		case oauthuserauthorization.ForeignKeys[0]: // oauth_application_user_authorizations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthUserAuthorization fields.
func (_m *OauthUserAuthorization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthuserauthorization.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthuserauthorization.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthuserauthorization.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthuserauthorization.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case oauthuserauthorization.FieldAuthorizedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field authorized_at", values[i])
			} else if value.Valid {
				_m.AuthorizedAt = value.Time
			}
		case oauthuserauthorization.FieldUsageState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_state", values[i])
			} else if value.Valid {
				_m.UsageState = oauthuserauthorization.UsageState(value.String)
			}
		case oauthuserauthorization.FieldScope:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scope); err != nil {
					return fmt.Errorf("unmarshal field scope: %w", err)
				}
			}
		case oauthuserauthorization.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_application_user_authorizations", values[i])
			} else if value.Valid {
				_m.oauth_application_user_authorizations = new(uint64)
				*_m.oauth_application_user_authorizations = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthUserAuthorization.
// This includes values selected through modifiers, order, etc.
func (_m *OauthUserAuthorization) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OauthUserAuthorization entity.
func (_m *OauthUserAuthorization) QueryUser() *UserQuery {
	return NewOauthUserAuthorizationClient(_m.config).QueryUser(_m)
}

// QueryApplication queries the "application" edge of the OauthUserAuthorization entity.
func (_m *OauthUserAuthorization) QueryApplication() *OauthApplicationQuery {
	return NewOauthUserAuthorizationClient(_m.config).QueryApplication(_m)
}

// QueryCode queries the "code" edge of the OauthUserAuthorization entity.
func (_m *OauthUserAuthorization) QueryCode() *OauthAuthorizationCodeQuery {
	return NewOauthUserAuthorizationClient(_m.config).QueryCode(_m)
}

// QueryToken queries the "token" edge of the OauthUserAuthorization entity.
func (_m *OauthUserAuthorization) QueryToken() *OauthTokenQuery {
	return NewOauthUserAuthorizationClient(_m.config).QueryToken(_m)
}

// Update returns a builder for updating this OauthUserAuthorization.
// Note that you need to call OauthUserAuthorization.Unwrap() before calling this method if this OauthUserAuthorization
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthUserAuthorization) Update() *OauthUserAuthorizationUpdateOne {
	return NewOauthUserAuthorizationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthUserAuthorization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthUserAuthorization) Unwrap() *OauthUserAuthorization {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthUserAuthorization is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthUserAuthorization) String() string {
	var builder strings.Builder
	builder.WriteString("OauthUserAuthorization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("authorized_at=")
	builder.WriteString(_m.AuthorizedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("usage_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.UsageState))
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scope))
	builder.WriteByte(')')
	return builder.String()
}

// OauthUserAuthorizations is a parsable slice of OauthUserAuthorization.
type OauthUserAuthorizations []*OauthUserAuthorization
