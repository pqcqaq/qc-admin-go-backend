// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthAuthorizationCode is the model entity for the OauthAuthorizationCode schema.
type OauthAuthorizationCode struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 授权码(UUID)
	Code string `json:"code,omitempty"`
	// 关联的应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 关联的用户ID
	UserID uint64 `json:"user_id,omitempty"`
	// 重定向URI
	RedirectURI string `json:"redirect_uri,omitempty"`
	// 授权的权限范围
	Scope []string `json:"scope,omitempty"`
	// 过期时间(推荐10分钟)
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// 使用时间(一次性使用)
	UsedAt *time.Time `json:"used_at,omitempty"`
	// PKCE代码挑战(预留)
	CodeChallenge string `json:"code_challenge,omitempty"`
	// PKCE挑战方法(S256/plain)
	CodeChallengeMethod string `json:"code_challenge_method,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthAuthorizationCodeQuery when eager-loading is set.
	Edges                         OauthAuthorizationCodeEdges `json:"edges"`
	oauth_user_authorization_code *uint64
	selectValues                  sql.SelectValues
}

// OauthAuthorizationCodeEdges holds the relations/edges for other nodes in the graph.
type OauthAuthorizationCodeEdges struct {
	// Application holds the value of the application edge.
	Application *OauthApplication `json:"application,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// 换取的令牌
	Token *OauthToken `json:"token,omitempty"`
	// UserAuthorization holds the value of the user_authorization edge.
	UserAuthorization *OauthUserAuthorization `json:"user_authorization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAuthorizationCodeEdges) ApplicationOrErr() (*OauthApplication, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthapplication.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAuthorizationCodeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TokenOrErr returns the Token value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAuthorizationCodeEdges) TokenOrErr() (*OauthToken, error) {
	if e.Token != nil {
		return e.Token, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oauthtoken.Label}
	}
	return nil, &NotLoadedError{edge: "token"}
}

// UserAuthorizationOrErr returns the UserAuthorization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAuthorizationCodeEdges) UserAuthorizationOrErr() (*OauthUserAuthorization, error) {
	if e.UserAuthorization != nil {
		return e.UserAuthorization, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: oauthuserauthorization.Label}
	}
	return nil, &NotLoadedError{edge: "user_authorization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthAuthorizationCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthauthorizationcode.FieldScope:
			values[i] = new([]byte)
		case oauthauthorizationcode.FieldID, oauthauthorizationcode.FieldCreateBy, oauthauthorizationcode.FieldUpdateBy, oauthauthorizationcode.FieldDeleteBy, oauthauthorizationcode.FieldApplicationID, oauthauthorizationcode.FieldUserID:
			values[i] = new(sql.NullInt64)
		case oauthauthorizationcode.FieldCode, oauthauthorizationcode.FieldRedirectURI, oauthauthorizationcode.FieldCodeChallenge, oauthauthorizationcode.FieldCodeChallengeMethod:
			values[i] = new(sql.NullString)
		case oauthauthorizationcode.FieldCreateTime, oauthauthorizationcode.FieldUpdateTime, oauthauthorizationcode.FieldDeleteTime, oauthauthorizationcode.FieldExpiresAt, oauthauthorizationcode.FieldUsedAt:
			values[i] = new(sql.NullTime)
		case oauthauthorizationcode.ForeignKeys[0]: // oauth_user_authorization_code
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthAuthorizationCode fields.
func (_m *OauthAuthorizationCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthauthorizationcode.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthauthorizationcode.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthauthorizationcode.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthauthorizationcode.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case oauthauthorizationcode.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint64(value.Int64)
			}
		case oauthauthorizationcode.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				_m.RedirectURI = value.String
			}
		case oauthauthorizationcode.FieldScope:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scope); err != nil {
					return fmt.Errorf("unmarshal field scope: %w", err)
				}
			}
		case oauthauthorizationcode.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case oauthauthorizationcode.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				_m.UsedAt = new(time.Time)
				*_m.UsedAt = value.Time
			}
		case oauthauthorizationcode.FieldCodeChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge", values[i])
			} else if value.Valid {
				_m.CodeChallenge = value.String
			}
		case oauthauthorizationcode.FieldCodeChallengeMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge_method", values[i])
			} else if value.Valid {
				_m.CodeChallengeMethod = value.String
			}
		case oauthauthorizationcode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_user_authorization_code", values[i])
			} else if value.Valid {
				_m.oauth_user_authorization_code = new(uint64)
				*_m.oauth_user_authorization_code = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthAuthorizationCode.
// This includes values selected through modifiers, order, etc.
func (_m *OauthAuthorizationCode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the OauthAuthorizationCode entity.
func (_m *OauthAuthorizationCode) QueryApplication() *OauthApplicationQuery {
	return NewOauthAuthorizationCodeClient(_m.config).QueryApplication(_m)
}

// QueryUser queries the "user" edge of the OauthAuthorizationCode entity.
func (_m *OauthAuthorizationCode) QueryUser() *UserQuery {
	return NewOauthAuthorizationCodeClient(_m.config).QueryUser(_m)
}

// QueryToken queries the "token" edge of the OauthAuthorizationCode entity.
func (_m *OauthAuthorizationCode) QueryToken() *OauthTokenQuery {
	return NewOauthAuthorizationCodeClient(_m.config).QueryToken(_m)
}

// QueryUserAuthorization queries the "user_authorization" edge of the OauthAuthorizationCode entity.
func (_m *OauthAuthorizationCode) QueryUserAuthorization() *OauthUserAuthorizationQuery {
	return NewOauthAuthorizationCodeClient(_m.config).QueryUserAuthorization(_m)
}

// Update returns a builder for updating this OauthAuthorizationCode.
// Note that you need to call OauthAuthorizationCode.Unwrap() before calling this method if this OauthAuthorizationCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthAuthorizationCode) Update() *OauthAuthorizationCodeUpdateOne {
	return NewOauthAuthorizationCodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthAuthorizationCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthAuthorizationCode) Unwrap() *OauthAuthorizationCode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthAuthorizationCode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthAuthorizationCode) String() string {
	var builder strings.Builder
	builder.WriteString("OauthAuthorizationCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(_m.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scope))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("code_challenge=")
	builder.WriteString(_m.CodeChallenge)
	builder.WriteString(", ")
	builder.WriteString("code_challenge_method=")
	builder.WriteString(_m.CodeChallengeMethod)
	builder.WriteByte(')')
	return builder.String()
}

// OauthAuthorizationCodes is a parsable slice of OauthAuthorizationCode.
type OauthAuthorizationCodes []*OauthAuthorizationCode
