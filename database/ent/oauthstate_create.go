// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthStateCreate is the builder for creating a OauthState entity.
type OauthStateCreate struct {
	config
	mutation *OauthStateMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *OauthStateCreate) SetCreateTime(v time.Time) *OauthStateCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableCreateTime(v *time.Time) *OauthStateCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *OauthStateCreate) SetCreateBy(v uint64) *OauthStateCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableCreateBy(v *uint64) *OauthStateCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OauthStateCreate) SetUpdateTime(v time.Time) *OauthStateCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableUpdateTime(v *time.Time) *OauthStateCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *OauthStateCreate) SetUpdateBy(v uint64) *OauthStateCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableUpdateBy(v *uint64) *OauthStateCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *OauthStateCreate) SetDeleteTime(v time.Time) *OauthStateCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableDeleteTime(v *time.Time) *OauthStateCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *OauthStateCreate) SetDeleteBy(v uint64) *OauthStateCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableDeleteBy(v *uint64) *OauthStateCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetState sets the "state" field.
func (_c *OauthStateCreate) SetState(v string) *OauthStateCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetType sets the "type" field.
func (_c *OauthStateCreate) SetType(v oauthstate.Type) *OauthStateCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetProviderID sets the "provider_id" field.
func (_c *OauthStateCreate) SetProviderID(v uint64) *OauthStateCreate {
	_c.mutation.SetProviderID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OauthStateCreate) SetUserID(v uint64) *OauthStateCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableUserID(v *uint64) *OauthStateCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *OauthStateCreate) SetExpiresAt(v time.Time) *OauthStateCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetUsedAt sets the "used_at" field.
func (_c *OauthStateCreate) SetUsedAt(v time.Time) *OauthStateCreate {
	_c.mutation.SetUsedAt(v)
	return _c
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_c *OauthStateCreate) SetNillableUsedAt(v *time.Time) *OauthStateCreate {
	if v != nil {
		_c.SetUsedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthStateCreate) SetID(v uint64) *OauthStateCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_c *OauthStateCreate) SetProvider(v *OauthProvider) *OauthStateCreate {
	return _c.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_c *OauthStateCreate) SetUser(v *User) *OauthStateCreate {
	return _c.SetUserID(v.ID)
}

// AddOauthUserIDs adds the "oauth_users" edge to the OauthUser entity by IDs.
func (_c *OauthStateCreate) AddOauthUserIDs(ids ...uint64) *OauthStateCreate {
	_c.mutation.AddOauthUserIDs(ids...)
	return _c
}

// AddOauthUsers adds the "oauth_users" edges to the OauthUser entity.
func (_c *OauthStateCreate) AddOauthUsers(v ...*OauthUser) *OauthStateCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOauthUserIDs(ids...)
}

// Mutation returns the OauthStateMutation object of the builder.
func (_c *OauthStateCreate) Mutation() *OauthStateMutation {
	return _c.mutation
}

// Save creates the OauthState in the database.
func (_c *OauthStateCreate) Save(ctx context.Context) (*OauthState, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthStateCreate) SaveX(ctx context.Context) *OauthState {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthStateCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthStateCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthStateCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if oauthstate.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthstate.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := oauthstate.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if oauthstate.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthstate.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthstate.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthStateCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OauthState.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OauthState.update_time"`)}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OauthState.state"`)}
	}
	if v, ok := _c.mutation.State(); ok {
		if err := oauthstate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthState.state": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OauthState.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := oauthstate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthState.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OauthState.provider_id"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OauthState.expires_at"`)}
	}
	if len(_c.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "OauthState.provider"`)}
	}
	return nil
}

func (_c *OauthStateCreate) sqlSave(ctx context.Context) (*OauthState, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthStateCreate) createSpec() (*OauthState, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthState{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthstate.Table, sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(oauthstate.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(oauthstate.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(oauthstate.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(oauthstate.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(oauthstate.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(oauthstate.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(oauthstate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(oauthstate.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthstate.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.UsedAt(); ok {
		_spec.SetField(oauthstate.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if nodes := _c.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OauthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthStateCreateBulk is the builder for creating many OauthState entities in bulk.
type OauthStateCreateBulk struct {
	config
	err      error
	builders []*OauthStateCreate
}

// Save creates the OauthState entities in the database.
func (_c *OauthStateCreateBulk) Save(ctx context.Context) ([]*OauthState, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthState, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthStateCreateBulk) SaveX(ctx context.Context) []*OauthState {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthStateCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthStateCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
