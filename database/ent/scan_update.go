// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/scan"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks    []Hook
	mutation *ScanMutation
}

// Where appends a list predicates to the ScanUpdate builder.
func (_u *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *ScanUpdate) SetCreateBy(v int64) *ScanUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableCreateBy(v *int64) *ScanUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ScanUpdate) AddCreateBy(v int64) *ScanUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ScanUpdate) ClearCreateBy() *ScanUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ScanUpdate) SetUpdateTime(v time.Time) *ScanUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ScanUpdate) SetUpdateBy(v int64) *ScanUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableUpdateBy(v *int64) *ScanUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ScanUpdate) AddUpdateBy(v int64) *ScanUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ScanUpdate) ClearUpdateBy() *ScanUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ScanUpdate) SetDeleteTime(v time.Time) *ScanUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableDeleteTime(v *time.Time) *ScanUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ScanUpdate) ClearDeleteTime() *ScanUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ScanUpdate) SetDeleteBy(v int64) *ScanUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableDeleteBy(v *int64) *ScanUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ScanUpdate) AddDeleteBy(v int64) *ScanUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ScanUpdate) ClearDeleteBy() *ScanUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetContent sets the "content" field.
func (_u *ScanUpdate) SetContent(v string) *ScanUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableContent(v *string) *ScanUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetLength sets the "length" field.
func (_u *ScanUpdate) SetLength(v int) *ScanUpdate {
	_u.mutation.ResetLength()
	_u.mutation.SetLength(v)
	return _u
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableLength(v *int) *ScanUpdate {
	if v != nil {
		_u.SetLength(*v)
	}
	return _u
}

// AddLength adds value to the "length" field.
func (_u *ScanUpdate) AddLength(v int) *ScanUpdate {
	_u.mutation.AddLength(v)
	return _u
}

// SetSuccess sets the "success" field.
func (_u *ScanUpdate) SetSuccess(v bool) *ScanUpdate {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableSuccess(v *bool) *ScanUpdate {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (_u *ScanUpdate) SetAttachmentID(id uint64) *ScanUpdate {
	_u.mutation.SetAttachmentID(id)
	return _u
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (_u *ScanUpdate) SetNillableAttachmentID(id *uint64) *ScanUpdate {
	if id != nil {
		_u = _u.SetAttachmentID(*id)
	}
	return _u
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (_u *ScanUpdate) SetAttachment(v *Attachment) *ScanUpdate {
	return _u.SetAttachmentID(v.ID)
}

// Mutation returns the ScanMutation object of the builder.
func (_u *ScanUpdate) Mutation() *ScanMutation {
	return _u.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (_u *ScanUpdate) ClearAttachment() *ScanUpdate {
	_u.mutation.ClearAttachment()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ScanUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ScanUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if scan.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized scan.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := scan.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanUpdate) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := scan.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Scan.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Length(); ok {
		if err := scan.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Scan.length": %w`, err)}
		}
	}
	return nil
}

func (_u *ScanUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(scan.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(scan.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(scan.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(scan.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(scan.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(scan.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(scan.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(scan.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(scan.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(scan.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(scan.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(scan.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(scan.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Length(); ok {
		_spec.SetField(scan.FieldLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLength(); ok {
		_spec.AddField(scan.FieldLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(scan.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *ScanUpdateOne) SetCreateBy(v int64) *ScanUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableCreateBy(v *int64) *ScanUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ScanUpdateOne) AddCreateBy(v int64) *ScanUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ScanUpdateOne) ClearCreateBy() *ScanUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ScanUpdateOne) SetUpdateTime(v time.Time) *ScanUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ScanUpdateOne) SetUpdateBy(v int64) *ScanUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableUpdateBy(v *int64) *ScanUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ScanUpdateOne) AddUpdateBy(v int64) *ScanUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ScanUpdateOne) ClearUpdateBy() *ScanUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ScanUpdateOne) SetDeleteTime(v time.Time) *ScanUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableDeleteTime(v *time.Time) *ScanUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ScanUpdateOne) ClearDeleteTime() *ScanUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ScanUpdateOne) SetDeleteBy(v int64) *ScanUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableDeleteBy(v *int64) *ScanUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ScanUpdateOne) AddDeleteBy(v int64) *ScanUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ScanUpdateOne) ClearDeleteBy() *ScanUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetContent sets the "content" field.
func (_u *ScanUpdateOne) SetContent(v string) *ScanUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableContent(v *string) *ScanUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetLength sets the "length" field.
func (_u *ScanUpdateOne) SetLength(v int) *ScanUpdateOne {
	_u.mutation.ResetLength()
	_u.mutation.SetLength(v)
	return _u
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableLength(v *int) *ScanUpdateOne {
	if v != nil {
		_u.SetLength(*v)
	}
	return _u
}

// AddLength adds value to the "length" field.
func (_u *ScanUpdateOne) AddLength(v int) *ScanUpdateOne {
	_u.mutation.AddLength(v)
	return _u
}

// SetSuccess sets the "success" field.
func (_u *ScanUpdateOne) SetSuccess(v bool) *ScanUpdateOne {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableSuccess(v *bool) *ScanUpdateOne {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (_u *ScanUpdateOne) SetAttachmentID(id uint64) *ScanUpdateOne {
	_u.mutation.SetAttachmentID(id)
	return _u
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableAttachmentID(id *uint64) *ScanUpdateOne {
	if id != nil {
		_u = _u.SetAttachmentID(*id)
	}
	return _u
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (_u *ScanUpdateOne) SetAttachment(v *Attachment) *ScanUpdateOne {
	return _u.SetAttachmentID(v.ID)
}

// Mutation returns the ScanMutation object of the builder.
func (_u *ScanUpdateOne) Mutation() *ScanMutation {
	return _u.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (_u *ScanUpdateOne) ClearAttachment() *ScanUpdateOne {
	_u.mutation.ClearAttachment()
	return _u
}

// Where appends a list predicates to the ScanUpdate builder.
func (_u *ScanUpdateOne) Where(ps ...predicate.Scan) *ScanUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Scan entity.
func (_u *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if scan.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized scan.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := scan.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanUpdateOne) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := scan.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Scan.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Length(); ok {
		if err := scan.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Scan.length": %w`, err)}
		}
	}
	return nil
}

func (_u *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(scan.FieldCreateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(scan.FieldCreateBy, field.TypeInt64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(scan.FieldCreateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(scan.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(scan.FieldUpdateBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(scan.FieldUpdateBy, field.TypeInt64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(scan.FieldUpdateBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(scan.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(scan.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(scan.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(scan.FieldDeleteBy, field.TypeInt64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(scan.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(scan.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Length(); ok {
		_spec.SetField(scan.FieldLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLength(); ok {
		_spec.AddField(scan.FieldLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(scan.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scan{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
