// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownode"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeExecutionUpdate is the builder for updating WorkflowNodeExecution entities.
type WorkflowNodeExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowNodeExecutionMutation
}

// Where appends a list predicates to the WorkflowNodeExecutionUpdate builder.
func (_u *WorkflowNodeExecutionUpdate) Where(ps ...predicate.WorkflowNodeExecution) *WorkflowNodeExecutionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowNodeExecutionUpdate) SetCreateBy(v uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableCreateBy(v *uint64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowNodeExecutionUpdate) AddCreateBy(v int64) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowNodeExecutionUpdate) ClearCreateBy() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowNodeExecutionUpdate) SetUpdateTime(v time.Time) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowNodeExecutionUpdate) SetUpdateBy(v uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableUpdateBy(v *uint64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowNodeExecutionUpdate) AddUpdateBy(v int64) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowNodeExecutionUpdate) ClearUpdateBy() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowNodeExecutionUpdate) SetExecutionID(v uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableExecutionID(v *uint64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// SetNodeID sets the "node_id" field.
func (_u *WorkflowNodeExecutionUpdate) SetNodeID(v uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetNodeID(v)
	return _u
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableNodeID(v *uint64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetNodeID(*v)
	}
	return _u
}

// SetNodeName sets the "node_name" field.
func (_u *WorkflowNodeExecutionUpdate) SetNodeName(v string) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetNodeName(v)
	return _u
}

// SetNillableNodeName sets the "node_name" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableNodeName(v *string) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetNodeName(*v)
	}
	return _u
}

// SetNodeType sets the "node_type" field.
func (_u *WorkflowNodeExecutionUpdate) SetNodeType(v string) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetNodeType(v)
	return _u
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableNodeType(v *string) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetNodeType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowNodeExecutionUpdate) SetStatus(v workflownodeexecution.Status) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableStatus(v *workflownodeexecution.Status) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetInput sets the "input" field.
func (_u *WorkflowNodeExecutionUpdate) SetInput(v map[string]interface{}) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetInput(v)
	return _u
}

// ClearInput clears the value of the "input" field.
func (_u *WorkflowNodeExecutionUpdate) ClearInput() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearInput()
	return _u
}

// SetOutput sets the "output" field.
func (_u *WorkflowNodeExecutionUpdate) SetOutput(v map[string]interface{}) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetOutput(v)
	return _u
}

// ClearOutput clears the value of the "output" field.
func (_u *WorkflowNodeExecutionUpdate) ClearOutput() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearOutput()
	return _u
}

// SetExtra sets the "extra" field.
func (_u *WorkflowNodeExecutionUpdate) SetExtra(v map[string]interface{}) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetExtra(v)
	return _u
}

// ClearExtra clears the value of the "extra" field.
func (_u *WorkflowNodeExecutionUpdate) ClearExtra() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearExtra()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *WorkflowNodeExecutionUpdate) SetStartedAt(v time.Time) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableStartedAt(v *time.Time) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *WorkflowNodeExecutionUpdate) ClearStartedAt() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *WorkflowNodeExecutionUpdate) SetFinishedAt(v time.Time) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableFinishedAt(v *time.Time) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *WorkflowNodeExecutionUpdate) ClearFinishedAt() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *WorkflowNodeExecutionUpdate) SetDurationMs(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableDurationMs(v *int) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *WorkflowNodeExecutionUpdate) AddDurationMs(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetPromptTokens sets the "prompt_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) SetPromptTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetPromptTokens()
	_u.mutation.SetPromptTokens(v)
	return _u
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillablePromptTokens(v *int) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetPromptTokens(*v)
	}
	return _u
}

// AddPromptTokens adds value to the "prompt_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) AddPromptTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddPromptTokens(v)
	return _u
}

// SetCompletionTokens sets the "completion_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) SetCompletionTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetCompletionTokens()
	_u.mutation.SetCompletionTokens(v)
	return _u
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableCompletionTokens(v *int) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetCompletionTokens(*v)
	}
	return _u
}

// AddCompletionTokens adds value to the "completion_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) AddCompletionTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddCompletionTokens(v)
	return _u
}

// SetTotalTokens sets the "total_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) SetTotalTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetTotalTokens()
	_u.mutation.SetTotalTokens(v)
	return _u
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableTotalTokens(v *int) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetTotalTokens(*v)
	}
	return _u
}

// AddTotalTokens adds value to the "total_tokens" field.
func (_u *WorkflowNodeExecutionUpdate) AddTotalTokens(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddTotalTokens(v)
	return _u
}

// SetCost sets the "cost" field.
func (_u *WorkflowNodeExecutionUpdate) SetCost(v float64) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableCost(v *float64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *WorkflowNodeExecutionUpdate) AddCost(v float64) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddCost(v)
	return _u
}

// SetModel sets the "model" field.
func (_u *WorkflowNodeExecutionUpdate) SetModel(v string) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetModel(v)
	return _u
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableModel(v *string) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetModel(*v)
	}
	return _u
}

// ClearModel clears the value of the "model" field.
func (_u *WorkflowNodeExecutionUpdate) ClearModel() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearModel()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *WorkflowNodeExecutionUpdate) SetErrorMessage(v string) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableErrorMessage(v *string) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *WorkflowNodeExecutionUpdate) ClearErrorMessage() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetErrorStack sets the "error_stack" field.
func (_u *WorkflowNodeExecutionUpdate) SetErrorStack(v string) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetErrorStack(v)
	return _u
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableErrorStack(v *string) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetErrorStack(*v)
	}
	return _u
}

// ClearErrorStack clears the value of the "error_stack" field.
func (_u *WorkflowNodeExecutionUpdate) ClearErrorStack() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearErrorStack()
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *WorkflowNodeExecutionUpdate) SetRetryCount(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableRetryCount(v *int) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *WorkflowNodeExecutionUpdate) AddRetryCount(v int) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetIsAsync sets the "is_async" field.
func (_u *WorkflowNodeExecutionUpdate) SetIsAsync(v bool) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetIsAsync(v)
	return _u
}

// SetNillableIsAsync sets the "is_async" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableIsAsync(v *bool) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetIsAsync(*v)
	}
	return _u
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdate) SetParentExecutionID(v uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.ResetParentExecutionID()
	_u.mutation.SetParentExecutionID(v)
	return _u
}

// SetNillableParentExecutionID sets the "parent_execution_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdate) SetNillableParentExecutionID(v *uint64) *WorkflowNodeExecutionUpdate {
	if v != nil {
		_u.SetParentExecutionID(*v)
	}
	return _u
}

// AddParentExecutionID adds value to the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdate) AddParentExecutionID(v int64) *WorkflowNodeExecutionUpdate {
	_u.mutation.AddParentExecutionID(v)
	return _u
}

// ClearParentExecutionID clears the value of the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdate) ClearParentExecutionID() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearParentExecutionID()
	return _u
}

// SetWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID.
func (_u *WorkflowNodeExecutionUpdate) SetWorkflowExecutionID(id uint64) *WorkflowNodeExecutionUpdate {
	_u.mutation.SetWorkflowExecutionID(id)
	return _u
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (_u *WorkflowNodeExecutionUpdate) SetWorkflowExecution(v *WorkflowExecution) *WorkflowNodeExecutionUpdate {
	return _u.SetWorkflowExecutionID(v.ID)
}

// SetNode sets the "node" edge to the WorkflowNode entity.
func (_u *WorkflowNodeExecutionUpdate) SetNode(v *WorkflowNode) *WorkflowNodeExecutionUpdate {
	return _u.SetNodeID(v.ID)
}

// Mutation returns the WorkflowNodeExecutionMutation object of the builder.
func (_u *WorkflowNodeExecutionUpdate) Mutation() *WorkflowNodeExecutionMutation {
	return _u.mutation
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (_u *WorkflowNodeExecutionUpdate) ClearWorkflowExecution() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearWorkflowExecution()
	return _u
}

// ClearNode clears the "node" edge to the WorkflowNode entity.
func (_u *WorkflowNodeExecutionUpdate) ClearNode() *WorkflowNodeExecutionUpdate {
	_u.mutation.ClearNode()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowNodeExecutionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowNodeExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowNodeExecutionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowNodeExecutionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowNodeExecutionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflownodeexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownodeexecution.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownodeexecution.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowNodeExecutionUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := workflownodeexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowNodeExecution.status": %w`, err)}
		}
	}
	if _u.mutation.WorkflowExecutionCleared() && len(_u.mutation.WorkflowExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNodeExecution.workflow_execution"`)
	}
	if _u.mutation.NodeCleared() && len(_u.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNodeExecution.node"`)
	}
	return nil
}

func (_u *WorkflowNodeExecutionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflownodeexecution.Table, workflownodeexecution.Columns, sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflownodeexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflownodeexecution.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflownodeexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflownodeexecution.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.NodeName(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NodeType(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflownodeexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Input(); ok {
		_spec.SetField(workflownodeexecution.FieldInput, field.TypeJSON, value)
	}
	if _u.mutation.InputCleared() {
		_spec.ClearField(workflownodeexecution.FieldInput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Output(); ok {
		_spec.SetField(workflownodeexecution.FieldOutput, field.TypeJSON, value)
	}
	if _u.mutation.OutputCleared() {
		_spec.ClearField(workflownodeexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Extra(); ok {
		_spec.SetField(workflownodeexecution.FieldExtra, field.TypeJSON, value)
	}
	if _u.mutation.ExtraCleared() {
		_spec.ClearField(workflownodeexecution.FieldExtra, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(workflownodeexecution.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(workflownodeexecution.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(workflownodeexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflownodeexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PromptTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPromptTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletionTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletionTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(workflownodeexecution.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(workflownodeexecution.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Model(); ok {
		_spec.SetField(workflownodeexecution.FieldModel, field.TypeString, value)
	}
	if _u.mutation.ModelCleared() {
		_spec.ClearField(workflownodeexecution.FieldModel, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(workflownodeexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorStack(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorStack, field.TypeString, value)
	}
	if _u.mutation.ErrorStackCleared() {
		_spec.ClearField(workflownodeexecution.FieldErrorStack, field.TypeString)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(workflownodeexecution.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(workflownodeexecution.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsAsync(); ok {
		_spec.SetField(workflownodeexecution.FieldIsAsync, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ParentExecutionID(); ok {
		_spec.SetField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedParentExecutionID(); ok {
		_spec.AddField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64, value)
	}
	if _u.mutation.ParentExecutionIDCleared() {
		_spec.ClearField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64)
	}
	if _u.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.WorkflowExecutionTable,
			Columns: []string{workflownodeexecution.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.WorkflowExecutionTable,
			Columns: []string{workflownodeexecution.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.NodeTable,
			Columns: []string{workflownodeexecution.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.NodeTable,
			Columns: []string{workflownodeexecution.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownodeexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowNodeExecutionUpdateOne is the builder for updating a single WorkflowNodeExecution entity.
type WorkflowNodeExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowNodeExecutionMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetCreateBy(v uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddCreateBy(v int64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearCreateBy() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetUpdateTime(v time.Time) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetUpdateBy(v uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddUpdateBy(v int64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearUpdateBy() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetExecutionID(v uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableExecutionID(v *uint64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// SetNodeID sets the "node_id" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetNodeID(v uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetNodeID(v)
	return _u
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableNodeID(v *uint64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetNodeID(*v)
	}
	return _u
}

// SetNodeName sets the "node_name" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetNodeName(v string) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetNodeName(v)
	return _u
}

// SetNillableNodeName sets the "node_name" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableNodeName(v *string) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetNodeName(*v)
	}
	return _u
}

// SetNodeType sets the "node_type" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetNodeType(v string) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetNodeType(v)
	return _u
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableNodeType(v *string) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetNodeType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetStatus(v workflownodeexecution.Status) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableStatus(v *workflownodeexecution.Status) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetInput sets the "input" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetInput(v map[string]interface{}) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetInput(v)
	return _u
}

// ClearInput clears the value of the "input" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearInput() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearInput()
	return _u
}

// SetOutput sets the "output" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetOutput(v map[string]interface{}) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetOutput(v)
	return _u
}

// ClearOutput clears the value of the "output" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearOutput() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearOutput()
	return _u
}

// SetExtra sets the "extra" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetExtra(v map[string]interface{}) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetExtra(v)
	return _u
}

// ClearExtra clears the value of the "extra" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearExtra() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearExtra()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetStartedAt(v time.Time) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableStartedAt(v *time.Time) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearStartedAt() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetFinishedAt(v time.Time) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableFinishedAt(v *time.Time) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearFinishedAt() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetDurationMs(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableDurationMs(v *int) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddDurationMs(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetPromptTokens sets the "prompt_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetPromptTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetPromptTokens()
	_u.mutation.SetPromptTokens(v)
	return _u
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillablePromptTokens(v *int) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetPromptTokens(*v)
	}
	return _u
}

// AddPromptTokens adds value to the "prompt_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddPromptTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddPromptTokens(v)
	return _u
}

// SetCompletionTokens sets the "completion_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetCompletionTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetCompletionTokens()
	_u.mutation.SetCompletionTokens(v)
	return _u
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableCompletionTokens(v *int) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetCompletionTokens(*v)
	}
	return _u
}

// AddCompletionTokens adds value to the "completion_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddCompletionTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddCompletionTokens(v)
	return _u
}

// SetTotalTokens sets the "total_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetTotalTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetTotalTokens()
	_u.mutation.SetTotalTokens(v)
	return _u
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableTotalTokens(v *int) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetTotalTokens(*v)
	}
	return _u
}

// AddTotalTokens adds value to the "total_tokens" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddTotalTokens(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddTotalTokens(v)
	return _u
}

// SetCost sets the "cost" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetCost(v float64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableCost(v *float64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddCost(v float64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddCost(v)
	return _u
}

// SetModel sets the "model" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetModel(v string) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetModel(v)
	return _u
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableModel(v *string) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetModel(*v)
	}
	return _u
}

// ClearModel clears the value of the "model" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearModel() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearModel()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetErrorMessage(v string) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableErrorMessage(v *string) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearErrorMessage() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetErrorStack sets the "error_stack" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetErrorStack(v string) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetErrorStack(v)
	return _u
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableErrorStack(v *string) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetErrorStack(*v)
	}
	return _u
}

// ClearErrorStack clears the value of the "error_stack" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearErrorStack() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearErrorStack()
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetRetryCount(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableRetryCount(v *int) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddRetryCount(v int) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetIsAsync sets the "is_async" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetIsAsync(v bool) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetIsAsync(v)
	return _u
}

// SetNillableIsAsync sets the "is_async" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableIsAsync(v *bool) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetIsAsync(*v)
	}
	return _u
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdateOne) SetParentExecutionID(v uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ResetParentExecutionID()
	_u.mutation.SetParentExecutionID(v)
	return _u
}

// SetNillableParentExecutionID sets the "parent_execution_id" field if the given value is not nil.
func (_u *WorkflowNodeExecutionUpdateOne) SetNillableParentExecutionID(v *uint64) *WorkflowNodeExecutionUpdateOne {
	if v != nil {
		_u.SetParentExecutionID(*v)
	}
	return _u
}

// AddParentExecutionID adds value to the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdateOne) AddParentExecutionID(v int64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.AddParentExecutionID(v)
	return _u
}

// ClearParentExecutionID clears the value of the "parent_execution_id" field.
func (_u *WorkflowNodeExecutionUpdateOne) ClearParentExecutionID() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearParentExecutionID()
	return _u
}

// SetWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID.
func (_u *WorkflowNodeExecutionUpdateOne) SetWorkflowExecutionID(id uint64) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.SetWorkflowExecutionID(id)
	return _u
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (_u *WorkflowNodeExecutionUpdateOne) SetWorkflowExecution(v *WorkflowExecution) *WorkflowNodeExecutionUpdateOne {
	return _u.SetWorkflowExecutionID(v.ID)
}

// SetNode sets the "node" edge to the WorkflowNode entity.
func (_u *WorkflowNodeExecutionUpdateOne) SetNode(v *WorkflowNode) *WorkflowNodeExecutionUpdateOne {
	return _u.SetNodeID(v.ID)
}

// Mutation returns the WorkflowNodeExecutionMutation object of the builder.
func (_u *WorkflowNodeExecutionUpdateOne) Mutation() *WorkflowNodeExecutionMutation {
	return _u.mutation
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (_u *WorkflowNodeExecutionUpdateOne) ClearWorkflowExecution() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearWorkflowExecution()
	return _u
}

// ClearNode clears the "node" edge to the WorkflowNode entity.
func (_u *WorkflowNodeExecutionUpdateOne) ClearNode() *WorkflowNodeExecutionUpdateOne {
	_u.mutation.ClearNode()
	return _u
}

// Where appends a list predicates to the WorkflowNodeExecutionUpdate builder.
func (_u *WorkflowNodeExecutionUpdateOne) Where(ps ...predicate.WorkflowNodeExecution) *WorkflowNodeExecutionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowNodeExecutionUpdateOne) Select(field string, fields ...string) *WorkflowNodeExecutionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowNodeExecution entity.
func (_u *WorkflowNodeExecutionUpdateOne) Save(ctx context.Context) (*WorkflowNodeExecution, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowNodeExecutionUpdateOne) SaveX(ctx context.Context) *WorkflowNodeExecution {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowNodeExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowNodeExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowNodeExecutionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflownodeexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownodeexecution.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownodeexecution.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowNodeExecutionUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := workflownodeexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowNodeExecution.status": %w`, err)}
		}
	}
	if _u.mutation.WorkflowExecutionCleared() && len(_u.mutation.WorkflowExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNodeExecution.workflow_execution"`)
	}
	if _u.mutation.NodeCleared() && len(_u.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowNodeExecution.node"`)
	}
	return nil
}

func (_u *WorkflowNodeExecutionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowNodeExecution, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflownodeexecution.Table, workflownodeexecution.Columns, sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowNodeExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflownodeexecution.FieldID)
		for _, f := range fields {
			if !workflownodeexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflownodeexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflownodeexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflownodeexecution.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflownodeexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflownodeexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflownodeexecution.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.NodeName(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NodeType(); ok {
		_spec.SetField(workflownodeexecution.FieldNodeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflownodeexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Input(); ok {
		_spec.SetField(workflownodeexecution.FieldInput, field.TypeJSON, value)
	}
	if _u.mutation.InputCleared() {
		_spec.ClearField(workflownodeexecution.FieldInput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Output(); ok {
		_spec.SetField(workflownodeexecution.FieldOutput, field.TypeJSON, value)
	}
	if _u.mutation.OutputCleared() {
		_spec.ClearField(workflownodeexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Extra(); ok {
		_spec.SetField(workflownodeexecution.FieldExtra, field.TypeJSON, value)
	}
	if _u.mutation.ExtraCleared() {
		_spec.ClearField(workflownodeexecution.FieldExtra, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(workflownodeexecution.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(workflownodeexecution.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(workflownodeexecution.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(workflownodeexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflownodeexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PromptTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPromptTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletionTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletionTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalTokens(); ok {
		_spec.SetField(workflownodeexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTokens(); ok {
		_spec.AddField(workflownodeexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(workflownodeexecution.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(workflownodeexecution.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Model(); ok {
		_spec.SetField(workflownodeexecution.FieldModel, field.TypeString, value)
	}
	if _u.mutation.ModelCleared() {
		_spec.ClearField(workflownodeexecution.FieldModel, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(workflownodeexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorStack(); ok {
		_spec.SetField(workflownodeexecution.FieldErrorStack, field.TypeString, value)
	}
	if _u.mutation.ErrorStackCleared() {
		_spec.ClearField(workflownodeexecution.FieldErrorStack, field.TypeString)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(workflownodeexecution.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(workflownodeexecution.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsAsync(); ok {
		_spec.SetField(workflownodeexecution.FieldIsAsync, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ParentExecutionID(); ok {
		_spec.SetField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedParentExecutionID(); ok {
		_spec.AddField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64, value)
	}
	if _u.mutation.ParentExecutionIDCleared() {
		_spec.ClearField(workflownodeexecution.FieldParentExecutionID, field.TypeUint64)
	}
	if _u.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.WorkflowExecutionTable,
			Columns: []string{workflownodeexecution.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.WorkflowExecutionTable,
			Columns: []string{workflownodeexecution.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.NodeTable,
			Columns: []string{workflownodeexecution.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownodeexecution.NodeTable,
			Columns: []string{workflownodeexecution.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowNodeExecution{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownodeexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
