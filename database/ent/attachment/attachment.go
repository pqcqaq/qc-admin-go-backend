// Code generated by ent, DO NOT EDIT.

package attachment

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the attachment type in the database.
	Label = "attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldBucket holds the string denoting the bucket field in the database.
	FieldBucket = "bucket"
	// FieldStorageProvider holds the string denoting the storage_provider field in the database.
	FieldStorageProvider = "storage_provider"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUploadSessionID holds the string denoting the upload_session_id field in the database.
	FieldUploadSessionID = "upload_session_id"
	// FieldTag1 holds the string denoting the tag1 field in the database.
	FieldTag1 = "tag1"
	// FieldTag2 holds the string denoting the tag2 field in the database.
	FieldTag2 = "tag2"
	// FieldTag3 holds the string denoting the tag3 field in the database.
	FieldTag3 = "tag3"
	// Table holds the table name of the attachment in the database.
	Table = "attachments"
)

// Columns holds all SQL columns for attachment fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldFilename,
	FieldPath,
	FieldURL,
	FieldContentType,
	FieldSize,
	FieldEtag,
	FieldBucket,
	FieldStorageProvider,
	FieldMetadata,
	FieldStatus,
	FieldUploadSessionID,
	FieldTag1,
	FieldTag2,
	FieldTag3,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attachments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_attachments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	ContentTypeValidator func(string) error
	// EtagValidator is a validator for the "etag" field. It is called by the builders before save.
	EtagValidator func(string) error
	// BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	BucketValidator func(string) error
	// DefaultStorageProvider holds the default value on creation for the "storage_provider" field.
	DefaultStorageProvider string
	// StorageProviderValidator is a validator for the "storage_provider" field. It is called by the builders before save.
	StorageProviderValidator func(string) error
	// UploadSessionIDValidator is a validator for the "upload_session_id" field. It is called by the builders before save.
	UploadSessionIDValidator func(string) error
	// Tag1Validator is a validator for the "tag1" field. It is called by the builders before save.
	Tag1Validator func(string) error
	// Tag2Validator is a validator for the "tag2" field. It is called by the builders before save.
	Tag2Validator func(string) error
	// Tag3Validator is a validator for the "tag3" field. It is called by the builders before save.
	Tag3Validator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUploading is the default value of the Status enum.
const DefaultStatus = StatusUploading

// Status values.
const (
	StatusUploading Status = "uploading"
	StatusUploaded  Status = "uploaded"
	StatusFailed    Status = "failed"
	StatusDeleted   Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUploading, StatusUploaded, StatusFailed, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("attachment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Attachment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByBucket orders the results by the bucket field.
func ByBucket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBucket, opts...).ToFunc()
}

// ByStorageProvider orders the results by the storage_provider field.
func ByStorageProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageProvider, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUploadSessionID orders the results by the upload_session_id field.
func ByUploadSessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadSessionID, opts...).ToFunc()
}

// ByTag1 orders the results by the tag1 field.
func ByTag1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag1, opts...).ToFunc()
}

// ByTag2 orders the results by the tag2 field.
func ByTag2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag2, opts...).ToFunc()
}

// ByTag3 orders the results by the tag3 field.
func ByTag3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag3, opts...).ToFunc()
}
