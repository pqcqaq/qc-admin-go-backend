// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/scope"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScopeCreate is the builder for creating a Scope entity.
type ScopeCreate struct {
	config
	mutation *ScopeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *ScopeCreate) SetCreateTime(v time.Time) *ScopeCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableCreateTime(v *time.Time) *ScopeCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *ScopeCreate) SetCreateBy(v int64) *ScopeCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableCreateBy(v *int64) *ScopeCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *ScopeCreate) SetUpdateTime(v time.Time) *ScopeCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableUpdateTime(v *time.Time) *ScopeCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *ScopeCreate) SetUpdateBy(v int64) *ScopeCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableUpdateBy(v *int64) *ScopeCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *ScopeCreate) SetDeleteTime(v time.Time) *ScopeCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableDeleteTime(v *time.Time) *ScopeCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *ScopeCreate) SetDeleteBy(v int64) *ScopeCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableDeleteBy(v *int64) *ScopeCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ScopeCreate) SetName(v string) *ScopeCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *ScopeCreate) SetType(v scope.Type) *ScopeCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableType(v *scope.Type) *ScopeCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetIcon sets the "icon" field.
func (_c *ScopeCreate) SetIcon(v string) *ScopeCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableIcon(v *string) *ScopeCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ScopeCreate) SetDescription(v string) *ScopeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableDescription(v *string) *ScopeCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetAction sets the "action" field.
func (_c *ScopeCreate) SetAction(v string) *ScopeCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableAction(v *string) *ScopeCreate {
	if v != nil {
		_c.SetAction(*v)
	}
	return _c
}

// SetPath sets the "path" field.
func (_c *ScopeCreate) SetPath(v string) *ScopeCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *ScopeCreate) SetNillablePath(v *string) *ScopeCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetComponent sets the "component" field.
func (_c *ScopeCreate) SetComponent(v string) *ScopeCreate {
	_c.mutation.SetComponent(v)
	return _c
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableComponent(v *string) *ScopeCreate {
	if v != nil {
		_c.SetComponent(*v)
	}
	return _c
}

// SetRedirect sets the "redirect" field.
func (_c *ScopeCreate) SetRedirect(v string) *ScopeCreate {
	_c.mutation.SetRedirect(v)
	return _c
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableRedirect(v *string) *ScopeCreate {
	if v != nil {
		_c.SetRedirect(*v)
	}
	return _c
}

// SetOrder sets the "order" field.
func (_c *ScopeCreate) SetOrder(v int) *ScopeCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableOrder(v *int) *ScopeCreate {
	if v != nil {
		_c.SetOrder(*v)
	}
	return _c
}

// SetHidden sets the "hidden" field.
func (_c *ScopeCreate) SetHidden(v bool) *ScopeCreate {
	_c.mutation.SetHidden(v)
	return _c
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableHidden(v *bool) *ScopeCreate {
	if v != nil {
		_c.SetHidden(*v)
	}
	return _c
}

// SetDisabled sets the "disabled" field.
func (_c *ScopeCreate) SetDisabled(v bool) *ScopeCreate {
	_c.mutation.SetDisabled(v)
	return _c
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableDisabled(v *bool) *ScopeCreate {
	if v != nil {
		_c.SetDisabled(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *ScopeCreate) SetParentID(v uint64) *ScopeCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *ScopeCreate) SetNillableParentID(v *uint64) *ScopeCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ScopeCreate) SetID(v uint64) *ScopeCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParent sets the "parent" edge to the Scope entity.
func (_c *ScopeCreate) SetParent(v *Scope) *ScopeCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Scope entity by IDs.
func (_c *ScopeCreate) AddChildIDs(ids ...uint64) *ScopeCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Scope entity.
func (_c *ScopeCreate) AddChildren(v ...*Scope) *ScopeCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_c *ScopeCreate) AddPermissionIDs(ids ...uint64) *ScopeCreate {
	_c.mutation.AddPermissionIDs(ids...)
	return _c
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_c *ScopeCreate) AddPermissions(v ...*Permission) *ScopeCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPermissionIDs(ids...)
}

// Mutation returns the ScopeMutation object of the builder.
func (_c *ScopeCreate) Mutation() *ScopeMutation {
	return _c.mutation
}

// Save creates the Scope in the database.
func (_c *ScopeCreate) Save(ctx context.Context) (*Scope, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ScopeCreate) SaveX(ctx context.Context) *Scope {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ScopeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ScopeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ScopeCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if scope.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized scope.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := scope.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if scope.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized scope.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := scope.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := scope.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Order(); !ok {
		v := scope.DefaultOrder
		_c.mutation.SetOrder(v)
	}
	if _, ok := _c.mutation.Hidden(); !ok {
		v := scope.DefaultHidden
		_c.mutation.SetHidden(v)
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		v := scope.DefaultDisabled
		_c.mutation.SetDisabled(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ScopeCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Scope.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Scope.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Scope.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := scope.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Scope.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Scope.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := scope.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scope.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Scope.order"`)}
	}
	if _, ok := _c.mutation.Hidden(); !ok {
		return &ValidationError{Name: "hidden", err: errors.New(`ent: missing required field "Scope.hidden"`)}
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Scope.disabled"`)}
	}
	return nil
}

func (_c *ScopeCreate) sqlSave(ctx context.Context) (*Scope, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ScopeCreate) createSpec() (*Scope, *sqlgraph.CreateSpec) {
	var (
		_node = &Scope{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(scope.Table, sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(scope.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(scope.FieldCreateBy, field.TypeInt64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(scope.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(scope.FieldUpdateBy, field.TypeInt64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(scope.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(scope.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(scope.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(scope.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(scope.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(scope.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(scope.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(scope.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.Component(); ok {
		_spec.SetField(scope.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := _c.mutation.Redirect(); ok {
		_spec.SetField(scope.FieldRedirect, field.TypeString, value)
		_node.Redirect = value
	}
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(scope.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Hidden(); ok {
		_spec.SetField(scope.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := _c.mutation.Disabled(); ok {
		_spec.SetField(scope.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScopeCreateBulk is the builder for creating many Scope entities in bulk.
type ScopeCreateBulk struct {
	config
	err      error
	builders []*ScopeCreate
}

// Save creates the Scope entities in the database.
func (_c *ScopeCreateBulk) Save(ctx context.Context) ([]*Scope, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Scope, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ScopeCreateBulk) SaveX(ctx context.Context) []*Scope {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ScopeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
