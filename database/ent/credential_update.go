// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CredentialUpdate is the builder for updating Credential entities.
type CredentialUpdate struct {
	config
	hooks    []Hook
	mutation *CredentialMutation
}

// Where appends a list predicates to the CredentialUpdate builder.
func (_u *CredentialUpdate) Where(ps ...predicate.Credential) *CredentialUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *CredentialUpdate) SetCreateBy(v uint64) *CredentialUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableCreateBy(v *uint64) *CredentialUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *CredentialUpdate) AddCreateBy(v int64) *CredentialUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *CredentialUpdate) ClearCreateBy() *CredentialUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *CredentialUpdate) SetUpdateTime(v time.Time) *CredentialUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *CredentialUpdate) SetUpdateBy(v uint64) *CredentialUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableUpdateBy(v *uint64) *CredentialUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *CredentialUpdate) AddUpdateBy(v int64) *CredentialUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *CredentialUpdate) ClearUpdateBy() *CredentialUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *CredentialUpdate) SetDeleteTime(v time.Time) *CredentialUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableDeleteTime(v *time.Time) *CredentialUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *CredentialUpdate) ClearDeleteTime() *CredentialUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *CredentialUpdate) SetDeleteBy(v uint64) *CredentialUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableDeleteBy(v *uint64) *CredentialUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *CredentialUpdate) AddDeleteBy(v int64) *CredentialUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *CredentialUpdate) ClearDeleteBy() *CredentialUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CredentialUpdate) SetUserID(v uint64) *CredentialUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableUserID(v *uint64) *CredentialUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *CredentialUpdate) SetCredentialType(v credential.CredentialType) *CredentialUpdate {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableCredentialType(v *credential.CredentialType) *CredentialUpdate {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *CredentialUpdate) SetIdentifier(v string) *CredentialUpdate {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableIdentifier(v *string) *CredentialUpdate {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *CredentialUpdate) SetSecret(v string) *CredentialUpdate {
	_u.mutation.SetSecret(v)
	return _u
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableSecret(v *string) *CredentialUpdate {
	if v != nil {
		_u.SetSecret(*v)
	}
	return _u
}

// ClearSecret clears the value of the "secret" field.
func (_u *CredentialUpdate) ClearSecret() *CredentialUpdate {
	_u.mutation.ClearSecret()
	return _u
}

// SetSalt sets the "salt" field.
func (_u *CredentialUpdate) SetSalt(v string) *CredentialUpdate {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableSalt(v *string) *CredentialUpdate {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// ClearSalt clears the value of the "salt" field.
func (_u *CredentialUpdate) ClearSalt() *CredentialUpdate {
	_u.mutation.ClearSalt()
	return _u
}

// SetProvider sets the "provider" field.
func (_u *CredentialUpdate) SetProvider(v string) *CredentialUpdate {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableProvider(v *string) *CredentialUpdate {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// ClearProvider clears the value of the "provider" field.
func (_u *CredentialUpdate) ClearProvider() *CredentialUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *CredentialUpdate) SetIsVerified(v bool) *CredentialUpdate {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableIsVerified(v *bool) *CredentialUpdate {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *CredentialUpdate) SetVerifiedAt(v time.Time) *CredentialUpdate {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableVerifiedAt(v *time.Time) *CredentialUpdate {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *CredentialUpdate) ClearVerifiedAt() *CredentialUpdate {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *CredentialUpdate) SetLastUsedAt(v time.Time) *CredentialUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableLastUsedAt(v *time.Time) *CredentialUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *CredentialUpdate) ClearLastUsedAt() *CredentialUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *CredentialUpdate) SetExpiresAt(v time.Time) *CredentialUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableExpiresAt(v *time.Time) *CredentialUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *CredentialUpdate) ClearExpiresAt() *CredentialUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetFailedAttempts sets the "failed_attempts" field.
func (_u *CredentialUpdate) SetFailedAttempts(v int) *CredentialUpdate {
	_u.mutation.ResetFailedAttempts()
	_u.mutation.SetFailedAttempts(v)
	return _u
}

// SetNillableFailedAttempts sets the "failed_attempts" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableFailedAttempts(v *int) *CredentialUpdate {
	if v != nil {
		_u.SetFailedAttempts(*v)
	}
	return _u
}

// AddFailedAttempts adds value to the "failed_attempts" field.
func (_u *CredentialUpdate) AddFailedAttempts(v int) *CredentialUpdate {
	_u.mutation.AddFailedAttempts(v)
	return _u
}

// SetLockedUntil sets the "locked_until" field.
func (_u *CredentialUpdate) SetLockedUntil(v time.Time) *CredentialUpdate {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_u *CredentialUpdate) SetNillableLockedUntil(v *time.Time) *CredentialUpdate {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (_u *CredentialUpdate) ClearLockedUntil() *CredentialUpdate {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CredentialUpdate) SetMetadata(v map[string]interface{}) *CredentialUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CredentialUpdate) ClearMetadata() *CredentialUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *CredentialUpdate) SetUser(v *User) *CredentialUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (_u *CredentialUpdate) Mutation() *CredentialMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *CredentialUpdate) ClearUser() *CredentialUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CredentialUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CredentialUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CredentialUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CredentialUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if credential.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized credential.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := credential.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *CredentialUpdate) check() error {
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := credential.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "Credential.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := credential.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Credential.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := credential.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Credential.secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Salt(); ok {
		if err := credential.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "Credential.salt": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Provider(); ok {
		if err := credential.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Credential.provider": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Credential.user"`)
	}
	return nil
}

func (_u *CredentialUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(credential.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(credential.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(credential.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(credential.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(credential.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(credential.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(credential.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(credential.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(credential.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(credential.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(credential.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(credential.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(credential.FieldCredentialType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(credential.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
	}
	if _u.mutation.SecretCleared() {
		_spec.ClearField(credential.FieldSecret, field.TypeString)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(credential.FieldSalt, field.TypeString, value)
	}
	if _u.mutation.SaltCleared() {
		_spec.ClearField(credential.FieldSalt, field.TypeString)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(credential.FieldProvider, field.TypeString, value)
	}
	if _u.mutation.ProviderCleared() {
		_spec.ClearField(credential.FieldProvider, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(credential.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(credential.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(credential.FieldVerifiedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(credential.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(credential.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(credential.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(credential.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FailedAttempts(); ok {
		_spec.SetField(credential.FieldFailedAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFailedAttempts(); ok {
		_spec.AddField(credential.FieldFailedAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(credential.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(credential.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(credential.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(credential.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CredentialUpdateOne is the builder for updating a single Credential entity.
type CredentialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CredentialMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *CredentialUpdateOne) SetCreateBy(v uint64) *CredentialUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableCreateBy(v *uint64) *CredentialUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *CredentialUpdateOne) AddCreateBy(v int64) *CredentialUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *CredentialUpdateOne) ClearCreateBy() *CredentialUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *CredentialUpdateOne) SetUpdateTime(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *CredentialUpdateOne) SetUpdateBy(v uint64) *CredentialUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableUpdateBy(v *uint64) *CredentialUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *CredentialUpdateOne) AddUpdateBy(v int64) *CredentialUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *CredentialUpdateOne) ClearUpdateBy() *CredentialUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *CredentialUpdateOne) SetDeleteTime(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableDeleteTime(v *time.Time) *CredentialUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *CredentialUpdateOne) ClearDeleteTime() *CredentialUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *CredentialUpdateOne) SetDeleteBy(v uint64) *CredentialUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableDeleteBy(v *uint64) *CredentialUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *CredentialUpdateOne) AddDeleteBy(v int64) *CredentialUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *CredentialUpdateOne) ClearDeleteBy() *CredentialUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CredentialUpdateOne) SetUserID(v uint64) *CredentialUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableUserID(v *uint64) *CredentialUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *CredentialUpdateOne) SetCredentialType(v credential.CredentialType) *CredentialUpdateOne {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableCredentialType(v *credential.CredentialType) *CredentialUpdateOne {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *CredentialUpdateOne) SetIdentifier(v string) *CredentialUpdateOne {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableIdentifier(v *string) *CredentialUpdateOne {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *CredentialUpdateOne) SetSecret(v string) *CredentialUpdateOne {
	_u.mutation.SetSecret(v)
	return _u
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableSecret(v *string) *CredentialUpdateOne {
	if v != nil {
		_u.SetSecret(*v)
	}
	return _u
}

// ClearSecret clears the value of the "secret" field.
func (_u *CredentialUpdateOne) ClearSecret() *CredentialUpdateOne {
	_u.mutation.ClearSecret()
	return _u
}

// SetSalt sets the "salt" field.
func (_u *CredentialUpdateOne) SetSalt(v string) *CredentialUpdateOne {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableSalt(v *string) *CredentialUpdateOne {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// ClearSalt clears the value of the "salt" field.
func (_u *CredentialUpdateOne) ClearSalt() *CredentialUpdateOne {
	_u.mutation.ClearSalt()
	return _u
}

// SetProvider sets the "provider" field.
func (_u *CredentialUpdateOne) SetProvider(v string) *CredentialUpdateOne {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableProvider(v *string) *CredentialUpdateOne {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// ClearProvider clears the value of the "provider" field.
func (_u *CredentialUpdateOne) ClearProvider() *CredentialUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *CredentialUpdateOne) SetIsVerified(v bool) *CredentialUpdateOne {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableIsVerified(v *bool) *CredentialUpdateOne {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *CredentialUpdateOne) SetVerifiedAt(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableVerifiedAt(v *time.Time) *CredentialUpdateOne {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *CredentialUpdateOne) ClearVerifiedAt() *CredentialUpdateOne {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *CredentialUpdateOne) SetLastUsedAt(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableLastUsedAt(v *time.Time) *CredentialUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *CredentialUpdateOne) ClearLastUsedAt() *CredentialUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *CredentialUpdateOne) SetExpiresAt(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableExpiresAt(v *time.Time) *CredentialUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *CredentialUpdateOne) ClearExpiresAt() *CredentialUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetFailedAttempts sets the "failed_attempts" field.
func (_u *CredentialUpdateOne) SetFailedAttempts(v int) *CredentialUpdateOne {
	_u.mutation.ResetFailedAttempts()
	_u.mutation.SetFailedAttempts(v)
	return _u
}

// SetNillableFailedAttempts sets the "failed_attempts" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableFailedAttempts(v *int) *CredentialUpdateOne {
	if v != nil {
		_u.SetFailedAttempts(*v)
	}
	return _u
}

// AddFailedAttempts adds value to the "failed_attempts" field.
func (_u *CredentialUpdateOne) AddFailedAttempts(v int) *CredentialUpdateOne {
	_u.mutation.AddFailedAttempts(v)
	return _u
}

// SetLockedUntil sets the "locked_until" field.
func (_u *CredentialUpdateOne) SetLockedUntil(v time.Time) *CredentialUpdateOne {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_u *CredentialUpdateOne) SetNillableLockedUntil(v *time.Time) *CredentialUpdateOne {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (_u *CredentialUpdateOne) ClearLockedUntil() *CredentialUpdateOne {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CredentialUpdateOne) SetMetadata(v map[string]interface{}) *CredentialUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CredentialUpdateOne) ClearMetadata() *CredentialUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *CredentialUpdateOne) SetUser(v *User) *CredentialUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (_u *CredentialUpdateOne) Mutation() *CredentialMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *CredentialUpdateOne) ClearUser() *CredentialUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the CredentialUpdate builder.
func (_u *CredentialUpdateOne) Where(ps ...predicate.Credential) *CredentialUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CredentialUpdateOne) Select(field string, fields ...string) *CredentialUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Credential entity.
func (_u *CredentialUpdateOne) Save(ctx context.Context) (*Credential, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CredentialUpdateOne) SaveX(ctx context.Context) *Credential {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CredentialUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CredentialUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if credential.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized credential.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := credential.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *CredentialUpdateOne) check() error {
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := credential.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "Credential.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := credential.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Credential.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := credential.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Credential.secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Salt(); ok {
		if err := credential.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "Credential.salt": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Provider(); ok {
		if err := credential.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Credential.provider": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Credential.user"`)
	}
	return nil
}

func (_u *CredentialUpdateOne) sqlSave(ctx context.Context) (_node *Credential, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Credential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, credential.FieldID)
		for _, f := range fields {
			if !credential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != credential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(credential.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(credential.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(credential.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(credential.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(credential.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(credential.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(credential.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(credential.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(credential.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(credential.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(credential.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(credential.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(credential.FieldCredentialType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(credential.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
	}
	if _u.mutation.SecretCleared() {
		_spec.ClearField(credential.FieldSecret, field.TypeString)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(credential.FieldSalt, field.TypeString, value)
	}
	if _u.mutation.SaltCleared() {
		_spec.ClearField(credential.FieldSalt, field.TypeString)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(credential.FieldProvider, field.TypeString, value)
	}
	if _u.mutation.ProviderCleared() {
		_spec.ClearField(credential.FieldProvider, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(credential.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(credential.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(credential.FieldVerifiedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(credential.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(credential.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(credential.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(credential.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FailedAttempts(); ok {
		_spec.SetField(credential.FieldFailedAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFailedAttempts(); ok {
		_spec.AddField(credential.FieldFailedAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(credential.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(credential.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(credential.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(credential.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Credential{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
