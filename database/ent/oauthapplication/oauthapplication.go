// Code generated by ent, DO NOT EDIT.

package oauthapplication

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthapplication type in the database.
	Label = "oauth_application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRedirectUris holds the string denoting the redirect_uris field in the database.
	FieldRedirectUris = "redirect_uris"
	// FieldIsConfidential holds the string denoting the is_confidential field in the database.
	FieldIsConfidential = "is_confidential"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldAbleState holds the string denoting the able_state field in the database.
	FieldAbleState = "able_state"
	// FieldSystemID holds the string denoting the system_id field in the database.
	FieldSystemID = "system_id"
	// EdgeAuthorizationCodes holds the string denoting the authorization_codes edge name in mutations.
	EdgeAuthorizationCodes = "authorization_codes"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// EdgeUserAuthorizations holds the string denoting the user_authorizations edge name in mutations.
	EdgeUserAuthorizations = "user_authorizations"
	// Table holds the table name of the oauthapplication in the database.
	Table = "oauth_applications"
	// AuthorizationCodesTable is the table that holds the authorization_codes relation/edge.
	AuthorizationCodesTable = "oauth_authorization_codes"
	// AuthorizationCodesInverseTable is the table name for the OauthAuthorizationCode entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauthorizationcode" package.
	AuthorizationCodesInverseTable = "oauth_authorization_codes"
	// AuthorizationCodesColumn is the table column denoting the authorization_codes relation/edge.
	AuthorizationCodesColumn = "application_id"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "oauth_tokens"
	// TokensInverseTable is the table name for the OauthToken entity.
	// It exists in this package in order to avoid circular dependency with the "oauthtoken" package.
	TokensInverseTable = "oauth_tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "application_id"
	// UserAuthorizationsTable is the table that holds the user_authorizations relation/edge.
	UserAuthorizationsTable = "oauth_user_authorizations"
	// UserAuthorizationsInverseTable is the table name for the OauthUserAuthorization entity.
	// It exists in this package in order to avoid circular dependency with the "oauthuserauthorization" package.
	UserAuthorizationsInverseTable = "oauth_user_authorizations"
	// UserAuthorizationsColumn is the table column denoting the user_authorizations relation/edge.
	UserAuthorizationsColumn = "oauth_application_user_authorizations"
)

// Columns holds all SQL columns for oauthapplication fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldClientID,
	FieldClientSecret,
	FieldName,
	FieldRedirectUris,
	FieldIsConfidential,
	FieldScopes,
	FieldAbleState,
	FieldSystemID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultIsConfidential holds the default value on creation for the "is_confidential" field.
	DefaultIsConfidential bool
)

// AbleState defines the type for the "able_state" enum field.
type AbleState string

// AbleStateEnabled is the default value of the AbleState enum.
const DefaultAbleState = AbleStateEnabled

// AbleState values.
const (
	AbleStateEnabled  AbleState = "enabled"
	AbleStateDisabled AbleState = "disabled"
)

func (as AbleState) String() string {
	return string(as)
}

// AbleStateValidator is a validator for the "able_state" field enum values. It is called by the builders before save.
func AbleStateValidator(as AbleState) error {
	switch as {
	case AbleStateEnabled, AbleStateDisabled:
		return nil
	default:
		return fmt.Errorf("oauthapplication: invalid enum value for able_state field: %q", as)
	}
}

// OrderOption defines the ordering options for the OauthApplication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsConfidential orders the results by the is_confidential field.
func ByIsConfidential(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsConfidential, opts...).ToFunc()
}

// ByAbleState orders the results by the able_state field.
func ByAbleState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbleState, opts...).ToFunc()
}

// BySystemID orders the results by the system_id field.
func BySystemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemID, opts...).ToFunc()
}

// ByAuthorizationCodesCount orders the results by authorization_codes count.
func ByAuthorizationCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorizationCodesStep(), opts...)
	}
}

// ByAuthorizationCodes orders the results by authorization_codes terms.
func ByAuthorizationCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizationCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserAuthorizationsCount orders the results by user_authorizations count.
func ByUserAuthorizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAuthorizationsStep(), opts...)
	}
}

// ByUserAuthorizations orders the results by user_authorizations terms.
func ByUserAuthorizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAuthorizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthorizationCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizationCodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthorizationCodesTable, AuthorizationCodesColumn),
	)
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
func newUserAuthorizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAuthorizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAuthorizationsTable, UserAuthorizationsColumn),
	)
}
