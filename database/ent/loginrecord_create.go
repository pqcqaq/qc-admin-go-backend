// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/loginrecord"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginRecordCreate is the builder for creating a LoginRecord entity.
type LoginRecordCreate struct {
	config
	mutation *LoginRecordMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *LoginRecordCreate) SetCreateTime(v time.Time) *LoginRecordCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableCreateTime(v *time.Time) *LoginRecordCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *LoginRecordCreate) SetCreateBy(v uint64) *LoginRecordCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableCreateBy(v *uint64) *LoginRecordCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *LoginRecordCreate) SetUpdateTime(v time.Time) *LoginRecordCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableUpdateTime(v *time.Time) *LoginRecordCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *LoginRecordCreate) SetUpdateBy(v uint64) *LoginRecordCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableUpdateBy(v *uint64) *LoginRecordCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *LoginRecordCreate) SetUserID(v uint64) *LoginRecordCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetIdentifier sets the "identifier" field.
func (_c *LoginRecordCreate) SetIdentifier(v string) *LoginRecordCreate {
	_c.mutation.SetIdentifier(v)
	return _c
}

// SetCredentialType sets the "credential_type" field.
func (_c *LoginRecordCreate) SetCredentialType(v loginrecord.CredentialType) *LoginRecordCreate {
	_c.mutation.SetCredentialType(v)
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *LoginRecordCreate) SetIPAddress(v string) *LoginRecordCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *LoginRecordCreate) SetUserAgent(v string) *LoginRecordCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableUserAgent(v *string) *LoginRecordCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetDeviceInfo sets the "device_info" field.
func (_c *LoginRecordCreate) SetDeviceInfo(v string) *LoginRecordCreate {
	_c.mutation.SetDeviceInfo(v)
	return _c
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableDeviceInfo(v *string) *LoginRecordCreate {
	if v != nil {
		_c.SetDeviceInfo(*v)
	}
	return _c
}

// SetLocation sets the "location" field.
func (_c *LoginRecordCreate) SetLocation(v string) *LoginRecordCreate {
	_c.mutation.SetLocation(v)
	return _c
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableLocation(v *string) *LoginRecordCreate {
	if v != nil {
		_c.SetLocation(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *LoginRecordCreate) SetStatus(v loginrecord.Status) *LoginRecordCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetFailureReason sets the "failure_reason" field.
func (_c *LoginRecordCreate) SetFailureReason(v string) *LoginRecordCreate {
	_c.mutation.SetFailureReason(v)
	return _c
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableFailureReason(v *string) *LoginRecordCreate {
	if v != nil {
		_c.SetFailureReason(*v)
	}
	return _c
}

// SetSessionID sets the "session_id" field.
func (_c *LoginRecordCreate) SetSessionID(v string) *LoginRecordCreate {
	_c.mutation.SetSessionID(v)
	return _c
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableSessionID(v *string) *LoginRecordCreate {
	if v != nil {
		_c.SetSessionID(*v)
	}
	return _c
}

// SetLogoutTime sets the "logout_time" field.
func (_c *LoginRecordCreate) SetLogoutTime(v time.Time) *LoginRecordCreate {
	_c.mutation.SetLogoutTime(v)
	return _c
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableLogoutTime(v *time.Time) *LoginRecordCreate {
	if v != nil {
		_c.SetLogoutTime(*v)
	}
	return _c
}

// SetDuration sets the "duration" field.
func (_c *LoginRecordCreate) SetDuration(v int) *LoginRecordCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *LoginRecordCreate) SetNillableDuration(v *int) *LoginRecordCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *LoginRecordCreate) SetMetadata(v map[string]interface{}) *LoginRecordCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetID sets the "id" field.
func (_c *LoginRecordCreate) SetID(v uint64) *LoginRecordCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *LoginRecordCreate) SetUser(v *User) *LoginRecordCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (_c *LoginRecordCreate) Mutation() *LoginRecordMutation {
	return _c.mutation
}

// Save creates the LoginRecord in the database.
func (_c *LoginRecordCreate) Save(ctx context.Context) (*LoginRecord, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LoginRecordCreate) SaveX(ctx context.Context) *LoginRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoginRecordCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoginRecordCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LoginRecordCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if loginrecord.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized loginrecord.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := loginrecord.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if loginrecord.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized loginrecord.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := loginrecord.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *LoginRecordCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "LoginRecord.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "LoginRecord.update_time"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LoginRecord.user_id"`)}
	}
	if _, ok := _c.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "LoginRecord.identifier"`)}
	}
	if v, ok := _c.mutation.Identifier(); ok {
		if err := loginrecord.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.identifier": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CredentialType(); !ok {
		return &ValidationError{Name: "credential_type", err: errors.New(`ent: missing required field "LoginRecord.credential_type"`)}
	}
	if v, ok := _c.mutation.CredentialType(); ok {
		if err := loginrecord.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.credential_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "LoginRecord.ip_address"`)}
	}
	if v, ok := _c.mutation.IPAddress(); ok {
		if err := loginrecord.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.ip_address": %w`, err)}
		}
	}
	if v, ok := _c.mutation.UserAgent(); ok {
		if err := loginrecord.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.user_agent": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DeviceInfo(); ok {
		if err := loginrecord.DeviceInfoValidator(v); err != nil {
			return &ValidationError{Name: "device_info", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.device_info": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Location(); ok {
		if err := loginrecord.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.location": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LoginRecord.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := loginrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.FailureReason(); ok {
		if err := loginrecord.FailureReasonValidator(v); err != nil {
			return &ValidationError{Name: "failure_reason", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.failure_reason": %w`, err)}
		}
	}
	if v, ok := _c.mutation.SessionID(); ok {
		if err := loginrecord.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "LoginRecord.session_id": %w`, err)}
		}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LoginRecord.user"`)}
	}
	return nil
}

func (_c *LoginRecordCreate) sqlSave(ctx context.Context) (*LoginRecord, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LoginRecordCreate) createSpec() (*LoginRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginRecord{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(loginrecord.Table, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(loginrecord.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(loginrecord.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(loginrecord.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(loginrecord.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.Identifier(); ok {
		_spec.SetField(loginrecord.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := _c.mutation.CredentialType(); ok {
		_spec.SetField(loginrecord.FieldCredentialType, field.TypeEnum, value)
		_node.CredentialType = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(loginrecord.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(loginrecord.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.DeviceInfo(); ok {
		_spec.SetField(loginrecord.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if value, ok := _c.mutation.Location(); ok {
		_spec.SetField(loginrecord.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(loginrecord.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.FailureReason(); ok {
		_spec.SetField(loginrecord.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = value
	}
	if value, ok := _c.mutation.SessionID(); ok {
		_spec.SetField(loginrecord.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := _c.mutation.LogoutTime(); ok {
		_spec.SetField(loginrecord.FieldLogoutTime, field.TypeTime, value)
		_node.LogoutTime = &value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(loginrecord.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(loginrecord.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoginRecordCreateBulk is the builder for creating many LoginRecord entities in bulk.
type LoginRecordCreateBulk struct {
	config
	err      error
	builders []*LoginRecordCreate
}

// Save creates the LoginRecord entities in the database.
func (_c *LoginRecordCreateBulk) Save(ctx context.Context) ([]*LoginRecord, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*LoginRecord, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LoginRecordCreateBulk) SaveX(ctx context.Context) []*LoginRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoginRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoginRecordCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
