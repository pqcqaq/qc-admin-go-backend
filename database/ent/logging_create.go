// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/logging"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoggingCreate is the builder for creating a Logging entity.
type LoggingCreate struct {
	config
	mutation *LoggingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *LoggingCreate) SetCreateTime(v time.Time) *LoggingCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableCreateTime(v *time.Time) *LoggingCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *LoggingCreate) SetCreateBy(v int64) *LoggingCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableCreateBy(v *int64) *LoggingCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *LoggingCreate) SetUpdateTime(v time.Time) *LoggingCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableUpdateTime(v *time.Time) *LoggingCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *LoggingCreate) SetUpdateBy(v int64) *LoggingCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableUpdateBy(v *int64) *LoggingCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *LoggingCreate) SetDeleteTime(v time.Time) *LoggingCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableDeleteTime(v *time.Time) *LoggingCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *LoggingCreate) SetDeleteBy(v int64) *LoggingCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableDeleteBy(v *int64) *LoggingCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetLevel sets the "level" field.
func (_c *LoggingCreate) SetLevel(v logging.Level) *LoggingCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableLevel(v *logging.Level) *LoggingCreate {
	if v != nil {
		_c.SetLevel(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *LoggingCreate) SetType(v logging.Type) *LoggingCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableType(v *logging.Type) *LoggingCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetMessage sets the "message" field.
func (_c *LoggingCreate) SetMessage(v string) *LoggingCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetMethod sets the "method" field.
func (_c *LoggingCreate) SetMethod(v string) *LoggingCreate {
	_c.mutation.SetMethod(v)
	return _c
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableMethod(v *string) *LoggingCreate {
	if v != nil {
		_c.SetMethod(*v)
	}
	return _c
}

// SetPath sets the "path" field.
func (_c *LoggingCreate) SetPath(v string) *LoggingCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *LoggingCreate) SetNillablePath(v *string) *LoggingCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetIP sets the "ip" field.
func (_c *LoggingCreate) SetIP(v string) *LoggingCreate {
	_c.mutation.SetIP(v)
	return _c
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableIP(v *string) *LoggingCreate {
	if v != nil {
		_c.SetIP(*v)
	}
	return _c
}

// SetQuery sets the "query" field.
func (_c *LoggingCreate) SetQuery(v string) *LoggingCreate {
	_c.mutation.SetQuery(v)
	return _c
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableQuery(v *string) *LoggingCreate {
	if v != nil {
		_c.SetQuery(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *LoggingCreate) SetCode(v int) *LoggingCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableCode(v *int) *LoggingCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *LoggingCreate) SetUserAgent(v string) *LoggingCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableUserAgent(v *string) *LoggingCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetData sets the "data" field.
func (_c *LoggingCreate) SetData(v map[string]interface{}) *LoggingCreate {
	_c.mutation.SetData(v)
	return _c
}

// SetStack sets the "stack" field.
func (_c *LoggingCreate) SetStack(v string) *LoggingCreate {
	_c.mutation.SetStack(v)
	return _c
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_c *LoggingCreate) SetNillableStack(v *string) *LoggingCreate {
	if v != nil {
		_c.SetStack(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *LoggingCreate) SetID(v uint64) *LoggingCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the LoggingMutation object of the builder.
func (_c *LoggingCreate) Mutation() *LoggingMutation {
	return _c.mutation
}

// Save creates the Logging in the database.
func (_c *LoggingCreate) Save(ctx context.Context) (*Logging, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LoggingCreate) SaveX(ctx context.Context) *Logging {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoggingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoggingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LoggingCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if logging.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized logging.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := logging.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if logging.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized logging.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := logging.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Level(); !ok {
		v := logging.DefaultLevel
		_c.mutation.SetLevel(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := logging.DefaultType
		_c.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *LoggingCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Logging.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Logging.update_time"`)}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Logging.level"`)}
	}
	if v, ok := _c.mutation.Level(); ok {
		if err := logging.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Logging.level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Logging.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := logging.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Logging.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Logging.message"`)}
	}
	if v, ok := _c.mutation.Message(); ok {
		if err := logging.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Logging.message": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Method(); ok {
		if err := logging.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Logging.method": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Path(); ok {
		if err := logging.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Logging.path": %w`, err)}
		}
	}
	if v, ok := _c.mutation.IP(); ok {
		if err := logging.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Logging.ip": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Query(); ok {
		if err := logging.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`ent: validator failed for field "Logging.query": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := logging.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Logging.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.UserAgent(); ok {
		if err := logging.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Logging.user_agent": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Stack(); ok {
		if err := logging.StackValidator(v); err != nil {
			return &ValidationError{Name: "stack", err: fmt.Errorf(`ent: validator failed for field "Logging.stack": %w`, err)}
		}
	}
	return nil
}

func (_c *LoggingCreate) sqlSave(ctx context.Context) (*Logging, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LoggingCreate) createSpec() (*Logging, *sqlgraph.CreateSpec) {
	var (
		_node = &Logging{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(logging.Table, sqlgraph.NewFieldSpec(logging.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(logging.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(logging.FieldCreateBy, field.TypeInt64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(logging.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(logging.FieldUpdateBy, field.TypeInt64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(logging.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(logging.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(logging.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(logging.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(logging.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.Method(); ok {
		_spec.SetField(logging.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(logging.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.IP(); ok {
		_spec.SetField(logging.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := _c.mutation.Query(); ok {
		_spec.SetField(logging.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(logging.FieldCode, field.TypeInt, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(logging.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.Data(); ok {
		_spec.SetField(logging.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := _c.mutation.Stack(); ok {
		_spec.SetField(logging.FieldStack, field.TypeString, value)
		_node.Stack = value
	}
	return _node, _spec
}

// LoggingCreateBulk is the builder for creating many Logging entities in bulk.
type LoggingCreateBulk struct {
	config
	err      error
	builders []*LoggingCreate
}

// Save creates the Logging entities in the database.
func (_c *LoggingCreateBulk) Save(ctx context.Context) ([]*Logging, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Logging, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoggingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LoggingCreateBulk) SaveX(ctx context.Context) []*Logging {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoggingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoggingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
