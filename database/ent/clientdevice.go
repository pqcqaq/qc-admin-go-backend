// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/clientdevice"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ClientDevice is the model entity for the ClientDevice schema.
type ClientDevice struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 设备名称
	Name string `json:"name,omitempty"`
	// 设备标识字符串(生成)
	Code string `json:"code,omitempty"`
	// 是否启用
	Enabled bool `json:"enabled,omitempty"`
	// accessToken超时时间(ms)
	AccessTokenExpiry uint64 `json:"access_token_expiry,omitempty"`
	// refreshToken超时时间(ms)
	RefreshTokenExpiry uint64 `json:"refresh_token_expiry,omitempty"`
	// 允许所有角色登录
	Anonymous bool `json:"anonymous,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientDeviceQuery when eager-loading is set.
	Edges        ClientDeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClientDeviceEdges holds the relations/edges for other nodes in the graph.
type ClientDeviceEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	namedRoles  map[string][]*Role
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e ClientDeviceEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientdevice.FieldEnabled, clientdevice.FieldAnonymous:
			values[i] = new(sql.NullBool)
		case clientdevice.FieldID, clientdevice.FieldCreateBy, clientdevice.FieldUpdateBy, clientdevice.FieldDeleteBy, clientdevice.FieldAccessTokenExpiry, clientdevice.FieldRefreshTokenExpiry:
			values[i] = new(sql.NullInt64)
		case clientdevice.FieldName, clientdevice.FieldCode:
			values[i] = new(sql.NullString)
		case clientdevice.FieldCreateTime, clientdevice.FieldUpdateTime, clientdevice.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientDevice fields.
func (_m *ClientDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientdevice.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case clientdevice.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case clientdevice.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case clientdevice.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case clientdevice.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case clientdevice.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case clientdevice.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case clientdevice.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case clientdevice.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case clientdevice.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				_m.Enabled = value.Bool
			}
		case clientdevice.FieldAccessTokenExpiry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field access_token_expiry", values[i])
			} else if value.Valid {
				_m.AccessTokenExpiry = uint64(value.Int64)
			}
		case clientdevice.FieldRefreshTokenExpiry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token_expiry", values[i])
			} else if value.Valid {
				_m.RefreshTokenExpiry = uint64(value.Int64)
			}
		case clientdevice.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				_m.Anonymous = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClientDevice.
// This includes values selected through modifiers, order, etc.
func (_m *ClientDevice) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the ClientDevice entity.
func (_m *ClientDevice) QueryRoles() *RoleQuery {
	return NewClientDeviceClient(_m.config).QueryRoles(_m)
}

// Update returns a builder for updating this ClientDevice.
// Note that you need to call ClientDevice.Unwrap() before calling this method if this ClientDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ClientDevice) Update() *ClientDeviceUpdateOne {
	return NewClientDeviceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ClientDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ClientDevice) Unwrap() *ClientDevice {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientDevice is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ClientDevice) String() string {
	var builder strings.Builder
	builder.WriteString("ClientDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Enabled))
	builder.WriteString(", ")
	builder.WriteString("access_token_expiry=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccessTokenExpiry))
	builder.WriteString(", ")
	builder.WriteString("refresh_token_expiry=")
	builder.WriteString(fmt.Sprintf("%v", _m.RefreshTokenExpiry))
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", _m.Anonymous))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ClientDevice) NamedRoles(name string) ([]*Role, error) {
	if _m.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ClientDevice) appendNamedRoles(name string, edges ...*Role) {
	if _m.Edges.namedRoles == nil {
		_m.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		_m.Edges.namedRoles[name] = []*Role{}
	} else {
		_m.Edges.namedRoles[name] = append(_m.Edges.namedRoles[name], edges...)
	}
}

// ClientDevices is a parsable slice of ClientDevice.
type ClientDevices []*ClientDevice
