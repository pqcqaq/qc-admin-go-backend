// Code generated by ent, DO NOT EDIT.

package oauthuser

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldDeleteBy, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldProviderID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUserID, v))
}

// StateID applies equality check predicate on the "state_id" field. It's identical to StateIDEQ.
func StateID(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldStateID, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldProviderUserID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldRefreshToken, v))
}

// AccessExpiresAt applies equality check predicate on the "access_expires_at" field. It's identical to AccessExpiresAtEQ.
func AccessExpiresAt(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldAccessExpiresAt, v))
}

// RefreshExpiresAt applies equality check predicate on the "refresh_expires_at" field. It's identical to RefreshExpiresAtEQ.
func RefreshExpiresAt(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldRefreshExpiresAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldDeleteBy))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldProviderID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldUserID, vs...))
}

// StateIDEQ applies the EQ predicate on the "state_id" field.
func StateIDEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldStateID, v))
}

// StateIDNEQ applies the NEQ predicate on the "state_id" field.
func StateIDNEQ(v uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldStateID, v))
}

// StateIDIn applies the In predicate on the "state_id" field.
func StateIDIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldStateID, vs...))
}

// StateIDNotIn applies the NotIn predicate on the "state_id" field.
func StateIDNotIn(vs ...uint64) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldStateID, vs...))
}

// StateIDIsNil applies the IsNil predicate on the "state_id" field.
func StateIDIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldStateID))
}

// StateIDNotNil applies the NotNil predicate on the "state_id" field.
func StateIDNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldStateID))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContainsFold(FieldProviderUserID, v))
}

// RawUserInfoIsNil applies the IsNil predicate on the "raw_user_info" field.
func RawUserInfoIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldRawUserInfo))
}

// RawUserInfoNotNil applies the NotNil predicate on the "raw_user_info" field.
func RawUserInfoNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldRawUserInfo))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldContainsFold(FieldRefreshToken, v))
}

// AccessExpiresAtEQ applies the EQ predicate on the "access_expires_at" field.
func AccessExpiresAtEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldAccessExpiresAt, v))
}

// AccessExpiresAtNEQ applies the NEQ predicate on the "access_expires_at" field.
func AccessExpiresAtNEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldAccessExpiresAt, v))
}

// AccessExpiresAtIn applies the In predicate on the "access_expires_at" field.
func AccessExpiresAtIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldAccessExpiresAt, vs...))
}

// AccessExpiresAtNotIn applies the NotIn predicate on the "access_expires_at" field.
func AccessExpiresAtNotIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldAccessExpiresAt, vs...))
}

// AccessExpiresAtGT applies the GT predicate on the "access_expires_at" field.
func AccessExpiresAtGT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldAccessExpiresAt, v))
}

// AccessExpiresAtGTE applies the GTE predicate on the "access_expires_at" field.
func AccessExpiresAtGTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldAccessExpiresAt, v))
}

// AccessExpiresAtLT applies the LT predicate on the "access_expires_at" field.
func AccessExpiresAtLT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldAccessExpiresAt, v))
}

// AccessExpiresAtLTE applies the LTE predicate on the "access_expires_at" field.
func AccessExpiresAtLTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldAccessExpiresAt, v))
}

// AccessExpiresAtIsNil applies the IsNil predicate on the "access_expires_at" field.
func AccessExpiresAtIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldAccessExpiresAt))
}

// AccessExpiresAtNotNil applies the NotNil predicate on the "access_expires_at" field.
func AccessExpiresAtNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldAccessExpiresAt))
}

// RefreshExpiresAtEQ applies the EQ predicate on the "refresh_expires_at" field.
func RefreshExpiresAtEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtNEQ applies the NEQ predicate on the "refresh_expires_at" field.
func RefreshExpiresAtNEQ(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtIn applies the In predicate on the "refresh_expires_at" field.
func RefreshExpiresAtIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldRefreshExpiresAt, vs...))
}

// RefreshExpiresAtNotIn applies the NotIn predicate on the "refresh_expires_at" field.
func RefreshExpiresAtNotIn(vs ...time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldRefreshExpiresAt, vs...))
}

// RefreshExpiresAtGT applies the GT predicate on the "refresh_expires_at" field.
func RefreshExpiresAtGT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGT(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtGTE applies the GTE predicate on the "refresh_expires_at" field.
func RefreshExpiresAtGTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldGTE(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtLT applies the LT predicate on the "refresh_expires_at" field.
func RefreshExpiresAtLT(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLT(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtLTE applies the LTE predicate on the "refresh_expires_at" field.
func RefreshExpiresAtLTE(v time.Time) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldLTE(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtIsNil applies the IsNil predicate on the "refresh_expires_at" field.
func RefreshExpiresAtIsNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIsNull(FieldRefreshExpiresAt))
}

// RefreshExpiresAtNotNil applies the NotNil predicate on the "refresh_expires_at" field.
func RefreshExpiresAtNotNil() predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotNull(FieldRefreshExpiresAt))
}

// LoadStateEQ applies the EQ predicate on the "load_state" field.
func LoadStateEQ(v LoadState) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldEQ(FieldLoadState, v))
}

// LoadStateNEQ applies the NEQ predicate on the "load_state" field.
func LoadStateNEQ(v LoadState) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNEQ(FieldLoadState, v))
}

// LoadStateIn applies the In predicate on the "load_state" field.
func LoadStateIn(vs ...LoadState) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldIn(FieldLoadState, vs...))
}

// LoadStateNotIn applies the NotIn predicate on the "load_state" field.
func LoadStateNotIn(vs ...LoadState) predicate.OauthUser {
	return predicate.OauthUser(sql.FieldNotIn(FieldLoadState, vs...))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.OauthProvider) predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.OauthState) predicate.OauthUser {
	return predicate.OauthUser(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthUser) predicate.OauthUser {
	return predicate.OauthUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthUser) predicate.OauthUser {
	return predicate.OauthUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthUser) predicate.OauthUser {
	return predicate.OauthUser(sql.NotPredicates(p))
}
