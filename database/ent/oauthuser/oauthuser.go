// Code generated by ent, DO NOT EDIT.

package oauthuser

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthuser type in the database.
	Label = "oauth_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStateID holds the string denoting the state_id field in the database.
	FieldStateID = "state_id"
	// FieldProviderUserID holds the string denoting the provider_user_id field in the database.
	FieldProviderUserID = "provider_user_id"
	// FieldRawUserInfo holds the string denoting the raw_user_info field in the database.
	FieldRawUserInfo = "raw_user_info"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldAccessExpiresAt holds the string denoting the access_expires_at field in the database.
	FieldAccessExpiresAt = "access_expires_at"
	// FieldRefreshExpiresAt holds the string denoting the refresh_expires_at field in the database.
	FieldRefreshExpiresAt = "refresh_expires_at"
	// FieldLoadState holds the string denoting the load_state field in the database.
	FieldLoadState = "load_state"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// Table holds the table name of the oauthuser in the database.
	Table = "oauth_users"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "oauth_users"
	// ProviderInverseTable is the table name for the OauthProvider entity.
	// It exists in this package in order to avoid circular dependency with the "oauthprovider" package.
	ProviderInverseTable = "oauth_providers"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oauth_users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "sys_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "oauth_users"
	// StateInverseTable is the table name for the OauthState entity.
	// It exists in this package in order to avoid circular dependency with the "oauthstate" package.
	StateInverseTable = "oauth_states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_id"
)

// Columns holds all SQL columns for oauthuser fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldProviderID,
	FieldUserID,
	FieldStateID,
	FieldProviderUserID,
	FieldRawUserInfo,
	FieldAccessToken,
	FieldRefreshToken,
	FieldAccessExpiresAt,
	FieldRefreshExpiresAt,
	FieldLoadState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ProviderUserIDValidator is a validator for the "provider_user_id" field. It is called by the builders before save.
	ProviderUserIDValidator func(string) error
	// AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	AccessTokenValidator func(string) error
	// RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	RefreshTokenValidator func(string) error
)

// LoadState defines the type for the "load_state" enum field.
type LoadState string

// LoadStateUnload is the default value of the LoadState enum.
const DefaultLoadState = LoadStateUnload

// LoadState values.
const (
	LoadStateUnload LoadState = "unload"
	LoadStateLoaded LoadState = "loaded"
)

func (ls LoadState) String() string {
	return string(ls)
}

// LoadStateValidator is a validator for the "load_state" field enum values. It is called by the builders before save.
func LoadStateValidator(ls LoadState) error {
	switch ls {
	case LoadStateUnload, LoadStateLoaded:
		return nil
	default:
		return fmt.Errorf("oauthuser: invalid enum value for load_state field: %q", ls)
	}
}

// OrderOption defines the ordering options for the OauthUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByStateID orders the results by the state_id field.
func ByStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateID, opts...).ToFunc()
}

// ByProviderUserID orders the results by the provider_user_id field.
func ByProviderUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUserID, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByAccessExpiresAt orders the results by the access_expires_at field.
func ByAccessExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessExpiresAt, opts...).ToFunc()
}

// ByRefreshExpiresAt orders the results by the refresh_expires_at field.
func ByRefreshExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshExpiresAt, opts...).ToFunc()
}

// ByLoadState orders the results by the load_state field.
func ByLoadState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadState, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
	)
}
