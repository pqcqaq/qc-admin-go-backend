// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthUserAuthorizationCreate is the builder for creating a OauthUserAuthorization entity.
type OauthUserAuthorizationCreate struct {
	config
	mutation *OauthUserAuthorizationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *OauthUserAuthorizationCreate) SetCreateTime(v time.Time) *OauthUserAuthorizationCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableCreateTime(v *time.Time) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *OauthUserAuthorizationCreate) SetCreateBy(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableCreateBy(v *uint64) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OauthUserAuthorizationCreate) SetUpdateTime(v time.Time) *OauthUserAuthorizationCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableUpdateTime(v *time.Time) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *OauthUserAuthorizationCreate) SetUpdateBy(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableUpdateBy(v *uint64) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *OauthUserAuthorizationCreate) SetDeleteTime(v time.Time) *OauthUserAuthorizationCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableDeleteTime(v *time.Time) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *OauthUserAuthorizationCreate) SetDeleteBy(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableDeleteBy(v *uint64) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OauthUserAuthorizationCreate) SetUserID(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *OauthUserAuthorizationCreate) SetApplicationID(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetAuthorizedAt sets the "authorized_at" field.
func (_c *OauthUserAuthorizationCreate) SetAuthorizedAt(v time.Time) *OauthUserAuthorizationCreate {
	_c.mutation.SetAuthorizedAt(v)
	return _c
}

// SetUsageState sets the "usage_state" field.
func (_c *OauthUserAuthorizationCreate) SetUsageState(v oauthuserauthorization.UsageState) *OauthUserAuthorizationCreate {
	_c.mutation.SetUsageState(v)
	return _c
}

// SetNillableUsageState sets the "usage_state" field if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableUsageState(v *oauthuserauthorization.UsageState) *OauthUserAuthorizationCreate {
	if v != nil {
		_c.SetUsageState(*v)
	}
	return _c
}

// SetScope sets the "scope" field.
func (_c *OauthUserAuthorizationCreate) SetScope(v []string) *OauthUserAuthorizationCreate {
	_c.mutation.SetScope(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OauthUserAuthorizationCreate) SetID(v uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *OauthUserAuthorizationCreate) SetUser(v *User) *OauthUserAuthorizationCreate {
	return _c.SetUserID(v.ID)
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_c *OauthUserAuthorizationCreate) SetApplication(v *OauthApplication) *OauthUserAuthorizationCreate {
	return _c.SetApplicationID(v.ID)
}

// SetCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID.
func (_c *OauthUserAuthorizationCreate) SetCodeID(id uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetCodeID(id)
	return _c
}

// SetNillableCodeID sets the "code" edge to the OauthAuthorizationCode entity by ID if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableCodeID(id *uint64) *OauthUserAuthorizationCreate {
	if id != nil {
		_c = _c.SetCodeID(*id)
	}
	return _c
}

// SetCode sets the "code" edge to the OauthAuthorizationCode entity.
func (_c *OauthUserAuthorizationCreate) SetCode(v *OauthAuthorizationCode) *OauthUserAuthorizationCreate {
	return _c.SetCodeID(v.ID)
}

// SetTokenID sets the "token" edge to the OauthToken entity by ID.
func (_c *OauthUserAuthorizationCreate) SetTokenID(id uint64) *OauthUserAuthorizationCreate {
	_c.mutation.SetTokenID(id)
	return _c
}

// SetNillableTokenID sets the "token" edge to the OauthToken entity by ID if the given value is not nil.
func (_c *OauthUserAuthorizationCreate) SetNillableTokenID(id *uint64) *OauthUserAuthorizationCreate {
	if id != nil {
		_c = _c.SetTokenID(*id)
	}
	return _c
}

// SetToken sets the "token" edge to the OauthToken entity.
func (_c *OauthUserAuthorizationCreate) SetToken(v *OauthToken) *OauthUserAuthorizationCreate {
	return _c.SetTokenID(v.ID)
}

// Mutation returns the OauthUserAuthorizationMutation object of the builder.
func (_c *OauthUserAuthorizationCreate) Mutation() *OauthUserAuthorizationMutation {
	return _c.mutation
}

// Save creates the OauthUserAuthorization in the database.
func (_c *OauthUserAuthorizationCreate) Save(ctx context.Context) (*OauthUserAuthorization, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthUserAuthorizationCreate) SaveX(ctx context.Context) *OauthUserAuthorization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthUserAuthorizationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthUserAuthorizationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthUserAuthorizationCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if oauthuserauthorization.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuserauthorization.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := oauthuserauthorization.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if oauthuserauthorization.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthuserauthorization.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthuserauthorization.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.UsageState(); !ok {
		v := oauthuserauthorization.DefaultUsageState
		_c.mutation.SetUsageState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthUserAuthorizationCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OauthUserAuthorization.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OauthUserAuthorization.update_time"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OauthUserAuthorization.user_id"`)}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "OauthUserAuthorization.application_id"`)}
	}
	if _, ok := _c.mutation.AuthorizedAt(); !ok {
		return &ValidationError{Name: "authorized_at", err: errors.New(`ent: missing required field "OauthUserAuthorization.authorized_at"`)}
	}
	if _, ok := _c.mutation.UsageState(); !ok {
		return &ValidationError{Name: "usage_state", err: errors.New(`ent: missing required field "OauthUserAuthorization.usage_state"`)}
	}
	if v, ok := _c.mutation.UsageState(); ok {
		if err := oauthuserauthorization.UsageStateValidator(v); err != nil {
			return &ValidationError{Name: "usage_state", err: fmt.Errorf(`ent: validator failed for field "OauthUserAuthorization.usage_state": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "OauthUserAuthorization.scope"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OauthUserAuthorization.user"`)}
	}
	if len(_c.mutation.ApplicationIDs()) == 0 {
		return &ValidationError{Name: "application", err: errors.New(`ent: missing required edge "OauthUserAuthorization.application"`)}
	}
	return nil
}

func (_c *OauthUserAuthorizationCreate) sqlSave(ctx context.Context) (*OauthUserAuthorization, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthUserAuthorizationCreate) createSpec() (*OauthUserAuthorization, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthUserAuthorization{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthuserauthorization.Table, sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(oauthuserauthorization.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.AuthorizedAt(); ok {
		_spec.SetField(oauthuserauthorization.FieldAuthorizedAt, field.TypeTime, value)
		_node.AuthorizedAt = value
	}
	if value, ok := _c.mutation.UsageState(); ok {
		_spec.SetField(oauthuserauthorization.FieldUsageState, field.TypeEnum, value)
		_node.UsageState = value
	}
	if value, ok := _c.mutation.Scope(); ok {
		_spec.SetField(oauthuserauthorization.FieldScope, field.TypeJSON, value)
		_node.Scope = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthUserAuthorizationCreateBulk is the builder for creating many OauthUserAuthorization entities in bulk.
type OauthUserAuthorizationCreateBulk struct {
	config
	err      error
	builders []*OauthUserAuthorizationCreate
}

// Save creates the OauthUserAuthorization entities in the database.
func (_c *OauthUserAuthorizationCreateBulk) Save(ctx context.Context) ([]*OauthUserAuthorization, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthUserAuthorization, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthUserAuthorizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthUserAuthorizationCreateBulk) SaveX(ctx context.Context) []*OauthUserAuthorization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthUserAuthorizationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthUserAuthorizationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
