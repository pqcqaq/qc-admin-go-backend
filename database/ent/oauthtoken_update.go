// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OauthTokenUpdate is the builder for updating OauthToken entities.
type OauthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *OauthTokenMutation
}

// Where appends a list predicates to the OauthTokenUpdate builder.
func (_u *OauthTokenUpdate) Where(ps ...predicate.OauthToken) *OauthTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthTokenUpdate) SetCreateBy(v uint64) *OauthTokenUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableCreateBy(v *uint64) *OauthTokenUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthTokenUpdate) AddCreateBy(v int64) *OauthTokenUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthTokenUpdate) ClearCreateBy() *OauthTokenUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthTokenUpdate) SetUpdateTime(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthTokenUpdate) SetUpdateBy(v uint64) *OauthTokenUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableUpdateBy(v *uint64) *OauthTokenUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthTokenUpdate) AddUpdateBy(v int64) *OauthTokenUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthTokenUpdate) ClearUpdateBy() *OauthTokenUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthTokenUpdate) SetDeleteTime(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableDeleteTime(v *time.Time) *OauthTokenUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthTokenUpdate) ClearDeleteTime() *OauthTokenUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthTokenUpdate) SetDeleteBy(v uint64) *OauthTokenUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableDeleteBy(v *uint64) *OauthTokenUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthTokenUpdate) AddDeleteBy(v int64) *OauthTokenUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthTokenUpdate) ClearDeleteBy() *OauthTokenUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthTokenUpdate) SetAccessToken(v string) *OauthTokenUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableAccessToken(v *string) *OauthTokenUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthTokenUpdate) SetRefreshToken(v string) *OauthTokenUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableRefreshToken(v *string) *OauthTokenUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthTokenUpdate) SetApplicationID(v uint64) *OauthTokenUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableApplicationID(v *uint64) *OauthTokenUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthTokenUpdate) SetUserID(v uint64) *OauthTokenUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableUserID(v *uint64) *OauthTokenUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthTokenUpdate) SetScope(v []string) *OauthTokenUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthTokenUpdate) AppendScope(v []string) *OauthTokenUpdate {
	_u.mutation.AppendScope(v)
	return _u
}

// SetAccessExpiresAt sets the "access_expires_at" field.
func (_u *OauthTokenUpdate) SetAccessExpiresAt(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetAccessExpiresAt(v)
	return _u
}

// SetNillableAccessExpiresAt sets the "access_expires_at" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableAccessExpiresAt(v *time.Time) *OauthTokenUpdate {
	if v != nil {
		_u.SetAccessExpiresAt(*v)
	}
	return _u
}

// SetRefreshExpiresAt sets the "refresh_expires_at" field.
func (_u *OauthTokenUpdate) SetRefreshExpiresAt(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetRefreshExpiresAt(v)
	return _u
}

// SetNillableRefreshExpiresAt sets the "refresh_expires_at" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableRefreshExpiresAt(v *time.Time) *OauthTokenUpdate {
	if v != nil {
		_u.SetRefreshExpiresAt(*v)
	}
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *OauthTokenUpdate) SetRevokedAt(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableRevokedAt(v *time.Time) *OauthTokenUpdate {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *OauthTokenUpdate) ClearRevokedAt() *OauthTokenUpdate {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *OauthTokenUpdate) SetLastUsedAt(v time.Time) *OauthTokenUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableLastUsedAt(v *time.Time) *OauthTokenUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *OauthTokenUpdate) ClearLastUsedAt() *OauthTokenUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthTokenUpdate) SetApplication(v *OauthApplication) *OauthTokenUpdate {
	return _u.SetApplicationID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthTokenUpdate) SetUser(v *User) *OauthTokenUpdate {
	return _u.SetUserID(v.ID)
}

// SetAuthorizationCodeID sets the "authorization_code" edge to the OauthAuthorizationCode entity by ID.
func (_u *OauthTokenUpdate) SetAuthorizationCodeID(id uint64) *OauthTokenUpdate {
	_u.mutation.SetAuthorizationCodeID(id)
	return _u
}

// SetNillableAuthorizationCodeID sets the "authorization_code" edge to the OauthAuthorizationCode entity by ID if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableAuthorizationCodeID(id *uint64) *OauthTokenUpdate {
	if id != nil {
		_u = _u.SetAuthorizationCodeID(*id)
	}
	return _u
}

// SetAuthorizationCode sets the "authorization_code" edge to the OauthAuthorizationCode entity.
func (_u *OauthTokenUpdate) SetAuthorizationCode(v *OauthAuthorizationCode) *OauthTokenUpdate {
	return _u.SetAuthorizationCodeID(v.ID)
}

// SetUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID.
func (_u *OauthTokenUpdate) SetUserAuthorizationID(id uint64) *OauthTokenUpdate {
	_u.mutation.SetUserAuthorizationID(id)
	return _u
}

// SetNillableUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID if the given value is not nil.
func (_u *OauthTokenUpdate) SetNillableUserAuthorizationID(id *uint64) *OauthTokenUpdate {
	if id != nil {
		_u = _u.SetUserAuthorizationID(*id)
	}
	return _u
}

// SetUserAuthorization sets the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthTokenUpdate) SetUserAuthorization(v *OauthUserAuthorization) *OauthTokenUpdate {
	return _u.SetUserAuthorizationID(v.ID)
}

// Mutation returns the OauthTokenMutation object of the builder.
func (_u *OauthTokenUpdate) Mutation() *OauthTokenMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthTokenUpdate) ClearApplication() *OauthTokenUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthTokenUpdate) ClearUser() *OauthTokenUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearAuthorizationCode clears the "authorization_code" edge to the OauthAuthorizationCode entity.
func (_u *OauthTokenUpdate) ClearAuthorizationCode() *OauthTokenUpdate {
	_u.mutation.ClearAuthorizationCode()
	return _u
}

// ClearUserAuthorization clears the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthTokenUpdate) ClearUserAuthorization() *OauthTokenUpdate {
	_u.mutation.ClearUserAuthorization()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthTokenUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthtoken.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthtoken.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthtoken.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthTokenUpdate) check() error {
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthToken.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthtoken.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthToken.refresh_token": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthToken.application"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthToken.user"`)
	}
	return nil
}

func (_u *OauthTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthtoken.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthtoken.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthtoken.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthtoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthtoken.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthtoken.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthtoken.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthtoken.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthtoken.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthtoken.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthtoken.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthtoken.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthtoken.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthtoken.FieldScope, value)
		})
	}
	if value, ok := _u.mutation.AccessExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldAccessExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RefreshExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(oauthtoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(oauthtoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(oauthtoken.FieldLastUsedAt, field.TypeTime)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ApplicationTable,
			Columns: []string{oauthtoken.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ApplicationTable,
			Columns: []string{oauthtoken.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuthorizationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.AuthorizationCodeTable,
			Columns: []string{oauthtoken.AuthorizationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizationCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.AuthorizationCodeTable,
			Columns: []string{oauthtoken.AuthorizationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserAuthorizationTable,
			Columns: []string{oauthtoken.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserAuthorizationTable,
			Columns: []string{oauthtoken.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthTokenUpdateOne is the builder for updating a single OauthToken entity.
type OauthTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthTokenMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthTokenUpdateOne) SetCreateBy(v uint64) *OauthTokenUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableCreateBy(v *uint64) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthTokenUpdateOne) AddCreateBy(v int64) *OauthTokenUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthTokenUpdateOne) ClearCreateBy() *OauthTokenUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthTokenUpdateOne) SetUpdateTime(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthTokenUpdateOne) SetUpdateBy(v uint64) *OauthTokenUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableUpdateBy(v *uint64) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthTokenUpdateOne) AddUpdateBy(v int64) *OauthTokenUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthTokenUpdateOne) ClearUpdateBy() *OauthTokenUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthTokenUpdateOne) SetDeleteTime(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthTokenUpdateOne) ClearDeleteTime() *OauthTokenUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthTokenUpdateOne) SetDeleteBy(v uint64) *OauthTokenUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableDeleteBy(v *uint64) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthTokenUpdateOne) AddDeleteBy(v int64) *OauthTokenUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthTokenUpdateOne) ClearDeleteBy() *OauthTokenUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthTokenUpdateOne) SetAccessToken(v string) *OauthTokenUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableAccessToken(v *string) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthTokenUpdateOne) SetRefreshToken(v string) *OauthTokenUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableRefreshToken(v *string) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *OauthTokenUpdateOne) SetApplicationID(v uint64) *OauthTokenUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableApplicationID(v *uint64) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthTokenUpdateOne) SetUserID(v uint64) *OauthTokenUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableUserID(v *uint64) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthTokenUpdateOne) SetScope(v []string) *OauthTokenUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// AppendScope appends value to the "scope" field.
func (_u *OauthTokenUpdateOne) AppendScope(v []string) *OauthTokenUpdateOne {
	_u.mutation.AppendScope(v)
	return _u
}

// SetAccessExpiresAt sets the "access_expires_at" field.
func (_u *OauthTokenUpdateOne) SetAccessExpiresAt(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetAccessExpiresAt(v)
	return _u
}

// SetNillableAccessExpiresAt sets the "access_expires_at" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableAccessExpiresAt(v *time.Time) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetAccessExpiresAt(*v)
	}
	return _u
}

// SetRefreshExpiresAt sets the "refresh_expires_at" field.
func (_u *OauthTokenUpdateOne) SetRefreshExpiresAt(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetRefreshExpiresAt(v)
	return _u
}

// SetNillableRefreshExpiresAt sets the "refresh_expires_at" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableRefreshExpiresAt(v *time.Time) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetRefreshExpiresAt(*v)
	}
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *OauthTokenUpdateOne) SetRevokedAt(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableRevokedAt(v *time.Time) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *OauthTokenUpdateOne) ClearRevokedAt() *OauthTokenUpdateOne {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *OauthTokenUpdateOne) SetLastUsedAt(v time.Time) *OauthTokenUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableLastUsedAt(v *time.Time) *OauthTokenUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *OauthTokenUpdateOne) ClearLastUsedAt() *OauthTokenUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetApplication sets the "application" edge to the OauthApplication entity.
func (_u *OauthTokenUpdateOne) SetApplication(v *OauthApplication) *OauthTokenUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthTokenUpdateOne) SetUser(v *User) *OauthTokenUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetAuthorizationCodeID sets the "authorization_code" edge to the OauthAuthorizationCode entity by ID.
func (_u *OauthTokenUpdateOne) SetAuthorizationCodeID(id uint64) *OauthTokenUpdateOne {
	_u.mutation.SetAuthorizationCodeID(id)
	return _u
}

// SetNillableAuthorizationCodeID sets the "authorization_code" edge to the OauthAuthorizationCode entity by ID if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableAuthorizationCodeID(id *uint64) *OauthTokenUpdateOne {
	if id != nil {
		_u = _u.SetAuthorizationCodeID(*id)
	}
	return _u
}

// SetAuthorizationCode sets the "authorization_code" edge to the OauthAuthorizationCode entity.
func (_u *OauthTokenUpdateOne) SetAuthorizationCode(v *OauthAuthorizationCode) *OauthTokenUpdateOne {
	return _u.SetAuthorizationCodeID(v.ID)
}

// SetUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID.
func (_u *OauthTokenUpdateOne) SetUserAuthorizationID(id uint64) *OauthTokenUpdateOne {
	_u.mutation.SetUserAuthorizationID(id)
	return _u
}

// SetNillableUserAuthorizationID sets the "user_authorization" edge to the OauthUserAuthorization entity by ID if the given value is not nil.
func (_u *OauthTokenUpdateOne) SetNillableUserAuthorizationID(id *uint64) *OauthTokenUpdateOne {
	if id != nil {
		_u = _u.SetUserAuthorizationID(*id)
	}
	return _u
}

// SetUserAuthorization sets the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthTokenUpdateOne) SetUserAuthorization(v *OauthUserAuthorization) *OauthTokenUpdateOne {
	return _u.SetUserAuthorizationID(v.ID)
}

// Mutation returns the OauthTokenMutation object of the builder.
func (_u *OauthTokenUpdateOne) Mutation() *OauthTokenMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the OauthApplication entity.
func (_u *OauthTokenUpdateOne) ClearApplication() *OauthTokenUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthTokenUpdateOne) ClearUser() *OauthTokenUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearAuthorizationCode clears the "authorization_code" edge to the OauthAuthorizationCode entity.
func (_u *OauthTokenUpdateOne) ClearAuthorizationCode() *OauthTokenUpdateOne {
	_u.mutation.ClearAuthorizationCode()
	return _u
}

// ClearUserAuthorization clears the "user_authorization" edge to the OauthUserAuthorization entity.
func (_u *OauthTokenUpdateOne) ClearUserAuthorization() *OauthTokenUpdateOne {
	_u.mutation.ClearUserAuthorization()
	return _u
}

// Where appends a list predicates to the OauthTokenUpdate builder.
func (_u *OauthTokenUpdateOne) Where(ps ...predicate.OauthToken) *OauthTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthTokenUpdateOne) Select(field string, fields ...string) *OauthTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthToken entity.
func (_u *OauthTokenUpdateOne) Save(ctx context.Context) (*OauthToken, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthTokenUpdateOne) SaveX(ctx context.Context) *OauthToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthTokenUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthtoken.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthtoken.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthtoken.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthTokenUpdateOne) check() error {
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthToken.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthtoken.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthToken.refresh_token": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthToken.application"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthToken.user"`)
	}
	return nil
}

func (_u *OauthTokenUpdateOne) sqlSave(ctx context.Context) (_node *OauthToken, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthtoken.FieldID)
		for _, f := range fields {
			if !oauthtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthtoken.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthtoken.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthtoken.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthtoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthtoken.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthtoken.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthtoken.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthtoken.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthtoken.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthtoken.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthtoken.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthtoken.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthtoken.FieldScope, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthtoken.FieldScope, value)
		})
	}
	if value, ok := _u.mutation.AccessExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldAccessExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RefreshExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(oauthtoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(oauthtoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(oauthtoken.FieldLastUsedAt, field.TypeTime)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ApplicationTable,
			Columns: []string{oauthtoken.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ApplicationTable,
			Columns: []string{oauthtoken.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuthorizationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.AuthorizationCodeTable,
			Columns: []string{oauthtoken.AuthorizationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizationCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.AuthorizationCodeTable,
			Columns: []string{oauthtoken.AuthorizationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorizationcode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserAuthorizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserAuthorizationTable,
			Columns: []string{oauthtoken.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAuthorizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserAuthorizationTable,
			Columns: []string{oauthtoken.UserAuthorizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuserauthorization.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
