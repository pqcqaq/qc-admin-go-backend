// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/logging"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Logging is the model entity for the Logging schema.
type Logging struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy int64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy int64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy int64 `json:"delete_by,omitempty"`
	// Level holds the value of the "level" field.
	Level logging.Level `json:"level,omitempty"`
	// Type holds the value of the "type" field.
	Type logging.Type `json:"type,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// Code holds the value of the "code" field.
	Code int `json:"code,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]interface{} `json:"data,omitempty"`
	// Stack holds the value of the "stack" field.
	Stack        string `json:"stack,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Logging) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logging.FieldData:
			values[i] = new([]byte)
		case logging.FieldID, logging.FieldCreateBy, logging.FieldUpdateBy, logging.FieldDeleteBy, logging.FieldCode:
			values[i] = new(sql.NullInt64)
		case logging.FieldLevel, logging.FieldType, logging.FieldMessage, logging.FieldMethod, logging.FieldPath, logging.FieldIP, logging.FieldQuery, logging.FieldUserAgent, logging.FieldStack:
			values[i] = new(sql.NullString)
		case logging.FieldCreateTime, logging.FieldUpdateTime, logging.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Logging fields.
func (_m *Logging) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logging.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case logging.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case logging.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = value.Int64
			}
		case logging.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case logging.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = value.Int64
			}
		case logging.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case logging.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = value.Int64
			}
		case logging.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				_m.Level = logging.Level(value.String)
			}
		case logging.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = logging.Type(value.String)
			}
		case logging.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case logging.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				_m.Method = value.String
			}
		case logging.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case logging.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				_m.IP = value.String
			}
		case logging.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				_m.Query = value.String
			}
		case logging.FieldCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = int(value.Int64)
			}
		case logging.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case logging.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case logging.FieldStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stack", values[i])
			} else if value.Valid {
				_m.Stack = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Logging.
// This includes values selected through modifiers, order, etc.
func (_m *Logging) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Logging.
// Note that you need to call Logging.Unwrap() before calling this method if this Logging
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Logging) Update() *LoggingUpdateOne {
	return NewLoggingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Logging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Logging) Unwrap() *Logging {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Logging is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Logging) String() string {
	var builder strings.Builder
	builder.WriteString("Logging(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", _m.Level))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(_m.Method)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(_m.IP)
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(_m.Query)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(fmt.Sprintf("%v", _m.Code))
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", _m.Data))
	builder.WriteString(", ")
	builder.WriteString("stack=")
	builder.WriteString(_m.Stack)
	builder.WriteByte(')')
	return builder.String()
}

// Loggings is a parsable slice of Logging.
type Loggings []*Logging
