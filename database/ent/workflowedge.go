// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowedge"
	"go-backend/database/ent/workflownode"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowEdge is the model entity for the WorkflowEdge schema.
type WorkflowEdge struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 边唯一标识符
	EdgeKey string `json:"edge_key,omitempty"`
	// 所属工作流应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 源节点ID
	SourceNodeID uint64 `json:"source_node_id,omitempty"`
	// 目标节点ID
	TargetNodeID uint64 `json:"target_node_id,omitempty"`
	// 源节点连接点ID
	SourceHandle string `json:"source_handle,omitempty"`
	// 目标节点连接点ID
	TargetHandle string `json:"target_handle,omitempty"`
	// 边类型
	Type workflowedge.Type `json:"type,omitempty"`
	// 边标签
	Label string `json:"label,omitempty"`
	// 分支名称（用于 condition_checker）
	BranchName string `json:"branch_name,omitempty"`
	// 是否动画
	Animated bool `json:"animated,omitempty"`
	// 边样式
	Style map[string]interface{} `json:"style,omitempty"`
	// 边数据
	Data map[string]interface{} `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowEdgeQuery when eager-loading is set.
	Edges        WorkflowEdgeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowEdgeEdges holds the relations/edges for other nodes in the graph.
type WorkflowEdgeEdges struct {
	// Application holds the value of the application edge.
	Application *WorkflowApplication `json:"application,omitempty"`
	// SourceNode holds the value of the source_node edge.
	SourceNode *WorkflowNode `json:"source_node,omitempty"`
	// TargetNode holds the value of the target_node edge.
	TargetNode *WorkflowNode `json:"target_node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEdgeEdges) ApplicationOrErr() (*WorkflowApplication, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowapplication.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// SourceNodeOrErr returns the SourceNode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEdgeEdges) SourceNodeOrErr() (*WorkflowNode, error) {
	if e.SourceNode != nil {
		return e.SourceNode, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workflownode.Label}
	}
	return nil, &NotLoadedError{edge: "source_node"}
}

// TargetNodeOrErr returns the TargetNode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEdgeEdges) TargetNodeOrErr() (*WorkflowNode, error) {
	if e.TargetNode != nil {
		return e.TargetNode, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workflownode.Label}
	}
	return nil, &NotLoadedError{edge: "target_node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowEdge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowedge.FieldStyle, workflowedge.FieldData:
			values[i] = new([]byte)
		case workflowedge.FieldAnimated:
			values[i] = new(sql.NullBool)
		case workflowedge.FieldID, workflowedge.FieldCreateBy, workflowedge.FieldUpdateBy, workflowedge.FieldDeleteBy, workflowedge.FieldApplicationID, workflowedge.FieldSourceNodeID, workflowedge.FieldTargetNodeID:
			values[i] = new(sql.NullInt64)
		case workflowedge.FieldEdgeKey, workflowedge.FieldSourceHandle, workflowedge.FieldTargetHandle, workflowedge.FieldType, workflowedge.FieldLabel, workflowedge.FieldBranchName:
			values[i] = new(sql.NullString)
		case workflowedge.FieldCreateTime, workflowedge.FieldUpdateTime, workflowedge.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowEdge fields.
func (_m *WorkflowEdge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowedge.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflowedge.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflowedge.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflowedge.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflowedge.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflowedge.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case workflowedge.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case workflowedge.FieldEdgeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field edge_key", values[i])
			} else if value.Valid {
				_m.EdgeKey = value.String
			}
		case workflowedge.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case workflowedge.FieldSourceNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_node_id", values[i])
			} else if value.Valid {
				_m.SourceNodeID = uint64(value.Int64)
			}
		case workflowedge.FieldTargetNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_node_id", values[i])
			} else if value.Valid {
				_m.TargetNodeID = uint64(value.Int64)
			}
		case workflowedge.FieldSourceHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_handle", values[i])
			} else if value.Valid {
				_m.SourceHandle = value.String
			}
		case workflowedge.FieldTargetHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_handle", values[i])
			} else if value.Valid {
				_m.TargetHandle = value.String
			}
		case workflowedge.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = workflowedge.Type(value.String)
			}
		case workflowedge.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				_m.Label = value.String
			}
		case workflowedge.FieldBranchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch_name", values[i])
			} else if value.Valid {
				_m.BranchName = value.String
			}
		case workflowedge.FieldAnimated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field animated", values[i])
			} else if value.Valid {
				_m.Animated = value.Bool
			}
		case workflowedge.FieldStyle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field style", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Style); err != nil {
					return fmt.Errorf("unmarshal field style: %w", err)
				}
			}
		case workflowedge.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowEdge.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowEdge) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the WorkflowEdge entity.
func (_m *WorkflowEdge) QueryApplication() *WorkflowApplicationQuery {
	return NewWorkflowEdgeClient(_m.config).QueryApplication(_m)
}

// QuerySourceNode queries the "source_node" edge of the WorkflowEdge entity.
func (_m *WorkflowEdge) QuerySourceNode() *WorkflowNodeQuery {
	return NewWorkflowEdgeClient(_m.config).QuerySourceNode(_m)
}

// QueryTargetNode queries the "target_node" edge of the WorkflowEdge entity.
func (_m *WorkflowEdge) QueryTargetNode() *WorkflowNodeQuery {
	return NewWorkflowEdgeClient(_m.config).QueryTargetNode(_m)
}

// Update returns a builder for updating this WorkflowEdge.
// Note that you need to call WorkflowEdge.Unwrap() before calling this method if this WorkflowEdge
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowEdge) Update() *WorkflowEdgeUpdateOne {
	return NewWorkflowEdgeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowEdge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowEdge) Unwrap() *WorkflowEdge {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowEdge is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowEdge) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowEdge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("edge_key=")
	builder.WriteString(_m.EdgeKey)
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("source_node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SourceNodeID))
	builder.WriteString(", ")
	builder.WriteString("target_node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetNodeID))
	builder.WriteString(", ")
	builder.WriteString("source_handle=")
	builder.WriteString(_m.SourceHandle)
	builder.WriteString(", ")
	builder.WriteString("target_handle=")
	builder.WriteString(_m.TargetHandle)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(_m.Label)
	builder.WriteString(", ")
	builder.WriteString("branch_name=")
	builder.WriteString(_m.BranchName)
	builder.WriteString(", ")
	builder.WriteString("animated=")
	builder.WriteString(fmt.Sprintf("%v", _m.Animated))
	builder.WriteString(", ")
	builder.WriteString("style=")
	builder.WriteString(fmt.Sprintf("%v", _m.Style))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", _m.Data))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowEdges is a parsable slice of WorkflowEdge.
type WorkflowEdges []*WorkflowEdge
