// Code generated by ent, DO NOT EDIT.

package clientdevice

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDeleteBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDescription, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldEnabled, v))
}

// AccessTokenExpiry applies equality check predicate on the "access_token_expiry" field. It's identical to AccessTokenExpiryEQ.
func AccessTokenExpiry(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldAccessTokenExpiry, v))
}

// RefreshTokenExpiry applies equality check predicate on the "refresh_token_expiry" field. It's identical to RefreshTokenExpiryEQ.
func RefreshTokenExpiry(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldRefreshTokenExpiry, v))
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldAnonymous, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotNull(FieldDeleteBy))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContainsFold(FieldCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldContainsFold(FieldDescription, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldEnabled, v))
}

// AccessTokenExpiryEQ applies the EQ predicate on the "access_token_expiry" field.
func AccessTokenExpiryEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryNEQ applies the NEQ predicate on the "access_token_expiry" field.
func AccessTokenExpiryNEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryIn applies the In predicate on the "access_token_expiry" field.
func AccessTokenExpiryIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldAccessTokenExpiry, vs...))
}

// AccessTokenExpiryNotIn applies the NotIn predicate on the "access_token_expiry" field.
func AccessTokenExpiryNotIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldAccessTokenExpiry, vs...))
}

// AccessTokenExpiryGT applies the GT predicate on the "access_token_expiry" field.
func AccessTokenExpiryGT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryGTE applies the GTE predicate on the "access_token_expiry" field.
func AccessTokenExpiryGTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryLT applies the LT predicate on the "access_token_expiry" field.
func AccessTokenExpiryLT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryLTE applies the LTE predicate on the "access_token_expiry" field.
func AccessTokenExpiryLTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldAccessTokenExpiry, v))
}

// RefreshTokenExpiryEQ applies the EQ predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldRefreshTokenExpiry, v))
}

// RefreshTokenExpiryNEQ applies the NEQ predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryNEQ(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldRefreshTokenExpiry, v))
}

// RefreshTokenExpiryIn applies the In predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldIn(FieldRefreshTokenExpiry, vs...))
}

// RefreshTokenExpiryNotIn applies the NotIn predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryNotIn(vs ...uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNotIn(FieldRefreshTokenExpiry, vs...))
}

// RefreshTokenExpiryGT applies the GT predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryGT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGT(FieldRefreshTokenExpiry, v))
}

// RefreshTokenExpiryGTE applies the GTE predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryGTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldGTE(FieldRefreshTokenExpiry, v))
}

// RefreshTokenExpiryLT applies the LT predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryLT(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLT(FieldRefreshTokenExpiry, v))
}

// RefreshTokenExpiryLTE applies the LTE predicate on the "refresh_token_expiry" field.
func RefreshTokenExpiryLTE(v uint64) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldLTE(FieldRefreshTokenExpiry, v))
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldEQ(FieldAnonymous, v))
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.ClientDevice {
	return predicate.ClientDevice(sql.FieldNEQ(FieldAnonymous, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.ClientDevice {
	return predicate.ClientDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.ClientDevice {
	return predicate.ClientDevice(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClientDevice) predicate.ClientDevice {
	return predicate.ClientDevice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClientDevice) predicate.ClientDevice {
	return predicate.ClientDevice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClientDevice) predicate.ClientDevice {
	return predicate.ClientDevice(sql.NotPredicates(p))
}
