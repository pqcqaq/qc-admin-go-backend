// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/scope"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Scope is the model entity for the Scope schema.
type Scope struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 权限域类型
	Type scope.Type `json:"type,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty"`
	// Redirect holds the value of the "redirect" field.
	Redirect string `json:"redirect,omitempty"`
	// 排序
	Order int `json:"order,omitempty"`
	// 是否隐藏
	Hidden bool `json:"hidden,omitempty"`
	// 是否禁用
	Disabled bool `json:"disabled,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uint64 `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScopeQuery when eager-loading is set.
	Edges        ScopeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScopeEdges holds the relations/edges for other nodes in the graph.
type ScopeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Scope `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Scope `json:"children,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes      [3]bool
	namedChildren    map[string][]*Scope
	namedPermissions map[string][]*Permission
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScopeEdges) ParentOrErr() (*Scope, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scope.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ScopeEdges) ChildrenOrErr() ([]*Scope, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e ScopeEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[2] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scope) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scope.FieldHidden, scope.FieldDisabled:
			values[i] = new(sql.NullBool)
		case scope.FieldID, scope.FieldCreateBy, scope.FieldUpdateBy, scope.FieldDeleteBy, scope.FieldOrder, scope.FieldParentID:
			values[i] = new(sql.NullInt64)
		case scope.FieldName, scope.FieldType, scope.FieldIcon, scope.FieldDescription, scope.FieldAction, scope.FieldPath, scope.FieldComponent, scope.FieldRedirect:
			values[i] = new(sql.NullString)
		case scope.FieldCreateTime, scope.FieldUpdateTime, scope.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scope fields.
func (_m *Scope) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scope.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case scope.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case scope.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case scope.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case scope.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case scope.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case scope.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case scope.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case scope.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = scope.Type(value.String)
			}
		case scope.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = value.String
			}
		case scope.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case scope.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = value.String
			}
		case scope.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case scope.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				_m.Component = value.String
			}
		case scope.FieldRedirect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect", values[i])
			} else if value.Valid {
				_m.Redirect = value.String
			}
		case scope.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case scope.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				_m.Hidden = value.Bool
			}
		case scope.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				_m.Disabled = value.Bool
			}
		case scope.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				_m.ParentID = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scope.
// This includes values selected through modifiers, order, etc.
func (_m *Scope) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Scope entity.
func (_m *Scope) QueryParent() *ScopeQuery {
	return NewScopeClient(_m.config).QueryParent(_m)
}

// QueryChildren queries the "children" edge of the Scope entity.
func (_m *Scope) QueryChildren() *ScopeQuery {
	return NewScopeClient(_m.config).QueryChildren(_m)
}

// QueryPermissions queries the "permissions" edge of the Scope entity.
func (_m *Scope) QueryPermissions() *PermissionQuery {
	return NewScopeClient(_m.config).QueryPermissions(_m)
}

// Update returns a builder for updating this Scope.
// Note that you need to call Scope.Unwrap() before calling this method if this Scope
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Scope) Update() *ScopeUpdateOne {
	return NewScopeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Scope entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Scope) Unwrap() *Scope {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scope is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Scope) String() string {
	var builder strings.Builder
	builder.WriteString("Scope(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(_m.Icon)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(_m.Action)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("component=")
	builder.WriteString(_m.Component)
	builder.WriteString(", ")
	builder.WriteString("redirect=")
	builder.WriteString(_m.Redirect)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", _m.Hidden))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Disabled))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scope) NamedChildren(name string) ([]*Scope, error) {
	if _m.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scope) appendNamedChildren(name string, edges ...*Scope) {
	if _m.Edges.namedChildren == nil {
		_m.Edges.namedChildren = make(map[string][]*Scope)
	}
	if len(edges) == 0 {
		_m.Edges.namedChildren[name] = []*Scope{}
	} else {
		_m.Edges.namedChildren[name] = append(_m.Edges.namedChildren[name], edges...)
	}
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scope) NamedPermissions(name string) ([]*Permission, error) {
	if _m.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scope) appendNamedPermissions(name string, edges ...*Permission) {
	if _m.Edges.namedPermissions == nil {
		_m.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		_m.Edges.namedPermissions[name] = []*Permission{}
	} else {
		_m.Edges.namedPermissions[name] = append(_m.Edges.namedPermissions[name], edges...)
	}
}

// Scopes is a parsable slice of Scope.
type Scopes []*Scope
