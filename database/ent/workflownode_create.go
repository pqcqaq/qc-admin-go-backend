// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowedge"
	"go-backend/database/ent/workflownode"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeCreate is the builder for creating a WorkflowNode entity.
type WorkflowNodeCreate struct {
	config
	mutation *WorkflowNodeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WorkflowNodeCreate) SetCreateTime(v time.Time) *WorkflowNodeCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableCreateTime(v *time.Time) *WorkflowNodeCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *WorkflowNodeCreate) SetCreateBy(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableCreateBy(v *uint64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WorkflowNodeCreate) SetUpdateTime(v time.Time) *WorkflowNodeCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableUpdateTime(v *time.Time) *WorkflowNodeCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *WorkflowNodeCreate) SetUpdateBy(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableUpdateBy(v *uint64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *WorkflowNodeCreate) SetDeleteTime(v time.Time) *WorkflowNodeCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableDeleteTime(v *time.Time) *WorkflowNodeCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *WorkflowNodeCreate) SetDeleteBy(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableDeleteBy(v *uint64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *WorkflowNodeCreate) SetName(v string) *WorkflowNodeCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *WorkflowNodeCreate) SetType(v workflownode.Type) *WorkflowNodeCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *WorkflowNodeCreate) SetDescription(v string) *WorkflowNodeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableDescription(v *string) *WorkflowNodeCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetPrompt sets the "prompt" field.
func (_c *WorkflowNodeCreate) SetPrompt(v string) *WorkflowNodeCreate {
	_c.mutation.SetPrompt(v)
	return _c
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillablePrompt(v *string) *WorkflowNodeCreate {
	if v != nil {
		_c.SetPrompt(*v)
	}
	return _c
}

// SetConfig sets the "config" field.
func (_c *WorkflowNodeCreate) SetConfig(v map[string]interface{}) *WorkflowNodeCreate {
	_c.mutation.SetConfig(v)
	return _c
}

// SetApplicationID sets the "application_id" field.
func (_c *WorkflowNodeCreate) SetApplicationID(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetApplicationID(v)
	return _c
}

// SetProcessorLanguage sets the "processor_language" field.
func (_c *WorkflowNodeCreate) SetProcessorLanguage(v string) *WorkflowNodeCreate {
	_c.mutation.SetProcessorLanguage(v)
	return _c
}

// SetNillableProcessorLanguage sets the "processor_language" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableProcessorLanguage(v *string) *WorkflowNodeCreate {
	if v != nil {
		_c.SetProcessorLanguage(*v)
	}
	return _c
}

// SetProcessorCode sets the "processor_code" field.
func (_c *WorkflowNodeCreate) SetProcessorCode(v string) *WorkflowNodeCreate {
	_c.mutation.SetProcessorCode(v)
	return _c
}

// SetNillableProcessorCode sets the "processor_code" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableProcessorCode(v *string) *WorkflowNodeCreate {
	if v != nil {
		_c.SetProcessorCode(*v)
	}
	return _c
}

// SetBranchNodes sets the "branch_nodes" field.
func (_c *WorkflowNodeCreate) SetBranchNodes(v map[string]interface{}) *WorkflowNodeCreate {
	_c.mutation.SetBranchNodes(v)
	return _c
}

// SetParallelConfig sets the "parallel_config" field.
func (_c *WorkflowNodeCreate) SetParallelConfig(v map[string]interface{}) *WorkflowNodeCreate {
	_c.mutation.SetParallelConfig(v)
	return _c
}

// SetAPIConfig sets the "api_config" field.
func (_c *WorkflowNodeCreate) SetAPIConfig(v map[string]interface{}) *WorkflowNodeCreate {
	_c.mutation.SetAPIConfig(v)
	return _c
}

// SetWorkflowApplicationID sets the "workflow_application_id" field.
func (_c *WorkflowNodeCreate) SetWorkflowApplicationID(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetWorkflowApplicationID(v)
	return _c
}

// SetNillableWorkflowApplicationID sets the "workflow_application_id" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableWorkflowApplicationID(v *uint64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetWorkflowApplicationID(*v)
	}
	return _c
}

// SetAsync sets the "async" field.
func (_c *WorkflowNodeCreate) SetAsync(v bool) *WorkflowNodeCreate {
	_c.mutation.SetAsync(v)
	return _c
}

// SetNillableAsync sets the "async" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableAsync(v *bool) *WorkflowNodeCreate {
	if v != nil {
		_c.SetAsync(*v)
	}
	return _c
}

// SetTimeout sets the "timeout" field.
func (_c *WorkflowNodeCreate) SetTimeout(v int) *WorkflowNodeCreate {
	_c.mutation.SetTimeout(v)
	return _c
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableTimeout(v *int) *WorkflowNodeCreate {
	if v != nil {
		_c.SetTimeout(*v)
	}
	return _c
}

// SetRetryCount sets the "retry_count" field.
func (_c *WorkflowNodeCreate) SetRetryCount(v int) *WorkflowNodeCreate {
	_c.mutation.SetRetryCount(v)
	return _c
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableRetryCount(v *int) *WorkflowNodeCreate {
	if v != nil {
		_c.SetRetryCount(*v)
	}
	return _c
}

// SetPositionX sets the "position_x" field.
func (_c *WorkflowNodeCreate) SetPositionX(v float64) *WorkflowNodeCreate {
	_c.mutation.SetPositionX(v)
	return _c
}

// SetNillablePositionX sets the "position_x" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillablePositionX(v *float64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetPositionX(*v)
	}
	return _c
}

// SetPositionY sets the "position_y" field.
func (_c *WorkflowNodeCreate) SetPositionY(v float64) *WorkflowNodeCreate {
	_c.mutation.SetPositionY(v)
	return _c
}

// SetNillablePositionY sets the "position_y" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillablePositionY(v *float64) *WorkflowNodeCreate {
	if v != nil {
		_c.SetPositionY(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *WorkflowNodeCreate) SetColor(v string) *WorkflowNodeCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_c *WorkflowNodeCreate) SetNillableColor(v *string) *WorkflowNodeCreate {
	if v != nil {
		_c.SetColor(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *WorkflowNodeCreate) SetID(v uint64) *WorkflowNodeCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_c *WorkflowNodeCreate) SetApplication(v *WorkflowApplication) *WorkflowNodeCreate {
	return _c.SetApplicationID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowNodeExecution entity by IDs.
func (_c *WorkflowNodeCreate) AddExecutionIDs(ids ...uint64) *WorkflowNodeCreate {
	_c.mutation.AddExecutionIDs(ids...)
	return _c
}

// AddExecutions adds the "executions" edges to the WorkflowNodeExecution entity.
func (_c *WorkflowNodeCreate) AddExecutions(v ...*WorkflowNodeExecution) *WorkflowNodeCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddExecutionIDs(ids...)
}

// AddOutgoingEdgeIDs adds the "outgoing_edges" edge to the WorkflowEdge entity by IDs.
func (_c *WorkflowNodeCreate) AddOutgoingEdgeIDs(ids ...uint64) *WorkflowNodeCreate {
	_c.mutation.AddOutgoingEdgeIDs(ids...)
	return _c
}

// AddOutgoingEdges adds the "outgoing_edges" edges to the WorkflowEdge entity.
func (_c *WorkflowNodeCreate) AddOutgoingEdges(v ...*WorkflowEdge) *WorkflowNodeCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOutgoingEdgeIDs(ids...)
}

// AddIncomingEdgeIDs adds the "incoming_edges" edge to the WorkflowEdge entity by IDs.
func (_c *WorkflowNodeCreate) AddIncomingEdgeIDs(ids ...uint64) *WorkflowNodeCreate {
	_c.mutation.AddIncomingEdgeIDs(ids...)
	return _c
}

// AddIncomingEdges adds the "incoming_edges" edges to the WorkflowEdge entity.
func (_c *WorkflowNodeCreate) AddIncomingEdges(v ...*WorkflowEdge) *WorkflowNodeCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddIncomingEdgeIDs(ids...)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (_c *WorkflowNodeCreate) Mutation() *WorkflowNodeMutation {
	return _c.mutation
}

// Save creates the WorkflowNode in the database.
func (_c *WorkflowNodeCreate) Save(ctx context.Context) (*WorkflowNode, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowNodeCreate) SaveX(ctx context.Context) *WorkflowNode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowNodeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowNodeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WorkflowNodeCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if workflownode.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownode.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := workflownode.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if workflownode.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflownode.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflownode.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Async(); !ok {
		v := workflownode.DefaultAsync
		_c.mutation.SetAsync(v)
	}
	if _, ok := _c.mutation.Timeout(); !ok {
		v := workflownode.DefaultTimeout
		_c.mutation.SetTimeout(v)
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		v := workflownode.DefaultRetryCount
		_c.mutation.SetRetryCount(v)
	}
	if _, ok := _c.mutation.PositionX(); !ok {
		v := workflownode.DefaultPositionX
		_c.mutation.SetPositionX(v)
	}
	if _, ok := _c.mutation.PositionY(); !ok {
		v := workflownode.DefaultPositionY
		_c.mutation.SetPositionY(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowNodeCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowNode.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowNode.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WorkflowNode.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := workflownode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WorkflowNode.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := workflownode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowNode.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "WorkflowNode.config"`)}
	}
	if _, ok := _c.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "WorkflowNode.application_id"`)}
	}
	if _, ok := _c.mutation.Async(); !ok {
		return &ValidationError{Name: "async", err: errors.New(`ent: missing required field "WorkflowNode.async"`)}
	}
	if _, ok := _c.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "WorkflowNode.timeout"`)}
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "WorkflowNode.retry_count"`)}
	}
	if _, ok := _c.mutation.PositionX(); !ok {
		return &ValidationError{Name: "position_x", err: errors.New(`ent: missing required field "WorkflowNode.position_x"`)}
	}
	if _, ok := _c.mutation.PositionY(); !ok {
		return &ValidationError{Name: "position_y", err: errors.New(`ent: missing required field "WorkflowNode.position_y"`)}
	}
	if len(_c.mutation.ApplicationIDs()) == 0 {
		return &ValidationError{Name: "application", err: errors.New(`ent: missing required edge "WorkflowNode.application"`)}
	}
	return nil
}

func (_c *WorkflowNodeCreate) sqlSave(ctx context.Context) (*WorkflowNode, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowNodeCreate) createSpec() (*WorkflowNode, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowNode{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflownode.Table, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(workflownode.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(workflownode.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(workflownode.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(workflownode.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(workflownode.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(workflownode.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(workflownode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Prompt(); ok {
		_spec.SetField(workflownode.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if value, ok := _c.mutation.Config(); ok {
		_spec.SetField(workflownode.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := _c.mutation.ProcessorLanguage(); ok {
		_spec.SetField(workflownode.FieldProcessorLanguage, field.TypeString, value)
		_node.ProcessorLanguage = value
	}
	if value, ok := _c.mutation.ProcessorCode(); ok {
		_spec.SetField(workflownode.FieldProcessorCode, field.TypeString, value)
		_node.ProcessorCode = value
	}
	if value, ok := _c.mutation.BranchNodes(); ok {
		_spec.SetField(workflownode.FieldBranchNodes, field.TypeJSON, value)
		_node.BranchNodes = value
	}
	if value, ok := _c.mutation.ParallelConfig(); ok {
		_spec.SetField(workflownode.FieldParallelConfig, field.TypeJSON, value)
		_node.ParallelConfig = value
	}
	if value, ok := _c.mutation.APIConfig(); ok {
		_spec.SetField(workflownode.FieldAPIConfig, field.TypeJSON, value)
		_node.APIConfig = value
	}
	if value, ok := _c.mutation.WorkflowApplicationID(); ok {
		_spec.SetField(workflownode.FieldWorkflowApplicationID, field.TypeUint64, value)
		_node.WorkflowApplicationID = value
	}
	if value, ok := _c.mutation.Async(); ok {
		_spec.SetField(workflownode.FieldAsync, field.TypeBool, value)
		_node.Async = value
	}
	if value, ok := _c.mutation.Timeout(); ok {
		_spec.SetField(workflownode.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := _c.mutation.RetryCount(); ok {
		_spec.SetField(workflownode.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := _c.mutation.PositionX(); ok {
		_spec.SetField(workflownode.FieldPositionX, field.TypeFloat64, value)
		_node.PositionX = value
	}
	if value, ok := _c.mutation.PositionY(); ok {
		_spec.SetField(workflownode.FieldPositionY, field.TypeFloat64, value)
		_node.PositionY = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(workflownode.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if nodes := _c.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.ApplicationTable,
			Columns: []string{workflownode.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.ExecutionsTable,
			Columns: []string{workflownode.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OutgoingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.OutgoingEdgesTable,
			Columns: []string{workflownode.OutgoingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.IncomingEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.IncomingEdgesTable,
			Columns: []string{workflownode.IncomingEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowNodeCreateBulk is the builder for creating many WorkflowNode entities in bulk.
type WorkflowNodeCreateBulk struct {
	config
	err      error
	builders []*WorkflowNodeCreate
}

// Save creates the WorkflowNode entities in the database.
func (_c *WorkflowNodeCreateBulk) Save(ctx context.Context) ([]*WorkflowNode, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*WorkflowNode, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowNodeCreateBulk) SaveX(ctx context.Context) []*WorkflowNode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowNodeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
