// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/clientdevice"
	"go-backend/database/ent/role"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClientDeviceCreate is the builder for creating a ClientDevice entity.
type ClientDeviceCreate struct {
	config
	mutation *ClientDeviceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *ClientDeviceCreate) SetCreateTime(v time.Time) *ClientDeviceCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableCreateTime(v *time.Time) *ClientDeviceCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *ClientDeviceCreate) SetCreateBy(v uint64) *ClientDeviceCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableCreateBy(v *uint64) *ClientDeviceCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *ClientDeviceCreate) SetUpdateTime(v time.Time) *ClientDeviceCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableUpdateTime(v *time.Time) *ClientDeviceCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *ClientDeviceCreate) SetUpdateBy(v uint64) *ClientDeviceCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableUpdateBy(v *uint64) *ClientDeviceCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *ClientDeviceCreate) SetDeleteTime(v time.Time) *ClientDeviceCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableDeleteTime(v *time.Time) *ClientDeviceCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetDeleteBy sets the "delete_by" field.
func (_c *ClientDeviceCreate) SetDeleteBy(v uint64) *ClientDeviceCreate {
	_c.mutation.SetDeleteBy(v)
	return _c
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableDeleteBy(v *uint64) *ClientDeviceCreate {
	if v != nil {
		_c.SetDeleteBy(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ClientDeviceCreate) SetName(v string) *ClientDeviceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetCode sets the "code" field.
func (_c *ClientDeviceCreate) SetCode(v string) *ClientDeviceCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ClientDeviceCreate) SetDescription(v string) *ClientDeviceCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableDescription(v *string) *ClientDeviceCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetEnabled sets the "enabled" field.
func (_c *ClientDeviceCreate) SetEnabled(v bool) *ClientDeviceCreate {
	_c.mutation.SetEnabled(v)
	return _c
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableEnabled(v *bool) *ClientDeviceCreate {
	if v != nil {
		_c.SetEnabled(*v)
	}
	return _c
}

// SetAccessTokenExpiry sets the "access_token_expiry" field.
func (_c *ClientDeviceCreate) SetAccessTokenExpiry(v uint64) *ClientDeviceCreate {
	_c.mutation.SetAccessTokenExpiry(v)
	return _c
}

// SetRefreshTokenExpiry sets the "refresh_token_expiry" field.
func (_c *ClientDeviceCreate) SetRefreshTokenExpiry(v uint64) *ClientDeviceCreate {
	_c.mutation.SetRefreshTokenExpiry(v)
	return _c
}

// SetAnonymous sets the "anonymous" field.
func (_c *ClientDeviceCreate) SetAnonymous(v bool) *ClientDeviceCreate {
	_c.mutation.SetAnonymous(v)
	return _c
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_c *ClientDeviceCreate) SetNillableAnonymous(v *bool) *ClientDeviceCreate {
	if v != nil {
		_c.SetAnonymous(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ClientDeviceCreate) SetID(v uint64) *ClientDeviceCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_c *ClientDeviceCreate) AddRoleIDs(ids ...uint64) *ClientDeviceCreate {
	_c.mutation.AddRoleIDs(ids...)
	return _c
}

// AddRoles adds the "roles" edges to the Role entity.
func (_c *ClientDeviceCreate) AddRoles(v ...*Role) *ClientDeviceCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRoleIDs(ids...)
}

// Mutation returns the ClientDeviceMutation object of the builder.
func (_c *ClientDeviceCreate) Mutation() *ClientDeviceMutation {
	return _c.mutation
}

// Save creates the ClientDevice in the database.
func (_c *ClientDeviceCreate) Save(ctx context.Context) (*ClientDevice, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ClientDeviceCreate) SaveX(ctx context.Context) *ClientDevice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClientDeviceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClientDeviceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ClientDeviceCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if clientdevice.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized clientdevice.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := clientdevice.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if clientdevice.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized clientdevice.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := clientdevice.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Enabled(); !ok {
		v := clientdevice.DefaultEnabled
		_c.mutation.SetEnabled(v)
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		v := clientdevice.DefaultAnonymous
		_c.mutation.SetAnonymous(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ClientDeviceCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ClientDevice.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ClientDevice.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ClientDevice.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := clientdevice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ClientDevice.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := clientdevice.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := clientdevice.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "ClientDevice.enabled"`)}
	}
	if _, ok := _c.mutation.AccessTokenExpiry(); !ok {
		return &ValidationError{Name: "access_token_expiry", err: errors.New(`ent: missing required field "ClientDevice.access_token_expiry"`)}
	}
	if v, ok := _c.mutation.AccessTokenExpiry(); ok {
		if err := clientdevice.AccessTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "access_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.access_token_expiry": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RefreshTokenExpiry(); !ok {
		return &ValidationError{Name: "refresh_token_expiry", err: errors.New(`ent: missing required field "ClientDevice.refresh_token_expiry"`)}
	}
	if v, ok := _c.mutation.RefreshTokenExpiry(); ok {
		if err := clientdevice.RefreshTokenExpiryValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token_expiry", err: fmt.Errorf(`ent: validator failed for field "ClientDevice.refresh_token_expiry": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New(`ent: missing required field "ClientDevice.anonymous"`)}
	}
	return nil
}

func (_c *ClientDeviceCreate) sqlSave(ctx context.Context) (*ClientDevice, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ClientDeviceCreate) createSpec() (*ClientDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &ClientDevice{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(clientdevice.Table, sqlgraph.NewFieldSpec(clientdevice.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(clientdevice.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(clientdevice.FieldCreateBy, field.TypeUint64, value)
		_node.CreateBy = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(clientdevice.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(clientdevice.FieldUpdateBy, field.TypeUint64, value)
		_node.UpdateBy = value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(clientdevice.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := _c.mutation.DeleteBy(); ok {
		_spec.SetField(clientdevice.FieldDeleteBy, field.TypeUint64, value)
		_node.DeleteBy = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(clientdevice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(clientdevice.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(clientdevice.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Enabled(); ok {
		_spec.SetField(clientdevice.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := _c.mutation.AccessTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldAccessTokenExpiry, field.TypeUint64, value)
		_node.AccessTokenExpiry = value
	}
	if value, ok := _c.mutation.RefreshTokenExpiry(); ok {
		_spec.SetField(clientdevice.FieldRefreshTokenExpiry, field.TypeUint64, value)
		_node.RefreshTokenExpiry = value
	}
	if value, ok := _c.mutation.Anonymous(); ok {
		_spec.SetField(clientdevice.FieldAnonymous, field.TypeBool, value)
		_node.Anonymous = value
	}
	if nodes := _c.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClientDeviceCreateBulk is the builder for creating many ClientDevice entities in bulk.
type ClientDeviceCreateBulk struct {
	config
	err      error
	builders []*ClientDeviceCreate
}

// Save creates the ClientDevice entities in the database.
func (_c *ClientDeviceCreateBulk) Save(ctx context.Context) ([]*ClientDevice, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ClientDevice, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClientDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ClientDeviceCreateBulk) SaveX(ctx context.Context) []*ClientDevice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClientDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClientDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
