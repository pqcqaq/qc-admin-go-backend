// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OauthProviderUpdate is the builder for updating OauthProvider entities.
type OauthProviderUpdate struct {
	config
	hooks    []Hook
	mutation *OauthProviderMutation
}

// Where appends a list predicates to the OauthProviderUpdate builder.
func (_u *OauthProviderUpdate) Where(ps ...predicate.OauthProvider) *OauthProviderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthProviderUpdate) SetCreateBy(v uint64) *OauthProviderUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableCreateBy(v *uint64) *OauthProviderUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthProviderUpdate) AddCreateBy(v int64) *OauthProviderUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthProviderUpdate) ClearCreateBy() *OauthProviderUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthProviderUpdate) SetUpdateTime(v time.Time) *OauthProviderUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthProviderUpdate) SetUpdateBy(v uint64) *OauthProviderUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableUpdateBy(v *uint64) *OauthProviderUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthProviderUpdate) AddUpdateBy(v int64) *OauthProviderUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthProviderUpdate) ClearUpdateBy() *OauthProviderUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthProviderUpdate) SetDeleteTime(v time.Time) *OauthProviderUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableDeleteTime(v *time.Time) *OauthProviderUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthProviderUpdate) ClearDeleteTime() *OauthProviderUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthProviderUpdate) SetDeleteBy(v uint64) *OauthProviderUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableDeleteBy(v *uint64) *OauthProviderUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthProviderUpdate) AddDeleteBy(v int64) *OauthProviderUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthProviderUpdate) ClearDeleteBy() *OauthProviderUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetType sets the "type" field.
func (_u *OauthProviderUpdate) SetType(v oauthprovider.Type) *OauthProviderUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableType(v *oauthprovider.Type) *OauthProviderUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OauthProviderUpdate) SetName(v string) *OauthProviderUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableName(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (_u *OauthProviderUpdate) SetAuthorizationEndpoint(v string) *OauthProviderUpdate {
	_u.mutation.SetAuthorizationEndpoint(v)
	return _u
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableAuthorizationEndpoint(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetAuthorizationEndpoint(*v)
	}
	return _u
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (_u *OauthProviderUpdate) SetTokenEndpoint(v string) *OauthProviderUpdate {
	_u.mutation.SetTokenEndpoint(v)
	return _u
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableTokenEndpoint(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetTokenEndpoint(*v)
	}
	return _u
}

// SetUserInfoEndpoint sets the "user_info_endpoint" field.
func (_u *OauthProviderUpdate) SetUserInfoEndpoint(v string) *OauthProviderUpdate {
	_u.mutation.SetUserInfoEndpoint(v)
	return _u
}

// SetNillableUserInfoEndpoint sets the "user_info_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableUserInfoEndpoint(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetUserInfoEndpoint(*v)
	}
	return _u
}

// SetRevokeEndpoint sets the "revoke_endpoint" field.
func (_u *OauthProviderUpdate) SetRevokeEndpoint(v string) *OauthProviderUpdate {
	_u.mutation.SetRevokeEndpoint(v)
	return _u
}

// SetNillableRevokeEndpoint sets the "revoke_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableRevokeEndpoint(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetRevokeEndpoint(*v)
	}
	return _u
}

// ClearRevokeEndpoint clears the value of the "revoke_endpoint" field.
func (_u *OauthProviderUpdate) ClearRevokeEndpoint() *OauthProviderUpdate {
	_u.mutation.ClearRevokeEndpoint()
	return _u
}

// SetRefreshEndpoint sets the "refresh_endpoint" field.
func (_u *OauthProviderUpdate) SetRefreshEndpoint(v string) *OauthProviderUpdate {
	_u.mutation.SetRefreshEndpoint(v)
	return _u
}

// SetNillableRefreshEndpoint sets the "refresh_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableRefreshEndpoint(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetRefreshEndpoint(*v)
	}
	return _u
}

// ClearRefreshEndpoint clears the value of the "refresh_endpoint" field.
func (_u *OauthProviderUpdate) ClearRefreshEndpoint() *OauthProviderUpdate {
	_u.mutation.ClearRefreshEndpoint()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *OauthProviderUpdate) SetClientID(v string) *OauthProviderUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableClientID(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthProviderUpdate) SetClientSecret(v string) *OauthProviderUpdate {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableClientSecret(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthProviderUpdate) SetRedirectURI(v string) *OauthProviderUpdate {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableRedirectURI(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthProviderUpdate) SetScopes(v []string) *OauthProviderUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *OauthProviderUpdate) AppendScopes(v []string) *OauthProviderUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *OauthProviderUpdate) ClearScopes() *OauthProviderUpdate {
	_u.mutation.ClearScopes()
	return _u
}

// SetAutoRegister sets the "auto_register" field.
func (_u *OauthProviderUpdate) SetAutoRegister(v bool) *OauthProviderUpdate {
	_u.mutation.SetAutoRegister(v)
	return _u
}

// SetNillableAutoRegister sets the "auto_register" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableAutoRegister(v *bool) *OauthProviderUpdate {
	if v != nil {
		_u.SetAutoRegister(*v)
	}
	return _u
}

// SetAbleState sets the "able_state" field.
func (_u *OauthProviderUpdate) SetAbleState(v oauthprovider.AbleState) *OauthProviderUpdate {
	_u.mutation.SetAbleState(v)
	return _u
}

// SetNillableAbleState sets the "able_state" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableAbleState(v *oauthprovider.AbleState) *OauthProviderUpdate {
	if v != nil {
		_u.SetAbleState(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OauthProviderUpdate) SetMetadata(v map[string]interface{}) *OauthProviderUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OauthProviderUpdate) ClearMetadata() *OauthProviderUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// AddStateIDs adds the "states" edge to the OauthState entity by IDs.
func (_u *OauthProviderUpdate) AddStateIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.AddStateIDs(ids...)
	return _u
}

// AddStates adds the "states" edges to the OauthState entity.
func (_u *OauthProviderUpdate) AddStates(v ...*OauthState) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStateIDs(ids...)
}

// AddOauthUserIDs adds the "oauth_users" edge to the OauthUser entity by IDs.
func (_u *OauthProviderUpdate) AddOauthUserIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.AddOauthUserIDs(ids...)
	return _u
}

// AddOauthUsers adds the "oauth_users" edges to the OauthUser entity.
func (_u *OauthProviderUpdate) AddOauthUsers(v ...*OauthUser) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthUserIDs(ids...)
}

// Mutation returns the OauthProviderMutation object of the builder.
func (_u *OauthProviderUpdate) Mutation() *OauthProviderMutation {
	return _u.mutation
}

// ClearStates clears all "states" edges to the OauthState entity.
func (_u *OauthProviderUpdate) ClearStates() *OauthProviderUpdate {
	_u.mutation.ClearStates()
	return _u
}

// RemoveStateIDs removes the "states" edge to OauthState entities by IDs.
func (_u *OauthProviderUpdate) RemoveStateIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.RemoveStateIDs(ids...)
	return _u
}

// RemoveStates removes "states" edges to OauthState entities.
func (_u *OauthProviderUpdate) RemoveStates(v ...*OauthState) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStateIDs(ids...)
}

// ClearOauthUsers clears all "oauth_users" edges to the OauthUser entity.
func (_u *OauthProviderUpdate) ClearOauthUsers() *OauthProviderUpdate {
	_u.mutation.ClearOauthUsers()
	return _u
}

// RemoveOauthUserIDs removes the "oauth_users" edge to OauthUser entities by IDs.
func (_u *OauthProviderUpdate) RemoveOauthUserIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.RemoveOauthUserIDs(ids...)
	return _u
}

// RemoveOauthUsers removes "oauth_users" edges to OauthUser entities.
func (_u *OauthProviderUpdate) RemoveOauthUsers(v ...*OauthUser) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthProviderUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthProviderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthProviderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthProviderUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthprovider.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthprovider.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthprovider.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthProviderUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthorizationEndpoint(); ok {
		if err := oauthprovider.AuthorizationEndpointValidator(v); err != nil {
			return &ValidationError{Name: "authorization_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.authorization_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TokenEndpoint(); ok {
		if err := oauthprovider.TokenEndpointValidator(v); err != nil {
			return &ValidationError{Name: "token_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.token_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserInfoEndpoint(); ok {
		if err := oauthprovider.UserInfoEndpointValidator(v); err != nil {
			return &ValidationError{Name: "user_info_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.user_info_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RevokeEndpoint(); ok {
		if err := oauthprovider.RevokeEndpointValidator(v); err != nil {
			return &ValidationError{Name: "revoke_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.revoke_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshEndpoint(); ok {
		if err := oauthprovider.RefreshEndpointValidator(v); err != nil {
			return &ValidationError{Name: "refresh_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.refresh_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthprovider.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AbleState(); ok {
		if err := oauthprovider.AbleStateValidator(v); err != nil {
			return &ValidationError{Name: "able_state", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.able_state": %w`, err)}
		}
	}
	return nil
}

func (_u *OauthProviderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthprovider.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthprovider.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthprovider.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthprovider.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthprovider.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthprovider.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthprovider.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthprovider.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthprovider.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthprovider.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthprovider.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthprovider.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthprovider.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldAuthorizationEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.TokenEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldTokenEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserInfoEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldUserInfoEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.RevokeEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldRevokeEndpoint, field.TypeString, value)
	}
	if _u.mutation.RevokeEndpointCleared() {
		_spec.ClearField(oauthprovider.FieldRevokeEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldRefreshEndpoint, field.TypeString, value)
	}
	if _u.mutation.RefreshEndpointCleared() {
		_spec.ClearField(oauthprovider.FieldRefreshEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthprovider.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.AutoRegister(); ok {
		_spec.SetField(oauthprovider.FieldAutoRegister, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AbleState(); ok {
		_spec.SetField(oauthprovider.FieldAbleState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(oauthprovider.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(oauthprovider.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.StatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatesIDs(); len(nodes) > 0 && !_u.mutation.StatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthUsersIDs(); len(nodes) > 0 && !_u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthProviderUpdateOne is the builder for updating a single OauthProvider entity.
type OauthProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OauthProviderMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *OauthProviderUpdateOne) SetCreateBy(v uint64) *OauthProviderUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableCreateBy(v *uint64) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *OauthProviderUpdateOne) AddCreateBy(v int64) *OauthProviderUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *OauthProviderUpdateOne) ClearCreateBy() *OauthProviderUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OauthProviderUpdateOne) SetUpdateTime(v time.Time) *OauthProviderUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *OauthProviderUpdateOne) SetUpdateBy(v uint64) *OauthProviderUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableUpdateBy(v *uint64) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *OauthProviderUpdateOne) AddUpdateBy(v int64) *OauthProviderUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *OauthProviderUpdateOne) ClearUpdateBy() *OauthProviderUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *OauthProviderUpdateOne) SetDeleteTime(v time.Time) *OauthProviderUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableDeleteTime(v *time.Time) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *OauthProviderUpdateOne) ClearDeleteTime() *OauthProviderUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *OauthProviderUpdateOne) SetDeleteBy(v uint64) *OauthProviderUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableDeleteBy(v *uint64) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *OauthProviderUpdateOne) AddDeleteBy(v int64) *OauthProviderUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *OauthProviderUpdateOne) ClearDeleteBy() *OauthProviderUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetType sets the "type" field.
func (_u *OauthProviderUpdateOne) SetType(v oauthprovider.Type) *OauthProviderUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableType(v *oauthprovider.Type) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OauthProviderUpdateOne) SetName(v string) *OauthProviderUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableName(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (_u *OauthProviderUpdateOne) SetAuthorizationEndpoint(v string) *OauthProviderUpdateOne {
	_u.mutation.SetAuthorizationEndpoint(v)
	return _u
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableAuthorizationEndpoint(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetAuthorizationEndpoint(*v)
	}
	return _u
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (_u *OauthProviderUpdateOne) SetTokenEndpoint(v string) *OauthProviderUpdateOne {
	_u.mutation.SetTokenEndpoint(v)
	return _u
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableTokenEndpoint(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetTokenEndpoint(*v)
	}
	return _u
}

// SetUserInfoEndpoint sets the "user_info_endpoint" field.
func (_u *OauthProviderUpdateOne) SetUserInfoEndpoint(v string) *OauthProviderUpdateOne {
	_u.mutation.SetUserInfoEndpoint(v)
	return _u
}

// SetNillableUserInfoEndpoint sets the "user_info_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableUserInfoEndpoint(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetUserInfoEndpoint(*v)
	}
	return _u
}

// SetRevokeEndpoint sets the "revoke_endpoint" field.
func (_u *OauthProviderUpdateOne) SetRevokeEndpoint(v string) *OauthProviderUpdateOne {
	_u.mutation.SetRevokeEndpoint(v)
	return _u
}

// SetNillableRevokeEndpoint sets the "revoke_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableRevokeEndpoint(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetRevokeEndpoint(*v)
	}
	return _u
}

// ClearRevokeEndpoint clears the value of the "revoke_endpoint" field.
func (_u *OauthProviderUpdateOne) ClearRevokeEndpoint() *OauthProviderUpdateOne {
	_u.mutation.ClearRevokeEndpoint()
	return _u
}

// SetRefreshEndpoint sets the "refresh_endpoint" field.
func (_u *OauthProviderUpdateOne) SetRefreshEndpoint(v string) *OauthProviderUpdateOne {
	_u.mutation.SetRefreshEndpoint(v)
	return _u
}

// SetNillableRefreshEndpoint sets the "refresh_endpoint" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableRefreshEndpoint(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetRefreshEndpoint(*v)
	}
	return _u
}

// ClearRefreshEndpoint clears the value of the "refresh_endpoint" field.
func (_u *OauthProviderUpdateOne) ClearRefreshEndpoint() *OauthProviderUpdateOne {
	_u.mutation.ClearRefreshEndpoint()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *OauthProviderUpdateOne) SetClientID(v string) *OauthProviderUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableClientID(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthProviderUpdateOne) SetClientSecret(v string) *OauthProviderUpdateOne {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableClientSecret(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthProviderUpdateOne) SetRedirectURI(v string) *OauthProviderUpdateOne {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableRedirectURI(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthProviderUpdateOne) SetScopes(v []string) *OauthProviderUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *OauthProviderUpdateOne) AppendScopes(v []string) *OauthProviderUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *OauthProviderUpdateOne) ClearScopes() *OauthProviderUpdateOne {
	_u.mutation.ClearScopes()
	return _u
}

// SetAutoRegister sets the "auto_register" field.
func (_u *OauthProviderUpdateOne) SetAutoRegister(v bool) *OauthProviderUpdateOne {
	_u.mutation.SetAutoRegister(v)
	return _u
}

// SetNillableAutoRegister sets the "auto_register" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableAutoRegister(v *bool) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetAutoRegister(*v)
	}
	return _u
}

// SetAbleState sets the "able_state" field.
func (_u *OauthProviderUpdateOne) SetAbleState(v oauthprovider.AbleState) *OauthProviderUpdateOne {
	_u.mutation.SetAbleState(v)
	return _u
}

// SetNillableAbleState sets the "able_state" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableAbleState(v *oauthprovider.AbleState) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetAbleState(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OauthProviderUpdateOne) SetMetadata(v map[string]interface{}) *OauthProviderUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OauthProviderUpdateOne) ClearMetadata() *OauthProviderUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// AddStateIDs adds the "states" edge to the OauthState entity by IDs.
func (_u *OauthProviderUpdateOne) AddStateIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.AddStateIDs(ids...)
	return _u
}

// AddStates adds the "states" edges to the OauthState entity.
func (_u *OauthProviderUpdateOne) AddStates(v ...*OauthState) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStateIDs(ids...)
}

// AddOauthUserIDs adds the "oauth_users" edge to the OauthUser entity by IDs.
func (_u *OauthProviderUpdateOne) AddOauthUserIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.AddOauthUserIDs(ids...)
	return _u
}

// AddOauthUsers adds the "oauth_users" edges to the OauthUser entity.
func (_u *OauthProviderUpdateOne) AddOauthUsers(v ...*OauthUser) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthUserIDs(ids...)
}

// Mutation returns the OauthProviderMutation object of the builder.
func (_u *OauthProviderUpdateOne) Mutation() *OauthProviderMutation {
	return _u.mutation
}

// ClearStates clears all "states" edges to the OauthState entity.
func (_u *OauthProviderUpdateOne) ClearStates() *OauthProviderUpdateOne {
	_u.mutation.ClearStates()
	return _u
}

// RemoveStateIDs removes the "states" edge to OauthState entities by IDs.
func (_u *OauthProviderUpdateOne) RemoveStateIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.RemoveStateIDs(ids...)
	return _u
}

// RemoveStates removes "states" edges to OauthState entities.
func (_u *OauthProviderUpdateOne) RemoveStates(v ...*OauthState) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStateIDs(ids...)
}

// ClearOauthUsers clears all "oauth_users" edges to the OauthUser entity.
func (_u *OauthProviderUpdateOne) ClearOauthUsers() *OauthProviderUpdateOne {
	_u.mutation.ClearOauthUsers()
	return _u
}

// RemoveOauthUserIDs removes the "oauth_users" edge to OauthUser entities by IDs.
func (_u *OauthProviderUpdateOne) RemoveOauthUserIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.RemoveOauthUserIDs(ids...)
	return _u
}

// RemoveOauthUsers removes "oauth_users" edges to OauthUser entities.
func (_u *OauthProviderUpdateOne) RemoveOauthUsers(v ...*OauthUser) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthUserIDs(ids...)
}

// Where appends a list predicates to the OauthProviderUpdate builder.
func (_u *OauthProviderUpdateOne) Where(ps ...predicate.OauthProvider) *OauthProviderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthProviderUpdateOne) Select(field string, fields ...string) *OauthProviderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthProvider entity.
func (_u *OauthProviderUpdateOne) Save(ctx context.Context) (*OauthProvider, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthProviderUpdateOne) SaveX(ctx context.Context) *OauthProvider {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthProviderUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if oauthprovider.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized oauthprovider.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := oauthprovider.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthProviderUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthorizationEndpoint(); ok {
		if err := oauthprovider.AuthorizationEndpointValidator(v); err != nil {
			return &ValidationError{Name: "authorization_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.authorization_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TokenEndpoint(); ok {
		if err := oauthprovider.TokenEndpointValidator(v); err != nil {
			return &ValidationError{Name: "token_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.token_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserInfoEndpoint(); ok {
		if err := oauthprovider.UserInfoEndpointValidator(v); err != nil {
			return &ValidationError{Name: "user_info_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.user_info_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RevokeEndpoint(); ok {
		if err := oauthprovider.RevokeEndpointValidator(v); err != nil {
			return &ValidationError{Name: "revoke_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.revoke_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshEndpoint(); ok {
		if err := oauthprovider.RefreshEndpointValidator(v); err != nil {
			return &ValidationError{Name: "refresh_endpoint", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.refresh_endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthprovider.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AbleState(); ok {
		if err := oauthprovider.AbleStateValidator(v); err != nil {
			return &ValidationError{Name: "able_state", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.able_state": %w`, err)}
		}
	}
	return nil
}

func (_u *OauthProviderUpdateOne) sqlSave(ctx context.Context) (_node *OauthProvider, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthprovider.FieldID)
		for _, f := range fields {
			if !oauthprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(oauthprovider.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(oauthprovider.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(oauthprovider.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(oauthprovider.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(oauthprovider.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(oauthprovider.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(oauthprovider.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(oauthprovider.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(oauthprovider.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(oauthprovider.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(oauthprovider.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(oauthprovider.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthprovider.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldAuthorizationEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.TokenEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldTokenEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserInfoEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldUserInfoEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.RevokeEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldRevokeEndpoint, field.TypeString, value)
	}
	if _u.mutation.RevokeEndpointCleared() {
		_spec.ClearField(oauthprovider.FieldRevokeEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshEndpoint(); ok {
		_spec.SetField(oauthprovider.FieldRefreshEndpoint, field.TypeString, value)
	}
	if _u.mutation.RefreshEndpointCleared() {
		_spec.ClearField(oauthprovider.FieldRefreshEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthprovider.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.AutoRegister(); ok {
		_spec.SetField(oauthprovider.FieldAutoRegister, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AbleState(); ok {
		_spec.SetField(oauthprovider.FieldAbleState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(oauthprovider.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(oauthprovider.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.StatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatesIDs(); len(nodes) > 0 && !_u.mutation.StatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthstate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthUsersIDs(); len(nodes) > 0 && !_u.mutation.OauthUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OauthProvider{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
