// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowexecution"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowExecution is the model entity for the WorkflowExecution schema.
type WorkflowExecution struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 执行ID
	ExecutionID string `json:"execution_id,omitempty"`
	// 工作流应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 执行状态
	Status workflowexecution.Status `json:"status,omitempty"`
	// 执行输入
	Input map[string]interface{} `json:"input,omitempty"`
	// 执行输出
	Output map[string]interface{} `json:"output,omitempty"`
	// 执行上下文
	Context map[string]interface{} `json:"context,omitempty"`
	// 开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 结束时间
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// 执行时长(毫秒)
	DurationMs int `json:"duration_ms,omitempty"`
	// 总Token消耗
	TotalTokens int `json:"total_tokens,omitempty"`
	// 总成本
	TotalCost float64 `json:"total_cost,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 错误堆栈
	ErrorStack string `json:"error_stack,omitempty"`
	// 触发者
	TriggeredBy string `json:"triggered_by,omitempty"`
	// 触发源
	TriggerSource string `json:"trigger_source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowExecutionQuery when eager-loading is set.
	Edges        WorkflowExecutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowExecutionEdges holds the relations/edges for other nodes in the graph.
type WorkflowExecutionEdges struct {
	// Application holds the value of the application edge.
	Application *WorkflowApplication `json:"application,omitempty"`
	// NodeExecutions holds the value of the node_executions edge.
	NodeExecutions []*WorkflowNodeExecution `json:"node_executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes         [2]bool
	namedNodeExecutions map[string][]*WorkflowNodeExecution
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowExecutionEdges) ApplicationOrErr() (*WorkflowApplication, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowapplication.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// NodeExecutionsOrErr returns the NodeExecutions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowExecutionEdges) NodeExecutionsOrErr() ([]*WorkflowNodeExecution, error) {
	if e.loadedTypes[1] {
		return e.NodeExecutions, nil
	}
	return nil, &NotLoadedError{edge: "node_executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowexecution.FieldInput, workflowexecution.FieldOutput, workflowexecution.FieldContext:
			values[i] = new([]byte)
		case workflowexecution.FieldTotalCost:
			values[i] = new(sql.NullFloat64)
		case workflowexecution.FieldID, workflowexecution.FieldCreateBy, workflowexecution.FieldUpdateBy, workflowexecution.FieldApplicationID, workflowexecution.FieldDurationMs, workflowexecution.FieldTotalTokens:
			values[i] = new(sql.NullInt64)
		case workflowexecution.FieldExecutionID, workflowexecution.FieldStatus, workflowexecution.FieldErrorMessage, workflowexecution.FieldErrorStack, workflowexecution.FieldTriggeredBy, workflowexecution.FieldTriggerSource:
			values[i] = new(sql.NullString)
		case workflowexecution.FieldCreateTime, workflowexecution.FieldUpdateTime, workflowexecution.FieldStartedAt, workflowexecution.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowExecution fields.
func (_m *WorkflowExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowexecution.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflowexecution.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflowexecution.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflowexecution.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflowexecution.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflowexecution.FieldExecutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				_m.ExecutionID = value.String
			}
		case workflowexecution.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case workflowexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = workflowexecution.Status(value.String)
			}
		case workflowexecution.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case workflowexecution.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Output); err != nil {
					return fmt.Errorf("unmarshal field output: %w", err)
				}
			}
		case workflowexecution.FieldContext:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Context); err != nil {
					return fmt.Errorf("unmarshal field context: %w", err)
				}
			}
		case workflowexecution.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case workflowexecution.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				_m.FinishedAt = value.Time
			}
		case workflowexecution.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				_m.DurationMs = int(value.Int64)
			}
		case workflowexecution.FieldTotalTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_tokens", values[i])
			} else if value.Valid {
				_m.TotalTokens = int(value.Int64)
			}
		case workflowexecution.FieldTotalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value.Valid {
				_m.TotalCost = value.Float64
			}
		case workflowexecution.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = value.String
			}
		case workflowexecution.FieldErrorStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_stack", values[i])
			} else if value.Valid {
				_m.ErrorStack = value.String
			}
		case workflowexecution.FieldTriggeredBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field triggered_by", values[i])
			} else if value.Valid {
				_m.TriggeredBy = value.String
			}
		case workflowexecution.FieldTriggerSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trigger_source", values[i])
			} else if value.Valid {
				_m.TriggerSource = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowExecution.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowExecution) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the WorkflowExecution entity.
func (_m *WorkflowExecution) QueryApplication() *WorkflowApplicationQuery {
	return NewWorkflowExecutionClient(_m.config).QueryApplication(_m)
}

// QueryNodeExecutions queries the "node_executions" edge of the WorkflowExecution entity.
func (_m *WorkflowExecution) QueryNodeExecutions() *WorkflowNodeExecutionQuery {
	return NewWorkflowExecutionClient(_m.config).QueryNodeExecutions(_m)
}

// Update returns a builder for updating this WorkflowExecution.
// Note that you need to call WorkflowExecution.Unwrap() before calling this method if this WorkflowExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowExecution) Update() *WorkflowExecutionUpdateOne {
	return NewWorkflowExecutionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowExecution) Unwrap() *WorkflowExecution {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowExecution is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowExecution) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(_m.ExecutionID)
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", _m.Input))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", _m.Output))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(fmt.Sprintf("%v", _m.Context))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(_m.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", _m.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("total_tokens=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalTokens))
	builder.WriteString(", ")
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(_m.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("error_stack=")
	builder.WriteString(_m.ErrorStack)
	builder.WriteString(", ")
	builder.WriteString("triggered_by=")
	builder.WriteString(_m.TriggeredBy)
	builder.WriteString(", ")
	builder.WriteString("trigger_source=")
	builder.WriteString(_m.TriggerSource)
	builder.WriteByte(')')
	return builder.String()
}

// NamedNodeExecutions returns the NodeExecutions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *WorkflowExecution) NamedNodeExecutions(name string) ([]*WorkflowNodeExecution, error) {
	if _m.Edges.namedNodeExecutions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedNodeExecutions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *WorkflowExecution) appendNamedNodeExecutions(name string, edges ...*WorkflowNodeExecution) {
	if _m.Edges.namedNodeExecutions == nil {
		_m.Edges.namedNodeExecutions = make(map[string][]*WorkflowNodeExecution)
	}
	if len(edges) == 0 {
		_m.Edges.namedNodeExecutions[name] = []*WorkflowNodeExecution{}
	} else {
		_m.Edges.namedNodeExecutions[name] = append(_m.Edges.namedNodeExecutions[name], edges...)
	}
}

// WorkflowExecutions is a parsable slice of WorkflowExecution.
type WorkflowExecutions []*WorkflowExecution
