// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go-backend/database/ent/logging"
	"go-backend/database/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   logging.Table,
			Columns: logging.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: logging.FieldID,
			},
		},
		Type: "Logging",
		Fields: map[string]*sqlgraph.FieldSpec{
			logging.FieldCreateTime: {Type: field.TypeTime, Column: logging.FieldCreateTime},
			logging.FieldCreateBy:   {Type: field.TypeInt64, Column: logging.FieldCreateBy},
			logging.FieldUpdateTime: {Type: field.TypeTime, Column: logging.FieldUpdateTime},
			logging.FieldUpdateBy:   {Type: field.TypeInt64, Column: logging.FieldUpdateBy},
			logging.FieldDeleteTime: {Type: field.TypeTime, Column: logging.FieldDeleteTime},
			logging.FieldDeleteBy:   {Type: field.TypeInt64, Column: logging.FieldDeleteBy},
			logging.FieldLevel:      {Type: field.TypeEnum, Column: logging.FieldLevel},
			logging.FieldType:       {Type: field.TypeEnum, Column: logging.FieldType},
			logging.FieldMessage:    {Type: field.TypeString, Column: logging.FieldMessage},
			logging.FieldMethod:     {Type: field.TypeString, Column: logging.FieldMethod},
			logging.FieldPath:       {Type: field.TypeString, Column: logging.FieldPath},
			logging.FieldIP:         {Type: field.TypeString, Column: logging.FieldIP},
			logging.FieldQuery:      {Type: field.TypeString, Column: logging.FieldQuery},
			logging.FieldCode:       {Type: field.TypeInt, Column: logging.FieldCode},
			logging.FieldUserAgent:  {Type: field.TypeString, Column: logging.FieldUserAgent},
			logging.FieldData:       {Type: field.TypeJSON, Column: logging.FieldData},
			logging.FieldStack:      {Type: field.TypeString, Column: logging.FieldStack},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldCreateBy:   {Type: field.TypeInt64, Column: user.FieldCreateBy},
			user.FieldUpdateTime: {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUpdateBy:   {Type: field.TypeInt64, Column: user.FieldUpdateBy},
			user.FieldDeleteTime: {Type: field.TypeTime, Column: user.FieldDeleteTime},
			user.FieldDeleteBy:   {Type: field.TypeInt64, Column: user.FieldDeleteBy},
			user.FieldName:       {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:      {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldAge:        {Type: field.TypeInt, Column: user.FieldAge},
			user.FieldPhone:      {Type: field.TypeString, Column: user.FieldPhone},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *LoggingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoggingQuery builder.
func (_q *LoggingQuery) Filter() *LoggingFilter {
	return &LoggingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *LoggingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoggingMutation builder.
func (m *LoggingMutation) Filter() *LoggingFilter {
	return &LoggingFilter{config: m.config, predicateAdder: m}
}

// LoggingFilter provides a generic filtering capability at runtime for LoggingQuery.
type LoggingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoggingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *LoggingFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(logging.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *LoggingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *LoggingFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *LoggingFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *LoggingFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *LoggingFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *LoggingFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldDeleteBy))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *LoggingFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(logging.FieldLevel))
}

// WhereType applies the entql string predicate on the type field.
func (f *LoggingFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(logging.FieldType))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *LoggingFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(logging.FieldMessage))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *LoggingFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(logging.FieldMethod))
}

// WherePath applies the entql string predicate on the path field.
func (f *LoggingFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(logging.FieldPath))
}

// WhereIP applies the entql string predicate on the ip field.
func (f *LoggingFilter) WhereIP(p entql.StringP) {
	f.Where(p.Field(logging.FieldIP))
}

// WhereQuery applies the entql string predicate on the query field.
func (f *LoggingFilter) WhereQuery(p entql.StringP) {
	f.Where(p.Field(logging.FieldQuery))
}

// WhereCode applies the entql int predicate on the code field.
func (f *LoggingFilter) WhereCode(p entql.IntP) {
	f.Where(p.Field(logging.FieldCode))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *LoggingFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(logging.FieldUserAgent))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *LoggingFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(logging.FieldData))
}

// WhereStack applies the entql string predicate on the stack field.
func (f *LoggingFilter) WhereStack(p entql.StringP) {
	f.Where(p.Field(logging.FieldStack))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *UserFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *UserFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *UserFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereAge applies the entql int predicate on the age field.
func (f *UserFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(user.FieldAge))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}
