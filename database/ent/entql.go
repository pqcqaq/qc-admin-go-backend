// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/role"
	"go-backend/database/ent/rolepermission"
	"go-backend/database/ent/scan"
	"go-backend/database/ent/scope"
	"go-backend/database/ent/user"
	"go-backend/database/ent/userrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 10)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attachment.FieldID,
			},
		},
		Type: "Attachment",
		Fields: map[string]*sqlgraph.FieldSpec{
			attachment.FieldCreateTime:      {Type: field.TypeTime, Column: attachment.FieldCreateTime},
			attachment.FieldCreateBy:        {Type: field.TypeInt64, Column: attachment.FieldCreateBy},
			attachment.FieldUpdateTime:      {Type: field.TypeTime, Column: attachment.FieldUpdateTime},
			attachment.FieldUpdateBy:        {Type: field.TypeInt64, Column: attachment.FieldUpdateBy},
			attachment.FieldDeleteTime:      {Type: field.TypeTime, Column: attachment.FieldDeleteTime},
			attachment.FieldDeleteBy:        {Type: field.TypeInt64, Column: attachment.FieldDeleteBy},
			attachment.FieldFilename:        {Type: field.TypeString, Column: attachment.FieldFilename},
			attachment.FieldPath:            {Type: field.TypeString, Column: attachment.FieldPath},
			attachment.FieldURL:             {Type: field.TypeString, Column: attachment.FieldURL},
			attachment.FieldContentType:     {Type: field.TypeString, Column: attachment.FieldContentType},
			attachment.FieldSize:            {Type: field.TypeInt64, Column: attachment.FieldSize},
			attachment.FieldEtag:            {Type: field.TypeString, Column: attachment.FieldEtag},
			attachment.FieldBucket:          {Type: field.TypeString, Column: attachment.FieldBucket},
			attachment.FieldStorageProvider: {Type: field.TypeString, Column: attachment.FieldStorageProvider},
			attachment.FieldMetadata:        {Type: field.TypeJSON, Column: attachment.FieldMetadata},
			attachment.FieldStatus:          {Type: field.TypeEnum, Column: attachment.FieldStatus},
			attachment.FieldUploadSessionID: {Type: field.TypeString, Column: attachment.FieldUploadSessionID},
			attachment.FieldTag1:            {Type: field.TypeString, Column: attachment.FieldTag1},
			attachment.FieldTag2:            {Type: field.TypeString, Column: attachment.FieldTag2},
			attachment.FieldTag3:            {Type: field.TypeString, Column: attachment.FieldTag3},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: credential.FieldID,
			},
		},
		Type: "Credential",
		Fields: map[string]*sqlgraph.FieldSpec{
			credential.FieldCreateTime:     {Type: field.TypeTime, Column: credential.FieldCreateTime},
			credential.FieldCreateBy:       {Type: field.TypeInt64, Column: credential.FieldCreateBy},
			credential.FieldUpdateTime:     {Type: field.TypeTime, Column: credential.FieldUpdateTime},
			credential.FieldUpdateBy:       {Type: field.TypeInt64, Column: credential.FieldUpdateBy},
			credential.FieldDeleteTime:     {Type: field.TypeTime, Column: credential.FieldDeleteTime},
			credential.FieldDeleteBy:       {Type: field.TypeInt64, Column: credential.FieldDeleteBy},
			credential.FieldUserID:         {Type: field.TypeUint64, Column: credential.FieldUserID},
			credential.FieldCredentialType: {Type: field.TypeEnum, Column: credential.FieldCredentialType},
			credential.FieldIdentifier:     {Type: field.TypeString, Column: credential.FieldIdentifier},
			credential.FieldSecret:         {Type: field.TypeString, Column: credential.FieldSecret},
			credential.FieldProvider:       {Type: field.TypeString, Column: credential.FieldProvider},
			credential.FieldIsVerified:     {Type: field.TypeBool, Column: credential.FieldIsVerified},
			credential.FieldVerifiedAt:     {Type: field.TypeTime, Column: credential.FieldVerifiedAt},
			credential.FieldLastUsedAt:     {Type: field.TypeTime, Column: credential.FieldLastUsedAt},
			credential.FieldExpiresAt:      {Type: field.TypeTime, Column: credential.FieldExpiresAt},
			credential.FieldFailedAttempts: {Type: field.TypeInt, Column: credential.FieldFailedAttempts},
			credential.FieldLockedUntil:    {Type: field.TypeTime, Column: credential.FieldLockedUntil},
			credential.FieldMetadata:       {Type: field.TypeJSON, Column: credential.FieldMetadata},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   logging.Table,
			Columns: logging.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: logging.FieldID,
			},
		},
		Type: "Logging",
		Fields: map[string]*sqlgraph.FieldSpec{
			logging.FieldCreateTime: {Type: field.TypeTime, Column: logging.FieldCreateTime},
			logging.FieldCreateBy:   {Type: field.TypeInt64, Column: logging.FieldCreateBy},
			logging.FieldUpdateTime: {Type: field.TypeTime, Column: logging.FieldUpdateTime},
			logging.FieldUpdateBy:   {Type: field.TypeInt64, Column: logging.FieldUpdateBy},
			logging.FieldDeleteTime: {Type: field.TypeTime, Column: logging.FieldDeleteTime},
			logging.FieldDeleteBy:   {Type: field.TypeInt64, Column: logging.FieldDeleteBy},
			logging.FieldLevel:      {Type: field.TypeEnum, Column: logging.FieldLevel},
			logging.FieldType:       {Type: field.TypeEnum, Column: logging.FieldType},
			logging.FieldMessage:    {Type: field.TypeString, Column: logging.FieldMessage},
			logging.FieldMethod:     {Type: field.TypeString, Column: logging.FieldMethod},
			logging.FieldPath:       {Type: field.TypeString, Column: logging.FieldPath},
			logging.FieldIP:         {Type: field.TypeString, Column: logging.FieldIP},
			logging.FieldQuery:      {Type: field.TypeString, Column: logging.FieldQuery},
			logging.FieldCode:       {Type: field.TypeInt, Column: logging.FieldCode},
			logging.FieldUserAgent:  {Type: field.TypeString, Column: logging.FieldUserAgent},
			logging.FieldData:       {Type: field.TypeJSON, Column: logging.FieldData},
			logging.FieldStack:      {Type: field.TypeString, Column: logging.FieldStack},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldCreateTime:  {Type: field.TypeTime, Column: permission.FieldCreateTime},
			permission.FieldCreateBy:    {Type: field.TypeInt64, Column: permission.FieldCreateBy},
			permission.FieldUpdateTime:  {Type: field.TypeTime, Column: permission.FieldUpdateTime},
			permission.FieldUpdateBy:    {Type: field.TypeInt64, Column: permission.FieldUpdateBy},
			permission.FieldDeleteTime:  {Type: field.TypeTime, Column: permission.FieldDeleteTime},
			permission.FieldDeleteBy:    {Type: field.TypeInt64, Column: permission.FieldDeleteBy},
			permission.FieldName:        {Type: field.TypeString, Column: permission.FieldName},
			permission.FieldAction:      {Type: field.TypeString, Column: permission.FieldAction},
			permission.FieldDescription: {Type: field.TypeString, Column: permission.FieldDescription},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreateTime:  {Type: field.TypeTime, Column: role.FieldCreateTime},
			role.FieldCreateBy:    {Type: field.TypeInt64, Column: role.FieldCreateBy},
			role.FieldUpdateTime:  {Type: field.TypeTime, Column: role.FieldUpdateTime},
			role.FieldUpdateBy:    {Type: field.TypeInt64, Column: role.FieldUpdateBy},
			role.FieldDeleteTime:  {Type: field.TypeTime, Column: role.FieldDeleteTime},
			role.FieldDeleteBy:    {Type: field.TypeInt64, Column: role.FieldDeleteBy},
			role.FieldName:        {Type: field.TypeString, Column: role.FieldName},
			role.FieldDescription: {Type: field.TypeString, Column: role.FieldDescription},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rolepermission.Table,
			Columns: rolepermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rolepermission.FieldID,
			},
		},
		Type: "RolePermission",
		Fields: map[string]*sqlgraph.FieldSpec{
			rolepermission.FieldCreateTime:   {Type: field.TypeTime, Column: rolepermission.FieldCreateTime},
			rolepermission.FieldCreateBy:     {Type: field.TypeInt64, Column: rolepermission.FieldCreateBy},
			rolepermission.FieldUpdateTime:   {Type: field.TypeTime, Column: rolepermission.FieldUpdateTime},
			rolepermission.FieldUpdateBy:     {Type: field.TypeInt64, Column: rolepermission.FieldUpdateBy},
			rolepermission.FieldDeleteTime:   {Type: field.TypeTime, Column: rolepermission.FieldDeleteTime},
			rolepermission.FieldDeleteBy:     {Type: field.TypeInt64, Column: rolepermission.FieldDeleteBy},
			rolepermission.FieldRoleID:       {Type: field.TypeUint64, Column: rolepermission.FieldRoleID},
			rolepermission.FieldPermissionID: {Type: field.TypeUint64, Column: rolepermission.FieldPermissionID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: scan.FieldID,
			},
		},
		Type: "Scan",
		Fields: map[string]*sqlgraph.FieldSpec{
			scan.FieldCreateTime: {Type: field.TypeTime, Column: scan.FieldCreateTime},
			scan.FieldCreateBy:   {Type: field.TypeInt64, Column: scan.FieldCreateBy},
			scan.FieldUpdateTime: {Type: field.TypeTime, Column: scan.FieldUpdateTime},
			scan.FieldUpdateBy:   {Type: field.TypeInt64, Column: scan.FieldUpdateBy},
			scan.FieldDeleteTime: {Type: field.TypeTime, Column: scan.FieldDeleteTime},
			scan.FieldDeleteBy:   {Type: field.TypeInt64, Column: scan.FieldDeleteBy},
			scan.FieldContent:    {Type: field.TypeString, Column: scan.FieldContent},
			scan.FieldLength:     {Type: field.TypeInt, Column: scan.FieldLength},
			scan.FieldSuccess:    {Type: field.TypeBool, Column: scan.FieldSuccess},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scope.Table,
			Columns: scope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: scope.FieldID,
			},
		},
		Type: "Scope",
		Fields: map[string]*sqlgraph.FieldSpec{
			scope.FieldCreateTime:  {Type: field.TypeTime, Column: scope.FieldCreateTime},
			scope.FieldCreateBy:    {Type: field.TypeInt64, Column: scope.FieldCreateBy},
			scope.FieldUpdateTime:  {Type: field.TypeTime, Column: scope.FieldUpdateTime},
			scope.FieldUpdateBy:    {Type: field.TypeInt64, Column: scope.FieldUpdateBy},
			scope.FieldDeleteTime:  {Type: field.TypeTime, Column: scope.FieldDeleteTime},
			scope.FieldDeleteBy:    {Type: field.TypeInt64, Column: scope.FieldDeleteBy},
			scope.FieldName:        {Type: field.TypeString, Column: scope.FieldName},
			scope.FieldType:        {Type: field.TypeEnum, Column: scope.FieldType},
			scope.FieldIcon:        {Type: field.TypeString, Column: scope.FieldIcon},
			scope.FieldDescription: {Type: field.TypeString, Column: scope.FieldDescription},
			scope.FieldAction:      {Type: field.TypeString, Column: scope.FieldAction},
			scope.FieldPath:        {Type: field.TypeString, Column: scope.FieldPath},
			scope.FieldComponent:   {Type: field.TypeString, Column: scope.FieldComponent},
			scope.FieldRedirect:    {Type: field.TypeString, Column: scope.FieldRedirect},
			scope.FieldOrder:       {Type: field.TypeInt, Column: scope.FieldOrder},
			scope.FieldHidden:      {Type: field.TypeBool, Column: scope.FieldHidden},
			scope.FieldDisabled:    {Type: field.TypeBool, Column: scope.FieldDisabled},
			scope.FieldParentID:    {Type: field.TypeUint64, Column: scope.FieldParentID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldCreateBy:   {Type: field.TypeInt64, Column: user.FieldCreateBy},
			user.FieldUpdateTime: {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUpdateBy:   {Type: field.TypeInt64, Column: user.FieldUpdateBy},
			user.FieldDeleteTime: {Type: field.TypeTime, Column: user.FieldDeleteTime},
			user.FieldDeleteBy:   {Type: field.TypeInt64, Column: user.FieldDeleteBy},
			user.FieldName:       {Type: field.TypeString, Column: user.FieldName},
			user.FieldAge:        {Type: field.TypeInt, Column: user.FieldAge},
			user.FieldSex:        {Type: field.TypeEnum, Column: user.FieldSex},
			user.FieldStatus:     {Type: field.TypeEnum, Column: user.FieldStatus},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userrole.FieldID,
			},
		},
		Type: "UserRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			userrole.FieldCreateTime: {Type: field.TypeTime, Column: userrole.FieldCreateTime},
			userrole.FieldCreateBy:   {Type: field.TypeInt64, Column: userrole.FieldCreateBy},
			userrole.FieldUpdateTime: {Type: field.TypeTime, Column: userrole.FieldUpdateTime},
			userrole.FieldUpdateBy:   {Type: field.TypeInt64, Column: userrole.FieldUpdateBy},
			userrole.FieldDeleteTime: {Type: field.TypeTime, Column: userrole.FieldDeleteTime},
			userrole.FieldDeleteBy:   {Type: field.TypeInt64, Column: userrole.FieldDeleteBy},
			userrole.FieldUserID:     {Type: field.TypeUint64, Column: userrole.FieldUserID},
			userrole.FieldRoleID:     {Type: field.TypeUint64, Column: userrole.FieldRoleID},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
		},
		"Credential",
		"User",
	)
	graph.MustAddE(
		"role_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.RolePermissionsTable,
			Columns: []string{permission.RolePermissionsColumn},
			Bidi:    false,
		},
		"Permission",
		"RolePermission",
	)
	graph.MustAddE(
		"scope",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ScopeTable,
			Columns: []string{permission.ScopeColumn},
			Bidi:    false,
		},
		"Permission",
		"Scope",
	)
	graph.MustAddE(
		"user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
		},
		"Role",
		"UserRole",
	)
	graph.MustAddE(
		"role_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RolePermissionsTable,
			Columns: []string{role.RolePermissionsColumn},
			Bidi:    false,
		},
		"Role",
		"RolePermission",
	)
	graph.MustAddE(
		"inherited_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.InheritedByTable,
			Columns: role.InheritedByPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"inherits_from",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.InheritsFromTable,
			Columns: role.InheritsFromPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
		},
		"RolePermission",
		"Role",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
		},
		"RolePermission",
		"Permission",
	)
	graph.MustAddE(
		"attachment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
		},
		"Scan",
		"Attachment",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
		},
		"Scope",
		"Scope",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
		},
		"Scope",
		"Scope",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
		},
		"Scope",
		"Permission",
	)
	graph.MustAddE(
		"attachments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AttachmentsTable,
			Columns: []string{user.AttachmentsColumn},
			Bidi:    false,
		},
		"User",
		"Attachment",
	)
	graph.MustAddE(
		"user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
		},
		"User",
		"UserRole",
	)
	graph.MustAddE(
		"credentials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CredentialsTable,
			Columns: []string{user.CredentialsColumn},
			Bidi:    false,
		},
		"User",
		"Credential",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
		},
		"UserRole",
		"User",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
		},
		"UserRole",
		"Role",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *AttachmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AttachmentQuery builder.
func (_q *AttachmentQuery) Filter() *AttachmentFilter {
	return &AttachmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AttachmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AttachmentMutation builder.
func (m *AttachmentMutation) Filter() *AttachmentFilter {
	return &AttachmentFilter{config: m.config, predicateAdder: m}
}

// AttachmentFilter provides a generic filtering capability at runtime for AttachmentQuery.
type AttachmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AttachmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AttachmentFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(attachment.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AttachmentFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *AttachmentFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(attachment.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AttachmentFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *AttachmentFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(attachment.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AttachmentFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *AttachmentFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(attachment.FieldDeleteBy))
}

// WhereFilename applies the entql string predicate on the filename field.
func (f *AttachmentFilter) WhereFilename(p entql.StringP) {
	f.Where(p.Field(attachment.FieldFilename))
}

// WherePath applies the entql string predicate on the path field.
func (f *AttachmentFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(attachment.FieldPath))
}

// WhereURL applies the entql string predicate on the url field.
func (f *AttachmentFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(attachment.FieldURL))
}

// WhereContentType applies the entql string predicate on the content_type field.
func (f *AttachmentFilter) WhereContentType(p entql.StringP) {
	f.Where(p.Field(attachment.FieldContentType))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *AttachmentFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(attachment.FieldSize))
}

// WhereEtag applies the entql string predicate on the etag field.
func (f *AttachmentFilter) WhereEtag(p entql.StringP) {
	f.Where(p.Field(attachment.FieldEtag))
}

// WhereBucket applies the entql string predicate on the bucket field.
func (f *AttachmentFilter) WhereBucket(p entql.StringP) {
	f.Where(p.Field(attachment.FieldBucket))
}

// WhereStorageProvider applies the entql string predicate on the storage_provider field.
func (f *AttachmentFilter) WhereStorageProvider(p entql.StringP) {
	f.Where(p.Field(attachment.FieldStorageProvider))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *AttachmentFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(attachment.FieldMetadata))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *AttachmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(attachment.FieldStatus))
}

// WhereUploadSessionID applies the entql string predicate on the upload_session_id field.
func (f *AttachmentFilter) WhereUploadSessionID(p entql.StringP) {
	f.Where(p.Field(attachment.FieldUploadSessionID))
}

// WhereTag1 applies the entql string predicate on the tag1 field.
func (f *AttachmentFilter) WhereTag1(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag1))
}

// WhereTag2 applies the entql string predicate on the tag2 field.
func (f *AttachmentFilter) WhereTag2(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag2))
}

// WhereTag3 applies the entql string predicate on the tag3 field.
func (f *AttachmentFilter) WhereTag3(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag3))
}

// addPredicate implements the predicateAdder interface.
func (_q *CredentialQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CredentialQuery builder.
func (_q *CredentialQuery) Filter() *CredentialFilter {
	return &CredentialFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CredentialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CredentialMutation builder.
func (m *CredentialMutation) Filter() *CredentialFilter {
	return &CredentialFilter{config: m.config, predicateAdder: m}
}

// CredentialFilter provides a generic filtering capability at runtime for CredentialQuery.
type CredentialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CredentialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CredentialFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *CredentialFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *CredentialFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(credential.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *CredentialFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *CredentialFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(credential.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *CredentialFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *CredentialFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(credential.FieldDeleteBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *CredentialFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldUserID))
}

// WhereCredentialType applies the entql string predicate on the credential_type field.
func (f *CredentialFilter) WhereCredentialType(p entql.StringP) {
	f.Where(p.Field(credential.FieldCredentialType))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *CredentialFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(credential.FieldIdentifier))
}

// WhereSecret applies the entql string predicate on the secret field.
func (f *CredentialFilter) WhereSecret(p entql.StringP) {
	f.Where(p.Field(credential.FieldSecret))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *CredentialFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(credential.FieldProvider))
}

// WhereIsVerified applies the entql bool predicate on the is_verified field.
func (f *CredentialFilter) WhereIsVerified(p entql.BoolP) {
	f.Where(p.Field(credential.FieldIsVerified))
}

// WhereVerifiedAt applies the entql time.Time predicate on the verified_at field.
func (f *CredentialFilter) WhereVerifiedAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldVerifiedAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *CredentialFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldLastUsedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *CredentialFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldExpiresAt))
}

// WhereFailedAttempts applies the entql int predicate on the failed_attempts field.
func (f *CredentialFilter) WhereFailedAttempts(p entql.IntP) {
	f.Where(p.Field(credential.FieldFailedAttempts))
}

// WhereLockedUntil applies the entql time.Time predicate on the locked_until field.
func (f *CredentialFilter) WhereLockedUntil(p entql.TimeP) {
	f.Where(p.Field(credential.FieldLockedUntil))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *CredentialFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(credential.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *CredentialFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *CredentialFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *LoggingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoggingQuery builder.
func (_q *LoggingQuery) Filter() *LoggingFilter {
	return &LoggingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *LoggingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoggingMutation builder.
func (m *LoggingMutation) Filter() *LoggingFilter {
	return &LoggingFilter{config: m.config, predicateAdder: m}
}

// LoggingFilter provides a generic filtering capability at runtime for LoggingQuery.
type LoggingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoggingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *LoggingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(logging.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *LoggingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *LoggingFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *LoggingFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *LoggingFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *LoggingFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *LoggingFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(logging.FieldDeleteBy))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *LoggingFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(logging.FieldLevel))
}

// WhereType applies the entql string predicate on the type field.
func (f *LoggingFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(logging.FieldType))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *LoggingFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(logging.FieldMessage))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *LoggingFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(logging.FieldMethod))
}

// WherePath applies the entql string predicate on the path field.
func (f *LoggingFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(logging.FieldPath))
}

// WhereIP applies the entql string predicate on the ip field.
func (f *LoggingFilter) WhereIP(p entql.StringP) {
	f.Where(p.Field(logging.FieldIP))
}

// WhereQuery applies the entql string predicate on the query field.
func (f *LoggingFilter) WhereQuery(p entql.StringP) {
	f.Where(p.Field(logging.FieldQuery))
}

// WhereCode applies the entql int predicate on the code field.
func (f *LoggingFilter) WhereCode(p entql.IntP) {
	f.Where(p.Field(logging.FieldCode))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *LoggingFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(logging.FieldUserAgent))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *LoggingFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(logging.FieldData))
}

// WhereStack applies the entql string predicate on the stack field.
func (f *LoggingFilter) WhereStack(p entql.StringP) {
	f.Where(p.Field(logging.FieldStack))
}

// addPredicate implements the predicateAdder interface.
func (_q *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (_q *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(permission.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *PermissionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *PermissionFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(permission.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *PermissionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *PermissionFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(permission.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *PermissionFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *PermissionFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(permission.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *PermissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(permission.FieldName))
}

// WhereAction applies the entql string predicate on the action field.
func (f *PermissionFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(permission.FieldAction))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PermissionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(permission.FieldDescription))
}

// WhereHasRolePermissions applies a predicate to check if query has an edge role_permissions.
func (f *PermissionFilter) WhereHasRolePermissions() {
	f.Where(entql.HasEdge("role_permissions"))
}

// WhereHasRolePermissionsWith applies a predicate to check if query has an edge role_permissions with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRolePermissionsWith(preds ...predicate.RolePermission) {
	f.Where(entql.HasEdgeWith("role_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScope applies a predicate to check if query has an edge scope.
func (f *PermissionFilter) WhereHasScope() {
	f.Where(entql.HasEdge("scope"))
}

// WhereHasScopeWith applies a predicate to check if query has an edge scope with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasScopeWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("scope", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (_q *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RoleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *RoleFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(role.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RoleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *RoleFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(role.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RoleFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *RoleFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(role.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *RoleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(role.FieldDescription))
}

// WhereHasUserRoles applies a predicate to check if query has an edge user_roles.
func (f *RoleFilter) WhereHasUserRoles() {
	f.Where(entql.HasEdge("user_roles"))
}

// WhereHasUserRolesWith applies a predicate to check if query has an edge user_roles with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRolePermissions applies a predicate to check if query has an edge role_permissions.
func (f *RoleFilter) WhereHasRolePermissions() {
	f.Where(entql.HasEdge("role_permissions"))
}

// WhereHasRolePermissionsWith applies a predicate to check if query has an edge role_permissions with a given conditions (other predicates).
func (f *RoleFilter) WhereHasRolePermissionsWith(preds ...predicate.RolePermission) {
	f.Where(entql.HasEdgeWith("role_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInheritedBy applies a predicate to check if query has an edge inherited_by.
func (f *RoleFilter) WhereHasInheritedBy() {
	f.Where(entql.HasEdge("inherited_by"))
}

// WhereHasInheritedByWith applies a predicate to check if query has an edge inherited_by with a given conditions (other predicates).
func (f *RoleFilter) WhereHasInheritedByWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("inherited_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInheritsFrom applies a predicate to check if query has an edge inherits_from.
func (f *RoleFilter) WhereHasInheritsFrom() {
	f.Where(entql.HasEdge("inherits_from"))
}

// WhereHasInheritsFromWith applies a predicate to check if query has an edge inherits_from with a given conditions (other predicates).
func (f *RoleFilter) WhereHasInheritsFromWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("inherits_from", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RolePermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RolePermissionQuery builder.
func (_q *RolePermissionQuery) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RolePermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RolePermissionMutation builder.
func (m *RolePermissionMutation) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: m.config, predicateAdder: m}
}

// RolePermissionFilter provides a generic filtering capability at runtime for RolePermissionQuery.
type RolePermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RolePermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RolePermissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RolePermissionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *RolePermissionFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(rolepermission.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RolePermissionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *RolePermissionFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(rolepermission.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RolePermissionFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *RolePermissionFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(rolepermission.FieldDeleteBy))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *RolePermissionFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldRoleID))
}

// WherePermissionID applies the entql uint64 predicate on the permission_id field.
func (f *RolePermissionFilter) WherePermissionID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldPermissionID))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *RolePermissionFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *RolePermissionFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *RolePermissionFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *RolePermissionFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScanQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScanQuery builder.
func (_q *ScanQuery) Filter() *ScanFilter {
	return &ScanFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScanMutation builder.
func (m *ScanMutation) Filter() *ScanFilter {
	return &ScanFilter{config: m.config, predicateAdder: m}
}

// ScanFilter provides a generic filtering capability at runtime for ScanQuery.
type ScanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ScanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ScanFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *ScanFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(scan.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ScanFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *ScanFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(scan.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *ScanFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *ScanFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(scan.FieldDeleteBy))
}

// WhereContent applies the entql string predicate on the content field.
func (f *ScanFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(scan.FieldContent))
}

// WhereLength applies the entql int predicate on the length field.
func (f *ScanFilter) WhereLength(p entql.IntP) {
	f.Where(p.Field(scan.FieldLength))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ScanFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(scan.FieldSuccess))
}

// WhereHasAttachment applies a predicate to check if query has an edge attachment.
func (f *ScanFilter) WhereHasAttachment() {
	f.Where(entql.HasEdge("attachment"))
}

// WhereHasAttachmentWith applies a predicate to check if query has an edge attachment with a given conditions (other predicates).
func (f *ScanFilter) WhereHasAttachmentWith(preds ...predicate.Attachment) {
	f.Where(entql.HasEdgeWith("attachment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScopeQuery builder.
func (_q *ScopeQuery) Filter() *ScopeFilter {
	return &ScopeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScopeMutation builder.
func (m *ScopeMutation) Filter() *ScopeFilter {
	return &ScopeFilter{config: m.config, predicateAdder: m}
}

// ScopeFilter provides a generic filtering capability at runtime for ScopeQuery.
type ScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ScopeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ScopeFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *ScopeFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(scope.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ScopeFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *ScopeFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(scope.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *ScopeFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *ScopeFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(scope.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *ScopeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(scope.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *ScopeFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(scope.FieldType))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *ScopeFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(scope.FieldIcon))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ScopeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(scope.FieldDescription))
}

// WhereAction applies the entql string predicate on the action field.
func (f *ScopeFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(scope.FieldAction))
}

// WherePath applies the entql string predicate on the path field.
func (f *ScopeFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(scope.FieldPath))
}

// WhereComponent applies the entql string predicate on the component field.
func (f *ScopeFilter) WhereComponent(p entql.StringP) {
	f.Where(p.Field(scope.FieldComponent))
}

// WhereRedirect applies the entql string predicate on the redirect field.
func (f *ScopeFilter) WhereRedirect(p entql.StringP) {
	f.Where(p.Field(scope.FieldRedirect))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *ScopeFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(scope.FieldOrder))
}

// WhereHidden applies the entql bool predicate on the hidden field.
func (f *ScopeFilter) WhereHidden(p entql.BoolP) {
	f.Where(p.Field(scope.FieldHidden))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *ScopeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(scope.FieldDisabled))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *ScopeFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldParentID))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *ScopeFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasParentWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *ScopeFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasChildrenWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *ScopeFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *UserFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *UserFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *UserFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(user.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereAge applies the entql int predicate on the age field.
func (f *UserFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(user.FieldAge))
}

// WhereSex applies the entql string predicate on the sex field.
func (f *UserFilter) WhereSex(p entql.StringP) {
	f.Where(p.Field(user.FieldSex))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereHasAttachments applies a predicate to check if query has an edge attachments.
func (f *UserFilter) WhereHasAttachments() {
	f.Where(entql.HasEdge("attachments"))
}

// WhereHasAttachmentsWith applies a predicate to check if query has an edge attachments with a given conditions (other predicates).
func (f *UserFilter) WhereHasAttachmentsWith(preds ...predicate.Attachment) {
	f.Where(entql.HasEdgeWith("attachments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserRoles applies a predicate to check if query has an edge user_roles.
func (f *UserFilter) WhereHasUserRoles() {
	f.Where(entql.HasEdge("user_roles"))
}

// WhereHasUserRolesWith applies a predicate to check if query has an edge user_roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCredentials applies a predicate to check if query has an edge credentials.
func (f *UserFilter) WhereHasCredentials() {
	f.Where(entql.HasEdge("credentials"))
}

// WhereHasCredentialsWith applies a predicate to check if query has an edge credentials with a given conditions (other predicates).
func (f *UserFilter) WhereHasCredentialsWith(preds ...predicate.Credential) {
	f.Where(entql.HasEdgeWith("credentials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserRoleQuery builder.
func (_q *UserRoleQuery) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserRoleMutation builder.
func (m *UserRoleMutation) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: m.config, predicateAdder: m}
}

// UserRoleFilter provides a generic filtering capability at runtime for UserRoleQuery.
type UserRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserRoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserRoleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldCreateTime))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *UserRoleFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(userrole.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserRoleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldUpdateTime))
}

// WhereUpdateBy applies the entql int64 predicate on the update_by field.
func (f *UserRoleFilter) WhereUpdateBy(p entql.Int64P) {
	f.Where(p.Field(userrole.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserRoleFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldDeleteTime))
}

// WhereDeleteBy applies the entql int64 predicate on the delete_by field.
func (f *UserRoleFilter) WhereDeleteBy(p entql.Int64P) {
	f.Where(p.Field(userrole.FieldDeleteBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *UserRoleFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldUserID))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *UserRoleFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldRoleID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserRoleFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *UserRoleFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
