// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go-backend/database/ent/address"
	"go-backend/database/ent/apiauth"
	"go-backend/database/ent/area"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/clientdevice"
	"go-backend/database/ent/credential"
	"go-backend/database/ent/logging"
	"go-backend/database/ent/loginrecord"
	"go-backend/database/ent/oauthapplication"
	"go-backend/database/ent/oauthauthorizationcode"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthtoken"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/oauthuserauthorization"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/role"
	"go-backend/database/ent/rolepermission"
	"go-backend/database/ent/scan"
	"go-backend/database/ent/scope"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"go-backend/database/ent/subwaystation"
	"go-backend/database/ent/systemmonitor"
	"go-backend/database/ent/user"
	"go-backend/database/ent/userrole"
	"go-backend/database/ent/verifycode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 27)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apiauth.Table,
			Columns: apiauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: apiauth.FieldID,
			},
		},
		Type: "APIAuth",
		Fields: map[string]*sqlgraph.FieldSpec{
			apiauth.FieldCreateTime:  {Type: field.TypeTime, Column: apiauth.FieldCreateTime},
			apiauth.FieldCreateBy:    {Type: field.TypeUint64, Column: apiauth.FieldCreateBy},
			apiauth.FieldUpdateTime:  {Type: field.TypeTime, Column: apiauth.FieldUpdateTime},
			apiauth.FieldUpdateBy:    {Type: field.TypeUint64, Column: apiauth.FieldUpdateBy},
			apiauth.FieldDeleteTime:  {Type: field.TypeTime, Column: apiauth.FieldDeleteTime},
			apiauth.FieldDeleteBy:    {Type: field.TypeUint64, Column: apiauth.FieldDeleteBy},
			apiauth.FieldName:        {Type: field.TypeString, Column: apiauth.FieldName},
			apiauth.FieldDescription: {Type: field.TypeString, Column: apiauth.FieldDescription},
			apiauth.FieldMethod:      {Type: field.TypeString, Column: apiauth.FieldMethod},
			apiauth.FieldPath:        {Type: field.TypeString, Column: apiauth.FieldPath},
			apiauth.FieldIsPublic:    {Type: field.TypeBool, Column: apiauth.FieldIsPublic},
			apiauth.FieldIsActive:    {Type: field.TypeBool, Column: apiauth.FieldIsActive},
			apiauth.FieldType:        {Type: field.TypeEnum, Column: apiauth.FieldType},
			apiauth.FieldMetadata:    {Type: field.TypeJSON, Column: apiauth.FieldMetadata},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: address.FieldID,
			},
		},
		Type: "Address",
		Fields: map[string]*sqlgraph.FieldSpec{
			address.FieldCreateTime: {Type: field.TypeTime, Column: address.FieldCreateTime},
			address.FieldCreateBy:   {Type: field.TypeUint64, Column: address.FieldCreateBy},
			address.FieldUpdateTime: {Type: field.TypeTime, Column: address.FieldUpdateTime},
			address.FieldUpdateBy:   {Type: field.TypeUint64, Column: address.FieldUpdateBy},
			address.FieldDeleteTime: {Type: field.TypeTime, Column: address.FieldDeleteTime},
			address.FieldDeleteBy:   {Type: field.TypeUint64, Column: address.FieldDeleteBy},
			address.FieldDetail:     {Type: field.TypeString, Column: address.FieldDetail},
			address.FieldAreaID:     {Type: field.TypeUint64, Column: address.FieldAreaID},
			address.FieldPhone:      {Type: field.TypeString, Column: address.FieldPhone},
			address.FieldName:       {Type: field.TypeString, Column: address.FieldName},
			address.FieldIsDefault:  {Type: field.TypeBool, Column: address.FieldIsDefault},
			address.FieldRemark:     {Type: field.TypeString, Column: address.FieldRemark},
			address.FieldEntity:     {Type: field.TypeString, Column: address.FieldEntity},
			address.FieldEntityID:   {Type: field.TypeString, Column: address.FieldEntityID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: area.FieldID,
			},
		},
		Type: "Area",
		Fields: map[string]*sqlgraph.FieldSpec{
			area.FieldCreateTime: {Type: field.TypeTime, Column: area.FieldCreateTime},
			area.FieldCreateBy:   {Type: field.TypeUint64, Column: area.FieldCreateBy},
			area.FieldUpdateTime: {Type: field.TypeTime, Column: area.FieldUpdateTime},
			area.FieldUpdateBy:   {Type: field.TypeUint64, Column: area.FieldUpdateBy},
			area.FieldDeleteTime: {Type: field.TypeTime, Column: area.FieldDeleteTime},
			area.FieldDeleteBy:   {Type: field.TypeUint64, Column: area.FieldDeleteBy},
			area.FieldName:       {Type: field.TypeString, Column: area.FieldName},
			area.FieldSpell:      {Type: field.TypeString, Column: area.FieldSpell},
			area.FieldLevel:      {Type: field.TypeEnum, Column: area.FieldLevel},
			area.FieldDepth:      {Type: field.TypeInt, Column: area.FieldDepth},
			area.FieldCode:       {Type: field.TypeString, Column: area.FieldCode},
			area.FieldLatitude:   {Type: field.TypeFloat64, Column: area.FieldLatitude},
			area.FieldLongitude:  {Type: field.TypeFloat64, Column: area.FieldLongitude},
			area.FieldParentID:   {Type: field.TypeUint64, Column: area.FieldParentID},
			area.FieldColor:      {Type: field.TypeString, Column: area.FieldColor},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attachment.FieldID,
			},
		},
		Type: "Attachment",
		Fields: map[string]*sqlgraph.FieldSpec{
			attachment.FieldCreateTime:      {Type: field.TypeTime, Column: attachment.FieldCreateTime},
			attachment.FieldCreateBy:        {Type: field.TypeUint64, Column: attachment.FieldCreateBy},
			attachment.FieldUpdateTime:      {Type: field.TypeTime, Column: attachment.FieldUpdateTime},
			attachment.FieldUpdateBy:        {Type: field.TypeUint64, Column: attachment.FieldUpdateBy},
			attachment.FieldDeleteTime:      {Type: field.TypeTime, Column: attachment.FieldDeleteTime},
			attachment.FieldDeleteBy:        {Type: field.TypeUint64, Column: attachment.FieldDeleteBy},
			attachment.FieldFilename:        {Type: field.TypeString, Column: attachment.FieldFilename},
			attachment.FieldPath:            {Type: field.TypeString, Column: attachment.FieldPath},
			attachment.FieldURL:             {Type: field.TypeString, Column: attachment.FieldURL},
			attachment.FieldContentType:     {Type: field.TypeString, Column: attachment.FieldContentType},
			attachment.FieldSize:            {Type: field.TypeInt64, Column: attachment.FieldSize},
			attachment.FieldEtag:            {Type: field.TypeString, Column: attachment.FieldEtag},
			attachment.FieldBucket:          {Type: field.TypeString, Column: attachment.FieldBucket},
			attachment.FieldStorageProvider: {Type: field.TypeString, Column: attachment.FieldStorageProvider},
			attachment.FieldMetadata:        {Type: field.TypeJSON, Column: attachment.FieldMetadata},
			attachment.FieldStatus:          {Type: field.TypeEnum, Column: attachment.FieldStatus},
			attachment.FieldUploadSessionID: {Type: field.TypeString, Column: attachment.FieldUploadSessionID},
			attachment.FieldTag1:            {Type: field.TypeString, Column: attachment.FieldTag1},
			attachment.FieldTag2:            {Type: field.TypeString, Column: attachment.FieldTag2},
			attachment.FieldTag3:            {Type: field.TypeString, Column: attachment.FieldTag3},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   clientdevice.Table,
			Columns: clientdevice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: clientdevice.FieldID,
			},
		},
		Type: "ClientDevice",
		Fields: map[string]*sqlgraph.FieldSpec{
			clientdevice.FieldCreateTime:         {Type: field.TypeTime, Column: clientdevice.FieldCreateTime},
			clientdevice.FieldCreateBy:           {Type: field.TypeUint64, Column: clientdevice.FieldCreateBy},
			clientdevice.FieldUpdateTime:         {Type: field.TypeTime, Column: clientdevice.FieldUpdateTime},
			clientdevice.FieldUpdateBy:           {Type: field.TypeUint64, Column: clientdevice.FieldUpdateBy},
			clientdevice.FieldDeleteTime:         {Type: field.TypeTime, Column: clientdevice.FieldDeleteTime},
			clientdevice.FieldDeleteBy:           {Type: field.TypeUint64, Column: clientdevice.FieldDeleteBy},
			clientdevice.FieldName:               {Type: field.TypeString, Column: clientdevice.FieldName},
			clientdevice.FieldCode:               {Type: field.TypeString, Column: clientdevice.FieldCode},
			clientdevice.FieldDescription:        {Type: field.TypeString, Column: clientdevice.FieldDescription},
			clientdevice.FieldEnabled:            {Type: field.TypeBool, Column: clientdevice.FieldEnabled},
			clientdevice.FieldAccessTokenExpiry:  {Type: field.TypeUint64, Column: clientdevice.FieldAccessTokenExpiry},
			clientdevice.FieldRefreshTokenExpiry: {Type: field.TypeUint64, Column: clientdevice.FieldRefreshTokenExpiry},
			clientdevice.FieldAnonymous:          {Type: field.TypeBool, Column: clientdevice.FieldAnonymous},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: credential.FieldID,
			},
		},
		Type: "Credential",
		Fields: map[string]*sqlgraph.FieldSpec{
			credential.FieldCreateTime:     {Type: field.TypeTime, Column: credential.FieldCreateTime},
			credential.FieldCreateBy:       {Type: field.TypeUint64, Column: credential.FieldCreateBy},
			credential.FieldUpdateTime:     {Type: field.TypeTime, Column: credential.FieldUpdateTime},
			credential.FieldUpdateBy:       {Type: field.TypeUint64, Column: credential.FieldUpdateBy},
			credential.FieldDeleteTime:     {Type: field.TypeTime, Column: credential.FieldDeleteTime},
			credential.FieldDeleteBy:       {Type: field.TypeUint64, Column: credential.FieldDeleteBy},
			credential.FieldUserID:         {Type: field.TypeUint64, Column: credential.FieldUserID},
			credential.FieldCredentialType: {Type: field.TypeEnum, Column: credential.FieldCredentialType},
			credential.FieldIdentifier:     {Type: field.TypeString, Column: credential.FieldIdentifier},
			credential.FieldSecret:         {Type: field.TypeString, Column: credential.FieldSecret},
			credential.FieldSalt:           {Type: field.TypeString, Column: credential.FieldSalt},
			credential.FieldProvider:       {Type: field.TypeString, Column: credential.FieldProvider},
			credential.FieldIsVerified:     {Type: field.TypeBool, Column: credential.FieldIsVerified},
			credential.FieldVerifiedAt:     {Type: field.TypeTime, Column: credential.FieldVerifiedAt},
			credential.FieldLastUsedAt:     {Type: field.TypeTime, Column: credential.FieldLastUsedAt},
			credential.FieldExpiresAt:      {Type: field.TypeTime, Column: credential.FieldExpiresAt},
			credential.FieldFailedAttempts: {Type: field.TypeInt, Column: credential.FieldFailedAttempts},
			credential.FieldLockedUntil:    {Type: field.TypeTime, Column: credential.FieldLockedUntil},
			credential.FieldMetadata:       {Type: field.TypeJSON, Column: credential.FieldMetadata},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   logging.Table,
			Columns: logging.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: logging.FieldID,
			},
		},
		Type: "Logging",
		Fields: map[string]*sqlgraph.FieldSpec{
			logging.FieldCreateTime: {Type: field.TypeTime, Column: logging.FieldCreateTime},
			logging.FieldCreateBy:   {Type: field.TypeUint64, Column: logging.FieldCreateBy},
			logging.FieldUpdateTime: {Type: field.TypeTime, Column: logging.FieldUpdateTime},
			logging.FieldUpdateBy:   {Type: field.TypeUint64, Column: logging.FieldUpdateBy},
			logging.FieldDeleteTime: {Type: field.TypeTime, Column: logging.FieldDeleteTime},
			logging.FieldDeleteBy:   {Type: field.TypeUint64, Column: logging.FieldDeleteBy},
			logging.FieldLevel:      {Type: field.TypeEnum, Column: logging.FieldLevel},
			logging.FieldType:       {Type: field.TypeEnum, Column: logging.FieldType},
			logging.FieldMessage:    {Type: field.TypeString, Column: logging.FieldMessage},
			logging.FieldMethod:     {Type: field.TypeString, Column: logging.FieldMethod},
			logging.FieldPath:       {Type: field.TypeString, Column: logging.FieldPath},
			logging.FieldIP:         {Type: field.TypeString, Column: logging.FieldIP},
			logging.FieldQuery:      {Type: field.TypeString, Column: logging.FieldQuery},
			logging.FieldCode:       {Type: field.TypeInt, Column: logging.FieldCode},
			logging.FieldUserAgent:  {Type: field.TypeString, Column: logging.FieldUserAgent},
			logging.FieldData:       {Type: field.TypeJSON, Column: logging.FieldData},
			logging.FieldStack:      {Type: field.TypeString, Column: logging.FieldStack},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   loginrecord.Table,
			Columns: loginrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: loginrecord.FieldID,
			},
		},
		Type: "LoginRecord",
		Fields: map[string]*sqlgraph.FieldSpec{
			loginrecord.FieldCreateTime:     {Type: field.TypeTime, Column: loginrecord.FieldCreateTime},
			loginrecord.FieldCreateBy:       {Type: field.TypeUint64, Column: loginrecord.FieldCreateBy},
			loginrecord.FieldUpdateTime:     {Type: field.TypeTime, Column: loginrecord.FieldUpdateTime},
			loginrecord.FieldUpdateBy:       {Type: field.TypeUint64, Column: loginrecord.FieldUpdateBy},
			loginrecord.FieldUserID:         {Type: field.TypeUint64, Column: loginrecord.FieldUserID},
			loginrecord.FieldIdentifier:     {Type: field.TypeString, Column: loginrecord.FieldIdentifier},
			loginrecord.FieldCredentialType: {Type: field.TypeEnum, Column: loginrecord.FieldCredentialType},
			loginrecord.FieldIPAddress:      {Type: field.TypeString, Column: loginrecord.FieldIPAddress},
			loginrecord.FieldUserAgent:      {Type: field.TypeString, Column: loginrecord.FieldUserAgent},
			loginrecord.FieldDeviceInfo:     {Type: field.TypeString, Column: loginrecord.FieldDeviceInfo},
			loginrecord.FieldLocation:       {Type: field.TypeString, Column: loginrecord.FieldLocation},
			loginrecord.FieldStatus:         {Type: field.TypeEnum, Column: loginrecord.FieldStatus},
			loginrecord.FieldFailureReason:  {Type: field.TypeString, Column: loginrecord.FieldFailureReason},
			loginrecord.FieldSessionID:      {Type: field.TypeString, Column: loginrecord.FieldSessionID},
			loginrecord.FieldLogoutTime:     {Type: field.TypeTime, Column: loginrecord.FieldLogoutTime},
			loginrecord.FieldDuration:       {Type: field.TypeInt, Column: loginrecord.FieldDuration},
			loginrecord.FieldMetadata:       {Type: field.TypeJSON, Column: loginrecord.FieldMetadata},
			loginrecord.FieldClientID:       {Type: field.TypeUint64, Column: loginrecord.FieldClientID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthapplication.Table,
			Columns: oauthapplication.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthapplication.FieldID,
			},
		},
		Type: "OauthApplication",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthapplication.FieldCreateTime:     {Type: field.TypeTime, Column: oauthapplication.FieldCreateTime},
			oauthapplication.FieldCreateBy:       {Type: field.TypeUint64, Column: oauthapplication.FieldCreateBy},
			oauthapplication.FieldUpdateTime:     {Type: field.TypeTime, Column: oauthapplication.FieldUpdateTime},
			oauthapplication.FieldUpdateBy:       {Type: field.TypeUint64, Column: oauthapplication.FieldUpdateBy},
			oauthapplication.FieldDeleteTime:     {Type: field.TypeTime, Column: oauthapplication.FieldDeleteTime},
			oauthapplication.FieldDeleteBy:       {Type: field.TypeUint64, Column: oauthapplication.FieldDeleteBy},
			oauthapplication.FieldClientID:       {Type: field.TypeString, Column: oauthapplication.FieldClientID},
			oauthapplication.FieldClientSecret:   {Type: field.TypeString, Column: oauthapplication.FieldClientSecret},
			oauthapplication.FieldName:           {Type: field.TypeString, Column: oauthapplication.FieldName},
			oauthapplication.FieldRedirectUris:   {Type: field.TypeJSON, Column: oauthapplication.FieldRedirectUris},
			oauthapplication.FieldIsConfidential: {Type: field.TypeBool, Column: oauthapplication.FieldIsConfidential},
			oauthapplication.FieldScopes:         {Type: field.TypeJSON, Column: oauthapplication.FieldScopes},
			oauthapplication.FieldAbleState:      {Type: field.TypeEnum, Column: oauthapplication.FieldAbleState},
			oauthapplication.FieldSystemID:       {Type: field.TypeUint64, Column: oauthapplication.FieldSystemID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthauthorizationcode.Table,
			Columns: oauthauthorizationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthauthorizationcode.FieldID,
			},
		},
		Type: "OauthAuthorizationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthauthorizationcode.FieldCreateTime:          {Type: field.TypeTime, Column: oauthauthorizationcode.FieldCreateTime},
			oauthauthorizationcode.FieldCreateBy:            {Type: field.TypeUint64, Column: oauthauthorizationcode.FieldCreateBy},
			oauthauthorizationcode.FieldUpdateTime:          {Type: field.TypeTime, Column: oauthauthorizationcode.FieldUpdateTime},
			oauthauthorizationcode.FieldUpdateBy:            {Type: field.TypeUint64, Column: oauthauthorizationcode.FieldUpdateBy},
			oauthauthorizationcode.FieldDeleteTime:          {Type: field.TypeTime, Column: oauthauthorizationcode.FieldDeleteTime},
			oauthauthorizationcode.FieldDeleteBy:            {Type: field.TypeUint64, Column: oauthauthorizationcode.FieldDeleteBy},
			oauthauthorizationcode.FieldCode:                {Type: field.TypeString, Column: oauthauthorizationcode.FieldCode},
			oauthauthorizationcode.FieldApplicationID:       {Type: field.TypeUint64, Column: oauthauthorizationcode.FieldApplicationID},
			oauthauthorizationcode.FieldUserID:              {Type: field.TypeUint64, Column: oauthauthorizationcode.FieldUserID},
			oauthauthorizationcode.FieldRedirectURI:         {Type: field.TypeString, Column: oauthauthorizationcode.FieldRedirectURI},
			oauthauthorizationcode.FieldScope:               {Type: field.TypeJSON, Column: oauthauthorizationcode.FieldScope},
			oauthauthorizationcode.FieldExpiresAt:           {Type: field.TypeTime, Column: oauthauthorizationcode.FieldExpiresAt},
			oauthauthorizationcode.FieldUsedAt:              {Type: field.TypeTime, Column: oauthauthorizationcode.FieldUsedAt},
			oauthauthorizationcode.FieldCodeChallenge:       {Type: field.TypeString, Column: oauthauthorizationcode.FieldCodeChallenge},
			oauthauthorizationcode.FieldCodeChallengeMethod: {Type: field.TypeString, Column: oauthauthorizationcode.FieldCodeChallengeMethod},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthprovider.Table,
			Columns: oauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthprovider.FieldID,
			},
		},
		Type: "OauthProvider",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthprovider.FieldCreateTime:            {Type: field.TypeTime, Column: oauthprovider.FieldCreateTime},
			oauthprovider.FieldCreateBy:              {Type: field.TypeUint64, Column: oauthprovider.FieldCreateBy},
			oauthprovider.FieldUpdateTime:            {Type: field.TypeTime, Column: oauthprovider.FieldUpdateTime},
			oauthprovider.FieldUpdateBy:              {Type: field.TypeUint64, Column: oauthprovider.FieldUpdateBy},
			oauthprovider.FieldDeleteTime:            {Type: field.TypeTime, Column: oauthprovider.FieldDeleteTime},
			oauthprovider.FieldDeleteBy:              {Type: field.TypeUint64, Column: oauthprovider.FieldDeleteBy},
			oauthprovider.FieldType:                  {Type: field.TypeEnum, Column: oauthprovider.FieldType},
			oauthprovider.FieldName:                  {Type: field.TypeString, Column: oauthprovider.FieldName},
			oauthprovider.FieldAuthorizationEndpoint: {Type: field.TypeString, Column: oauthprovider.FieldAuthorizationEndpoint},
			oauthprovider.FieldTokenEndpoint:         {Type: field.TypeString, Column: oauthprovider.FieldTokenEndpoint},
			oauthprovider.FieldUserInfoEndpoint:      {Type: field.TypeString, Column: oauthprovider.FieldUserInfoEndpoint},
			oauthprovider.FieldRevokeEndpoint:        {Type: field.TypeString, Column: oauthprovider.FieldRevokeEndpoint},
			oauthprovider.FieldRefreshEndpoint:       {Type: field.TypeString, Column: oauthprovider.FieldRefreshEndpoint},
			oauthprovider.FieldClientID:              {Type: field.TypeString, Column: oauthprovider.FieldClientID},
			oauthprovider.FieldClientSecret:          {Type: field.TypeString, Column: oauthprovider.FieldClientSecret},
			oauthprovider.FieldRedirectURI:           {Type: field.TypeString, Column: oauthprovider.FieldRedirectURI},
			oauthprovider.FieldScopes:                {Type: field.TypeJSON, Column: oauthprovider.FieldScopes},
			oauthprovider.FieldAutoRegister:          {Type: field.TypeBool, Column: oauthprovider.FieldAutoRegister},
			oauthprovider.FieldAbleState:             {Type: field.TypeEnum, Column: oauthprovider.FieldAbleState},
			oauthprovider.FieldMetadata:              {Type: field.TypeJSON, Column: oauthprovider.FieldMetadata},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthstate.Table,
			Columns: oauthstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthstate.FieldID,
			},
		},
		Type: "OauthState",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthstate.FieldCreateTime: {Type: field.TypeTime, Column: oauthstate.FieldCreateTime},
			oauthstate.FieldCreateBy:   {Type: field.TypeUint64, Column: oauthstate.FieldCreateBy},
			oauthstate.FieldUpdateTime: {Type: field.TypeTime, Column: oauthstate.FieldUpdateTime},
			oauthstate.FieldUpdateBy:   {Type: field.TypeUint64, Column: oauthstate.FieldUpdateBy},
			oauthstate.FieldDeleteTime: {Type: field.TypeTime, Column: oauthstate.FieldDeleteTime},
			oauthstate.FieldDeleteBy:   {Type: field.TypeUint64, Column: oauthstate.FieldDeleteBy},
			oauthstate.FieldState:      {Type: field.TypeString, Column: oauthstate.FieldState},
			oauthstate.FieldType:       {Type: field.TypeEnum, Column: oauthstate.FieldType},
			oauthstate.FieldProviderID: {Type: field.TypeUint64, Column: oauthstate.FieldProviderID},
			oauthstate.FieldUserID:     {Type: field.TypeUint64, Column: oauthstate.FieldUserID},
			oauthstate.FieldExpiresAt:  {Type: field.TypeTime, Column: oauthstate.FieldExpiresAt},
			oauthstate.FieldUsedAt:     {Type: field.TypeTime, Column: oauthstate.FieldUsedAt},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthtoken.Table,
			Columns: oauthtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthtoken.FieldID,
			},
		},
		Type: "OauthToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthtoken.FieldCreateTime:       {Type: field.TypeTime, Column: oauthtoken.FieldCreateTime},
			oauthtoken.FieldCreateBy:         {Type: field.TypeUint64, Column: oauthtoken.FieldCreateBy},
			oauthtoken.FieldUpdateTime:       {Type: field.TypeTime, Column: oauthtoken.FieldUpdateTime},
			oauthtoken.FieldUpdateBy:         {Type: field.TypeUint64, Column: oauthtoken.FieldUpdateBy},
			oauthtoken.FieldDeleteTime:       {Type: field.TypeTime, Column: oauthtoken.FieldDeleteTime},
			oauthtoken.FieldDeleteBy:         {Type: field.TypeUint64, Column: oauthtoken.FieldDeleteBy},
			oauthtoken.FieldAccessToken:      {Type: field.TypeString, Column: oauthtoken.FieldAccessToken},
			oauthtoken.FieldRefreshToken:     {Type: field.TypeString, Column: oauthtoken.FieldRefreshToken},
			oauthtoken.FieldApplicationID:    {Type: field.TypeUint64, Column: oauthtoken.FieldApplicationID},
			oauthtoken.FieldUserID:           {Type: field.TypeUint64, Column: oauthtoken.FieldUserID},
			oauthtoken.FieldScope:            {Type: field.TypeJSON, Column: oauthtoken.FieldScope},
			oauthtoken.FieldAccessExpiresAt:  {Type: field.TypeTime, Column: oauthtoken.FieldAccessExpiresAt},
			oauthtoken.FieldRefreshExpiresAt: {Type: field.TypeTime, Column: oauthtoken.FieldRefreshExpiresAt},
			oauthtoken.FieldRevokedAt:        {Type: field.TypeTime, Column: oauthtoken.FieldRevokedAt},
			oauthtoken.FieldLastUsedAt:       {Type: field.TypeTime, Column: oauthtoken.FieldLastUsedAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthuser.Table,
			Columns: oauthuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthuser.FieldID,
			},
		},
		Type: "OauthUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthuser.FieldCreateTime:       {Type: field.TypeTime, Column: oauthuser.FieldCreateTime},
			oauthuser.FieldCreateBy:         {Type: field.TypeUint64, Column: oauthuser.FieldCreateBy},
			oauthuser.FieldUpdateTime:       {Type: field.TypeTime, Column: oauthuser.FieldUpdateTime},
			oauthuser.FieldUpdateBy:         {Type: field.TypeUint64, Column: oauthuser.FieldUpdateBy},
			oauthuser.FieldDeleteTime:       {Type: field.TypeTime, Column: oauthuser.FieldDeleteTime},
			oauthuser.FieldDeleteBy:         {Type: field.TypeUint64, Column: oauthuser.FieldDeleteBy},
			oauthuser.FieldProviderID:       {Type: field.TypeUint64, Column: oauthuser.FieldProviderID},
			oauthuser.FieldUserID:           {Type: field.TypeUint64, Column: oauthuser.FieldUserID},
			oauthuser.FieldStateID:          {Type: field.TypeUint64, Column: oauthuser.FieldStateID},
			oauthuser.FieldProviderUserID:   {Type: field.TypeString, Column: oauthuser.FieldProviderUserID},
			oauthuser.FieldRawUserInfo:      {Type: field.TypeJSON, Column: oauthuser.FieldRawUserInfo},
			oauthuser.FieldAccessToken:      {Type: field.TypeString, Column: oauthuser.FieldAccessToken},
			oauthuser.FieldRefreshToken:     {Type: field.TypeString, Column: oauthuser.FieldRefreshToken},
			oauthuser.FieldAccessExpiresAt:  {Type: field.TypeTime, Column: oauthuser.FieldAccessExpiresAt},
			oauthuser.FieldRefreshExpiresAt: {Type: field.TypeTime, Column: oauthuser.FieldRefreshExpiresAt},
			oauthuser.FieldLoadState:        {Type: field.TypeEnum, Column: oauthuser.FieldLoadState},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthuserauthorization.Table,
			Columns: oauthuserauthorization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: oauthuserauthorization.FieldID,
			},
		},
		Type: "OauthUserAuthorization",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthuserauthorization.FieldCreateTime:    {Type: field.TypeTime, Column: oauthuserauthorization.FieldCreateTime},
			oauthuserauthorization.FieldCreateBy:      {Type: field.TypeUint64, Column: oauthuserauthorization.FieldCreateBy},
			oauthuserauthorization.FieldUpdateTime:    {Type: field.TypeTime, Column: oauthuserauthorization.FieldUpdateTime},
			oauthuserauthorization.FieldUpdateBy:      {Type: field.TypeUint64, Column: oauthuserauthorization.FieldUpdateBy},
			oauthuserauthorization.FieldDeleteTime:    {Type: field.TypeTime, Column: oauthuserauthorization.FieldDeleteTime},
			oauthuserauthorization.FieldDeleteBy:      {Type: field.TypeUint64, Column: oauthuserauthorization.FieldDeleteBy},
			oauthuserauthorization.FieldUserID:        {Type: field.TypeUint64, Column: oauthuserauthorization.FieldUserID},
			oauthuserauthorization.FieldApplicationID: {Type: field.TypeUint64, Column: oauthuserauthorization.FieldApplicationID},
			oauthuserauthorization.FieldAuthorizedAt:  {Type: field.TypeTime, Column: oauthuserauthorization.FieldAuthorizedAt},
			oauthuserauthorization.FieldUsageState:    {Type: field.TypeEnum, Column: oauthuserauthorization.FieldUsageState},
			oauthuserauthorization.FieldScope:         {Type: field.TypeJSON, Column: oauthuserauthorization.FieldScope},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldCreateTime:  {Type: field.TypeTime, Column: permission.FieldCreateTime},
			permission.FieldCreateBy:    {Type: field.TypeUint64, Column: permission.FieldCreateBy},
			permission.FieldUpdateTime:  {Type: field.TypeTime, Column: permission.FieldUpdateTime},
			permission.FieldUpdateBy:    {Type: field.TypeUint64, Column: permission.FieldUpdateBy},
			permission.FieldDeleteTime:  {Type: field.TypeTime, Column: permission.FieldDeleteTime},
			permission.FieldDeleteBy:    {Type: field.TypeUint64, Column: permission.FieldDeleteBy},
			permission.FieldName:        {Type: field.TypeString, Column: permission.FieldName},
			permission.FieldAction:      {Type: field.TypeString, Column: permission.FieldAction},
			permission.FieldDescription: {Type: field.TypeString, Column: permission.FieldDescription},
			permission.FieldIsPublic:    {Type: field.TypeBool, Column: permission.FieldIsPublic},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreateTime:  {Type: field.TypeTime, Column: role.FieldCreateTime},
			role.FieldCreateBy:    {Type: field.TypeUint64, Column: role.FieldCreateBy},
			role.FieldUpdateTime:  {Type: field.TypeTime, Column: role.FieldUpdateTime},
			role.FieldUpdateBy:    {Type: field.TypeUint64, Column: role.FieldUpdateBy},
			role.FieldDeleteTime:  {Type: field.TypeTime, Column: role.FieldDeleteTime},
			role.FieldDeleteBy:    {Type: field.TypeUint64, Column: role.FieldDeleteBy},
			role.FieldName:        {Type: field.TypeString, Column: role.FieldName},
			role.FieldDescription: {Type: field.TypeString, Column: role.FieldDescription},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rolepermission.Table,
			Columns: rolepermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rolepermission.FieldID,
			},
		},
		Type: "RolePermission",
		Fields: map[string]*sqlgraph.FieldSpec{
			rolepermission.FieldCreateTime:   {Type: field.TypeTime, Column: rolepermission.FieldCreateTime},
			rolepermission.FieldCreateBy:     {Type: field.TypeUint64, Column: rolepermission.FieldCreateBy},
			rolepermission.FieldUpdateTime:   {Type: field.TypeTime, Column: rolepermission.FieldUpdateTime},
			rolepermission.FieldUpdateBy:     {Type: field.TypeUint64, Column: rolepermission.FieldUpdateBy},
			rolepermission.FieldDeleteTime:   {Type: field.TypeTime, Column: rolepermission.FieldDeleteTime},
			rolepermission.FieldDeleteBy:     {Type: field.TypeUint64, Column: rolepermission.FieldDeleteBy},
			rolepermission.FieldRoleID:       {Type: field.TypeUint64, Column: rolepermission.FieldRoleID},
			rolepermission.FieldPermissionID: {Type: field.TypeUint64, Column: rolepermission.FieldPermissionID},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: scan.FieldID,
			},
		},
		Type: "Scan",
		Fields: map[string]*sqlgraph.FieldSpec{
			scan.FieldCreateTime: {Type: field.TypeTime, Column: scan.FieldCreateTime},
			scan.FieldCreateBy:   {Type: field.TypeUint64, Column: scan.FieldCreateBy},
			scan.FieldUpdateTime: {Type: field.TypeTime, Column: scan.FieldUpdateTime},
			scan.FieldUpdateBy:   {Type: field.TypeUint64, Column: scan.FieldUpdateBy},
			scan.FieldDeleteTime: {Type: field.TypeTime, Column: scan.FieldDeleteTime},
			scan.FieldDeleteBy:   {Type: field.TypeUint64, Column: scan.FieldDeleteBy},
			scan.FieldContent:    {Type: field.TypeString, Column: scan.FieldContent},
			scan.FieldLength:     {Type: field.TypeInt, Column: scan.FieldLength},
			scan.FieldSuccess:    {Type: field.TypeBool, Column: scan.FieldSuccess},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scope.Table,
			Columns: scope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: scope.FieldID,
			},
		},
		Type: "Scope",
		Fields: map[string]*sqlgraph.FieldSpec{
			scope.FieldCreateTime:  {Type: field.TypeTime, Column: scope.FieldCreateTime},
			scope.FieldCreateBy:    {Type: field.TypeUint64, Column: scope.FieldCreateBy},
			scope.FieldUpdateTime:  {Type: field.TypeTime, Column: scope.FieldUpdateTime},
			scope.FieldUpdateBy:    {Type: field.TypeUint64, Column: scope.FieldUpdateBy},
			scope.FieldDeleteTime:  {Type: field.TypeTime, Column: scope.FieldDeleteTime},
			scope.FieldDeleteBy:    {Type: field.TypeUint64, Column: scope.FieldDeleteBy},
			scope.FieldName:        {Type: field.TypeString, Column: scope.FieldName},
			scope.FieldType:        {Type: field.TypeEnum, Column: scope.FieldType},
			scope.FieldIcon:        {Type: field.TypeString, Column: scope.FieldIcon},
			scope.FieldDescription: {Type: field.TypeString, Column: scope.FieldDescription},
			scope.FieldAction:      {Type: field.TypeString, Column: scope.FieldAction},
			scope.FieldPath:        {Type: field.TypeString, Column: scope.FieldPath},
			scope.FieldComponent:   {Type: field.TypeString, Column: scope.FieldComponent},
			scope.FieldRedirect:    {Type: field.TypeString, Column: scope.FieldRedirect},
			scope.FieldOrder:       {Type: field.TypeInt, Column: scope.FieldOrder},
			scope.FieldHidden:      {Type: field.TypeBool, Column: scope.FieldHidden},
			scope.FieldDisabled:    {Type: field.TypeBool, Column: scope.FieldDisabled},
			scope.FieldParentID:    {Type: field.TypeUint64, Column: scope.FieldParentID},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   station.Table,
			Columns: station.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: station.FieldID,
			},
		},
		Type: "Station",
		Fields: map[string]*sqlgraph.FieldSpec{
			station.FieldCreateTime: {Type: field.TypeTime, Column: station.FieldCreateTime},
			station.FieldCreateBy:   {Type: field.TypeUint64, Column: station.FieldCreateBy},
			station.FieldUpdateTime: {Type: field.TypeTime, Column: station.FieldUpdateTime},
			station.FieldUpdateBy:   {Type: field.TypeUint64, Column: station.FieldUpdateBy},
			station.FieldDeleteTime: {Type: field.TypeTime, Column: station.FieldDeleteTime},
			station.FieldDeleteBy:   {Type: field.TypeUint64, Column: station.FieldDeleteBy},
			station.FieldName:       {Type: field.TypeString, Column: station.FieldName},
			station.FieldAreaID:     {Type: field.TypeUint64, Column: station.FieldAreaID},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subway.Table,
			Columns: subway.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subway.FieldID,
			},
		},
		Type: "Subway",
		Fields: map[string]*sqlgraph.FieldSpec{
			subway.FieldCreateTime: {Type: field.TypeTime, Column: subway.FieldCreateTime},
			subway.FieldCreateBy:   {Type: field.TypeUint64, Column: subway.FieldCreateBy},
			subway.FieldUpdateTime: {Type: field.TypeTime, Column: subway.FieldUpdateTime},
			subway.FieldUpdateBy:   {Type: field.TypeUint64, Column: subway.FieldUpdateBy},
			subway.FieldDeleteTime: {Type: field.TypeTime, Column: subway.FieldDeleteTime},
			subway.FieldDeleteBy:   {Type: field.TypeUint64, Column: subway.FieldDeleteBy},
			subway.FieldName:       {Type: field.TypeString, Column: subway.FieldName},
			subway.FieldAreaID:     {Type: field.TypeUint64, Column: subway.FieldAreaID},
			subway.FieldColor:      {Type: field.TypeString, Column: subway.FieldColor},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subwaystation.Table,
			Columns: subwaystation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subwaystation.FieldID,
			},
		},
		Type: "SubwayStation",
		Fields: map[string]*sqlgraph.FieldSpec{
			subwaystation.FieldCreateTime: {Type: field.TypeTime, Column: subwaystation.FieldCreateTime},
			subwaystation.FieldCreateBy:   {Type: field.TypeUint64, Column: subwaystation.FieldCreateBy},
			subwaystation.FieldUpdateTime: {Type: field.TypeTime, Column: subwaystation.FieldUpdateTime},
			subwaystation.FieldUpdateBy:   {Type: field.TypeUint64, Column: subwaystation.FieldUpdateBy},
			subwaystation.FieldDeleteTime: {Type: field.TypeTime, Column: subwaystation.FieldDeleteTime},
			subwaystation.FieldDeleteBy:   {Type: field.TypeUint64, Column: subwaystation.FieldDeleteBy},
			subwaystation.FieldStationID:  {Type: field.TypeUint64, Column: subwaystation.FieldStationID},
			subwaystation.FieldSubwayID:   {Type: field.TypeUint64, Column: subwaystation.FieldSubwayID},
			subwaystation.FieldSequence:   {Type: field.TypeInt, Column: subwaystation.FieldSequence},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemmonitor.Table,
			Columns: systemmonitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: systemmonitor.FieldID,
			},
		},
		Type: "SystemMonitor",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemmonitor.FieldCreateTime:         {Type: field.TypeTime, Column: systemmonitor.FieldCreateTime},
			systemmonitor.FieldCreateBy:           {Type: field.TypeUint64, Column: systemmonitor.FieldCreateBy},
			systemmonitor.FieldUpdateTime:         {Type: field.TypeTime, Column: systemmonitor.FieldUpdateTime},
			systemmonitor.FieldUpdateBy:           {Type: field.TypeUint64, Column: systemmonitor.FieldUpdateBy},
			systemmonitor.FieldCPUUsagePercent:    {Type: field.TypeFloat64, Column: systemmonitor.FieldCPUUsagePercent},
			systemmonitor.FieldCPUCores:           {Type: field.TypeInt, Column: systemmonitor.FieldCPUCores},
			systemmonitor.FieldMemoryTotal:        {Type: field.TypeUint64, Column: systemmonitor.FieldMemoryTotal},
			systemmonitor.FieldMemoryUsed:         {Type: field.TypeUint64, Column: systemmonitor.FieldMemoryUsed},
			systemmonitor.FieldMemoryFree:         {Type: field.TypeUint64, Column: systemmonitor.FieldMemoryFree},
			systemmonitor.FieldMemoryUsagePercent: {Type: field.TypeFloat64, Column: systemmonitor.FieldMemoryUsagePercent},
			systemmonitor.FieldDiskTotal:          {Type: field.TypeUint64, Column: systemmonitor.FieldDiskTotal},
			systemmonitor.FieldDiskUsed:           {Type: field.TypeUint64, Column: systemmonitor.FieldDiskUsed},
			systemmonitor.FieldDiskFree:           {Type: field.TypeUint64, Column: systemmonitor.FieldDiskFree},
			systemmonitor.FieldDiskUsagePercent:   {Type: field.TypeFloat64, Column: systemmonitor.FieldDiskUsagePercent},
			systemmonitor.FieldNetworkBytesSent:   {Type: field.TypeUint64, Column: systemmonitor.FieldNetworkBytesSent},
			systemmonitor.FieldNetworkBytesRecv:   {Type: field.TypeUint64, Column: systemmonitor.FieldNetworkBytesRecv},
			systemmonitor.FieldOs:                 {Type: field.TypeString, Column: systemmonitor.FieldOs},
			systemmonitor.FieldPlatform:           {Type: field.TypeString, Column: systemmonitor.FieldPlatform},
			systemmonitor.FieldPlatformVersion:    {Type: field.TypeString, Column: systemmonitor.FieldPlatformVersion},
			systemmonitor.FieldHostname:           {Type: field.TypeString, Column: systemmonitor.FieldHostname},
			systemmonitor.FieldGoroutinesCount:    {Type: field.TypeInt, Column: systemmonitor.FieldGoroutinesCount},
			systemmonitor.FieldHeapAlloc:          {Type: field.TypeUint64, Column: systemmonitor.FieldHeapAlloc},
			systemmonitor.FieldHeapSys:            {Type: field.TypeUint64, Column: systemmonitor.FieldHeapSys},
			systemmonitor.FieldGcCount:            {Type: field.TypeUint32, Column: systemmonitor.FieldGcCount},
			systemmonitor.FieldLoadAvg1:           {Type: field.TypeFloat64, Column: systemmonitor.FieldLoadAvg1},
			systemmonitor.FieldLoadAvg5:           {Type: field.TypeFloat64, Column: systemmonitor.FieldLoadAvg5},
			systemmonitor.FieldLoadAvg15:          {Type: field.TypeFloat64, Column: systemmonitor.FieldLoadAvg15},
			systemmonitor.FieldUptime:             {Type: field.TypeUint64, Column: systemmonitor.FieldUptime},
			systemmonitor.FieldRecordedAt:         {Type: field.TypeTime, Column: systemmonitor.FieldRecordedAt},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldCreateBy:   {Type: field.TypeUint64, Column: user.FieldCreateBy},
			user.FieldUpdateTime: {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUpdateBy:   {Type: field.TypeUint64, Column: user.FieldUpdateBy},
			user.FieldDeleteTime: {Type: field.TypeTime, Column: user.FieldDeleteTime},
			user.FieldDeleteBy:   {Type: field.TypeUint64, Column: user.FieldDeleteBy},
			user.FieldName:       {Type: field.TypeString, Column: user.FieldName},
			user.FieldAge:        {Type: field.TypeInt, Column: user.FieldAge},
			user.FieldSex:        {Type: field.TypeEnum, Column: user.FieldSex},
			user.FieldStatus:     {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldAvatarID:   {Type: field.TypeUint64, Column: user.FieldAvatarID},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userrole.FieldID,
			},
		},
		Type: "UserRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			userrole.FieldCreateTime: {Type: field.TypeTime, Column: userrole.FieldCreateTime},
			userrole.FieldCreateBy:   {Type: field.TypeUint64, Column: userrole.FieldCreateBy},
			userrole.FieldUpdateTime: {Type: field.TypeTime, Column: userrole.FieldUpdateTime},
			userrole.FieldUpdateBy:   {Type: field.TypeUint64, Column: userrole.FieldUpdateBy},
			userrole.FieldDeleteTime: {Type: field.TypeTime, Column: userrole.FieldDeleteTime},
			userrole.FieldDeleteBy:   {Type: field.TypeUint64, Column: userrole.FieldDeleteBy},
			userrole.FieldUserID:     {Type: field.TypeUint64, Column: userrole.FieldUserID},
			userrole.FieldRoleID:     {Type: field.TypeUint64, Column: userrole.FieldRoleID},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   verifycode.Table,
			Columns: verifycode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: verifycode.FieldID,
			},
		},
		Type: "VerifyCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			verifycode.FieldCreateTime:  {Type: field.TypeTime, Column: verifycode.FieldCreateTime},
			verifycode.FieldCreateBy:    {Type: field.TypeUint64, Column: verifycode.FieldCreateBy},
			verifycode.FieldUpdateTime:  {Type: field.TypeTime, Column: verifycode.FieldUpdateTime},
			verifycode.FieldUpdateBy:    {Type: field.TypeUint64, Column: verifycode.FieldUpdateBy},
			verifycode.FieldDeleteTime:  {Type: field.TypeTime, Column: verifycode.FieldDeleteTime},
			verifycode.FieldDeleteBy:    {Type: field.TypeUint64, Column: verifycode.FieldDeleteBy},
			verifycode.FieldCode:        {Type: field.TypeString, Column: verifycode.FieldCode},
			verifycode.FieldIdentifier:  {Type: field.TypeString, Column: verifycode.FieldIdentifier},
			verifycode.FieldSenderType:  {Type: field.TypeEnum, Column: verifycode.FieldSenderType},
			verifycode.FieldSendFor:     {Type: field.TypeString, Column: verifycode.FieldSendFor},
			verifycode.FieldExpiresAt:   {Type: field.TypeTime, Column: verifycode.FieldExpiresAt},
			verifycode.FieldUsedAt:      {Type: field.TypeTime, Column: verifycode.FieldUsedAt},
			verifycode.FieldSendSuccess: {Type: field.TypeBool, Column: verifycode.FieldSendSuccess},
			verifycode.FieldSendAt:      {Type: field.TypeTime, Column: verifycode.FieldSendAt},
			verifycode.FieldClientID:    {Type: field.TypeUint64, Column: verifycode.FieldClientID},
		},
	}
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiauth.PermissionsTable,
			Columns: apiauth.PermissionsPrimaryKey,
			Bidi:    false,
		},
		"APIAuth",
		"Permission",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.AreaTable,
			Columns: []string{address.AreaColumn},
			Bidi:    false,
		},
		"Address",
		"Area",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.ChildrenTable,
			Columns: []string{area.ChildrenColumn},
			Bidi:    false,
		},
		"Area",
		"Area",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   area.ParentTable,
			Columns: []string{area.ParentColumn},
			Bidi:    false,
		},
		"Area",
		"Area",
	)
	graph.MustAddE(
		"addresses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.AddressesTable,
			Columns: []string{area.AddressesColumn},
			Bidi:    false,
		},
		"Area",
		"Address",
	)
	graph.MustAddE(
		"stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.StationsTable,
			Columns: []string{area.StationsColumn},
			Bidi:    false,
		},
		"Area",
		"Station",
	)
	graph.MustAddE(
		"subways",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   area.SubwaysTable,
			Columns: []string{area.SubwaysColumn},
			Bidi:    false,
		},
		"Area",
		"Subway",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientdevice.RolesTable,
			Columns: clientdevice.RolesPrimaryKey,
			Bidi:    false,
		},
		"ClientDevice",
		"Role",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
		},
		"Credential",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
		},
		"LoginRecord",
		"User",
	)
	graph.MustAddE(
		"authorization_codes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.AuthorizationCodesTable,
			Columns: []string{oauthapplication.AuthorizationCodesColumn},
			Bidi:    false,
		},
		"OauthApplication",
		"OauthAuthorizationCode",
	)
	graph.MustAddE(
		"tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.TokensTable,
			Columns: []string{oauthapplication.TokensColumn},
			Bidi:    false,
		},
		"OauthApplication",
		"OauthToken",
	)
	graph.MustAddE(
		"user_authorizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthapplication.UserAuthorizationsTable,
			Columns: []string{oauthapplication.UserAuthorizationsColumn},
			Bidi:    false,
		},
		"OauthApplication",
		"OauthUserAuthorization",
	)
	graph.MustAddE(
		"application",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorizationcode.ApplicationTable,
			Columns: []string{oauthauthorizationcode.ApplicationColumn},
			Bidi:    false,
		},
		"OauthAuthorizationCode",
		"OauthApplication",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthauthorizationcode.UserTable,
			Columns: []string{oauthauthorizationcode.UserColumn},
			Bidi:    false,
		},
		"OauthAuthorizationCode",
		"User",
	)
	graph.MustAddE(
		"token",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthauthorizationcode.TokenTable,
			Columns: []string{oauthauthorizationcode.TokenColumn},
			Bidi:    false,
		},
		"OauthAuthorizationCode",
		"OauthToken",
	)
	graph.MustAddE(
		"user_authorization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthauthorizationcode.UserAuthorizationTable,
			Columns: []string{oauthauthorizationcode.UserAuthorizationColumn},
			Bidi:    false,
		},
		"OauthAuthorizationCode",
		"OauthUserAuthorization",
	)
	graph.MustAddE(
		"states",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.StatesTable,
			Columns: []string{oauthprovider.StatesColumn},
			Bidi:    false,
		},
		"OauthProvider",
		"OauthState",
	)
	graph.MustAddE(
		"oauth_users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthUsersTable,
			Columns: []string{oauthprovider.OauthUsersColumn},
			Bidi:    false,
		},
		"OauthProvider",
		"OauthUser",
	)
	graph.MustAddE(
		"provider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthstate.ProviderTable,
			Columns: []string{oauthstate.ProviderColumn},
			Bidi:    false,
		},
		"OauthState",
		"OauthProvider",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthstate.UserTable,
			Columns: []string{oauthstate.UserColumn},
			Bidi:    false,
		},
		"OauthState",
		"User",
	)
	graph.MustAddE(
		"oauth_users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthstate.OauthUsersTable,
			Columns: []string{oauthstate.OauthUsersColumn},
			Bidi:    false,
		},
		"OauthState",
		"OauthUser",
	)
	graph.MustAddE(
		"application",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ApplicationTable,
			Columns: []string{oauthtoken.ApplicationColumn},
			Bidi:    false,
		},
		"OauthToken",
		"OauthApplication",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
		},
		"OauthToken",
		"User",
	)
	graph.MustAddE(
		"authorization_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.AuthorizationCodeTable,
			Columns: []string{oauthtoken.AuthorizationCodeColumn},
			Bidi:    false,
		},
		"OauthToken",
		"OauthAuthorizationCode",
	)
	graph.MustAddE(
		"user_authorization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserAuthorizationTable,
			Columns: []string{oauthtoken.UserAuthorizationColumn},
			Bidi:    false,
		},
		"OauthToken",
		"OauthUserAuthorization",
	)
	graph.MustAddE(
		"provider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.ProviderTable,
			Columns: []string{oauthuser.ProviderColumn},
			Bidi:    false,
		},
		"OauthUser",
		"OauthProvider",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuser.UserTable,
			Columns: []string{oauthuser.UserColumn},
			Bidi:    false,
		},
		"OauthUser",
		"User",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthuser.StateTable,
			Columns: []string{oauthuser.StateColumn},
			Bidi:    false,
		},
		"OauthUser",
		"OauthState",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.UserTable,
			Columns: []string{oauthuserauthorization.UserColumn},
			Bidi:    false,
		},
		"OauthUserAuthorization",
		"User",
	)
	graph.MustAddE(
		"application",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthuserauthorization.ApplicationTable,
			Columns: []string{oauthuserauthorization.ApplicationColumn},
			Bidi:    false,
		},
		"OauthUserAuthorization",
		"OauthApplication",
	)
	graph.MustAddE(
		"code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.CodeTable,
			Columns: []string{oauthuserauthorization.CodeColumn},
			Bidi:    false,
		},
		"OauthUserAuthorization",
		"OauthAuthorizationCode",
	)
	graph.MustAddE(
		"token",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthuserauthorization.TokenTable,
			Columns: []string{oauthuserauthorization.TokenColumn},
			Bidi:    false,
		},
		"OauthUserAuthorization",
		"OauthToken",
	)
	graph.MustAddE(
		"role_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.RolePermissionsTable,
			Columns: []string{permission.RolePermissionsColumn},
			Bidi:    false,
		},
		"Permission",
		"RolePermission",
	)
	graph.MustAddE(
		"scope",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   permission.ScopeTable,
			Columns: []string{permission.ScopeColumn},
			Bidi:    false,
		},
		"Permission",
		"Scope",
	)
	graph.MustAddE(
		"api_auths",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.APIAuthsTable,
			Columns: permission.APIAuthsPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"APIAuth",
	)
	graph.MustAddE(
		"user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
		},
		"Role",
		"UserRole",
	)
	graph.MustAddE(
		"role_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RolePermissionsTable,
			Columns: []string{role.RolePermissionsColumn},
			Bidi:    false,
		},
		"Role",
		"RolePermission",
	)
	graph.MustAddE(
		"inherited_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.InheritedByTable,
			Columns: role.InheritedByPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"inherits_from",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.InheritsFromTable,
			Columns: role.InheritsFromPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"client_device",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.ClientDeviceTable,
			Columns: role.ClientDevicePrimaryKey,
			Bidi:    false,
		},
		"Role",
		"ClientDevice",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
		},
		"RolePermission",
		"Role",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
		},
		"RolePermission",
		"Permission",
	)
	graph.MustAddE(
		"attachment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.AttachmentTable,
			Columns: []string{scan.AttachmentColumn},
			Bidi:    false,
		},
		"Scan",
		"Attachment",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
		},
		"Scope",
		"Scope",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
		},
		"Scope",
		"Scope",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scope.PermissionTable,
			Columns: []string{scope.PermissionColumn},
			Bidi:    false,
		},
		"Scope",
		"Permission",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   station.AreaTable,
			Columns: []string{station.AreaColumn},
			Bidi:    false,
		},
		"Station",
		"Area",
	)
	graph.MustAddE(
		"subway_stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.SubwayStationsTable,
			Columns: []string{station.SubwayStationsColumn},
			Bidi:    false,
		},
		"Station",
		"SubwayStation",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subway.AreaTable,
			Columns: []string{subway.AreaColumn},
			Bidi:    false,
		},
		"Subway",
		"Area",
	)
	graph.MustAddE(
		"subway_stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subway.SubwayStationsTable,
			Columns: []string{subway.SubwayStationsColumn},
			Bidi:    false,
		},
		"Subway",
		"SubwayStation",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.StationTable,
			Columns: []string{subwaystation.StationColumn},
			Bidi:    false,
		},
		"SubwayStation",
		"Station",
	)
	graph.MustAddE(
		"subway",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.SubwayTable,
			Columns: []string{subwaystation.SubwayColumn},
			Bidi:    false,
		},
		"SubwayStation",
		"Subway",
	)
	graph.MustAddE(
		"user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
		},
		"User",
		"UserRole",
	)
	graph.MustAddE(
		"credentials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CredentialsTable,
			Columns: []string{user.CredentialsColumn},
			Bidi:    false,
		},
		"User",
		"Credential",
	)
	graph.MustAddE(
		"login_records",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginRecordsTable,
			Columns: []string{user.LoginRecordsColumn},
			Bidi:    false,
		},
		"User",
		"LoginRecord",
	)
	graph.MustAddE(
		"avatar",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarTable,
			Columns: []string{user.AvatarColumn},
			Bidi:    false,
		},
		"User",
		"Attachment",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
		},
		"UserRole",
		"User",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
		},
		"UserRole",
		"Role",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *APIAuthQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the APIAuthQuery builder.
func (_q *APIAuthQuery) Filter() *APIAuthFilter {
	return &APIAuthFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *APIAuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the APIAuthMutation builder.
func (m *APIAuthMutation) Filter() *APIAuthFilter {
	return &APIAuthFilter{config: m.config, predicateAdder: m}
}

// APIAuthFilter provides a generic filtering capability at runtime for APIAuthQuery.
type APIAuthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *APIAuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *APIAuthFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(apiauth.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *APIAuthFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(apiauth.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *APIAuthFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(apiauth.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *APIAuthFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(apiauth.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *APIAuthFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(apiauth.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *APIAuthFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(apiauth.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *APIAuthFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(apiauth.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *APIAuthFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apiauth.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *APIAuthFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(apiauth.FieldDescription))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *APIAuthFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(apiauth.FieldMethod))
}

// WherePath applies the entql string predicate on the path field.
func (f *APIAuthFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(apiauth.FieldPath))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *APIAuthFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(apiauth.FieldIsPublic))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *APIAuthFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(apiauth.FieldIsActive))
}

// WhereType applies the entql string predicate on the type field.
func (f *APIAuthFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(apiauth.FieldType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *APIAuthFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(apiauth.FieldMetadata))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *APIAuthFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *APIAuthFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AddressQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AddressQuery builder.
func (_q *AddressQuery) Filter() *AddressFilter {
	return &AddressFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AddressMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AddressMutation builder.
func (m *AddressMutation) Filter() *AddressFilter {
	return &AddressFilter{config: m.config, predicateAdder: m}
}

// AddressFilter provides a generic filtering capability at runtime for AddressQuery.
type AddressFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AddressFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AddressFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(address.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AddressFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(address.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *AddressFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(address.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AddressFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(address.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *AddressFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(address.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AddressFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(address.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *AddressFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(address.FieldDeleteBy))
}

// WhereDetail applies the entql string predicate on the detail field.
func (f *AddressFilter) WhereDetail(p entql.StringP) {
	f.Where(p.Field(address.FieldDetail))
}

// WhereAreaID applies the entql uint64 predicate on the area_id field.
func (f *AddressFilter) WhereAreaID(p entql.Uint64P) {
	f.Where(p.Field(address.FieldAreaID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *AddressFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(address.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *AddressFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(address.FieldName))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *AddressFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(address.FieldIsDefault))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AddressFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(address.FieldRemark))
}

// WhereEntity applies the entql string predicate on the entity field.
func (f *AddressFilter) WhereEntity(p entql.StringP) {
	f.Where(p.Field(address.FieldEntity))
}

// WhereEntityID applies the entql string predicate on the entity_id field.
func (f *AddressFilter) WhereEntityID(p entql.StringP) {
	f.Where(p.Field(address.FieldEntityID))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *AddressFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *AddressFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AreaQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AreaQuery builder.
func (_q *AreaQuery) Filter() *AreaFilter {
	return &AreaFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AreaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AreaMutation builder.
func (m *AreaMutation) Filter() *AreaFilter {
	return &AreaFilter{config: m.config, predicateAdder: m}
}

// AreaFilter provides a generic filtering capability at runtime for AreaQuery.
type AreaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AreaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AreaFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(area.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AreaFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *AreaFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(area.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AreaFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *AreaFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(area.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AreaFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(area.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *AreaFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(area.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *AreaFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(area.FieldName))
}

// WhereSpell applies the entql string predicate on the spell field.
func (f *AreaFilter) WhereSpell(p entql.StringP) {
	f.Where(p.Field(area.FieldSpell))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *AreaFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(area.FieldLevel))
}

// WhereDepth applies the entql int predicate on the depth field.
func (f *AreaFilter) WhereDepth(p entql.IntP) {
	f.Where(p.Field(area.FieldDepth))
}

// WhereCode applies the entql string predicate on the code field.
func (f *AreaFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(area.FieldCode))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *AreaFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(area.FieldLatitude))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *AreaFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(area.FieldLongitude))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *AreaFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(area.FieldParentID))
}

// WhereColor applies the entql string predicate on the color field.
func (f *AreaFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(area.FieldColor))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *AreaFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *AreaFilter) WhereHasChildrenWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *AreaFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *AreaFilter) WhereHasParentWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddresses applies a predicate to check if query has an edge addresses.
func (f *AreaFilter) WhereHasAddresses() {
	f.Where(entql.HasEdge("addresses"))
}

// WhereHasAddressesWith applies a predicate to check if query has an edge addresses with a given conditions (other predicates).
func (f *AreaFilter) WhereHasAddressesWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("addresses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStations applies a predicate to check if query has an edge stations.
func (f *AreaFilter) WhereHasStations() {
	f.Where(entql.HasEdge("stations"))
}

// WhereHasStationsWith applies a predicate to check if query has an edge stations with a given conditions (other predicates).
func (f *AreaFilter) WhereHasStationsWith(preds ...predicate.Station) {
	f.Where(entql.HasEdgeWith("stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubways applies a predicate to check if query has an edge subways.
func (f *AreaFilter) WhereHasSubways() {
	f.Where(entql.HasEdge("subways"))
}

// WhereHasSubwaysWith applies a predicate to check if query has an edge subways with a given conditions (other predicates).
func (f *AreaFilter) WhereHasSubwaysWith(preds ...predicate.Subway) {
	f.Where(entql.HasEdgeWith("subways", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AttachmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AttachmentQuery builder.
func (_q *AttachmentQuery) Filter() *AttachmentFilter {
	return &AttachmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AttachmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AttachmentMutation builder.
func (m *AttachmentMutation) Filter() *AttachmentFilter {
	return &AttachmentFilter{config: m.config, predicateAdder: m}
}

// AttachmentFilter provides a generic filtering capability at runtime for AttachmentQuery.
type AttachmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AttachmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AttachmentFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(attachment.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AttachmentFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *AttachmentFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(attachment.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AttachmentFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *AttachmentFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(attachment.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *AttachmentFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(attachment.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *AttachmentFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(attachment.FieldDeleteBy))
}

// WhereFilename applies the entql string predicate on the filename field.
func (f *AttachmentFilter) WhereFilename(p entql.StringP) {
	f.Where(p.Field(attachment.FieldFilename))
}

// WherePath applies the entql string predicate on the path field.
func (f *AttachmentFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(attachment.FieldPath))
}

// WhereURL applies the entql string predicate on the url field.
func (f *AttachmentFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(attachment.FieldURL))
}

// WhereContentType applies the entql string predicate on the content_type field.
func (f *AttachmentFilter) WhereContentType(p entql.StringP) {
	f.Where(p.Field(attachment.FieldContentType))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *AttachmentFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(attachment.FieldSize))
}

// WhereEtag applies the entql string predicate on the etag field.
func (f *AttachmentFilter) WhereEtag(p entql.StringP) {
	f.Where(p.Field(attachment.FieldEtag))
}

// WhereBucket applies the entql string predicate on the bucket field.
func (f *AttachmentFilter) WhereBucket(p entql.StringP) {
	f.Where(p.Field(attachment.FieldBucket))
}

// WhereStorageProvider applies the entql string predicate on the storage_provider field.
func (f *AttachmentFilter) WhereStorageProvider(p entql.StringP) {
	f.Where(p.Field(attachment.FieldStorageProvider))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *AttachmentFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(attachment.FieldMetadata))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *AttachmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(attachment.FieldStatus))
}

// WhereUploadSessionID applies the entql string predicate on the upload_session_id field.
func (f *AttachmentFilter) WhereUploadSessionID(p entql.StringP) {
	f.Where(p.Field(attachment.FieldUploadSessionID))
}

// WhereTag1 applies the entql string predicate on the tag1 field.
func (f *AttachmentFilter) WhereTag1(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag1))
}

// WhereTag2 applies the entql string predicate on the tag2 field.
func (f *AttachmentFilter) WhereTag2(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag2))
}

// WhereTag3 applies the entql string predicate on the tag3 field.
func (f *AttachmentFilter) WhereTag3(p entql.StringP) {
	f.Where(p.Field(attachment.FieldTag3))
}

// addPredicate implements the predicateAdder interface.
func (_q *ClientDeviceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ClientDeviceQuery builder.
func (_q *ClientDeviceQuery) Filter() *ClientDeviceFilter {
	return &ClientDeviceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ClientDeviceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ClientDeviceMutation builder.
func (m *ClientDeviceMutation) Filter() *ClientDeviceFilter {
	return &ClientDeviceFilter{config: m.config, predicateAdder: m}
}

// ClientDeviceFilter provides a generic filtering capability at runtime for ClientDeviceQuery.
type ClientDeviceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ClientDeviceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ClientDeviceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ClientDeviceFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(clientdevice.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *ClientDeviceFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ClientDeviceFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(clientdevice.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *ClientDeviceFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *ClientDeviceFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(clientdevice.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *ClientDeviceFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *ClientDeviceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(clientdevice.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ClientDeviceFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(clientdevice.FieldCode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ClientDeviceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(clientdevice.FieldDescription))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *ClientDeviceFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(clientdevice.FieldEnabled))
}

// WhereAccessTokenExpiry applies the entql uint64 predicate on the access_token_expiry field.
func (f *ClientDeviceFilter) WhereAccessTokenExpiry(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldAccessTokenExpiry))
}

// WhereRefreshTokenExpiry applies the entql uint64 predicate on the refresh_token_expiry field.
func (f *ClientDeviceFilter) WhereRefreshTokenExpiry(p entql.Uint64P) {
	f.Where(p.Field(clientdevice.FieldRefreshTokenExpiry))
}

// WhereAnonymous applies the entql bool predicate on the anonymous field.
func (f *ClientDeviceFilter) WhereAnonymous(p entql.BoolP) {
	f.Where(p.Field(clientdevice.FieldAnonymous))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *ClientDeviceFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *ClientDeviceFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *CredentialQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CredentialQuery builder.
func (_q *CredentialQuery) Filter() *CredentialFilter {
	return &CredentialFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CredentialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CredentialMutation builder.
func (m *CredentialMutation) Filter() *CredentialFilter {
	return &CredentialFilter{config: m.config, predicateAdder: m}
}

// CredentialFilter provides a generic filtering capability at runtime for CredentialQuery.
type CredentialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CredentialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CredentialFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *CredentialFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *CredentialFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *CredentialFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *CredentialFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *CredentialFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(credential.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *CredentialFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldDeleteBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *CredentialFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(credential.FieldUserID))
}

// WhereCredentialType applies the entql string predicate on the credential_type field.
func (f *CredentialFilter) WhereCredentialType(p entql.StringP) {
	f.Where(p.Field(credential.FieldCredentialType))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *CredentialFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(credential.FieldIdentifier))
}

// WhereSecret applies the entql string predicate on the secret field.
func (f *CredentialFilter) WhereSecret(p entql.StringP) {
	f.Where(p.Field(credential.FieldSecret))
}

// WhereSalt applies the entql string predicate on the salt field.
func (f *CredentialFilter) WhereSalt(p entql.StringP) {
	f.Where(p.Field(credential.FieldSalt))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *CredentialFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(credential.FieldProvider))
}

// WhereIsVerified applies the entql bool predicate on the is_verified field.
func (f *CredentialFilter) WhereIsVerified(p entql.BoolP) {
	f.Where(p.Field(credential.FieldIsVerified))
}

// WhereVerifiedAt applies the entql time.Time predicate on the verified_at field.
func (f *CredentialFilter) WhereVerifiedAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldVerifiedAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *CredentialFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldLastUsedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *CredentialFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(credential.FieldExpiresAt))
}

// WhereFailedAttempts applies the entql int predicate on the failed_attempts field.
func (f *CredentialFilter) WhereFailedAttempts(p entql.IntP) {
	f.Where(p.Field(credential.FieldFailedAttempts))
}

// WhereLockedUntil applies the entql time.Time predicate on the locked_until field.
func (f *CredentialFilter) WhereLockedUntil(p entql.TimeP) {
	f.Where(p.Field(credential.FieldLockedUntil))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *CredentialFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(credential.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *CredentialFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *CredentialFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *LoggingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoggingQuery builder.
func (_q *LoggingQuery) Filter() *LoggingFilter {
	return &LoggingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *LoggingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoggingMutation builder.
func (m *LoggingMutation) Filter() *LoggingFilter {
	return &LoggingFilter{config: m.config, predicateAdder: m}
}

// LoggingFilter provides a generic filtering capability at runtime for LoggingQuery.
type LoggingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoggingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *LoggingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(logging.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *LoggingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *LoggingFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(logging.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *LoggingFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *LoggingFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(logging.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *LoggingFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(logging.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *LoggingFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(logging.FieldDeleteBy))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *LoggingFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(logging.FieldLevel))
}

// WhereType applies the entql string predicate on the type field.
func (f *LoggingFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(logging.FieldType))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *LoggingFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(logging.FieldMessage))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *LoggingFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(logging.FieldMethod))
}

// WherePath applies the entql string predicate on the path field.
func (f *LoggingFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(logging.FieldPath))
}

// WhereIP applies the entql string predicate on the ip field.
func (f *LoggingFilter) WhereIP(p entql.StringP) {
	f.Where(p.Field(logging.FieldIP))
}

// WhereQuery applies the entql string predicate on the query field.
func (f *LoggingFilter) WhereQuery(p entql.StringP) {
	f.Where(p.Field(logging.FieldQuery))
}

// WhereCode applies the entql int predicate on the code field.
func (f *LoggingFilter) WhereCode(p entql.IntP) {
	f.Where(p.Field(logging.FieldCode))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *LoggingFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(logging.FieldUserAgent))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *LoggingFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(logging.FieldData))
}

// WhereStack applies the entql string predicate on the stack field.
func (f *LoggingFilter) WhereStack(p entql.StringP) {
	f.Where(p.Field(logging.FieldStack))
}

// addPredicate implements the predicateAdder interface.
func (_q *LoginRecordQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoginRecordQuery builder.
func (_q *LoginRecordQuery) Filter() *LoginRecordFilter {
	return &LoginRecordFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *LoginRecordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoginRecordMutation builder.
func (m *LoginRecordMutation) Filter() *LoginRecordFilter {
	return &LoginRecordFilter{config: m.config, predicateAdder: m}
}

// LoginRecordFilter provides a generic filtering capability at runtime for LoginRecordQuery.
type LoginRecordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoginRecordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *LoginRecordFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(loginrecord.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *LoginRecordFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(loginrecord.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *LoginRecordFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(loginrecord.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *LoginRecordFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(loginrecord.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *LoginRecordFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(loginrecord.FieldUpdateBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *LoginRecordFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(loginrecord.FieldUserID))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *LoginRecordFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldIdentifier))
}

// WhereCredentialType applies the entql string predicate on the credential_type field.
func (f *LoginRecordFilter) WhereCredentialType(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldCredentialType))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *LoginRecordFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *LoginRecordFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldUserAgent))
}

// WhereDeviceInfo applies the entql string predicate on the device_info field.
func (f *LoginRecordFilter) WhereDeviceInfo(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldDeviceInfo))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *LoginRecordFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldLocation))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *LoginRecordFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldStatus))
}

// WhereFailureReason applies the entql string predicate on the failure_reason field.
func (f *LoginRecordFilter) WhereFailureReason(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldFailureReason))
}

// WhereSessionID applies the entql string predicate on the session_id field.
func (f *LoginRecordFilter) WhereSessionID(p entql.StringP) {
	f.Where(p.Field(loginrecord.FieldSessionID))
}

// WhereLogoutTime applies the entql time.Time predicate on the logout_time field.
func (f *LoginRecordFilter) WhereLogoutTime(p entql.TimeP) {
	f.Where(p.Field(loginrecord.FieldLogoutTime))
}

// WhereDuration applies the entql int predicate on the duration field.
func (f *LoginRecordFilter) WhereDuration(p entql.IntP) {
	f.Where(p.Field(loginrecord.FieldDuration))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *LoginRecordFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(loginrecord.FieldMetadata))
}

// WhereClientID applies the entql uint64 predicate on the client_id field.
func (f *LoginRecordFilter) WhereClientID(p entql.Uint64P) {
	f.Where(p.Field(loginrecord.FieldClientID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *LoginRecordFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *LoginRecordFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthApplicationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthApplicationQuery builder.
func (_q *OauthApplicationQuery) Filter() *OauthApplicationFilter {
	return &OauthApplicationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthApplicationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthApplicationMutation builder.
func (m *OauthApplicationMutation) Filter() *OauthApplicationFilter {
	return &OauthApplicationFilter{config: m.config, predicateAdder: m}
}

// OauthApplicationFilter provides a generic filtering capability at runtime for OauthApplicationQuery.
type OauthApplicationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthApplicationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthApplicationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthapplication.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthApplicationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthapplication.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthApplicationFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthapplication.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthApplicationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthapplication.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthApplicationFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthapplication.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthApplicationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthapplication.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthApplicationFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthapplication.FieldDeleteBy))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OauthApplicationFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthapplication.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OauthApplicationFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthapplication.FieldClientSecret))
}

// WhereName applies the entql string predicate on the name field.
func (f *OauthApplicationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthapplication.FieldName))
}

// WhereRedirectUris applies the entql json.RawMessage predicate on the redirect_uris field.
func (f *OauthApplicationFilter) WhereRedirectUris(p entql.BytesP) {
	f.Where(p.Field(oauthapplication.FieldRedirectUris))
}

// WhereIsConfidential applies the entql bool predicate on the is_confidential field.
func (f *OauthApplicationFilter) WhereIsConfidential(p entql.BoolP) {
	f.Where(p.Field(oauthapplication.FieldIsConfidential))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *OauthApplicationFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(oauthapplication.FieldScopes))
}

// WhereAbleState applies the entql string predicate on the able_state field.
func (f *OauthApplicationFilter) WhereAbleState(p entql.StringP) {
	f.Where(p.Field(oauthapplication.FieldAbleState))
}

// WhereSystemID applies the entql uint64 predicate on the system_id field.
func (f *OauthApplicationFilter) WhereSystemID(p entql.Uint64P) {
	f.Where(p.Field(oauthapplication.FieldSystemID))
}

// WhereHasAuthorizationCodes applies a predicate to check if query has an edge authorization_codes.
func (f *OauthApplicationFilter) WhereHasAuthorizationCodes() {
	f.Where(entql.HasEdge("authorization_codes"))
}

// WhereHasAuthorizationCodesWith applies a predicate to check if query has an edge authorization_codes with a given conditions (other predicates).
func (f *OauthApplicationFilter) WhereHasAuthorizationCodesWith(preds ...predicate.OauthAuthorizationCode) {
	f.Where(entql.HasEdgeWith("authorization_codes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTokens applies a predicate to check if query has an edge tokens.
func (f *OauthApplicationFilter) WhereHasTokens() {
	f.Where(entql.HasEdge("tokens"))
}

// WhereHasTokensWith applies a predicate to check if query has an edge tokens with a given conditions (other predicates).
func (f *OauthApplicationFilter) WhereHasTokensWith(preds ...predicate.OauthToken) {
	f.Where(entql.HasEdgeWith("tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserAuthorizations applies a predicate to check if query has an edge user_authorizations.
func (f *OauthApplicationFilter) WhereHasUserAuthorizations() {
	f.Where(entql.HasEdge("user_authorizations"))
}

// WhereHasUserAuthorizationsWith applies a predicate to check if query has an edge user_authorizations with a given conditions (other predicates).
func (f *OauthApplicationFilter) WhereHasUserAuthorizationsWith(preds ...predicate.OauthUserAuthorization) {
	f.Where(entql.HasEdgeWith("user_authorizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthAuthorizationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthAuthorizationCodeQuery builder.
func (_q *OauthAuthorizationCodeQuery) Filter() *OauthAuthorizationCodeFilter {
	return &OauthAuthorizationCodeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthAuthorizationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthAuthorizationCodeMutation builder.
func (m *OauthAuthorizationCodeMutation) Filter() *OauthAuthorizationCodeFilter {
	return &OauthAuthorizationCodeFilter{config: m.config, predicateAdder: m}
}

// OauthAuthorizationCodeFilter provides a generic filtering capability at runtime for OauthAuthorizationCodeQuery.
type OauthAuthorizationCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthAuthorizationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthAuthorizationCodeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthAuthorizationCodeFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthauthorizationcode.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthAuthorizationCodeFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthAuthorizationCodeFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthauthorizationcode.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthAuthorizationCodeFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthAuthorizationCodeFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthauthorizationcode.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthAuthorizationCodeFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldDeleteBy))
}

// WhereCode applies the entql string predicate on the code field.
func (f *OauthAuthorizationCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(oauthauthorizationcode.FieldCode))
}

// WhereApplicationID applies the entql uint64 predicate on the application_id field.
func (f *OauthAuthorizationCodeFilter) WhereApplicationID(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldApplicationID))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *OauthAuthorizationCodeFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(oauthauthorizationcode.FieldUserID))
}

// WhereRedirectURI applies the entql string predicate on the redirect_uri field.
func (f *OauthAuthorizationCodeFilter) WhereRedirectURI(p entql.StringP) {
	f.Where(p.Field(oauthauthorizationcode.FieldRedirectURI))
}

// WhereScope applies the entql json.RawMessage predicate on the scope field.
func (f *OauthAuthorizationCodeFilter) WhereScope(p entql.BytesP) {
	f.Where(p.Field(oauthauthorizationcode.FieldScope))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OauthAuthorizationCodeFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorizationcode.FieldExpiresAt))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *OauthAuthorizationCodeFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorizationcode.FieldUsedAt))
}

// WhereCodeChallenge applies the entql string predicate on the code_challenge field.
func (f *OauthAuthorizationCodeFilter) WhereCodeChallenge(p entql.StringP) {
	f.Where(p.Field(oauthauthorizationcode.FieldCodeChallenge))
}

// WhereCodeChallengeMethod applies the entql string predicate on the code_challenge_method field.
func (f *OauthAuthorizationCodeFilter) WhereCodeChallengeMethod(p entql.StringP) {
	f.Where(p.Field(oauthauthorizationcode.FieldCodeChallengeMethod))
}

// WhereHasApplication applies a predicate to check if query has an edge application.
func (f *OauthAuthorizationCodeFilter) WhereHasApplication() {
	f.Where(entql.HasEdge("application"))
}

// WhereHasApplicationWith applies a predicate to check if query has an edge application with a given conditions (other predicates).
func (f *OauthAuthorizationCodeFilter) WhereHasApplicationWith(preds ...predicate.OauthApplication) {
	f.Where(entql.HasEdgeWith("application", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OauthAuthorizationCodeFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OauthAuthorizationCodeFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasToken applies a predicate to check if query has an edge token.
func (f *OauthAuthorizationCodeFilter) WhereHasToken() {
	f.Where(entql.HasEdge("token"))
}

// WhereHasTokenWith applies a predicate to check if query has an edge token with a given conditions (other predicates).
func (f *OauthAuthorizationCodeFilter) WhereHasTokenWith(preds ...predicate.OauthToken) {
	f.Where(entql.HasEdgeWith("token", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserAuthorization applies a predicate to check if query has an edge user_authorization.
func (f *OauthAuthorizationCodeFilter) WhereHasUserAuthorization() {
	f.Where(entql.HasEdge("user_authorization"))
}

// WhereHasUserAuthorizationWith applies a predicate to check if query has an edge user_authorization with a given conditions (other predicates).
func (f *OauthAuthorizationCodeFilter) WhereHasUserAuthorizationWith(preds ...predicate.OauthUserAuthorization) {
	f.Where(entql.HasEdgeWith("user_authorization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthProviderQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthProviderQuery builder.
func (_q *OauthProviderQuery) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthProviderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthProviderMutation builder.
func (m *OauthProviderMutation) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: m.config, predicateAdder: m}
}

// OauthProviderFilter provides a generic filtering capability at runtime for OauthProviderQuery.
type OauthProviderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthProviderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthProviderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthprovider.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthProviderFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthProviderFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthprovider.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthProviderFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthProviderFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthprovider.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthProviderFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthProviderFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthprovider.FieldDeleteBy))
}

// WhereType applies the entql string predicate on the type field.
func (f *OauthProviderFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldType))
}

// WhereName applies the entql string predicate on the name field.
func (f *OauthProviderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldName))
}

// WhereAuthorizationEndpoint applies the entql string predicate on the authorization_endpoint field.
func (f *OauthProviderFilter) WhereAuthorizationEndpoint(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldAuthorizationEndpoint))
}

// WhereTokenEndpoint applies the entql string predicate on the token_endpoint field.
func (f *OauthProviderFilter) WhereTokenEndpoint(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldTokenEndpoint))
}

// WhereUserInfoEndpoint applies the entql string predicate on the user_info_endpoint field.
func (f *OauthProviderFilter) WhereUserInfoEndpoint(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldUserInfoEndpoint))
}

// WhereRevokeEndpoint applies the entql string predicate on the revoke_endpoint field.
func (f *OauthProviderFilter) WhereRevokeEndpoint(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldRevokeEndpoint))
}

// WhereRefreshEndpoint applies the entql string predicate on the refresh_endpoint field.
func (f *OauthProviderFilter) WhereRefreshEndpoint(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldRefreshEndpoint))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OauthProviderFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OauthProviderFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientSecret))
}

// WhereRedirectURI applies the entql string predicate on the redirect_uri field.
func (f *OauthProviderFilter) WhereRedirectURI(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldRedirectURI))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *OauthProviderFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(oauthprovider.FieldScopes))
}

// WhereAutoRegister applies the entql bool predicate on the auto_register field.
func (f *OauthProviderFilter) WhereAutoRegister(p entql.BoolP) {
	f.Where(p.Field(oauthprovider.FieldAutoRegister))
}

// WhereAbleState applies the entql string predicate on the able_state field.
func (f *OauthProviderFilter) WhereAbleState(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldAbleState))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *OauthProviderFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(oauthprovider.FieldMetadata))
}

// WhereHasStates applies a predicate to check if query has an edge states.
func (f *OauthProviderFilter) WhereHasStates() {
	f.Where(entql.HasEdge("states"))
}

// WhereHasStatesWith applies a predicate to check if query has an edge states with a given conditions (other predicates).
func (f *OauthProviderFilter) WhereHasStatesWith(preds ...predicate.OauthState) {
	f.Where(entql.HasEdgeWith("states", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthUsers applies a predicate to check if query has an edge oauth_users.
func (f *OauthProviderFilter) WhereHasOauthUsers() {
	f.Where(entql.HasEdge("oauth_users"))
}

// WhereHasOauthUsersWith applies a predicate to check if query has an edge oauth_users with a given conditions (other predicates).
func (f *OauthProviderFilter) WhereHasOauthUsersWith(preds ...predicate.OauthUser) {
	f.Where(entql.HasEdgeWith("oauth_users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthStateQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthStateQuery builder.
func (_q *OauthStateQuery) Filter() *OauthStateFilter {
	return &OauthStateFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthStateMutation builder.
func (m *OauthStateMutation) Filter() *OauthStateFilter {
	return &OauthStateFilter{config: m.config, predicateAdder: m}
}

// OauthStateFilter provides a generic filtering capability at runtime for OauthStateQuery.
type OauthStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthStateFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthStateFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthstate.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthStateFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthStateFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthstate.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthStateFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthStateFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthstate.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthStateFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldDeleteBy))
}

// WhereState applies the entql string predicate on the state field.
func (f *OauthStateFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(oauthstate.FieldState))
}

// WhereType applies the entql string predicate on the type field.
func (f *OauthStateFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(oauthstate.FieldType))
}

// WhereProviderID applies the entql uint64 predicate on the provider_id field.
func (f *OauthStateFilter) WhereProviderID(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldProviderID))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *OauthStateFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(oauthstate.FieldUserID))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OauthStateFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthstate.FieldExpiresAt))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *OauthStateFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(oauthstate.FieldUsedAt))
}

// WhereHasProvider applies a predicate to check if query has an edge provider.
func (f *OauthStateFilter) WhereHasProvider() {
	f.Where(entql.HasEdge("provider"))
}

// WhereHasProviderWith applies a predicate to check if query has an edge provider with a given conditions (other predicates).
func (f *OauthStateFilter) WhereHasProviderWith(preds ...predicate.OauthProvider) {
	f.Where(entql.HasEdgeWith("provider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OauthStateFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OauthStateFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthUsers applies a predicate to check if query has an edge oauth_users.
func (f *OauthStateFilter) WhereHasOauthUsers() {
	f.Where(entql.HasEdge("oauth_users"))
}

// WhereHasOauthUsersWith applies a predicate to check if query has an edge oauth_users with a given conditions (other predicates).
func (f *OauthStateFilter) WhereHasOauthUsersWith(preds ...predicate.OauthUser) {
	f.Where(entql.HasEdgeWith("oauth_users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthTokenQuery builder.
func (_q *OauthTokenQuery) Filter() *OauthTokenFilter {
	return &OauthTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthTokenMutation builder.
func (m *OauthTokenMutation) Filter() *OauthTokenFilter {
	return &OauthTokenFilter{config: m.config, predicateAdder: m}
}

// OauthTokenFilter provides a generic filtering capability at runtime for OauthTokenQuery.
type OauthTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthTokenFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthTokenFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthTokenFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthTokenFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthTokenFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthTokenFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthTokenFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldDeleteBy))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *OauthTokenFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *OauthTokenFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldRefreshToken))
}

// WhereApplicationID applies the entql uint64 predicate on the application_id field.
func (f *OauthTokenFilter) WhereApplicationID(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldApplicationID))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *OauthTokenFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(oauthtoken.FieldUserID))
}

// WhereScope applies the entql json.RawMessage predicate on the scope field.
func (f *OauthTokenFilter) WhereScope(p entql.BytesP) {
	f.Where(p.Field(oauthtoken.FieldScope))
}

// WhereAccessExpiresAt applies the entql time.Time predicate on the access_expires_at field.
func (f *OauthTokenFilter) WhereAccessExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldAccessExpiresAt))
}

// WhereRefreshExpiresAt applies the entql time.Time predicate on the refresh_expires_at field.
func (f *OauthTokenFilter) WhereRefreshExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldRefreshExpiresAt))
}

// WhereRevokedAt applies the entql time.Time predicate on the revoked_at field.
func (f *OauthTokenFilter) WhereRevokedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldRevokedAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *OauthTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldLastUsedAt))
}

// WhereHasApplication applies a predicate to check if query has an edge application.
func (f *OauthTokenFilter) WhereHasApplication() {
	f.Where(entql.HasEdge("application"))
}

// WhereHasApplicationWith applies a predicate to check if query has an edge application with a given conditions (other predicates).
func (f *OauthTokenFilter) WhereHasApplicationWith(preds ...predicate.OauthApplication) {
	f.Where(entql.HasEdgeWith("application", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OauthTokenFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OauthTokenFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuthorizationCode applies a predicate to check if query has an edge authorization_code.
func (f *OauthTokenFilter) WhereHasAuthorizationCode() {
	f.Where(entql.HasEdge("authorization_code"))
}

// WhereHasAuthorizationCodeWith applies a predicate to check if query has an edge authorization_code with a given conditions (other predicates).
func (f *OauthTokenFilter) WhereHasAuthorizationCodeWith(preds ...predicate.OauthAuthorizationCode) {
	f.Where(entql.HasEdgeWith("authorization_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserAuthorization applies a predicate to check if query has an edge user_authorization.
func (f *OauthTokenFilter) WhereHasUserAuthorization() {
	f.Where(entql.HasEdge("user_authorization"))
}

// WhereHasUserAuthorizationWith applies a predicate to check if query has an edge user_authorization with a given conditions (other predicates).
func (f *OauthTokenFilter) WhereHasUserAuthorizationWith(preds ...predicate.OauthUserAuthorization) {
	f.Where(entql.HasEdgeWith("user_authorization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthUserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthUserQuery builder.
func (_q *OauthUserQuery) Filter() *OauthUserFilter {
	return &OauthUserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthUserMutation builder.
func (m *OauthUserMutation) Filter() *OauthUserFilter {
	return &OauthUserFilter{config: m.config, predicateAdder: m}
}

// OauthUserFilter provides a generic filtering capability at runtime for OauthUserQuery.
type OauthUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthUserFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthUserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthuser.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthUserFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthUserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthuser.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthUserFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthUserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthuser.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthUserFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldDeleteBy))
}

// WhereProviderID applies the entql uint64 predicate on the provider_id field.
func (f *OauthUserFilter) WhereProviderID(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldProviderID))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *OauthUserFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldUserID))
}

// WhereStateID applies the entql uint64 predicate on the state_id field.
func (f *OauthUserFilter) WhereStateID(p entql.Uint64P) {
	f.Where(p.Field(oauthuser.FieldStateID))
}

// WhereProviderUserID applies the entql string predicate on the provider_user_id field.
func (f *OauthUserFilter) WhereProviderUserID(p entql.StringP) {
	f.Where(p.Field(oauthuser.FieldProviderUserID))
}

// WhereRawUserInfo applies the entql json.RawMessage predicate on the raw_user_info field.
func (f *OauthUserFilter) WhereRawUserInfo(p entql.BytesP) {
	f.Where(p.Field(oauthuser.FieldRawUserInfo))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *OauthUserFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(oauthuser.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *OauthUserFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(oauthuser.FieldRefreshToken))
}

// WhereAccessExpiresAt applies the entql time.Time predicate on the access_expires_at field.
func (f *OauthUserFilter) WhereAccessExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthuser.FieldAccessExpiresAt))
}

// WhereRefreshExpiresAt applies the entql time.Time predicate on the refresh_expires_at field.
func (f *OauthUserFilter) WhereRefreshExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthuser.FieldRefreshExpiresAt))
}

// WhereLoadState applies the entql string predicate on the load_state field.
func (f *OauthUserFilter) WhereLoadState(p entql.StringP) {
	f.Where(p.Field(oauthuser.FieldLoadState))
}

// WhereHasProvider applies a predicate to check if query has an edge provider.
func (f *OauthUserFilter) WhereHasProvider() {
	f.Where(entql.HasEdge("provider"))
}

// WhereHasProviderWith applies a predicate to check if query has an edge provider with a given conditions (other predicates).
func (f *OauthUserFilter) WhereHasProviderWith(preds ...predicate.OauthProvider) {
	f.Where(entql.HasEdgeWith("provider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OauthUserFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OauthUserFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *OauthUserFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *OauthUserFilter) WhereHasStateWith(preds ...predicate.OauthState) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OauthUserAuthorizationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthUserAuthorizationQuery builder.
func (_q *OauthUserAuthorizationQuery) Filter() *OauthUserAuthorizationFilter {
	return &OauthUserAuthorizationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthUserAuthorizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthUserAuthorizationMutation builder.
func (m *OauthUserAuthorizationMutation) Filter() *OauthUserAuthorizationFilter {
	return &OauthUserAuthorizationFilter{config: m.config, predicateAdder: m}
}

// OauthUserAuthorizationFilter provides a generic filtering capability at runtime for OauthUserAuthorizationQuery.
type OauthUserAuthorizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthUserAuthorizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OauthUserAuthorizationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OauthUserAuthorizationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(oauthuserauthorization.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *OauthUserAuthorizationFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OauthUserAuthorizationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(oauthuserauthorization.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *OauthUserAuthorizationFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *OauthUserAuthorizationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(oauthuserauthorization.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *OauthUserAuthorizationFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldDeleteBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *OauthUserAuthorizationFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldUserID))
}

// WhereApplicationID applies the entql uint64 predicate on the application_id field.
func (f *OauthUserAuthorizationFilter) WhereApplicationID(p entql.Uint64P) {
	f.Where(p.Field(oauthuserauthorization.FieldApplicationID))
}

// WhereAuthorizedAt applies the entql time.Time predicate on the authorized_at field.
func (f *OauthUserAuthorizationFilter) WhereAuthorizedAt(p entql.TimeP) {
	f.Where(p.Field(oauthuserauthorization.FieldAuthorizedAt))
}

// WhereUsageState applies the entql string predicate on the usage_state field.
func (f *OauthUserAuthorizationFilter) WhereUsageState(p entql.StringP) {
	f.Where(p.Field(oauthuserauthorization.FieldUsageState))
}

// WhereScope applies the entql json.RawMessage predicate on the scope field.
func (f *OauthUserAuthorizationFilter) WhereScope(p entql.BytesP) {
	f.Where(p.Field(oauthuserauthorization.FieldScope))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OauthUserAuthorizationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OauthUserAuthorizationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApplication applies a predicate to check if query has an edge application.
func (f *OauthUserAuthorizationFilter) WhereHasApplication() {
	f.Where(entql.HasEdge("application"))
}

// WhereHasApplicationWith applies a predicate to check if query has an edge application with a given conditions (other predicates).
func (f *OauthUserAuthorizationFilter) WhereHasApplicationWith(preds ...predicate.OauthApplication) {
	f.Where(entql.HasEdgeWith("application", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCode applies a predicate to check if query has an edge code.
func (f *OauthUserAuthorizationFilter) WhereHasCode() {
	f.Where(entql.HasEdge("code"))
}

// WhereHasCodeWith applies a predicate to check if query has an edge code with a given conditions (other predicates).
func (f *OauthUserAuthorizationFilter) WhereHasCodeWith(preds ...predicate.OauthAuthorizationCode) {
	f.Where(entql.HasEdgeWith("code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasToken applies a predicate to check if query has an edge token.
func (f *OauthUserAuthorizationFilter) WhereHasToken() {
	f.Where(entql.HasEdge("token"))
}

// WhereHasTokenWith applies a predicate to check if query has an edge token with a given conditions (other predicates).
func (f *OauthUserAuthorizationFilter) WhereHasTokenWith(preds ...predicate.OauthToken) {
	f.Where(entql.HasEdgeWith("token", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (_q *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(permission.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *PermissionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *PermissionFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(permission.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *PermissionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *PermissionFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(permission.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *PermissionFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(permission.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *PermissionFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(permission.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *PermissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(permission.FieldName))
}

// WhereAction applies the entql string predicate on the action field.
func (f *PermissionFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(permission.FieldAction))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PermissionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(permission.FieldDescription))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *PermissionFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(permission.FieldIsPublic))
}

// WhereHasRolePermissions applies a predicate to check if query has an edge role_permissions.
func (f *PermissionFilter) WhereHasRolePermissions() {
	f.Where(entql.HasEdge("role_permissions"))
}

// WhereHasRolePermissionsWith applies a predicate to check if query has an edge role_permissions with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRolePermissionsWith(preds ...predicate.RolePermission) {
	f.Where(entql.HasEdgeWith("role_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScope applies a predicate to check if query has an edge scope.
func (f *PermissionFilter) WhereHasScope() {
	f.Where(entql.HasEdge("scope"))
}

// WhereHasScopeWith applies a predicate to check if query has an edge scope with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasScopeWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("scope", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIAuths applies a predicate to check if query has an edge api_auths.
func (f *PermissionFilter) WhereHasAPIAuths() {
	f.Where(entql.HasEdge("api_auths"))
}

// WhereHasAPIAuthsWith applies a predicate to check if query has an edge api_auths with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasAPIAuthsWith(preds ...predicate.APIAuth) {
	f.Where(entql.HasEdgeWith("api_auths", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (_q *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RoleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *RoleFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(role.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RoleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *RoleFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(role.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RoleFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(role.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *RoleFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(role.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *RoleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(role.FieldDescription))
}

// WhereHasUserRoles applies a predicate to check if query has an edge user_roles.
func (f *RoleFilter) WhereHasUserRoles() {
	f.Where(entql.HasEdge("user_roles"))
}

// WhereHasUserRolesWith applies a predicate to check if query has an edge user_roles with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRolePermissions applies a predicate to check if query has an edge role_permissions.
func (f *RoleFilter) WhereHasRolePermissions() {
	f.Where(entql.HasEdge("role_permissions"))
}

// WhereHasRolePermissionsWith applies a predicate to check if query has an edge role_permissions with a given conditions (other predicates).
func (f *RoleFilter) WhereHasRolePermissionsWith(preds ...predicate.RolePermission) {
	f.Where(entql.HasEdgeWith("role_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInheritedBy applies a predicate to check if query has an edge inherited_by.
func (f *RoleFilter) WhereHasInheritedBy() {
	f.Where(entql.HasEdge("inherited_by"))
}

// WhereHasInheritedByWith applies a predicate to check if query has an edge inherited_by with a given conditions (other predicates).
func (f *RoleFilter) WhereHasInheritedByWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("inherited_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInheritsFrom applies a predicate to check if query has an edge inherits_from.
func (f *RoleFilter) WhereHasInheritsFrom() {
	f.Where(entql.HasEdge("inherits_from"))
}

// WhereHasInheritsFromWith applies a predicate to check if query has an edge inherits_from with a given conditions (other predicates).
func (f *RoleFilter) WhereHasInheritsFromWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("inherits_from", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasClientDevice applies a predicate to check if query has an edge client_device.
func (f *RoleFilter) WhereHasClientDevice() {
	f.Where(entql.HasEdge("client_device"))
}

// WhereHasClientDeviceWith applies a predicate to check if query has an edge client_device with a given conditions (other predicates).
func (f *RoleFilter) WhereHasClientDeviceWith(preds ...predicate.ClientDevice) {
	f.Where(entql.HasEdgeWith("client_device", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RolePermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RolePermissionQuery builder.
func (_q *RolePermissionQuery) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RolePermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RolePermissionMutation builder.
func (m *RolePermissionMutation) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: m.config, predicateAdder: m}
}

// RolePermissionFilter provides a generic filtering capability at runtime for RolePermissionQuery.
type RolePermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RolePermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RolePermissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RolePermissionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *RolePermissionFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *RolePermissionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *RolePermissionFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *RolePermissionFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(rolepermission.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *RolePermissionFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldDeleteBy))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *RolePermissionFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldRoleID))
}

// WherePermissionID applies the entql uint64 predicate on the permission_id field.
func (f *RolePermissionFilter) WherePermissionID(p entql.Uint64P) {
	f.Where(p.Field(rolepermission.FieldPermissionID))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *RolePermissionFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *RolePermissionFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *RolePermissionFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *RolePermissionFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScanQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScanQuery builder.
func (_q *ScanQuery) Filter() *ScanFilter {
	return &ScanFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScanMutation builder.
func (m *ScanMutation) Filter() *ScanFilter {
	return &ScanFilter{config: m.config, predicateAdder: m}
}

// ScanFilter provides a generic filtering capability at runtime for ScanQuery.
type ScanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ScanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ScanFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *ScanFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ScanFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *ScanFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *ScanFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(scan.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *ScanFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldDeleteBy))
}

// WhereContent applies the entql string predicate on the content field.
func (f *ScanFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(scan.FieldContent))
}

// WhereLength applies the entql int predicate on the length field.
func (f *ScanFilter) WhereLength(p entql.IntP) {
	f.Where(p.Field(scan.FieldLength))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ScanFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(scan.FieldSuccess))
}

// WhereHasAttachment applies a predicate to check if query has an edge attachment.
func (f *ScanFilter) WhereHasAttachment() {
	f.Where(entql.HasEdge("attachment"))
}

// WhereHasAttachmentWith applies a predicate to check if query has an edge attachment with a given conditions (other predicates).
func (f *ScanFilter) WhereHasAttachmentWith(preds ...predicate.Attachment) {
	f.Where(entql.HasEdgeWith("attachment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScopeQuery builder.
func (_q *ScopeQuery) Filter() *ScopeFilter {
	return &ScopeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScopeMutation builder.
func (m *ScopeMutation) Filter() *ScopeFilter {
	return &ScopeFilter{config: m.config, predicateAdder: m}
}

// ScopeFilter provides a generic filtering capability at runtime for ScopeQuery.
type ScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ScopeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ScopeFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *ScopeFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ScopeFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *ScopeFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *ScopeFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(scope.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *ScopeFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *ScopeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(scope.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *ScopeFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(scope.FieldType))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *ScopeFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(scope.FieldIcon))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ScopeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(scope.FieldDescription))
}

// WhereAction applies the entql string predicate on the action field.
func (f *ScopeFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(scope.FieldAction))
}

// WherePath applies the entql string predicate on the path field.
func (f *ScopeFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(scope.FieldPath))
}

// WhereComponent applies the entql string predicate on the component field.
func (f *ScopeFilter) WhereComponent(p entql.StringP) {
	f.Where(p.Field(scope.FieldComponent))
}

// WhereRedirect applies the entql string predicate on the redirect field.
func (f *ScopeFilter) WhereRedirect(p entql.StringP) {
	f.Where(p.Field(scope.FieldRedirect))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *ScopeFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(scope.FieldOrder))
}

// WhereHidden applies the entql bool predicate on the hidden field.
func (f *ScopeFilter) WhereHidden(p entql.BoolP) {
	f.Where(p.Field(scope.FieldHidden))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *ScopeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(scope.FieldDisabled))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *ScopeFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(scope.FieldParentID))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *ScopeFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasParentWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *ScopeFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasChildrenWith(preds ...predicate.Scope) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *ScopeFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *ScopeFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *StationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StationQuery builder.
func (_q *StationQuery) Filter() *StationFilter {
	return &StationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *StationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StationMutation builder.
func (m *StationMutation) Filter() *StationFilter {
	return &StationFilter{config: m.config, predicateAdder: m}
}

// StationFilter provides a generic filtering capability at runtime for StationQuery.
type StationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(station.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *StationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(station.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *StationFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(station.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *StationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(station.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *StationFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(station.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *StationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(station.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *StationFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(station.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *StationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(station.FieldName))
}

// WhereAreaID applies the entql uint64 predicate on the area_id field.
func (f *StationFilter) WhereAreaID(p entql.Uint64P) {
	f.Where(p.Field(station.FieldAreaID))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *StationFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *StationFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubwayStations applies a predicate to check if query has an edge subway_stations.
func (f *StationFilter) WhereHasSubwayStations() {
	f.Where(entql.HasEdge("subway_stations"))
}

// WhereHasSubwayStationsWith applies a predicate to check if query has an edge subway_stations with a given conditions (other predicates).
func (f *StationFilter) WhereHasSubwayStationsWith(preds ...predicate.SubwayStation) {
	f.Where(entql.HasEdgeWith("subway_stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubwayQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubwayQuery builder.
func (_q *SubwayQuery) Filter() *SubwayFilter {
	return &SubwayFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubwayMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubwayMutation builder.
func (m *SubwayMutation) Filter() *SubwayFilter {
	return &SubwayFilter{config: m.config, predicateAdder: m}
}

// SubwayFilter provides a generic filtering capability at runtime for SubwayQuery.
type SubwayFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubwayFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubwayFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subway.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SubwayFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(subway.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *SubwayFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(subway.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SubwayFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(subway.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *SubwayFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(subway.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SubwayFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(subway.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *SubwayFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(subway.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *SubwayFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(subway.FieldName))
}

// WhereAreaID applies the entql uint64 predicate on the area_id field.
func (f *SubwayFilter) WhereAreaID(p entql.Uint64P) {
	f.Where(p.Field(subway.FieldAreaID))
}

// WhereColor applies the entql string predicate on the color field.
func (f *SubwayFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(subway.FieldColor))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *SubwayFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *SubwayFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubwayStations applies a predicate to check if query has an edge subway_stations.
func (f *SubwayFilter) WhereHasSubwayStations() {
	f.Where(entql.HasEdge("subway_stations"))
}

// WhereHasSubwayStationsWith applies a predicate to check if query has an edge subway_stations with a given conditions (other predicates).
func (f *SubwayFilter) WhereHasSubwayStationsWith(preds ...predicate.SubwayStation) {
	f.Where(entql.HasEdgeWith("subway_stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubwayStationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubwayStationQuery builder.
func (_q *SubwayStationQuery) Filter() *SubwayStationFilter {
	return &SubwayStationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubwayStationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubwayStationMutation builder.
func (m *SubwayStationMutation) Filter() *SubwayStationFilter {
	return &SubwayStationFilter{config: m.config, predicateAdder: m}
}

// SubwayStationFilter provides a generic filtering capability at runtime for SubwayStationQuery.
type SubwayStationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubwayStationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubwayStationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SubwayStationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(subwaystation.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *SubwayStationFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SubwayStationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(subwaystation.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *SubwayStationFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *SubwayStationFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(subwaystation.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *SubwayStationFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldDeleteBy))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *SubwayStationFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldStationID))
}

// WhereSubwayID applies the entql uint64 predicate on the subway_id field.
func (f *SubwayStationFilter) WhereSubwayID(p entql.Uint64P) {
	f.Where(p.Field(subwaystation.FieldSubwayID))
}

// WhereSequence applies the entql int predicate on the sequence field.
func (f *SubwayStationFilter) WhereSequence(p entql.IntP) {
	f.Where(p.Field(subwaystation.FieldSequence))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *SubwayStationFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *SubwayStationFilter) WhereHasStationWith(preds ...predicate.Station) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubway applies a predicate to check if query has an edge subway.
func (f *SubwayStationFilter) WhereHasSubway() {
	f.Where(entql.HasEdge("subway"))
}

// WhereHasSubwayWith applies a predicate to check if query has an edge subway with a given conditions (other predicates).
func (f *SubwayStationFilter) WhereHasSubwayWith(preds ...predicate.Subway) {
	f.Where(entql.HasEdgeWith("subway", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SystemMonitorQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemMonitorQuery builder.
func (_q *SystemMonitorQuery) Filter() *SystemMonitorFilter {
	return &SystemMonitorFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemMonitorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemMonitorMutation builder.
func (m *SystemMonitorMutation) Filter() *SystemMonitorFilter {
	return &SystemMonitorFilter{config: m.config, predicateAdder: m}
}

// SystemMonitorFilter provides a generic filtering capability at runtime for SystemMonitorQuery.
type SystemMonitorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemMonitorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SystemMonitorFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SystemMonitorFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(systemmonitor.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *SystemMonitorFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SystemMonitorFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(systemmonitor.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *SystemMonitorFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldUpdateBy))
}

// WhereCPUUsagePercent applies the entql float64 predicate on the cpu_usage_percent field.
func (f *SystemMonitorFilter) WhereCPUUsagePercent(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldCPUUsagePercent))
}

// WhereCPUCores applies the entql int predicate on the cpu_cores field.
func (f *SystemMonitorFilter) WhereCPUCores(p entql.IntP) {
	f.Where(p.Field(systemmonitor.FieldCPUCores))
}

// WhereMemoryTotal applies the entql uint64 predicate on the memory_total field.
func (f *SystemMonitorFilter) WhereMemoryTotal(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldMemoryTotal))
}

// WhereMemoryUsed applies the entql uint64 predicate on the memory_used field.
func (f *SystemMonitorFilter) WhereMemoryUsed(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldMemoryUsed))
}

// WhereMemoryFree applies the entql uint64 predicate on the memory_free field.
func (f *SystemMonitorFilter) WhereMemoryFree(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldMemoryFree))
}

// WhereMemoryUsagePercent applies the entql float64 predicate on the memory_usage_percent field.
func (f *SystemMonitorFilter) WhereMemoryUsagePercent(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldMemoryUsagePercent))
}

// WhereDiskTotal applies the entql uint64 predicate on the disk_total field.
func (f *SystemMonitorFilter) WhereDiskTotal(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldDiskTotal))
}

// WhereDiskUsed applies the entql uint64 predicate on the disk_used field.
func (f *SystemMonitorFilter) WhereDiskUsed(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldDiskUsed))
}

// WhereDiskFree applies the entql uint64 predicate on the disk_free field.
func (f *SystemMonitorFilter) WhereDiskFree(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldDiskFree))
}

// WhereDiskUsagePercent applies the entql float64 predicate on the disk_usage_percent field.
func (f *SystemMonitorFilter) WhereDiskUsagePercent(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldDiskUsagePercent))
}

// WhereNetworkBytesSent applies the entql uint64 predicate on the network_bytes_sent field.
func (f *SystemMonitorFilter) WhereNetworkBytesSent(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldNetworkBytesSent))
}

// WhereNetworkBytesRecv applies the entql uint64 predicate on the network_bytes_recv field.
func (f *SystemMonitorFilter) WhereNetworkBytesRecv(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldNetworkBytesRecv))
}

// WhereOs applies the entql string predicate on the os field.
func (f *SystemMonitorFilter) WhereOs(p entql.StringP) {
	f.Where(p.Field(systemmonitor.FieldOs))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *SystemMonitorFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(systemmonitor.FieldPlatform))
}

// WherePlatformVersion applies the entql string predicate on the platform_version field.
func (f *SystemMonitorFilter) WherePlatformVersion(p entql.StringP) {
	f.Where(p.Field(systemmonitor.FieldPlatformVersion))
}

// WhereHostname applies the entql string predicate on the hostname field.
func (f *SystemMonitorFilter) WhereHostname(p entql.StringP) {
	f.Where(p.Field(systemmonitor.FieldHostname))
}

// WhereGoroutinesCount applies the entql int predicate on the goroutines_count field.
func (f *SystemMonitorFilter) WhereGoroutinesCount(p entql.IntP) {
	f.Where(p.Field(systemmonitor.FieldGoroutinesCount))
}

// WhereHeapAlloc applies the entql uint64 predicate on the heap_alloc field.
func (f *SystemMonitorFilter) WhereHeapAlloc(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldHeapAlloc))
}

// WhereHeapSys applies the entql uint64 predicate on the heap_sys field.
func (f *SystemMonitorFilter) WhereHeapSys(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldHeapSys))
}

// WhereGcCount applies the entql uint32 predicate on the gc_count field.
func (f *SystemMonitorFilter) WhereGcCount(p entql.Uint32P) {
	f.Where(p.Field(systemmonitor.FieldGcCount))
}

// WhereLoadAvg1 applies the entql float64 predicate on the load_avg_1 field.
func (f *SystemMonitorFilter) WhereLoadAvg1(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldLoadAvg1))
}

// WhereLoadAvg5 applies the entql float64 predicate on the load_avg_5 field.
func (f *SystemMonitorFilter) WhereLoadAvg5(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldLoadAvg5))
}

// WhereLoadAvg15 applies the entql float64 predicate on the load_avg_15 field.
func (f *SystemMonitorFilter) WhereLoadAvg15(p entql.Float64P) {
	f.Where(p.Field(systemmonitor.FieldLoadAvg15))
}

// WhereUptime applies the entql uint64 predicate on the uptime field.
func (f *SystemMonitorFilter) WhereUptime(p entql.Uint64P) {
	f.Where(p.Field(systemmonitor.FieldUptime))
}

// WhereRecordedAt applies the entql time.Time predicate on the recorded_at field.
func (f *SystemMonitorFilter) WhereRecordedAt(p entql.TimeP) {
	f.Where(p.Field(systemmonitor.FieldRecordedAt))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *UserFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(user.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *UserFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(user.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *UserFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(user.FieldDeleteBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereAge applies the entql int predicate on the age field.
func (f *UserFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(user.FieldAge))
}

// WhereSex applies the entql string predicate on the sex field.
func (f *UserFilter) WhereSex(p entql.StringP) {
	f.Where(p.Field(user.FieldSex))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereAvatarID applies the entql uint64 predicate on the avatar_id field.
func (f *UserFilter) WhereAvatarID(p entql.Uint64P) {
	f.Where(p.Field(user.FieldAvatarID))
}

// WhereHasUserRoles applies a predicate to check if query has an edge user_roles.
func (f *UserFilter) WhereHasUserRoles() {
	f.Where(entql.HasEdge("user_roles"))
}

// WhereHasUserRolesWith applies a predicate to check if query has an edge user_roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCredentials applies a predicate to check if query has an edge credentials.
func (f *UserFilter) WhereHasCredentials() {
	f.Where(entql.HasEdge("credentials"))
}

// WhereHasCredentialsWith applies a predicate to check if query has an edge credentials with a given conditions (other predicates).
func (f *UserFilter) WhereHasCredentialsWith(preds ...predicate.Credential) {
	f.Where(entql.HasEdgeWith("credentials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLoginRecords applies a predicate to check if query has an edge login_records.
func (f *UserFilter) WhereHasLoginRecords() {
	f.Where(entql.HasEdge("login_records"))
}

// WhereHasLoginRecordsWith applies a predicate to check if query has an edge login_records with a given conditions (other predicates).
func (f *UserFilter) WhereHasLoginRecordsWith(preds ...predicate.LoginRecord) {
	f.Where(entql.HasEdgeWith("login_records", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAvatar applies a predicate to check if query has an edge avatar.
func (f *UserFilter) WhereHasAvatar() {
	f.Where(entql.HasEdge("avatar"))
}

// WhereHasAvatarWith applies a predicate to check if query has an edge avatar with a given conditions (other predicates).
func (f *UserFilter) WhereHasAvatarWith(preds ...predicate.Attachment) {
	f.Where(entql.HasEdgeWith("avatar", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserRoleQuery builder.
func (_q *UserRoleQuery) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserRoleMutation builder.
func (m *UserRoleMutation) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: m.config, predicateAdder: m}
}

// UserRoleFilter provides a generic filtering capability at runtime for UserRoleQuery.
type UserRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserRoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserRoleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *UserRoleFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserRoleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *UserRoleFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserRoleFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *UserRoleFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldDeleteBy))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *UserRoleFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldUserID))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *UserRoleFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(userrole.FieldRoleID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserRoleFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *UserRoleFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *VerifyCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VerifyCodeQuery builder.
func (_q *VerifyCodeQuery) Filter() *VerifyCodeFilter {
	return &VerifyCodeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *VerifyCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VerifyCodeMutation builder.
func (m *VerifyCodeMutation) Filter() *VerifyCodeFilter {
	return &VerifyCodeFilter{config: m.config, predicateAdder: m}
}

// VerifyCodeFilter provides a generic filtering capability at runtime for VerifyCodeQuery.
type VerifyCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VerifyCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *VerifyCodeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(verifycode.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *VerifyCodeFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldCreateTime))
}

// WhereCreateBy applies the entql uint64 predicate on the create_by field.
func (f *VerifyCodeFilter) WhereCreateBy(p entql.Uint64P) {
	f.Where(p.Field(verifycode.FieldCreateBy))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *VerifyCodeFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldUpdateTime))
}

// WhereUpdateBy applies the entql uint64 predicate on the update_by field.
func (f *VerifyCodeFilter) WhereUpdateBy(p entql.Uint64P) {
	f.Where(p.Field(verifycode.FieldUpdateBy))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *VerifyCodeFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldDeleteTime))
}

// WhereDeleteBy applies the entql uint64 predicate on the delete_by field.
func (f *VerifyCodeFilter) WhereDeleteBy(p entql.Uint64P) {
	f.Where(p.Field(verifycode.FieldDeleteBy))
}

// WhereCode applies the entql string predicate on the code field.
func (f *VerifyCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(verifycode.FieldCode))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *VerifyCodeFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(verifycode.FieldIdentifier))
}

// WhereSenderType applies the entql string predicate on the sender_type field.
func (f *VerifyCodeFilter) WhereSenderType(p entql.StringP) {
	f.Where(p.Field(verifycode.FieldSenderType))
}

// WhereSendFor applies the entql string predicate on the send_for field.
func (f *VerifyCodeFilter) WhereSendFor(p entql.StringP) {
	f.Where(p.Field(verifycode.FieldSendFor))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *VerifyCodeFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldExpiresAt))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *VerifyCodeFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldUsedAt))
}

// WhereSendSuccess applies the entql bool predicate on the send_success field.
func (f *VerifyCodeFilter) WhereSendSuccess(p entql.BoolP) {
	f.Where(p.Field(verifycode.FieldSendSuccess))
}

// WhereSendAt applies the entql time.Time predicate on the send_at field.
func (f *VerifyCodeFilter) WhereSendAt(p entql.TimeP) {
	f.Where(p.Field(verifycode.FieldSendAt))
}

// WhereClientID applies the entql uint64 predicate on the client_id field.
func (f *VerifyCodeFilter) WhereClientID(p entql.Uint64P) {
	f.Where(p.Field(verifycode.FieldClientID))
}
