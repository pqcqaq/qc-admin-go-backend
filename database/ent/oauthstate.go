// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthState is the model entity for the OauthState schema.
type OauthState struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 随机状态码
	State string `json:"state,omitempty"`
	// 操作类型(login或bind)
	Type oauthstate.Type `json:"type,omitempty"`
	// 关联的提供商ID
	ProviderID uint64 `json:"provider_id,omitempty"`
	// 发起操作的用户ID(已登录时)
	UserID uint64 `json:"user_id,omitempty"`
	// 过期时间
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// 使用时间(一次性)
	UsedAt *time.Time `json:"used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthStateQuery when eager-loading is set.
	Edges        OauthStateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthStateEdges holds the relations/edges for other nodes in the graph.
type OauthStateEdges struct {
	// Provider holds the value of the provider edge.
	Provider *OauthProvider `json:"provider,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// 生成的OAuth用户连接
	OauthUsers []*OauthUser `json:"oauth_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes     [3]bool
	namedOauthUsers map[string][]*OauthUser
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthStateEdges) ProviderOrErr() (*OauthProvider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthprovider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthStateEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OauthUsersOrErr returns the OauthUsers value or an error if the edge
// was not loaded in eager-loading.
func (e OauthStateEdges) OauthUsersOrErr() ([]*OauthUser, error) {
	if e.loadedTypes[2] {
		return e.OauthUsers, nil
	}
	return nil, &NotLoadedError{edge: "oauth_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthstate.FieldID, oauthstate.FieldCreateBy, oauthstate.FieldUpdateBy, oauthstate.FieldDeleteBy, oauthstate.FieldProviderID, oauthstate.FieldUserID:
			values[i] = new(sql.NullInt64)
		case oauthstate.FieldState, oauthstate.FieldType:
			values[i] = new(sql.NullString)
		case oauthstate.FieldCreateTime, oauthstate.FieldUpdateTime, oauthstate.FieldDeleteTime, oauthstate.FieldExpiresAt, oauthstate.FieldUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthState fields.
func (_m *OauthState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthstate.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthstate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthstate.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthstate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthstate.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthstate.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthstate.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthstate.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = value.String
			}
		case oauthstate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = oauthstate.Type(value.String)
			}
		case oauthstate.FieldProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				_m.ProviderID = uint64(value.Int64)
			}
		case oauthstate.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint64(value.Int64)
			}
		case oauthstate.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case oauthstate.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				_m.UsedAt = new(time.Time)
				*_m.UsedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthState.
// This includes values selected through modifiers, order, etc.
func (_m *OauthState) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the OauthState entity.
func (_m *OauthState) QueryProvider() *OauthProviderQuery {
	return NewOauthStateClient(_m.config).QueryProvider(_m)
}

// QueryUser queries the "user" edge of the OauthState entity.
func (_m *OauthState) QueryUser() *UserQuery {
	return NewOauthStateClient(_m.config).QueryUser(_m)
}

// QueryOauthUsers queries the "oauth_users" edge of the OauthState entity.
func (_m *OauthState) QueryOauthUsers() *OauthUserQuery {
	return NewOauthStateClient(_m.config).QueryOauthUsers(_m)
}

// Update returns a builder for updating this OauthState.
// Note that you need to call OauthState.Unwrap() before calling this method if this OauthState
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthState) Update() *OauthStateUpdateOne {
	return NewOauthStateClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthState) Unwrap() *OauthState {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthState is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthState) String() string {
	var builder strings.Builder
	builder.WriteString("OauthState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(_m.State)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedOauthUsers returns the OauthUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthState) NamedOauthUsers(name string) ([]*OauthUser, error) {
	if _m.Edges.namedOauthUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOauthUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthState) appendNamedOauthUsers(name string, edges ...*OauthUser) {
	if _m.Edges.namedOauthUsers == nil {
		_m.Edges.namedOauthUsers = make(map[string][]*OauthUser)
	}
	if len(edges) == 0 {
		_m.Edges.namedOauthUsers[name] = []*OauthUser{}
	} else {
		_m.Edges.namedOauthUsers[name] = append(_m.Edges.namedOauthUsers[name], edges...)
	}
}

// OauthStates is a parsable slice of OauthState.
type OauthStates []*OauthState
