// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowexecution"
	"go-backend/database/ent/workflownodeexecution"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowExecutionUpdate is the builder for updating WorkflowExecution entities.
type WorkflowExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (_u *WorkflowExecutionUpdate) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowExecutionUpdate) SetCreateBy(v uint64) *WorkflowExecutionUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableCreateBy(v *uint64) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowExecutionUpdate) AddCreateBy(v int64) *WorkflowExecutionUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowExecutionUpdate) ClearCreateBy() *WorkflowExecutionUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowExecutionUpdate) SetUpdateTime(v time.Time) *WorkflowExecutionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowExecutionUpdate) SetUpdateBy(v uint64) *WorkflowExecutionUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableUpdateBy(v *uint64) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowExecutionUpdate) AddUpdateBy(v int64) *WorkflowExecutionUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowExecutionUpdate) ClearUpdateBy() *WorkflowExecutionUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowExecutionUpdate) SetExecutionID(v string) *WorkflowExecutionUpdate {
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableExecutionID(v *string) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowExecutionUpdate) SetApplicationID(v uint64) *WorkflowExecutionUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableApplicationID(v *uint64) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowExecutionUpdate) SetStatus(v workflowexecution.Status) *WorkflowExecutionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableStatus(v *workflowexecution.Status) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetInput sets the "input" field.
func (_u *WorkflowExecutionUpdate) SetInput(v map[string]interface{}) *WorkflowExecutionUpdate {
	_u.mutation.SetInput(v)
	return _u
}

// ClearInput clears the value of the "input" field.
func (_u *WorkflowExecutionUpdate) ClearInput() *WorkflowExecutionUpdate {
	_u.mutation.ClearInput()
	return _u
}

// SetOutput sets the "output" field.
func (_u *WorkflowExecutionUpdate) SetOutput(v map[string]interface{}) *WorkflowExecutionUpdate {
	_u.mutation.SetOutput(v)
	return _u
}

// ClearOutput clears the value of the "output" field.
func (_u *WorkflowExecutionUpdate) ClearOutput() *WorkflowExecutionUpdate {
	_u.mutation.ClearOutput()
	return _u
}

// SetContext sets the "context" field.
func (_u *WorkflowExecutionUpdate) SetContext(v map[string]interface{}) *WorkflowExecutionUpdate {
	_u.mutation.SetContext(v)
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *WorkflowExecutionUpdate) ClearContext() *WorkflowExecutionUpdate {
	_u.mutation.ClearContext()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *WorkflowExecutionUpdate) SetStartedAt(v time.Time) *WorkflowExecutionUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableStartedAt(v *time.Time) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *WorkflowExecutionUpdate) ClearStartedAt() *WorkflowExecutionUpdate {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *WorkflowExecutionUpdate) SetFinishedAt(v time.Time) *WorkflowExecutionUpdate {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableFinishedAt(v *time.Time) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *WorkflowExecutionUpdate) ClearFinishedAt() *WorkflowExecutionUpdate {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *WorkflowExecutionUpdate) SetDurationMs(v int) *WorkflowExecutionUpdate {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableDurationMs(v *int) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *WorkflowExecutionUpdate) AddDurationMs(v int) *WorkflowExecutionUpdate {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetTotalTokens sets the "total_tokens" field.
func (_u *WorkflowExecutionUpdate) SetTotalTokens(v int) *WorkflowExecutionUpdate {
	_u.mutation.ResetTotalTokens()
	_u.mutation.SetTotalTokens(v)
	return _u
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableTotalTokens(v *int) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetTotalTokens(*v)
	}
	return _u
}

// AddTotalTokens adds value to the "total_tokens" field.
func (_u *WorkflowExecutionUpdate) AddTotalTokens(v int) *WorkflowExecutionUpdate {
	_u.mutation.AddTotalTokens(v)
	return _u
}

// SetTotalCost sets the "total_cost" field.
func (_u *WorkflowExecutionUpdate) SetTotalCost(v float64) *WorkflowExecutionUpdate {
	_u.mutation.ResetTotalCost()
	_u.mutation.SetTotalCost(v)
	return _u
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableTotalCost(v *float64) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetTotalCost(*v)
	}
	return _u
}

// AddTotalCost adds value to the "total_cost" field.
func (_u *WorkflowExecutionUpdate) AddTotalCost(v float64) *WorkflowExecutionUpdate {
	_u.mutation.AddTotalCost(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *WorkflowExecutionUpdate) SetErrorMessage(v string) *WorkflowExecutionUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableErrorMessage(v *string) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *WorkflowExecutionUpdate) ClearErrorMessage() *WorkflowExecutionUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetErrorStack sets the "error_stack" field.
func (_u *WorkflowExecutionUpdate) SetErrorStack(v string) *WorkflowExecutionUpdate {
	_u.mutation.SetErrorStack(v)
	return _u
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableErrorStack(v *string) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetErrorStack(*v)
	}
	return _u
}

// ClearErrorStack clears the value of the "error_stack" field.
func (_u *WorkflowExecutionUpdate) ClearErrorStack() *WorkflowExecutionUpdate {
	_u.mutation.ClearErrorStack()
	return _u
}

// SetTriggeredBy sets the "triggered_by" field.
func (_u *WorkflowExecutionUpdate) SetTriggeredBy(v string) *WorkflowExecutionUpdate {
	_u.mutation.SetTriggeredBy(v)
	return _u
}

// SetNillableTriggeredBy sets the "triggered_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableTriggeredBy(v *string) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetTriggeredBy(*v)
	}
	return _u
}

// ClearTriggeredBy clears the value of the "triggered_by" field.
func (_u *WorkflowExecutionUpdate) ClearTriggeredBy() *WorkflowExecutionUpdate {
	_u.mutation.ClearTriggeredBy()
	return _u
}

// SetTriggerSource sets the "trigger_source" field.
func (_u *WorkflowExecutionUpdate) SetTriggerSource(v string) *WorkflowExecutionUpdate {
	_u.mutation.SetTriggerSource(v)
	return _u
}

// SetNillableTriggerSource sets the "trigger_source" field if the given value is not nil.
func (_u *WorkflowExecutionUpdate) SetNillableTriggerSource(v *string) *WorkflowExecutionUpdate {
	if v != nil {
		_u.SetTriggerSource(*v)
	}
	return _u
}

// ClearTriggerSource clears the value of the "trigger_source" field.
func (_u *WorkflowExecutionUpdate) ClearTriggerSource() *WorkflowExecutionUpdate {
	_u.mutation.ClearTriggerSource()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowExecutionUpdate) SetApplication(v *WorkflowApplication) *WorkflowExecutionUpdate {
	return _u.SetApplicationID(v.ID)
}

// AddNodeExecutionIDs adds the "node_executions" edge to the WorkflowNodeExecution entity by IDs.
func (_u *WorkflowExecutionUpdate) AddNodeExecutionIDs(ids ...uint64) *WorkflowExecutionUpdate {
	_u.mutation.AddNodeExecutionIDs(ids...)
	return _u
}

// AddNodeExecutions adds the "node_executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowExecutionUpdate) AddNodeExecutions(v ...*WorkflowNodeExecution) *WorkflowExecutionUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeExecutionIDs(ids...)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (_u *WorkflowExecutionUpdate) Mutation() *WorkflowExecutionMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowExecutionUpdate) ClearApplication() *WorkflowExecutionUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearNodeExecutions clears all "node_executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowExecutionUpdate) ClearNodeExecutions() *WorkflowExecutionUpdate {
	_u.mutation.ClearNodeExecutions()
	return _u
}

// RemoveNodeExecutionIDs removes the "node_executions" edge to WorkflowNodeExecution entities by IDs.
func (_u *WorkflowExecutionUpdate) RemoveNodeExecutionIDs(ids ...uint64) *WorkflowExecutionUpdate {
	_u.mutation.RemoveNodeExecutionIDs(ids...)
	return _u
}

// RemoveNodeExecutions removes "node_executions" edges to WorkflowNodeExecution entities.
func (_u *WorkflowExecutionUpdate) RemoveNodeExecutions(v ...*WorkflowNodeExecution) *WorkflowExecutionUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowExecutionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowExecutionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowExecutionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowExecutionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecution.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecution.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowExecutionUpdate) check() error {
	if v, ok := _u.mutation.ExecutionID(); ok {
		if err := workflowexecution.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.execution_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.application"`)
	}
	return nil
}

func (_u *WorkflowExecutionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowexecution.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowexecution.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExecutionID(); ok {
		_spec.SetField(workflowexecution.FieldExecutionID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Input(); ok {
		_spec.SetField(workflowexecution.FieldInput, field.TypeJSON, value)
	}
	if _u.mutation.InputCleared() {
		_spec.ClearField(workflowexecution.FieldInput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
	}
	if _u.mutation.OutputCleared() {
		_spec.ClearField(workflowexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(workflowexecution.FieldContext, field.TypeJSON, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(workflowexecution.FieldContext, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(workflowexecution.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(workflowexecution.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(workflowexecution.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflowexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalTokens(); ok {
		_spec.SetField(workflowexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTokens(); ok {
		_spec.AddField(workflowexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalCost(); ok {
		_spec.SetField(workflowexecution.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalCost(); ok {
		_spec.AddField(workflowexecution.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(workflowexecution.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(workflowexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorStack(); ok {
		_spec.SetField(workflowexecution.FieldErrorStack, field.TypeString, value)
	}
	if _u.mutation.ErrorStackCleared() {
		_spec.ClearField(workflowexecution.FieldErrorStack, field.TypeString)
	}
	if value, ok := _u.mutation.TriggeredBy(); ok {
		_spec.SetField(workflowexecution.FieldTriggeredBy, field.TypeString, value)
	}
	if _u.mutation.TriggeredByCleared() {
		_spec.ClearField(workflowexecution.FieldTriggeredBy, field.TypeString)
	}
	if value, ok := _u.mutation.TriggerSource(); ok {
		_spec.SetField(workflowexecution.FieldTriggerSource, field.TypeString, value)
	}
	if _u.mutation.TriggerSourceCleared() {
		_spec.ClearField(workflowexecution.FieldTriggerSource, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ApplicationTable,
			Columns: []string{workflowexecution.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ApplicationTable,
			Columns: []string{workflowexecution.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeExecutionsIDs(); len(nodes) > 0 && !_u.mutation.NodeExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowExecutionUpdateOne is the builder for updating a single WorkflowExecution entity.
type WorkflowExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowExecutionUpdateOne) SetCreateBy(v uint64) *WorkflowExecutionUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowExecutionUpdateOne) AddCreateBy(v int64) *WorkflowExecutionUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowExecutionUpdateOne) ClearCreateBy() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowExecutionUpdateOne) SetUpdateTime(v time.Time) *WorkflowExecutionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowExecutionUpdateOne) SetUpdateBy(v uint64) *WorkflowExecutionUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowExecutionUpdateOne) AddUpdateBy(v int64) *WorkflowExecutionUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowExecutionUpdateOne) ClearUpdateBy() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetExecutionID sets the "execution_id" field.
func (_u *WorkflowExecutionUpdateOne) SetExecutionID(v string) *WorkflowExecutionUpdateOne {
	_u.mutation.SetExecutionID(v)
	return _u
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableExecutionID(v *string) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetExecutionID(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowExecutionUpdateOne) SetApplicationID(v uint64) *WorkflowExecutionUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableApplicationID(v *uint64) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *WorkflowExecutionUpdateOne) SetStatus(v workflowexecution.Status) *WorkflowExecutionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableStatus(v *workflowexecution.Status) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetInput sets the "input" field.
func (_u *WorkflowExecutionUpdateOne) SetInput(v map[string]interface{}) *WorkflowExecutionUpdateOne {
	_u.mutation.SetInput(v)
	return _u
}

// ClearInput clears the value of the "input" field.
func (_u *WorkflowExecutionUpdateOne) ClearInput() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearInput()
	return _u
}

// SetOutput sets the "output" field.
func (_u *WorkflowExecutionUpdateOne) SetOutput(v map[string]interface{}) *WorkflowExecutionUpdateOne {
	_u.mutation.SetOutput(v)
	return _u
}

// ClearOutput clears the value of the "output" field.
func (_u *WorkflowExecutionUpdateOne) ClearOutput() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearOutput()
	return _u
}

// SetContext sets the "context" field.
func (_u *WorkflowExecutionUpdateOne) SetContext(v map[string]interface{}) *WorkflowExecutionUpdateOne {
	_u.mutation.SetContext(v)
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *WorkflowExecutionUpdateOne) ClearContext() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearContext()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *WorkflowExecutionUpdateOne) SetStartedAt(v time.Time) *WorkflowExecutionUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableStartedAt(v *time.Time) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *WorkflowExecutionUpdateOne) ClearStartedAt() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *WorkflowExecutionUpdateOne) SetFinishedAt(v time.Time) *WorkflowExecutionUpdateOne {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableFinishedAt(v *time.Time) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (_u *WorkflowExecutionUpdateOne) ClearFinishedAt() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearFinishedAt()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *WorkflowExecutionUpdateOne) SetDurationMs(v int) *WorkflowExecutionUpdateOne {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableDurationMs(v *int) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *WorkflowExecutionUpdateOne) AddDurationMs(v int) *WorkflowExecutionUpdateOne {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetTotalTokens sets the "total_tokens" field.
func (_u *WorkflowExecutionUpdateOne) SetTotalTokens(v int) *WorkflowExecutionUpdateOne {
	_u.mutation.ResetTotalTokens()
	_u.mutation.SetTotalTokens(v)
	return _u
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableTotalTokens(v *int) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetTotalTokens(*v)
	}
	return _u
}

// AddTotalTokens adds value to the "total_tokens" field.
func (_u *WorkflowExecutionUpdateOne) AddTotalTokens(v int) *WorkflowExecutionUpdateOne {
	_u.mutation.AddTotalTokens(v)
	return _u
}

// SetTotalCost sets the "total_cost" field.
func (_u *WorkflowExecutionUpdateOne) SetTotalCost(v float64) *WorkflowExecutionUpdateOne {
	_u.mutation.ResetTotalCost()
	_u.mutation.SetTotalCost(v)
	return _u
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableTotalCost(v *float64) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetTotalCost(*v)
	}
	return _u
}

// AddTotalCost adds value to the "total_cost" field.
func (_u *WorkflowExecutionUpdateOne) AddTotalCost(v float64) *WorkflowExecutionUpdateOne {
	_u.mutation.AddTotalCost(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *WorkflowExecutionUpdateOne) SetErrorMessage(v string) *WorkflowExecutionUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableErrorMessage(v *string) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *WorkflowExecutionUpdateOne) ClearErrorMessage() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetErrorStack sets the "error_stack" field.
func (_u *WorkflowExecutionUpdateOne) SetErrorStack(v string) *WorkflowExecutionUpdateOne {
	_u.mutation.SetErrorStack(v)
	return _u
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableErrorStack(v *string) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetErrorStack(*v)
	}
	return _u
}

// ClearErrorStack clears the value of the "error_stack" field.
func (_u *WorkflowExecutionUpdateOne) ClearErrorStack() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearErrorStack()
	return _u
}

// SetTriggeredBy sets the "triggered_by" field.
func (_u *WorkflowExecutionUpdateOne) SetTriggeredBy(v string) *WorkflowExecutionUpdateOne {
	_u.mutation.SetTriggeredBy(v)
	return _u
}

// SetNillableTriggeredBy sets the "triggered_by" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableTriggeredBy(v *string) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetTriggeredBy(*v)
	}
	return _u
}

// ClearTriggeredBy clears the value of the "triggered_by" field.
func (_u *WorkflowExecutionUpdateOne) ClearTriggeredBy() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearTriggeredBy()
	return _u
}

// SetTriggerSource sets the "trigger_source" field.
func (_u *WorkflowExecutionUpdateOne) SetTriggerSource(v string) *WorkflowExecutionUpdateOne {
	_u.mutation.SetTriggerSource(v)
	return _u
}

// SetNillableTriggerSource sets the "trigger_source" field if the given value is not nil.
func (_u *WorkflowExecutionUpdateOne) SetNillableTriggerSource(v *string) *WorkflowExecutionUpdateOne {
	if v != nil {
		_u.SetTriggerSource(*v)
	}
	return _u
}

// ClearTriggerSource clears the value of the "trigger_source" field.
func (_u *WorkflowExecutionUpdateOne) ClearTriggerSource() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearTriggerSource()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowExecutionUpdateOne) SetApplication(v *WorkflowApplication) *WorkflowExecutionUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// AddNodeExecutionIDs adds the "node_executions" edge to the WorkflowNodeExecution entity by IDs.
func (_u *WorkflowExecutionUpdateOne) AddNodeExecutionIDs(ids ...uint64) *WorkflowExecutionUpdateOne {
	_u.mutation.AddNodeExecutionIDs(ids...)
	return _u
}

// AddNodeExecutions adds the "node_executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowExecutionUpdateOne) AddNodeExecutions(v ...*WorkflowNodeExecution) *WorkflowExecutionUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeExecutionIDs(ids...)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (_u *WorkflowExecutionUpdateOne) Mutation() *WorkflowExecutionMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowExecutionUpdateOne) ClearApplication() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearNodeExecutions clears all "node_executions" edges to the WorkflowNodeExecution entity.
func (_u *WorkflowExecutionUpdateOne) ClearNodeExecutions() *WorkflowExecutionUpdateOne {
	_u.mutation.ClearNodeExecutions()
	return _u
}

// RemoveNodeExecutionIDs removes the "node_executions" edge to WorkflowNodeExecution entities by IDs.
func (_u *WorkflowExecutionUpdateOne) RemoveNodeExecutionIDs(ids ...uint64) *WorkflowExecutionUpdateOne {
	_u.mutation.RemoveNodeExecutionIDs(ids...)
	return _u
}

// RemoveNodeExecutions removes "node_executions" edges to WorkflowNodeExecution entities.
func (_u *WorkflowExecutionUpdateOne) RemoveNodeExecutions(v ...*WorkflowNodeExecution) *WorkflowExecutionUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeExecutionIDs(ids...)
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (_u *WorkflowExecutionUpdateOne) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowExecutionUpdateOne) Select(field string, fields ...string) *WorkflowExecutionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowExecution entity.
func (_u *WorkflowExecutionUpdateOne) Save(ctx context.Context) (*WorkflowExecution, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowExecutionUpdateOne) SaveX(ctx context.Context) *WorkflowExecution {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowExecutionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowexecution.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowexecution.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowExecutionUpdateOne) check() error {
	if v, ok := _u.mutation.ExecutionID(); ok {
		if err := workflowexecution.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.execution_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.application"`)
	}
	return nil
}

func (_u *WorkflowExecutionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecution, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecution.FieldID)
		for _, f := range fields {
			if !workflowexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowexecution.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowexecution.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowexecution.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowexecution.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExecutionID(); ok {
		_spec.SetField(workflowexecution.FieldExecutionID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Input(); ok {
		_spec.SetField(workflowexecution.FieldInput, field.TypeJSON, value)
	}
	if _u.mutation.InputCleared() {
		_spec.ClearField(workflowexecution.FieldInput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
	}
	if _u.mutation.OutputCleared() {
		_spec.ClearField(workflowexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(workflowexecution.FieldContext, field.TypeJSON, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(workflowexecution.FieldContext, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(workflowexecution.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(workflowexecution.FieldFinishedAt, field.TypeTime, value)
	}
	if _u.mutation.FinishedAtCleared() {
		_spec.ClearField(workflowexecution.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflowexecution.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalTokens(); ok {
		_spec.SetField(workflowexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTokens(); ok {
		_spec.AddField(workflowexecution.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalCost(); ok {
		_spec.SetField(workflowexecution.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalCost(); ok {
		_spec.AddField(workflowexecution.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(workflowexecution.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(workflowexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorStack(); ok {
		_spec.SetField(workflowexecution.FieldErrorStack, field.TypeString, value)
	}
	if _u.mutation.ErrorStackCleared() {
		_spec.ClearField(workflowexecution.FieldErrorStack, field.TypeString)
	}
	if value, ok := _u.mutation.TriggeredBy(); ok {
		_spec.SetField(workflowexecution.FieldTriggeredBy, field.TypeString, value)
	}
	if _u.mutation.TriggeredByCleared() {
		_spec.ClearField(workflowexecution.FieldTriggeredBy, field.TypeString)
	}
	if value, ok := _u.mutation.TriggerSource(); ok {
		_spec.SetField(workflowexecution.FieldTriggerSource, field.TypeString, value)
	}
	if _u.mutation.TriggerSourceCleared() {
		_spec.ClearField(workflowexecution.FieldTriggerSource, field.TypeString)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ApplicationTable,
			Columns: []string{workflowexecution.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ApplicationTable,
			Columns: []string{workflowexecution.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeExecutionsIDs(); len(nodes) > 0 && !_u.mutation.NodeExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.NodeExecutionsTable,
			Columns: []string{workflowexecution.NodeExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownodeexecution.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowExecution{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
