// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"go-backend/database/ent/subwaystation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubwayStationUpdate is the builder for updating SubwayStation entities.
type SubwayStationUpdate struct {
	config
	hooks    []Hook
	mutation *SubwayStationMutation
}

// Where appends a list predicates to the SubwayStationUpdate builder.
func (_u *SubwayStationUpdate) Where(ps ...predicate.SubwayStation) *SubwayStationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *SubwayStationUpdate) SetCreateBy(v uint64) *SubwayStationUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableCreateBy(v *uint64) *SubwayStationUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *SubwayStationUpdate) AddCreateBy(v int64) *SubwayStationUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SubwayStationUpdate) ClearCreateBy() *SubwayStationUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SubwayStationUpdate) SetUpdateTime(v time.Time) *SubwayStationUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SubwayStationUpdate) SetUpdateBy(v uint64) *SubwayStationUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableUpdateBy(v *uint64) *SubwayStationUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *SubwayStationUpdate) AddUpdateBy(v int64) *SubwayStationUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SubwayStationUpdate) ClearUpdateBy() *SubwayStationUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *SubwayStationUpdate) SetDeleteTime(v time.Time) *SubwayStationUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableDeleteTime(v *time.Time) *SubwayStationUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *SubwayStationUpdate) ClearDeleteTime() *SubwayStationUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *SubwayStationUpdate) SetDeleteBy(v uint64) *SubwayStationUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableDeleteBy(v *uint64) *SubwayStationUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *SubwayStationUpdate) AddDeleteBy(v int64) *SubwayStationUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *SubwayStationUpdate) ClearDeleteBy() *SubwayStationUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetStationID sets the "station_id" field.
func (_u *SubwayStationUpdate) SetStationID(v uint64) *SubwayStationUpdate {
	_u.mutation.SetStationID(v)
	return _u
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableStationID(v *uint64) *SubwayStationUpdate {
	if v != nil {
		_u.SetStationID(*v)
	}
	return _u
}

// SetSubwayID sets the "subway_id" field.
func (_u *SubwayStationUpdate) SetSubwayID(v uint64) *SubwayStationUpdate {
	_u.mutation.SetSubwayID(v)
	return _u
}

// SetNillableSubwayID sets the "subway_id" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableSubwayID(v *uint64) *SubwayStationUpdate {
	if v != nil {
		_u.SetSubwayID(*v)
	}
	return _u
}

// SetSequence sets the "sequence" field.
func (_u *SubwayStationUpdate) SetSequence(v int) *SubwayStationUpdate {
	_u.mutation.ResetSequence()
	_u.mutation.SetSequence(v)
	return _u
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (_u *SubwayStationUpdate) SetNillableSequence(v *int) *SubwayStationUpdate {
	if v != nil {
		_u.SetSequence(*v)
	}
	return _u
}

// AddSequence adds value to the "sequence" field.
func (_u *SubwayStationUpdate) AddSequence(v int) *SubwayStationUpdate {
	_u.mutation.AddSequence(v)
	return _u
}

// ClearSequence clears the value of the "sequence" field.
func (_u *SubwayStationUpdate) ClearSequence() *SubwayStationUpdate {
	_u.mutation.ClearSequence()
	return _u
}

// SetStation sets the "station" edge to the Station entity.
func (_u *SubwayStationUpdate) SetStation(v *Station) *SubwayStationUpdate {
	return _u.SetStationID(v.ID)
}

// SetSubway sets the "subway" edge to the Subway entity.
func (_u *SubwayStationUpdate) SetSubway(v *Subway) *SubwayStationUpdate {
	return _u.SetSubwayID(v.ID)
}

// Mutation returns the SubwayStationMutation object of the builder.
func (_u *SubwayStationUpdate) Mutation() *SubwayStationMutation {
	return _u.mutation
}

// ClearStation clears the "station" edge to the Station entity.
func (_u *SubwayStationUpdate) ClearStation() *SubwayStationUpdate {
	_u.mutation.ClearStation()
	return _u
}

// ClearSubway clears the "subway" edge to the Subway entity.
func (_u *SubwayStationUpdate) ClearSubway() *SubwayStationUpdate {
	_u.mutation.ClearSubway()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubwayStationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubwayStationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubwayStationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubwayStationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubwayStationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if subwaystation.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized subwaystation.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := subwaystation.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubwayStationUpdate) check() error {
	if _u.mutation.StationCleared() && len(_u.mutation.StationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubwayStation.station"`)
	}
	if _u.mutation.SubwayCleared() && len(_u.mutation.SubwayIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubwayStation.subway"`)
	}
	return nil
}

func (_u *SubwayStationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subwaystation.Table, subwaystation.Columns, sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(subwaystation.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(subwaystation.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(subwaystation.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(subwaystation.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(subwaystation.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(subwaystation.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(subwaystation.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(subwaystation.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(subwaystation.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(subwaystation.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(subwaystation.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(subwaystation.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Sequence(); ok {
		_spec.SetField(subwaystation.FieldSequence, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSequence(); ok {
		_spec.AddField(subwaystation.FieldSequence, field.TypeInt, value)
	}
	if _u.mutation.SequenceCleared() {
		_spec.ClearField(subwaystation.FieldSequence, field.TypeInt)
	}
	if _u.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.StationTable,
			Columns: []string{subwaystation.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.StationTable,
			Columns: []string{subwaystation.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.SubwayTable,
			Columns: []string{subwaystation.SubwayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.SubwayTable,
			Columns: []string{subwaystation.SubwayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subwaystation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubwayStationUpdateOne is the builder for updating a single SubwayStation entity.
type SubwayStationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubwayStationMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *SubwayStationUpdateOne) SetCreateBy(v uint64) *SubwayStationUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableCreateBy(v *uint64) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *SubwayStationUpdateOne) AddCreateBy(v int64) *SubwayStationUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SubwayStationUpdateOne) ClearCreateBy() *SubwayStationUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SubwayStationUpdateOne) SetUpdateTime(v time.Time) *SubwayStationUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SubwayStationUpdateOne) SetUpdateBy(v uint64) *SubwayStationUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableUpdateBy(v *uint64) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *SubwayStationUpdateOne) AddUpdateBy(v int64) *SubwayStationUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SubwayStationUpdateOne) ClearUpdateBy() *SubwayStationUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *SubwayStationUpdateOne) SetDeleteTime(v time.Time) *SubwayStationUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableDeleteTime(v *time.Time) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *SubwayStationUpdateOne) ClearDeleteTime() *SubwayStationUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *SubwayStationUpdateOne) SetDeleteBy(v uint64) *SubwayStationUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableDeleteBy(v *uint64) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *SubwayStationUpdateOne) AddDeleteBy(v int64) *SubwayStationUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *SubwayStationUpdateOne) ClearDeleteBy() *SubwayStationUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetStationID sets the "station_id" field.
func (_u *SubwayStationUpdateOne) SetStationID(v uint64) *SubwayStationUpdateOne {
	_u.mutation.SetStationID(v)
	return _u
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableStationID(v *uint64) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetStationID(*v)
	}
	return _u
}

// SetSubwayID sets the "subway_id" field.
func (_u *SubwayStationUpdateOne) SetSubwayID(v uint64) *SubwayStationUpdateOne {
	_u.mutation.SetSubwayID(v)
	return _u
}

// SetNillableSubwayID sets the "subway_id" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableSubwayID(v *uint64) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetSubwayID(*v)
	}
	return _u
}

// SetSequence sets the "sequence" field.
func (_u *SubwayStationUpdateOne) SetSequence(v int) *SubwayStationUpdateOne {
	_u.mutation.ResetSequence()
	_u.mutation.SetSequence(v)
	return _u
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (_u *SubwayStationUpdateOne) SetNillableSequence(v *int) *SubwayStationUpdateOne {
	if v != nil {
		_u.SetSequence(*v)
	}
	return _u
}

// AddSequence adds value to the "sequence" field.
func (_u *SubwayStationUpdateOne) AddSequence(v int) *SubwayStationUpdateOne {
	_u.mutation.AddSequence(v)
	return _u
}

// ClearSequence clears the value of the "sequence" field.
func (_u *SubwayStationUpdateOne) ClearSequence() *SubwayStationUpdateOne {
	_u.mutation.ClearSequence()
	return _u
}

// SetStation sets the "station" edge to the Station entity.
func (_u *SubwayStationUpdateOne) SetStation(v *Station) *SubwayStationUpdateOne {
	return _u.SetStationID(v.ID)
}

// SetSubway sets the "subway" edge to the Subway entity.
func (_u *SubwayStationUpdateOne) SetSubway(v *Subway) *SubwayStationUpdateOne {
	return _u.SetSubwayID(v.ID)
}

// Mutation returns the SubwayStationMutation object of the builder.
func (_u *SubwayStationUpdateOne) Mutation() *SubwayStationMutation {
	return _u.mutation
}

// ClearStation clears the "station" edge to the Station entity.
func (_u *SubwayStationUpdateOne) ClearStation() *SubwayStationUpdateOne {
	_u.mutation.ClearStation()
	return _u
}

// ClearSubway clears the "subway" edge to the Subway entity.
func (_u *SubwayStationUpdateOne) ClearSubway() *SubwayStationUpdateOne {
	_u.mutation.ClearSubway()
	return _u
}

// Where appends a list predicates to the SubwayStationUpdate builder.
func (_u *SubwayStationUpdateOne) Where(ps ...predicate.SubwayStation) *SubwayStationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubwayStationUpdateOne) Select(field string, fields ...string) *SubwayStationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubwayStation entity.
func (_u *SubwayStationUpdateOne) Save(ctx context.Context) (*SubwayStation, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubwayStationUpdateOne) SaveX(ctx context.Context) *SubwayStation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubwayStationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubwayStationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubwayStationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if subwaystation.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized subwaystation.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := subwaystation.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubwayStationUpdateOne) check() error {
	if _u.mutation.StationCleared() && len(_u.mutation.StationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubwayStation.station"`)
	}
	if _u.mutation.SubwayCleared() && len(_u.mutation.SubwayIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubwayStation.subway"`)
	}
	return nil
}

func (_u *SubwayStationUpdateOne) sqlSave(ctx context.Context) (_node *SubwayStation, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subwaystation.Table, subwaystation.Columns, sqlgraph.NewFieldSpec(subwaystation.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubwayStation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subwaystation.FieldID)
		for _, f := range fields {
			if !subwaystation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subwaystation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(subwaystation.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(subwaystation.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(subwaystation.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(subwaystation.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(subwaystation.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(subwaystation.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(subwaystation.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(subwaystation.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(subwaystation.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(subwaystation.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(subwaystation.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(subwaystation.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Sequence(); ok {
		_spec.SetField(subwaystation.FieldSequence, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSequence(); ok {
		_spec.AddField(subwaystation.FieldSequence, field.TypeInt, value)
	}
	if _u.mutation.SequenceCleared() {
		_spec.ClearField(subwaystation.FieldSequence, field.TypeInt)
	}
	if _u.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.StationTable,
			Columns: []string{subwaystation.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.StationTable,
			Columns: []string{subwaystation.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubwayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.SubwayTable,
			Columns: []string{subwaystation.SubwayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubwayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subwaystation.SubwayTable,
			Columns: []string{subwaystation.SubwayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subway.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubwayStation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subwaystation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
