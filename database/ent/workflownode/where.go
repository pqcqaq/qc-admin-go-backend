// Code generated by ent, DO NOT EDIT.

package workflownode

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDeleteBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDescription, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPrompt, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldApplicationID, v))
}

// ProcessorLanguage applies equality check predicate on the "processor_language" field. It's identical to ProcessorLanguageEQ.
func ProcessorLanguage(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldProcessorLanguage, v))
}

// ProcessorCode applies equality check predicate on the "processor_code" field. It's identical to ProcessorCodeEQ.
func ProcessorCode(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldProcessorCode, v))
}

// Async applies equality check predicate on the "async" field. It's identical to AsyncEQ.
func Async(v bool) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldAsync, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldTimeout, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldRetryCount, v))
}

// PositionX applies equality check predicate on the "position_x" field. It's identical to PositionXEQ.
func PositionX(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPositionX, v))
}

// PositionY applies equality check predicate on the "position_y" field. It's identical to PositionYEQ.
func PositionY(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPositionY, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldColor, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldDeleteBy))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldType, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldDescription, v))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptIsNil applies the IsNil predicate on the "prompt" field.
func PromptIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldPrompt))
}

// PromptNotNil applies the NotNil predicate on the "prompt" field.
func PromptNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldPrompt))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldPrompt, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldApplicationID, vs...))
}

// ProcessorLanguageEQ applies the EQ predicate on the "processor_language" field.
func ProcessorLanguageEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldProcessorLanguage, v))
}

// ProcessorLanguageNEQ applies the NEQ predicate on the "processor_language" field.
func ProcessorLanguageNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldProcessorLanguage, v))
}

// ProcessorLanguageIn applies the In predicate on the "processor_language" field.
func ProcessorLanguageIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldProcessorLanguage, vs...))
}

// ProcessorLanguageNotIn applies the NotIn predicate on the "processor_language" field.
func ProcessorLanguageNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldProcessorLanguage, vs...))
}

// ProcessorLanguageGT applies the GT predicate on the "processor_language" field.
func ProcessorLanguageGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldProcessorLanguage, v))
}

// ProcessorLanguageGTE applies the GTE predicate on the "processor_language" field.
func ProcessorLanguageGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldProcessorLanguage, v))
}

// ProcessorLanguageLT applies the LT predicate on the "processor_language" field.
func ProcessorLanguageLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldProcessorLanguage, v))
}

// ProcessorLanguageLTE applies the LTE predicate on the "processor_language" field.
func ProcessorLanguageLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldProcessorLanguage, v))
}

// ProcessorLanguageContains applies the Contains predicate on the "processor_language" field.
func ProcessorLanguageContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldProcessorLanguage, v))
}

// ProcessorLanguageHasPrefix applies the HasPrefix predicate on the "processor_language" field.
func ProcessorLanguageHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldProcessorLanguage, v))
}

// ProcessorLanguageHasSuffix applies the HasSuffix predicate on the "processor_language" field.
func ProcessorLanguageHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldProcessorLanguage, v))
}

// ProcessorLanguageIsNil applies the IsNil predicate on the "processor_language" field.
func ProcessorLanguageIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldProcessorLanguage))
}

// ProcessorLanguageNotNil applies the NotNil predicate on the "processor_language" field.
func ProcessorLanguageNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldProcessorLanguage))
}

// ProcessorLanguageEqualFold applies the EqualFold predicate on the "processor_language" field.
func ProcessorLanguageEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldProcessorLanguage, v))
}

// ProcessorLanguageContainsFold applies the ContainsFold predicate on the "processor_language" field.
func ProcessorLanguageContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldProcessorLanguage, v))
}

// ProcessorCodeEQ applies the EQ predicate on the "processor_code" field.
func ProcessorCodeEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldProcessorCode, v))
}

// ProcessorCodeNEQ applies the NEQ predicate on the "processor_code" field.
func ProcessorCodeNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldProcessorCode, v))
}

// ProcessorCodeIn applies the In predicate on the "processor_code" field.
func ProcessorCodeIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldProcessorCode, vs...))
}

// ProcessorCodeNotIn applies the NotIn predicate on the "processor_code" field.
func ProcessorCodeNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldProcessorCode, vs...))
}

// ProcessorCodeGT applies the GT predicate on the "processor_code" field.
func ProcessorCodeGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldProcessorCode, v))
}

// ProcessorCodeGTE applies the GTE predicate on the "processor_code" field.
func ProcessorCodeGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldProcessorCode, v))
}

// ProcessorCodeLT applies the LT predicate on the "processor_code" field.
func ProcessorCodeLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldProcessorCode, v))
}

// ProcessorCodeLTE applies the LTE predicate on the "processor_code" field.
func ProcessorCodeLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldProcessorCode, v))
}

// ProcessorCodeContains applies the Contains predicate on the "processor_code" field.
func ProcessorCodeContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldProcessorCode, v))
}

// ProcessorCodeHasPrefix applies the HasPrefix predicate on the "processor_code" field.
func ProcessorCodeHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldProcessorCode, v))
}

// ProcessorCodeHasSuffix applies the HasSuffix predicate on the "processor_code" field.
func ProcessorCodeHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldProcessorCode, v))
}

// ProcessorCodeIsNil applies the IsNil predicate on the "processor_code" field.
func ProcessorCodeIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldProcessorCode))
}

// ProcessorCodeNotNil applies the NotNil predicate on the "processor_code" field.
func ProcessorCodeNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldProcessorCode))
}

// ProcessorCodeEqualFold applies the EqualFold predicate on the "processor_code" field.
func ProcessorCodeEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldProcessorCode, v))
}

// ProcessorCodeContainsFold applies the ContainsFold predicate on the "processor_code" field.
func ProcessorCodeContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldProcessorCode, v))
}

// BranchNodesIsNil applies the IsNil predicate on the "branch_nodes" field.
func BranchNodesIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldBranchNodes))
}

// BranchNodesNotNil applies the NotNil predicate on the "branch_nodes" field.
func BranchNodesNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldBranchNodes))
}

// ParallelConfigIsNil applies the IsNil predicate on the "parallel_config" field.
func ParallelConfigIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldParallelConfig))
}

// ParallelConfigNotNil applies the NotNil predicate on the "parallel_config" field.
func ParallelConfigNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldParallelConfig))
}

// APIConfigIsNil applies the IsNil predicate on the "api_config" field.
func APIConfigIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldAPIConfig))
}

// APIConfigNotNil applies the NotNil predicate on the "api_config" field.
func APIConfigNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldAPIConfig))
}

// AsyncEQ applies the EQ predicate on the "async" field.
func AsyncEQ(v bool) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldAsync, v))
}

// AsyncNEQ applies the NEQ predicate on the "async" field.
func AsyncNEQ(v bool) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldAsync, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldTimeout, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldRetryCount, v))
}

// PositionXEQ applies the EQ predicate on the "position_x" field.
func PositionXEQ(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPositionX, v))
}

// PositionXNEQ applies the NEQ predicate on the "position_x" field.
func PositionXNEQ(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldPositionX, v))
}

// PositionXIn applies the In predicate on the "position_x" field.
func PositionXIn(vs ...float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldPositionX, vs...))
}

// PositionXNotIn applies the NotIn predicate on the "position_x" field.
func PositionXNotIn(vs ...float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldPositionX, vs...))
}

// PositionXGT applies the GT predicate on the "position_x" field.
func PositionXGT(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldPositionX, v))
}

// PositionXGTE applies the GTE predicate on the "position_x" field.
func PositionXGTE(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldPositionX, v))
}

// PositionXLT applies the LT predicate on the "position_x" field.
func PositionXLT(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldPositionX, v))
}

// PositionXLTE applies the LTE predicate on the "position_x" field.
func PositionXLTE(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldPositionX, v))
}

// PositionYEQ applies the EQ predicate on the "position_y" field.
func PositionYEQ(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldPositionY, v))
}

// PositionYNEQ applies the NEQ predicate on the "position_y" field.
func PositionYNEQ(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldPositionY, v))
}

// PositionYIn applies the In predicate on the "position_y" field.
func PositionYIn(vs ...float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldPositionY, vs...))
}

// PositionYNotIn applies the NotIn predicate on the "position_y" field.
func PositionYNotIn(vs ...float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldPositionY, vs...))
}

// PositionYGT applies the GT predicate on the "position_y" field.
func PositionYGT(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldPositionY, v))
}

// PositionYGTE applies the GTE predicate on the "position_y" field.
func PositionYGTE(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldPositionY, v))
}

// PositionYLT applies the LT predicate on the "position_y" field.
func PositionYLT(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldPositionY, v))
}

// PositionYLTE applies the LTE predicate on the "position_y" field.
func PositionYLTE(v float64) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldPositionY, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.FieldContainsFold(FieldColor, v))
}

// HasApplication applies the HasEdge predicate on the "application" edge.
func HasApplication() predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationWith applies the HasEdge predicate on the "application" edge with a given conditions (other predicates).
func HasApplicationWith(preds ...predicate.WorkflowApplication) predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := newApplicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.WorkflowNodeExecution) predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutgoingEdges applies the HasEdge predicate on the "outgoing_edges" edge.
func HasOutgoingEdges() predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutgoingEdgesTable, OutgoingEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutgoingEdgesWith applies the HasEdge predicate on the "outgoing_edges" edge with a given conditions (other predicates).
func HasOutgoingEdgesWith(preds ...predicate.WorkflowEdge) predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := newOutgoingEdgesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncomingEdges applies the HasEdge predicate on the "incoming_edges" edge.
func HasIncomingEdges() predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncomingEdgesTable, IncomingEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncomingEdgesWith applies the HasEdge predicate on the "incoming_edges" edge with a given conditions (other predicates).
func HasIncomingEdgesWith(preds ...predicate.WorkflowEdge) predicate.WorkflowNode {
	return predicate.WorkflowNode(func(s *sql.Selector) {
		step := newIncomingEdgesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowNode) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowNode) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowNode) predicate.WorkflowNode {
	return predicate.WorkflowNode(sql.NotPredicates(p))
}
