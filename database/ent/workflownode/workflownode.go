// Code generated by ent, DO NOT EDIT.

package workflownode

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflownode type in the database.
	Label = "workflow_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldProcessorLanguage holds the string denoting the processor_language field in the database.
	FieldProcessorLanguage = "processor_language"
	// FieldProcessorCode holds the string denoting the processor_code field in the database.
	FieldProcessorCode = "processor_code"
	// FieldBranchNodes holds the string denoting the branch_nodes field in the database.
	FieldBranchNodes = "branch_nodes"
	// FieldParallelConfig holds the string denoting the parallel_config field in the database.
	FieldParallelConfig = "parallel_config"
	// FieldAPIConfig holds the string denoting the api_config field in the database.
	FieldAPIConfig = "api_config"
	// FieldAsync holds the string denoting the async field in the database.
	FieldAsync = "async"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldPositionX holds the string denoting the position_x field in the database.
	FieldPositionX = "position_x"
	// FieldPositionY holds the string denoting the position_y field in the database.
	FieldPositionY = "position_y"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// EdgeExecutions holds the string denoting the executions edge name in mutations.
	EdgeExecutions = "executions"
	// EdgeOutgoingEdges holds the string denoting the outgoing_edges edge name in mutations.
	EdgeOutgoingEdges = "outgoing_edges"
	// EdgeIncomingEdges holds the string denoting the incoming_edges edge name in mutations.
	EdgeIncomingEdges = "incoming_edges"
	// Table holds the table name of the workflownode in the database.
	Table = "workflow_nodes"
	// ApplicationTable is the table that holds the application relation/edge.
	ApplicationTable = "workflow_nodes"
	// ApplicationInverseTable is the table name for the WorkflowApplication entity.
	// It exists in this package in order to avoid circular dependency with the "workflowapplication" package.
	ApplicationInverseTable = "workflow_applications"
	// ApplicationColumn is the table column denoting the application relation/edge.
	ApplicationColumn = "application_id"
	// ExecutionsTable is the table that holds the executions relation/edge.
	ExecutionsTable = "workflow_node_executions"
	// ExecutionsInverseTable is the table name for the WorkflowNodeExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflownodeexecution" package.
	ExecutionsInverseTable = "workflow_node_executions"
	// ExecutionsColumn is the table column denoting the executions relation/edge.
	ExecutionsColumn = "node_id"
	// OutgoingEdgesTable is the table that holds the outgoing_edges relation/edge.
	OutgoingEdgesTable = "workflow_edges"
	// OutgoingEdgesInverseTable is the table name for the WorkflowEdge entity.
	// It exists in this package in order to avoid circular dependency with the "workflowedge" package.
	OutgoingEdgesInverseTable = "workflow_edges"
	// OutgoingEdgesColumn is the table column denoting the outgoing_edges relation/edge.
	OutgoingEdgesColumn = "source_node_id"
	// IncomingEdgesTable is the table that holds the incoming_edges relation/edge.
	IncomingEdgesTable = "workflow_edges"
	// IncomingEdgesInverseTable is the table name for the WorkflowEdge entity.
	// It exists in this package in order to avoid circular dependency with the "workflowedge" package.
	IncomingEdgesInverseTable = "workflow_edges"
	// IncomingEdgesColumn is the table column denoting the incoming_edges relation/edge.
	IncomingEdgesColumn = "target_node_id"
)

// Columns holds all SQL columns for workflownode fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldName,
	FieldType,
	FieldDescription,
	FieldPrompt,
	FieldConfig,
	FieldApplicationID,
	FieldProcessorLanguage,
	FieldProcessorCode,
	FieldBranchNodes,
	FieldParallelConfig,
	FieldAPIConfig,
	FieldAsync,
	FieldTimeout,
	FieldRetryCount,
	FieldPositionX,
	FieldPositionY,
	FieldColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultAsync holds the default value on creation for the "async" field.
	DefaultAsync bool
	// DefaultTimeout holds the default value on creation for the "timeout" field.
	DefaultTimeout int
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
	// DefaultPositionX holds the default value on creation for the "position_x" field.
	DefaultPositionX float64
	// DefaultPositionY holds the default value on creation for the "position_y" field.
	DefaultPositionY float64
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeUserInput         Type = "user_input"
	TypeTodoTaskGenerator Type = "todo_task_generator"
	TypeConditionChecker  Type = "condition_checker"
	TypeAPICaller         Type = "api_caller"
	TypeDataProcessor     Type = "data_processor"
	TypeWhileLoop         Type = "while_loop"
	TypeEndNode           Type = "end_node"
	TypeParallelExecutor  Type = "parallel_executor"
	TypeLlmCaller         Type = "llm_caller"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUserInput, TypeTodoTaskGenerator, TypeConditionChecker, TypeAPICaller, TypeDataProcessor, TypeWhileLoop, TypeEndNode, TypeParallelExecutor, TypeLlmCaller:
		return nil
	default:
		return fmt.Errorf("workflownode: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the WorkflowNode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByProcessorLanguage orders the results by the processor_language field.
func ByProcessorLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessorLanguage, opts...).ToFunc()
}

// ByProcessorCode orders the results by the processor_code field.
func ByProcessorCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessorCode, opts...).ToFunc()
}

// ByAsync orders the results by the async field.
func ByAsync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsync, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByPositionX orders the results by the position_x field.
func ByPositionX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionX, opts...).ToFunc()
}

// ByPositionY orders the results by the position_y field.
func ByPositionY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionY, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByApplicationField orders the results by application field.
func ByApplicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), sql.OrderByField(field, opts...))
	}
}

// ByExecutionsCount orders the results by executions count.
func ByExecutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExecutionsStep(), opts...)
	}
}

// ByExecutions orders the results by executions terms.
func ByExecutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutgoingEdgesCount orders the results by outgoing_edges count.
func ByOutgoingEdgesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutgoingEdgesStep(), opts...)
	}
}

// ByOutgoingEdges orders the results by outgoing_edges terms.
func ByOutgoingEdges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutgoingEdgesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncomingEdgesCount orders the results by incoming_edges count.
func ByIncomingEdgesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncomingEdgesStep(), opts...)
	}
}

// ByIncomingEdges orders the results by incoming_edges terms.
func ByIncomingEdges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncomingEdgesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
	)
}
func newExecutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
	)
}
func newOutgoingEdgesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutgoingEdgesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutgoingEdgesTable, OutgoingEdgesColumn),
	)
}
func newIncomingEdgesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncomingEdgesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IncomingEdgesTable, IncomingEdgesColumn),
	)
}
