// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/role"
	"go-backend/database/ent/rolepermission"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePermissionUpdate is the builder for updating RolePermission entities.
type RolePermissionUpdate struct {
	config
	hooks    []Hook
	mutation *RolePermissionMutation
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (_u *RolePermissionUpdate) Where(ps ...predicate.RolePermission) *RolePermissionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *RolePermissionUpdate) SetCreateBy(v uint64) *RolePermissionUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillableCreateBy(v *uint64) *RolePermissionUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *RolePermissionUpdate) AddCreateBy(v int64) *RolePermissionUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *RolePermissionUpdate) ClearCreateBy() *RolePermissionUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *RolePermissionUpdate) SetUpdateTime(v time.Time) *RolePermissionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *RolePermissionUpdate) SetUpdateBy(v uint64) *RolePermissionUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillableUpdateBy(v *uint64) *RolePermissionUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *RolePermissionUpdate) AddUpdateBy(v int64) *RolePermissionUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *RolePermissionUpdate) ClearUpdateBy() *RolePermissionUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *RolePermissionUpdate) SetDeleteTime(v time.Time) *RolePermissionUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillableDeleteTime(v *time.Time) *RolePermissionUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *RolePermissionUpdate) ClearDeleteTime() *RolePermissionUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *RolePermissionUpdate) SetDeleteBy(v uint64) *RolePermissionUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillableDeleteBy(v *uint64) *RolePermissionUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *RolePermissionUpdate) AddDeleteBy(v int64) *RolePermissionUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *RolePermissionUpdate) ClearDeleteBy() *RolePermissionUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RolePermissionUpdate) SetRoleID(v uint64) *RolePermissionUpdate {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillableRoleID(v *uint64) *RolePermissionUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// SetPermissionID sets the "permission_id" field.
func (_u *RolePermissionUpdate) SetPermissionID(v uint64) *RolePermissionUpdate {
	_u.mutation.SetPermissionID(v)
	return _u
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (_u *RolePermissionUpdate) SetNillablePermissionID(v *uint64) *RolePermissionUpdate {
	if v != nil {
		_u.SetPermissionID(*v)
	}
	return _u
}

// SetRole sets the "role" edge to the Role entity.
func (_u *RolePermissionUpdate) SetRole(v *Role) *RolePermissionUpdate {
	return _u.SetRoleID(v.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (_u *RolePermissionUpdate) SetPermission(v *Permission) *RolePermissionUpdate {
	return _u.SetPermissionID(v.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (_u *RolePermissionUpdate) Mutation() *RolePermissionMutation {
	return _u.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (_u *RolePermissionUpdate) ClearRole() *RolePermissionUpdate {
	_u.mutation.ClearRole()
	return _u
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (_u *RolePermissionUpdate) ClearPermission() *RolePermissionUpdate {
	_u.mutation.ClearPermission()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RolePermissionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RolePermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RolePermissionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RolePermissionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RolePermissionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if rolepermission.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized rolepermission.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := rolepermission.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RolePermissionUpdate) check() error {
	if _u.mutation.RoleCleared() && len(_u.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RolePermission.role"`)
	}
	if _u.mutation.PermissionCleared() && len(_u.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RolePermission.permission"`)
	}
	return nil
}

func (_u *RolePermissionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(rolepermission.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(rolepermission.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(rolepermission.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(rolepermission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(rolepermission.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(rolepermission.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(rolepermission.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(rolepermission.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(rolepermission.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(rolepermission.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(rolepermission.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(rolepermission.FieldDeleteBy, field.TypeUint64)
	}
	if _u.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RolePermissionUpdateOne is the builder for updating a single RolePermission entity.
type RolePermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RolePermissionMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *RolePermissionUpdateOne) SetCreateBy(v uint64) *RolePermissionUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillableCreateBy(v *uint64) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *RolePermissionUpdateOne) AddCreateBy(v int64) *RolePermissionUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *RolePermissionUpdateOne) ClearCreateBy() *RolePermissionUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *RolePermissionUpdateOne) SetUpdateTime(v time.Time) *RolePermissionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *RolePermissionUpdateOne) SetUpdateBy(v uint64) *RolePermissionUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillableUpdateBy(v *uint64) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *RolePermissionUpdateOne) AddUpdateBy(v int64) *RolePermissionUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *RolePermissionUpdateOne) ClearUpdateBy() *RolePermissionUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *RolePermissionUpdateOne) SetDeleteTime(v time.Time) *RolePermissionUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillableDeleteTime(v *time.Time) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *RolePermissionUpdateOne) ClearDeleteTime() *RolePermissionUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *RolePermissionUpdateOne) SetDeleteBy(v uint64) *RolePermissionUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillableDeleteBy(v *uint64) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *RolePermissionUpdateOne) AddDeleteBy(v int64) *RolePermissionUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *RolePermissionUpdateOne) ClearDeleteBy() *RolePermissionUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RolePermissionUpdateOne) SetRoleID(v uint64) *RolePermissionUpdateOne {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillableRoleID(v *uint64) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// SetPermissionID sets the "permission_id" field.
func (_u *RolePermissionUpdateOne) SetPermissionID(v uint64) *RolePermissionUpdateOne {
	_u.mutation.SetPermissionID(v)
	return _u
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (_u *RolePermissionUpdateOne) SetNillablePermissionID(v *uint64) *RolePermissionUpdateOne {
	if v != nil {
		_u.SetPermissionID(*v)
	}
	return _u
}

// SetRole sets the "role" edge to the Role entity.
func (_u *RolePermissionUpdateOne) SetRole(v *Role) *RolePermissionUpdateOne {
	return _u.SetRoleID(v.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (_u *RolePermissionUpdateOne) SetPermission(v *Permission) *RolePermissionUpdateOne {
	return _u.SetPermissionID(v.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (_u *RolePermissionUpdateOne) Mutation() *RolePermissionMutation {
	return _u.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (_u *RolePermissionUpdateOne) ClearRole() *RolePermissionUpdateOne {
	_u.mutation.ClearRole()
	return _u
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (_u *RolePermissionUpdateOne) ClearPermission() *RolePermissionUpdateOne {
	_u.mutation.ClearPermission()
	return _u
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (_u *RolePermissionUpdateOne) Where(ps ...predicate.RolePermission) *RolePermissionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RolePermissionUpdateOne) Select(field string, fields ...string) *RolePermissionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RolePermission entity.
func (_u *RolePermissionUpdateOne) Save(ctx context.Context) (*RolePermission, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RolePermissionUpdateOne) SaveX(ctx context.Context) *RolePermission {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RolePermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RolePermissionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RolePermissionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if rolepermission.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized rolepermission.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := rolepermission.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RolePermissionUpdateOne) check() error {
	if _u.mutation.RoleCleared() && len(_u.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RolePermission.role"`)
	}
	if _u.mutation.PermissionCleared() && len(_u.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RolePermission.permission"`)
	}
	return nil
}

func (_u *RolePermissionUpdateOne) sqlSave(ctx context.Context) (_node *RolePermission, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RolePermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepermission.FieldID)
		for _, f := range fields {
			if !rolepermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(rolepermission.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(rolepermission.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(rolepermission.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(rolepermission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(rolepermission.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(rolepermission.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(rolepermission.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(rolepermission.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(rolepermission.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(rolepermission.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(rolepermission.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(rolepermission.FieldDeleteBy, field.TypeUint64)
	}
	if _u.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RolePermission{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
