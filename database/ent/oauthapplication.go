// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/oauthapplication"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthApplication is the model entity for the OauthApplication schema.
type OauthApplication struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 客户端ID
	ClientID string `json:"client_id,omitempty"`
	// 客户端密钥
	ClientSecret string `json:"-"`
	// 应用名称
	Name string `json:"name,omitempty"`
	// 允许的重定向URI列表
	RedirectUris []string `json:"redirect_uris,omitempty"`
	// 是否为保密客户端
	IsConfidential bool `json:"is_confidential,omitempty"`
	// 应用可请求的权限范围
	Scopes []string `json:"scopes,omitempty"`
	// 启用状态
	AbleState oauthapplication.AbleState `json:"able_state,omitempty"`
	// 所属系统ID
	SystemID uint64 `json:"system_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthApplicationQuery when eager-loading is set.
	Edges        OauthApplicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthApplicationEdges holds the relations/edges for other nodes in the graph.
type OauthApplicationEdges struct {
	// 生成的授权码
	AuthorizationCodes []*OauthAuthorizationCode `json:"authorization_codes,omitempty"`
	// 颁发的令牌
	Tokens []*OauthToken `json:"tokens,omitempty"`
	// 用户授权记录
	UserAuthorizations []*OauthUserAuthorization `json:"user_authorizations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes             [3]bool
	namedAuthorizationCodes map[string][]*OauthAuthorizationCode
	namedTokens             map[string][]*OauthToken
	namedUserAuthorizations map[string][]*OauthUserAuthorization
}

// AuthorizationCodesOrErr returns the AuthorizationCodes value or an error if the edge
// was not loaded in eager-loading.
func (e OauthApplicationEdges) AuthorizationCodesOrErr() ([]*OauthAuthorizationCode, error) {
	if e.loadedTypes[0] {
		return e.AuthorizationCodes, nil
	}
	return nil, &NotLoadedError{edge: "authorization_codes"}
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e OauthApplicationEdges) TokensOrErr() ([]*OauthToken, error) {
	if e.loadedTypes[1] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// UserAuthorizationsOrErr returns the UserAuthorizations value or an error if the edge
// was not loaded in eager-loading.
func (e OauthApplicationEdges) UserAuthorizationsOrErr() ([]*OauthUserAuthorization, error) {
	if e.loadedTypes[2] {
		return e.UserAuthorizations, nil
	}
	return nil, &NotLoadedError{edge: "user_authorizations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthapplication.FieldRedirectUris, oauthapplication.FieldScopes:
			values[i] = new([]byte)
		case oauthapplication.FieldIsConfidential:
			values[i] = new(sql.NullBool)
		case oauthapplication.FieldID, oauthapplication.FieldCreateBy, oauthapplication.FieldUpdateBy, oauthapplication.FieldDeleteBy, oauthapplication.FieldSystemID:
			values[i] = new(sql.NullInt64)
		case oauthapplication.FieldClientID, oauthapplication.FieldClientSecret, oauthapplication.FieldName, oauthapplication.FieldAbleState:
			values[i] = new(sql.NullString)
		case oauthapplication.FieldCreateTime, oauthapplication.FieldUpdateTime, oauthapplication.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthApplication fields.
func (_m *OauthApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthapplication.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthapplication.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthapplication.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthapplication.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthapplication.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthapplication.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthapplication.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthapplication.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = value.String
			}
		case oauthapplication.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				_m.ClientSecret = value.String
			}
		case oauthapplication.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case oauthapplication.FieldRedirectUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RedirectUris); err != nil {
					return fmt.Errorf("unmarshal field redirect_uris: %w", err)
				}
			}
		case oauthapplication.FieldIsConfidential:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_confidential", values[i])
			} else if value.Valid {
				_m.IsConfidential = value.Bool
			}
		case oauthapplication.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case oauthapplication.FieldAbleState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field able_state", values[i])
			} else if value.Valid {
				_m.AbleState = oauthapplication.AbleState(value.String)
			}
		case oauthapplication.FieldSystemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field system_id", values[i])
			} else if value.Valid {
				_m.SystemID = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthApplication.
// This includes values selected through modifiers, order, etc.
func (_m *OauthApplication) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAuthorizationCodes queries the "authorization_codes" edge of the OauthApplication entity.
func (_m *OauthApplication) QueryAuthorizationCodes() *OauthAuthorizationCodeQuery {
	return NewOauthApplicationClient(_m.config).QueryAuthorizationCodes(_m)
}

// QueryTokens queries the "tokens" edge of the OauthApplication entity.
func (_m *OauthApplication) QueryTokens() *OauthTokenQuery {
	return NewOauthApplicationClient(_m.config).QueryTokens(_m)
}

// QueryUserAuthorizations queries the "user_authorizations" edge of the OauthApplication entity.
func (_m *OauthApplication) QueryUserAuthorizations() *OauthUserAuthorizationQuery {
	return NewOauthApplicationClient(_m.config).QueryUserAuthorizations(_m)
}

// Update returns a builder for updating this OauthApplication.
// Note that you need to call OauthApplication.Unwrap() before calling this method if this OauthApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthApplication) Update() *OauthApplicationUpdateOne {
	return NewOauthApplicationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthApplication) Unwrap() *OauthApplication {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthApplication is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthApplication) String() string {
	var builder strings.Builder
	builder.WriteString("OauthApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(_m.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("redirect_uris=")
	builder.WriteString(fmt.Sprintf("%v", _m.RedirectUris))
	builder.WriteString(", ")
	builder.WriteString("is_confidential=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsConfidential))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteString(", ")
	builder.WriteString("able_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.AbleState))
	builder.WriteString(", ")
	builder.WriteString("system_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthorizationCodes returns the AuthorizationCodes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthApplication) NamedAuthorizationCodes(name string) ([]*OauthAuthorizationCode, error) {
	if _m.Edges.namedAuthorizationCodes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAuthorizationCodes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthApplication) appendNamedAuthorizationCodes(name string, edges ...*OauthAuthorizationCode) {
	if _m.Edges.namedAuthorizationCodes == nil {
		_m.Edges.namedAuthorizationCodes = make(map[string][]*OauthAuthorizationCode)
	}
	if len(edges) == 0 {
		_m.Edges.namedAuthorizationCodes[name] = []*OauthAuthorizationCode{}
	} else {
		_m.Edges.namedAuthorizationCodes[name] = append(_m.Edges.namedAuthorizationCodes[name], edges...)
	}
}

// NamedTokens returns the Tokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthApplication) NamedTokens(name string) ([]*OauthToken, error) {
	if _m.Edges.namedTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthApplication) appendNamedTokens(name string, edges ...*OauthToken) {
	if _m.Edges.namedTokens == nil {
		_m.Edges.namedTokens = make(map[string][]*OauthToken)
	}
	if len(edges) == 0 {
		_m.Edges.namedTokens[name] = []*OauthToken{}
	} else {
		_m.Edges.namedTokens[name] = append(_m.Edges.namedTokens[name], edges...)
	}
}

// NamedUserAuthorizations returns the UserAuthorizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OauthApplication) NamedUserAuthorizations(name string) ([]*OauthUserAuthorization, error) {
	if _m.Edges.namedUserAuthorizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedUserAuthorizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OauthApplication) appendNamedUserAuthorizations(name string, edges ...*OauthUserAuthorization) {
	if _m.Edges.namedUserAuthorizations == nil {
		_m.Edges.namedUserAuthorizations = make(map[string][]*OauthUserAuthorization)
	}
	if len(edges) == 0 {
		_m.Edges.namedUserAuthorizations[name] = []*OauthUserAuthorization{}
	} else {
		_m.Edges.namedUserAuthorizations[name] = append(_m.Edges.namedUserAuthorizations[name], edges...)
	}
}

// OauthApplications is a parsable slice of OauthApplication.
type OauthApplications []*OauthApplication
