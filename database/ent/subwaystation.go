// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-backend/database/ent/station"
	"go-backend/database/ent/subway"
	"go-backend/database/ent/subwaystation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubwayStation is the model entity for the SubwayStation schema.
type SubwayStation struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 站点ID
	StationID uint64 `json:"station_id,omitempty"`
	// 地铁线路ID
	SubwayID uint64 `json:"subway_id,omitempty"`
	// 在线路中的顺序(从起点到终点)
	Sequence int `json:"sequence,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubwayStationQuery when eager-loading is set.
	Edges                   SubwayStationEdges `json:"edges"`
	station_subway_stations *uint64
	subway_subway_stations  *uint64
	selectValues            sql.SelectValues
}

// SubwayStationEdges holds the relations/edges for other nodes in the graph.
type SubwayStationEdges struct {
	// 站点
	Station *Station `json:"station,omitempty"`
	// 地铁线路
	Subway *Subway `json:"subway,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubwayStationEdges) StationOrErr() (*Station, error) {
	if e.Station != nil {
		return e.Station, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: station.Label}
	}
	return nil, &NotLoadedError{edge: "station"}
}

// SubwayOrErr returns the Subway value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubwayStationEdges) SubwayOrErr() (*Subway, error) {
	if e.Subway != nil {
		return e.Subway, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subway.Label}
	}
	return nil, &NotLoadedError{edge: "subway"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubwayStation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subwaystation.FieldID, subwaystation.FieldCreateBy, subwaystation.FieldUpdateBy, subwaystation.FieldDeleteBy, subwaystation.FieldStationID, subwaystation.FieldSubwayID, subwaystation.FieldSequence:
			values[i] = new(sql.NullInt64)
		case subwaystation.FieldCreateTime, subwaystation.FieldUpdateTime, subwaystation.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case subwaystation.ForeignKeys[0]: // station_subway_stations
			values[i] = new(sql.NullInt64)
		case subwaystation.ForeignKeys[1]: // subway_subway_stations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubwayStation fields.
func (_m *SubwayStation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subwaystation.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case subwaystation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case subwaystation.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case subwaystation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case subwaystation.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case subwaystation.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case subwaystation.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case subwaystation.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				_m.StationID = uint64(value.Int64)
			}
		case subwaystation.FieldSubwayID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subway_id", values[i])
			} else if value.Valid {
				_m.SubwayID = uint64(value.Int64)
			}
		case subwaystation.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				_m.Sequence = int(value.Int64)
			}
		case subwaystation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_subway_stations", values[i])
			} else if value.Valid {
				_m.station_subway_stations = new(uint64)
				*_m.station_subway_stations = uint64(value.Int64)
			}
		case subwaystation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subway_subway_stations", values[i])
			} else if value.Valid {
				_m.subway_subway_stations = new(uint64)
				*_m.subway_subway_stations = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubwayStation.
// This includes values selected through modifiers, order, etc.
func (_m *SubwayStation) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStation queries the "station" edge of the SubwayStation entity.
func (_m *SubwayStation) QueryStation() *StationQuery {
	return NewSubwayStationClient(_m.config).QueryStation(_m)
}

// QuerySubway queries the "subway" edge of the SubwayStation entity.
func (_m *SubwayStation) QuerySubway() *SubwayQuery {
	return NewSubwayStationClient(_m.config).QuerySubway(_m)
}

// Update returns a builder for updating this SubwayStation.
// Note that you need to call SubwayStation.Unwrap() before calling this method if this SubwayStation
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SubwayStation) Update() *SubwayStationUpdateOne {
	return NewSubwayStationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SubwayStation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SubwayStation) Unwrap() *SubwayStation {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubwayStation is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SubwayStation) String() string {
	var builder strings.Builder
	builder.WriteString("SubwayStation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("station_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StationID))
	builder.WriteString(", ")
	builder.WriteString("subway_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SubwayID))
	builder.WriteString(", ")
	builder.WriteString("sequence=")
	builder.WriteString(fmt.Sprintf("%v", _m.Sequence))
	builder.WriteByte(')')
	return builder.String()
}

// SubwayStations is a parsable slice of SubwayStation.
type SubwayStations []*SubwayStation
