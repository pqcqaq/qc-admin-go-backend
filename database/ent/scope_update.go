// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/permission"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/scope"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScopeUpdate is the builder for updating Scope entities.
type ScopeUpdate struct {
	config
	hooks    []Hook
	mutation *ScopeMutation
}

// Where appends a list predicates to the ScopeUpdate builder.
func (_u *ScopeUpdate) Where(ps ...predicate.Scope) *ScopeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *ScopeUpdate) SetCreateBy(v uint64) *ScopeUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableCreateBy(v *uint64) *ScopeUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ScopeUpdate) AddCreateBy(v int64) *ScopeUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ScopeUpdate) ClearCreateBy() *ScopeUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ScopeUpdate) SetUpdateTime(v time.Time) *ScopeUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ScopeUpdate) SetUpdateBy(v uint64) *ScopeUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableUpdateBy(v *uint64) *ScopeUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ScopeUpdate) AddUpdateBy(v int64) *ScopeUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ScopeUpdate) ClearUpdateBy() *ScopeUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ScopeUpdate) SetDeleteTime(v time.Time) *ScopeUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableDeleteTime(v *time.Time) *ScopeUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ScopeUpdate) ClearDeleteTime() *ScopeUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ScopeUpdate) SetDeleteBy(v uint64) *ScopeUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableDeleteBy(v *uint64) *ScopeUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ScopeUpdate) AddDeleteBy(v int64) *ScopeUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ScopeUpdate) ClearDeleteBy() *ScopeUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *ScopeUpdate) SetName(v string) *ScopeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableName(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ScopeUpdate) SetType(v scope.Type) *ScopeUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableType(v *scope.Type) *ScopeUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *ScopeUpdate) SetIcon(v string) *ScopeUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableIcon(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *ScopeUpdate) ClearIcon() *ScopeUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ScopeUpdate) SetDescription(v string) *ScopeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableDescription(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ScopeUpdate) ClearDescription() *ScopeUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetAction sets the "action" field.
func (_u *ScopeUpdate) SetAction(v string) *ScopeUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableAction(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *ScopeUpdate) ClearAction() *ScopeUpdate {
	_u.mutation.ClearAction()
	return _u
}

// SetPath sets the "path" field.
func (_u *ScopeUpdate) SetPath(v string) *ScopeUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillablePath(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *ScopeUpdate) ClearPath() *ScopeUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetComponent sets the "component" field.
func (_u *ScopeUpdate) SetComponent(v string) *ScopeUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableComponent(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *ScopeUpdate) ClearComponent() *ScopeUpdate {
	_u.mutation.ClearComponent()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *ScopeUpdate) SetRedirect(v string) *ScopeUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableRedirect(v *string) *ScopeUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *ScopeUpdate) ClearRedirect() *ScopeUpdate {
	_u.mutation.ClearRedirect()
	return _u
}

// SetOrder sets the "order" field.
func (_u *ScopeUpdate) SetOrder(v int) *ScopeUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableOrder(v *int) *ScopeUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *ScopeUpdate) AddOrder(v int) *ScopeUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetHidden sets the "hidden" field.
func (_u *ScopeUpdate) SetHidden(v bool) *ScopeUpdate {
	_u.mutation.SetHidden(v)
	return _u
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableHidden(v *bool) *ScopeUpdate {
	if v != nil {
		_u.SetHidden(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *ScopeUpdate) SetDisabled(v bool) *ScopeUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableDisabled(v *bool) *ScopeUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *ScopeUpdate) SetParentID(v uint64) *ScopeUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *ScopeUpdate) SetNillableParentID(v *uint64) *ScopeUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *ScopeUpdate) ClearParentID() *ScopeUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the Scope entity.
func (_u *ScopeUpdate) SetParent(v *Scope) *ScopeUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Scope entity by IDs.
func (_u *ScopeUpdate) AddChildIDs(ids ...uint64) *ScopeUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Scope entity.
func (_u *ScopeUpdate) AddChildren(v ...*Scope) *ScopeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_u *ScopeUpdate) AddPermissionIDs(ids ...uint64) *ScopeUpdate {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_u *ScopeUpdate) AddPermissions(v ...*Permission) *ScopeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// Mutation returns the ScopeMutation object of the builder.
func (_u *ScopeUpdate) Mutation() *ScopeMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Scope entity.
func (_u *ScopeUpdate) ClearParent() *ScopeUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Scope entity.
func (_u *ScopeUpdate) ClearChildren() *ScopeUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Scope entities by IDs.
func (_u *ScopeUpdate) RemoveChildIDs(ids ...uint64) *ScopeUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Scope entities.
func (_u *ScopeUpdate) RemoveChildren(v ...*Scope) *ScopeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (_u *ScopeUpdate) ClearPermissions() *ScopeUpdate {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (_u *ScopeUpdate) RemovePermissionIDs(ids ...uint64) *ScopeUpdate {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (_u *ScopeUpdate) RemovePermissions(v ...*Permission) *ScopeUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ScopeUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ScopeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScopeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScopeUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if scope.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized scope.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := scope.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScopeUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := scope.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Scope.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := scope.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scope.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ScopeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scope.Table, scope.Columns, sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(scope.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(scope.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(scope.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(scope.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(scope.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(scope.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(scope.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(scope.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(scope.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(scope.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(scope.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(scope.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(scope.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(scope.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(scope.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(scope.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(scope.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(scope.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(scope.FieldAction, field.TypeString, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(scope.FieldAction, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(scope.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(scope.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(scope.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(scope.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(scope.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(scope.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(scope.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(scope.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Hidden(); ok {
		_spec.SetField(scope.FieldHidden, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(scope.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ScopeUpdateOne is the builder for updating a single Scope entity.
type ScopeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScopeMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *ScopeUpdateOne) SetCreateBy(v uint64) *ScopeUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableCreateBy(v *uint64) *ScopeUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *ScopeUpdateOne) AddCreateBy(v int64) *ScopeUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *ScopeUpdateOne) ClearCreateBy() *ScopeUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ScopeUpdateOne) SetUpdateTime(v time.Time) *ScopeUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *ScopeUpdateOne) SetUpdateBy(v uint64) *ScopeUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableUpdateBy(v *uint64) *ScopeUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *ScopeUpdateOne) AddUpdateBy(v int64) *ScopeUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *ScopeUpdateOne) ClearUpdateBy() *ScopeUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *ScopeUpdateOne) SetDeleteTime(v time.Time) *ScopeUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableDeleteTime(v *time.Time) *ScopeUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *ScopeUpdateOne) ClearDeleteTime() *ScopeUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *ScopeUpdateOne) SetDeleteBy(v uint64) *ScopeUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableDeleteBy(v *uint64) *ScopeUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *ScopeUpdateOne) AddDeleteBy(v int64) *ScopeUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *ScopeUpdateOne) ClearDeleteBy() *ScopeUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetName sets the "name" field.
func (_u *ScopeUpdateOne) SetName(v string) *ScopeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableName(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ScopeUpdateOne) SetType(v scope.Type) *ScopeUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableType(v *scope.Type) *ScopeUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *ScopeUpdateOne) SetIcon(v string) *ScopeUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableIcon(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *ScopeUpdateOne) ClearIcon() *ScopeUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ScopeUpdateOne) SetDescription(v string) *ScopeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableDescription(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ScopeUpdateOne) ClearDescription() *ScopeUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetAction sets the "action" field.
func (_u *ScopeUpdateOne) SetAction(v string) *ScopeUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableAction(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *ScopeUpdateOne) ClearAction() *ScopeUpdateOne {
	_u.mutation.ClearAction()
	return _u
}

// SetPath sets the "path" field.
func (_u *ScopeUpdateOne) SetPath(v string) *ScopeUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillablePath(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *ScopeUpdateOne) ClearPath() *ScopeUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetComponent sets the "component" field.
func (_u *ScopeUpdateOne) SetComponent(v string) *ScopeUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableComponent(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *ScopeUpdateOne) ClearComponent() *ScopeUpdateOne {
	_u.mutation.ClearComponent()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *ScopeUpdateOne) SetRedirect(v string) *ScopeUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableRedirect(v *string) *ScopeUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *ScopeUpdateOne) ClearRedirect() *ScopeUpdateOne {
	_u.mutation.ClearRedirect()
	return _u
}

// SetOrder sets the "order" field.
func (_u *ScopeUpdateOne) SetOrder(v int) *ScopeUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableOrder(v *int) *ScopeUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *ScopeUpdateOne) AddOrder(v int) *ScopeUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetHidden sets the "hidden" field.
func (_u *ScopeUpdateOne) SetHidden(v bool) *ScopeUpdateOne {
	_u.mutation.SetHidden(v)
	return _u
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableHidden(v *bool) *ScopeUpdateOne {
	if v != nil {
		_u.SetHidden(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *ScopeUpdateOne) SetDisabled(v bool) *ScopeUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableDisabled(v *bool) *ScopeUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *ScopeUpdateOne) SetParentID(v uint64) *ScopeUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *ScopeUpdateOne) SetNillableParentID(v *uint64) *ScopeUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *ScopeUpdateOne) ClearParentID() *ScopeUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the Scope entity.
func (_u *ScopeUpdateOne) SetParent(v *Scope) *ScopeUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Scope entity by IDs.
func (_u *ScopeUpdateOne) AddChildIDs(ids ...uint64) *ScopeUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Scope entity.
func (_u *ScopeUpdateOne) AddChildren(v ...*Scope) *ScopeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (_u *ScopeUpdateOne) AddPermissionIDs(ids ...uint64) *ScopeUpdateOne {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (_u *ScopeUpdateOne) AddPermissions(v ...*Permission) *ScopeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// Mutation returns the ScopeMutation object of the builder.
func (_u *ScopeUpdateOne) Mutation() *ScopeMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Scope entity.
func (_u *ScopeUpdateOne) ClearParent() *ScopeUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Scope entity.
func (_u *ScopeUpdateOne) ClearChildren() *ScopeUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Scope entities by IDs.
func (_u *ScopeUpdateOne) RemoveChildIDs(ids ...uint64) *ScopeUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Scope entities.
func (_u *ScopeUpdateOne) RemoveChildren(v ...*Scope) *ScopeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (_u *ScopeUpdateOne) ClearPermissions() *ScopeUpdateOne {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (_u *ScopeUpdateOne) RemovePermissionIDs(ids ...uint64) *ScopeUpdateOne {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (_u *ScopeUpdateOne) RemovePermissions(v ...*Permission) *ScopeUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// Where appends a list predicates to the ScopeUpdate builder.
func (_u *ScopeUpdateOne) Where(ps ...predicate.Scope) *ScopeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ScopeUpdateOne) Select(field string, fields ...string) *ScopeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Scope entity.
func (_u *ScopeUpdateOne) Save(ctx context.Context) (*Scope, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScopeUpdateOne) SaveX(ctx context.Context) *Scope {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScopeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScopeUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if scope.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized scope.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := scope.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScopeUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := scope.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Scope.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := scope.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scope.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ScopeUpdateOne) sqlSave(ctx context.Context) (_node *Scope, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scope.Table, scope.Columns, sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scope.FieldID)
		for _, f := range fields {
			if !scope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(scope.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(scope.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(scope.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(scope.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(scope.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(scope.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(scope.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(scope.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(scope.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(scope.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(scope.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(scope.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(scope.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(scope.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(scope.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(scope.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(scope.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(scope.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(scope.FieldAction, field.TypeString, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(scope.FieldAction, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(scope.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(scope.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(scope.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(scope.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(scope.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(scope.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(scope.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(scope.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Hidden(); ok {
		_spec.SetField(scope.FieldHidden, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(scope.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scope.ParentTable,
			Columns: []string{scope.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.ChildrenTable,
			Columns: []string{scope.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scope.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scope.PermissionsTable,
			Columns: []string{scope.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scope{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
