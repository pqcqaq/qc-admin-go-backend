// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/systemmonitor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemMonitorUpdate is the builder for updating SystemMonitor entities.
type SystemMonitorUpdate struct {
	config
	hooks    []Hook
	mutation *SystemMonitorMutation
}

// Where appends a list predicates to the SystemMonitorUpdate builder.
func (_u *SystemMonitorUpdate) Where(ps ...predicate.SystemMonitor) *SystemMonitorUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *SystemMonitorUpdate) SetCreateBy(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableCreateBy(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *SystemMonitorUpdate) AddCreateBy(v int64) *SystemMonitorUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SystemMonitorUpdate) ClearCreateBy() *SystemMonitorUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SystemMonitorUpdate) SetUpdateTime(v time.Time) *SystemMonitorUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SystemMonitorUpdate) SetUpdateBy(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableUpdateBy(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *SystemMonitorUpdate) AddUpdateBy(v int64) *SystemMonitorUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SystemMonitorUpdate) ClearUpdateBy() *SystemMonitorUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetCPUUsagePercent sets the "cpu_usage_percent" field.
func (_u *SystemMonitorUpdate) SetCPUUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetCPUUsagePercent()
	_u.mutation.SetCPUUsagePercent(v)
	return _u
}

// SetNillableCPUUsagePercent sets the "cpu_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableCPUUsagePercent(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetCPUUsagePercent(*v)
	}
	return _u
}

// AddCPUUsagePercent adds value to the "cpu_usage_percent" field.
func (_u *SystemMonitorUpdate) AddCPUUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.AddCPUUsagePercent(v)
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *SystemMonitorUpdate) SetCPUCores(v int) *SystemMonitorUpdate {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableCPUCores(v *int) *SystemMonitorUpdate {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *SystemMonitorUpdate) AddCPUCores(v int) *SystemMonitorUpdate {
	_u.mutation.AddCPUCores(v)
	return _u
}

// SetMemoryTotal sets the "memory_total" field.
func (_u *SystemMonitorUpdate) SetMemoryTotal(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetMemoryTotal()
	_u.mutation.SetMemoryTotal(v)
	return _u
}

// SetNillableMemoryTotal sets the "memory_total" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableMemoryTotal(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetMemoryTotal(*v)
	}
	return _u
}

// AddMemoryTotal adds value to the "memory_total" field.
func (_u *SystemMonitorUpdate) AddMemoryTotal(v int64) *SystemMonitorUpdate {
	_u.mutation.AddMemoryTotal(v)
	return _u
}

// SetMemoryUsed sets the "memory_used" field.
func (_u *SystemMonitorUpdate) SetMemoryUsed(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetMemoryUsed()
	_u.mutation.SetMemoryUsed(v)
	return _u
}

// SetNillableMemoryUsed sets the "memory_used" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableMemoryUsed(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetMemoryUsed(*v)
	}
	return _u
}

// AddMemoryUsed adds value to the "memory_used" field.
func (_u *SystemMonitorUpdate) AddMemoryUsed(v int64) *SystemMonitorUpdate {
	_u.mutation.AddMemoryUsed(v)
	return _u
}

// SetMemoryFree sets the "memory_free" field.
func (_u *SystemMonitorUpdate) SetMemoryFree(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetMemoryFree()
	_u.mutation.SetMemoryFree(v)
	return _u
}

// SetNillableMemoryFree sets the "memory_free" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableMemoryFree(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetMemoryFree(*v)
	}
	return _u
}

// AddMemoryFree adds value to the "memory_free" field.
func (_u *SystemMonitorUpdate) AddMemoryFree(v int64) *SystemMonitorUpdate {
	_u.mutation.AddMemoryFree(v)
	return _u
}

// SetMemoryUsagePercent sets the "memory_usage_percent" field.
func (_u *SystemMonitorUpdate) SetMemoryUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetMemoryUsagePercent()
	_u.mutation.SetMemoryUsagePercent(v)
	return _u
}

// SetNillableMemoryUsagePercent sets the "memory_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableMemoryUsagePercent(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetMemoryUsagePercent(*v)
	}
	return _u
}

// AddMemoryUsagePercent adds value to the "memory_usage_percent" field.
func (_u *SystemMonitorUpdate) AddMemoryUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.AddMemoryUsagePercent(v)
	return _u
}

// SetDiskTotal sets the "disk_total" field.
func (_u *SystemMonitorUpdate) SetDiskTotal(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetDiskTotal()
	_u.mutation.SetDiskTotal(v)
	return _u
}

// SetNillableDiskTotal sets the "disk_total" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableDiskTotal(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetDiskTotal(*v)
	}
	return _u
}

// AddDiskTotal adds value to the "disk_total" field.
func (_u *SystemMonitorUpdate) AddDiskTotal(v int64) *SystemMonitorUpdate {
	_u.mutation.AddDiskTotal(v)
	return _u
}

// SetDiskUsed sets the "disk_used" field.
func (_u *SystemMonitorUpdate) SetDiskUsed(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetDiskUsed()
	_u.mutation.SetDiskUsed(v)
	return _u
}

// SetNillableDiskUsed sets the "disk_used" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableDiskUsed(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetDiskUsed(*v)
	}
	return _u
}

// AddDiskUsed adds value to the "disk_used" field.
func (_u *SystemMonitorUpdate) AddDiskUsed(v int64) *SystemMonitorUpdate {
	_u.mutation.AddDiskUsed(v)
	return _u
}

// SetDiskFree sets the "disk_free" field.
func (_u *SystemMonitorUpdate) SetDiskFree(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetDiskFree()
	_u.mutation.SetDiskFree(v)
	return _u
}

// SetNillableDiskFree sets the "disk_free" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableDiskFree(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetDiskFree(*v)
	}
	return _u
}

// AddDiskFree adds value to the "disk_free" field.
func (_u *SystemMonitorUpdate) AddDiskFree(v int64) *SystemMonitorUpdate {
	_u.mutation.AddDiskFree(v)
	return _u
}

// SetDiskUsagePercent sets the "disk_usage_percent" field.
func (_u *SystemMonitorUpdate) SetDiskUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetDiskUsagePercent()
	_u.mutation.SetDiskUsagePercent(v)
	return _u
}

// SetNillableDiskUsagePercent sets the "disk_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableDiskUsagePercent(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetDiskUsagePercent(*v)
	}
	return _u
}

// AddDiskUsagePercent adds value to the "disk_usage_percent" field.
func (_u *SystemMonitorUpdate) AddDiskUsagePercent(v float64) *SystemMonitorUpdate {
	_u.mutation.AddDiskUsagePercent(v)
	return _u
}

// SetNetworkBytesSent sets the "network_bytes_sent" field.
func (_u *SystemMonitorUpdate) SetNetworkBytesSent(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetNetworkBytesSent()
	_u.mutation.SetNetworkBytesSent(v)
	return _u
}

// SetNillableNetworkBytesSent sets the "network_bytes_sent" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableNetworkBytesSent(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetNetworkBytesSent(*v)
	}
	return _u
}

// AddNetworkBytesSent adds value to the "network_bytes_sent" field.
func (_u *SystemMonitorUpdate) AddNetworkBytesSent(v int64) *SystemMonitorUpdate {
	_u.mutation.AddNetworkBytesSent(v)
	return _u
}

// SetNetworkBytesRecv sets the "network_bytes_recv" field.
func (_u *SystemMonitorUpdate) SetNetworkBytesRecv(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetNetworkBytesRecv()
	_u.mutation.SetNetworkBytesRecv(v)
	return _u
}

// SetNillableNetworkBytesRecv sets the "network_bytes_recv" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableNetworkBytesRecv(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetNetworkBytesRecv(*v)
	}
	return _u
}

// AddNetworkBytesRecv adds value to the "network_bytes_recv" field.
func (_u *SystemMonitorUpdate) AddNetworkBytesRecv(v int64) *SystemMonitorUpdate {
	_u.mutation.AddNetworkBytesRecv(v)
	return _u
}

// SetOs sets the "os" field.
func (_u *SystemMonitorUpdate) SetOs(v string) *SystemMonitorUpdate {
	_u.mutation.SetOs(v)
	return _u
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableOs(v *string) *SystemMonitorUpdate {
	if v != nil {
		_u.SetOs(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *SystemMonitorUpdate) SetPlatform(v string) *SystemMonitorUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillablePlatform(v *string) *SystemMonitorUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetPlatformVersion sets the "platform_version" field.
func (_u *SystemMonitorUpdate) SetPlatformVersion(v string) *SystemMonitorUpdate {
	_u.mutation.SetPlatformVersion(v)
	return _u
}

// SetNillablePlatformVersion sets the "platform_version" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillablePlatformVersion(v *string) *SystemMonitorUpdate {
	if v != nil {
		_u.SetPlatformVersion(*v)
	}
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *SystemMonitorUpdate) SetHostname(v string) *SystemMonitorUpdate {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableHostname(v *string) *SystemMonitorUpdate {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// SetGoroutinesCount sets the "goroutines_count" field.
func (_u *SystemMonitorUpdate) SetGoroutinesCount(v int) *SystemMonitorUpdate {
	_u.mutation.ResetGoroutinesCount()
	_u.mutation.SetGoroutinesCount(v)
	return _u
}

// SetNillableGoroutinesCount sets the "goroutines_count" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableGoroutinesCount(v *int) *SystemMonitorUpdate {
	if v != nil {
		_u.SetGoroutinesCount(*v)
	}
	return _u
}

// AddGoroutinesCount adds value to the "goroutines_count" field.
func (_u *SystemMonitorUpdate) AddGoroutinesCount(v int) *SystemMonitorUpdate {
	_u.mutation.AddGoroutinesCount(v)
	return _u
}

// SetHeapAlloc sets the "heap_alloc" field.
func (_u *SystemMonitorUpdate) SetHeapAlloc(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetHeapAlloc()
	_u.mutation.SetHeapAlloc(v)
	return _u
}

// SetNillableHeapAlloc sets the "heap_alloc" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableHeapAlloc(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetHeapAlloc(*v)
	}
	return _u
}

// AddHeapAlloc adds value to the "heap_alloc" field.
func (_u *SystemMonitorUpdate) AddHeapAlloc(v int64) *SystemMonitorUpdate {
	_u.mutation.AddHeapAlloc(v)
	return _u
}

// SetHeapSys sets the "heap_sys" field.
func (_u *SystemMonitorUpdate) SetHeapSys(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetHeapSys()
	_u.mutation.SetHeapSys(v)
	return _u
}

// SetNillableHeapSys sets the "heap_sys" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableHeapSys(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetHeapSys(*v)
	}
	return _u
}

// AddHeapSys adds value to the "heap_sys" field.
func (_u *SystemMonitorUpdate) AddHeapSys(v int64) *SystemMonitorUpdate {
	_u.mutation.AddHeapSys(v)
	return _u
}

// SetGcCount sets the "gc_count" field.
func (_u *SystemMonitorUpdate) SetGcCount(v uint32) *SystemMonitorUpdate {
	_u.mutation.ResetGcCount()
	_u.mutation.SetGcCount(v)
	return _u
}

// SetNillableGcCount sets the "gc_count" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableGcCount(v *uint32) *SystemMonitorUpdate {
	if v != nil {
		_u.SetGcCount(*v)
	}
	return _u
}

// AddGcCount adds value to the "gc_count" field.
func (_u *SystemMonitorUpdate) AddGcCount(v int32) *SystemMonitorUpdate {
	_u.mutation.AddGcCount(v)
	return _u
}

// SetLoadAvg1 sets the "load_avg_1" field.
func (_u *SystemMonitorUpdate) SetLoadAvg1(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetLoadAvg1()
	_u.mutation.SetLoadAvg1(v)
	return _u
}

// SetNillableLoadAvg1 sets the "load_avg_1" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableLoadAvg1(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetLoadAvg1(*v)
	}
	return _u
}

// AddLoadAvg1 adds value to the "load_avg_1" field.
func (_u *SystemMonitorUpdate) AddLoadAvg1(v float64) *SystemMonitorUpdate {
	_u.mutation.AddLoadAvg1(v)
	return _u
}

// ClearLoadAvg1 clears the value of the "load_avg_1" field.
func (_u *SystemMonitorUpdate) ClearLoadAvg1() *SystemMonitorUpdate {
	_u.mutation.ClearLoadAvg1()
	return _u
}

// SetLoadAvg5 sets the "load_avg_5" field.
func (_u *SystemMonitorUpdate) SetLoadAvg5(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetLoadAvg5()
	_u.mutation.SetLoadAvg5(v)
	return _u
}

// SetNillableLoadAvg5 sets the "load_avg_5" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableLoadAvg5(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetLoadAvg5(*v)
	}
	return _u
}

// AddLoadAvg5 adds value to the "load_avg_5" field.
func (_u *SystemMonitorUpdate) AddLoadAvg5(v float64) *SystemMonitorUpdate {
	_u.mutation.AddLoadAvg5(v)
	return _u
}

// ClearLoadAvg5 clears the value of the "load_avg_5" field.
func (_u *SystemMonitorUpdate) ClearLoadAvg5() *SystemMonitorUpdate {
	_u.mutation.ClearLoadAvg5()
	return _u
}

// SetLoadAvg15 sets the "load_avg_15" field.
func (_u *SystemMonitorUpdate) SetLoadAvg15(v float64) *SystemMonitorUpdate {
	_u.mutation.ResetLoadAvg15()
	_u.mutation.SetLoadAvg15(v)
	return _u
}

// SetNillableLoadAvg15 sets the "load_avg_15" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableLoadAvg15(v *float64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetLoadAvg15(*v)
	}
	return _u
}

// AddLoadAvg15 adds value to the "load_avg_15" field.
func (_u *SystemMonitorUpdate) AddLoadAvg15(v float64) *SystemMonitorUpdate {
	_u.mutation.AddLoadAvg15(v)
	return _u
}

// ClearLoadAvg15 clears the value of the "load_avg_15" field.
func (_u *SystemMonitorUpdate) ClearLoadAvg15() *SystemMonitorUpdate {
	_u.mutation.ClearLoadAvg15()
	return _u
}

// SetUptime sets the "uptime" field.
func (_u *SystemMonitorUpdate) SetUptime(v uint64) *SystemMonitorUpdate {
	_u.mutation.ResetUptime()
	_u.mutation.SetUptime(v)
	return _u
}

// SetNillableUptime sets the "uptime" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableUptime(v *uint64) *SystemMonitorUpdate {
	if v != nil {
		_u.SetUptime(*v)
	}
	return _u
}

// AddUptime adds value to the "uptime" field.
func (_u *SystemMonitorUpdate) AddUptime(v int64) *SystemMonitorUpdate {
	_u.mutation.AddUptime(v)
	return _u
}

// SetRecordedAt sets the "recorded_at" field.
func (_u *SystemMonitorUpdate) SetRecordedAt(v time.Time) *SystemMonitorUpdate {
	_u.mutation.SetRecordedAt(v)
	return _u
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (_u *SystemMonitorUpdate) SetNillableRecordedAt(v *time.Time) *SystemMonitorUpdate {
	if v != nil {
		_u.SetRecordedAt(*v)
	}
	return _u
}

// Mutation returns the SystemMonitorMutation object of the builder.
func (_u *SystemMonitorUpdate) Mutation() *SystemMonitorMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SystemMonitorUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemMonitorUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SystemMonitorUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemMonitorUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SystemMonitorUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if systemmonitor.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized systemmonitor.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := systemmonitor.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SystemMonitorUpdate) check() error {
	if v, ok := _u.mutation.CPUUsagePercent(); ok {
		if err := systemmonitor.CPUUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "cpu_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CPUCores(); ok {
		if err := systemmonitor.CPUCoresValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cores", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_cores": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MemoryUsagePercent(); ok {
		if err := systemmonitor.MemoryUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "memory_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.memory_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DiskUsagePercent(); ok {
		if err := systemmonitor.DiskUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "disk_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.disk_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Os(); ok {
		if err := systemmonitor.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.os": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := systemmonitor.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PlatformVersion(); ok {
		if err := systemmonitor.PlatformVersionValidator(v); err != nil {
			return &ValidationError{Name: "platform_version", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform_version": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Hostname(); ok {
		if err := systemmonitor.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.hostname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GoroutinesCount(); ok {
		if err := systemmonitor.GoroutinesCountValidator(v); err != nil {
			return &ValidationError{Name: "goroutines_count", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.goroutines_count": %w`, err)}
		}
	}
	return nil
}

func (_u *SystemMonitorUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemmonitor.Table, systemmonitor.Columns, sqlgraph.NewFieldSpec(systemmonitor.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(systemmonitor.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(systemmonitor.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(systemmonitor.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(systemmonitor.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(systemmonitor.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(systemmonitor.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(systemmonitor.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.CPUUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldCPUUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCPUUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldCPUUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(systemmonitor.FieldCPUCores, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(systemmonitor.FieldCPUCores, field.TypeInt, value)
	}
	if value, ok := _u.mutation.MemoryTotal(); ok {
		_spec.SetField(systemmonitor.FieldMemoryTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryTotal(); ok {
		_spec.AddField(systemmonitor.FieldMemoryTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryUsed(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryUsed(); ok {
		_spec.AddField(systemmonitor.FieldMemoryUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryFree(); ok {
		_spec.SetField(systemmonitor.FieldMemoryFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryFree(); ok {
		_spec.AddField(systemmonitor.FieldMemoryFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMemoryUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldMemoryUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.DiskTotal(); ok {
		_spec.SetField(systemmonitor.FieldDiskTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskTotal(); ok {
		_spec.AddField(systemmonitor.FieldDiskTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskUsed(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskUsed(); ok {
		_spec.AddField(systemmonitor.FieldDiskUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskFree(); ok {
		_spec.SetField(systemmonitor.FieldDiskFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskFree(); ok {
		_spec.AddField(systemmonitor.FieldDiskFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiskUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldDiskUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.NetworkBytesSent(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesSent, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNetworkBytesSent(); ok {
		_spec.AddField(systemmonitor.FieldNetworkBytesSent, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.NetworkBytesRecv(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesRecv, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNetworkBytesRecv(); ok {
		_spec.AddField(systemmonitor.FieldNetworkBytesRecv, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Os(); ok {
		_spec.SetField(systemmonitor.FieldOs, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(systemmonitor.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.PlatformVersion(); ok {
		_spec.SetField(systemmonitor.FieldPlatformVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(systemmonitor.FieldHostname, field.TypeString, value)
	}
	if value, ok := _u.mutation.GoroutinesCount(); ok {
		_spec.SetField(systemmonitor.FieldGoroutinesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGoroutinesCount(); ok {
		_spec.AddField(systemmonitor.FieldGoroutinesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.HeapAlloc(); ok {
		_spec.SetField(systemmonitor.FieldHeapAlloc, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHeapAlloc(); ok {
		_spec.AddField(systemmonitor.FieldHeapAlloc, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.HeapSys(); ok {
		_spec.SetField(systemmonitor.FieldHeapSys, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHeapSys(); ok {
		_spec.AddField(systemmonitor.FieldHeapSys, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.GcCount(); ok {
		_spec.SetField(systemmonitor.FieldGcCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedGcCount(); ok {
		_spec.AddField(systemmonitor.FieldGcCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.LoadAvg1(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg1, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg1(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg1, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg1Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg1, field.TypeFloat64)
	}
	if value, ok := _u.mutation.LoadAvg5(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg5, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg5(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg5, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg5Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg5, field.TypeFloat64)
	}
	if value, ok := _u.mutation.LoadAvg15(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg15, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg15(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg15, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg15Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg15, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Uptime(); ok {
		_spec.SetField(systemmonitor.FieldUptime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUptime(); ok {
		_spec.AddField(systemmonitor.FieldUptime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.RecordedAt(); ok {
		_spec.SetField(systemmonitor.FieldRecordedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemmonitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SystemMonitorUpdateOne is the builder for updating a single SystemMonitor entity.
type SystemMonitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemMonitorMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *SystemMonitorUpdateOne) SetCreateBy(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableCreateBy(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *SystemMonitorUpdateOne) AddCreateBy(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SystemMonitorUpdateOne) ClearCreateBy() *SystemMonitorUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SystemMonitorUpdateOne) SetUpdateTime(v time.Time) *SystemMonitorUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SystemMonitorUpdateOne) SetUpdateBy(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableUpdateBy(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *SystemMonitorUpdateOne) AddUpdateBy(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SystemMonitorUpdateOne) ClearUpdateBy() *SystemMonitorUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetCPUUsagePercent sets the "cpu_usage_percent" field.
func (_u *SystemMonitorUpdateOne) SetCPUUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetCPUUsagePercent()
	_u.mutation.SetCPUUsagePercent(v)
	return _u
}

// SetNillableCPUUsagePercent sets the "cpu_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableCPUUsagePercent(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetCPUUsagePercent(*v)
	}
	return _u
}

// AddCPUUsagePercent adds value to the "cpu_usage_percent" field.
func (_u *SystemMonitorUpdateOne) AddCPUUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddCPUUsagePercent(v)
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *SystemMonitorUpdateOne) SetCPUCores(v int) *SystemMonitorUpdateOne {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableCPUCores(v *int) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *SystemMonitorUpdateOne) AddCPUCores(v int) *SystemMonitorUpdateOne {
	_u.mutation.AddCPUCores(v)
	return _u
}

// SetMemoryTotal sets the "memory_total" field.
func (_u *SystemMonitorUpdateOne) SetMemoryTotal(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetMemoryTotal()
	_u.mutation.SetMemoryTotal(v)
	return _u
}

// SetNillableMemoryTotal sets the "memory_total" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableMemoryTotal(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetMemoryTotal(*v)
	}
	return _u
}

// AddMemoryTotal adds value to the "memory_total" field.
func (_u *SystemMonitorUpdateOne) AddMemoryTotal(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddMemoryTotal(v)
	return _u
}

// SetMemoryUsed sets the "memory_used" field.
func (_u *SystemMonitorUpdateOne) SetMemoryUsed(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetMemoryUsed()
	_u.mutation.SetMemoryUsed(v)
	return _u
}

// SetNillableMemoryUsed sets the "memory_used" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableMemoryUsed(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetMemoryUsed(*v)
	}
	return _u
}

// AddMemoryUsed adds value to the "memory_used" field.
func (_u *SystemMonitorUpdateOne) AddMemoryUsed(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddMemoryUsed(v)
	return _u
}

// SetMemoryFree sets the "memory_free" field.
func (_u *SystemMonitorUpdateOne) SetMemoryFree(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetMemoryFree()
	_u.mutation.SetMemoryFree(v)
	return _u
}

// SetNillableMemoryFree sets the "memory_free" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableMemoryFree(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetMemoryFree(*v)
	}
	return _u
}

// AddMemoryFree adds value to the "memory_free" field.
func (_u *SystemMonitorUpdateOne) AddMemoryFree(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddMemoryFree(v)
	return _u
}

// SetMemoryUsagePercent sets the "memory_usage_percent" field.
func (_u *SystemMonitorUpdateOne) SetMemoryUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetMemoryUsagePercent()
	_u.mutation.SetMemoryUsagePercent(v)
	return _u
}

// SetNillableMemoryUsagePercent sets the "memory_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableMemoryUsagePercent(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetMemoryUsagePercent(*v)
	}
	return _u
}

// AddMemoryUsagePercent adds value to the "memory_usage_percent" field.
func (_u *SystemMonitorUpdateOne) AddMemoryUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddMemoryUsagePercent(v)
	return _u
}

// SetDiskTotal sets the "disk_total" field.
func (_u *SystemMonitorUpdateOne) SetDiskTotal(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetDiskTotal()
	_u.mutation.SetDiskTotal(v)
	return _u
}

// SetNillableDiskTotal sets the "disk_total" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableDiskTotal(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetDiskTotal(*v)
	}
	return _u
}

// AddDiskTotal adds value to the "disk_total" field.
func (_u *SystemMonitorUpdateOne) AddDiskTotal(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddDiskTotal(v)
	return _u
}

// SetDiskUsed sets the "disk_used" field.
func (_u *SystemMonitorUpdateOne) SetDiskUsed(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetDiskUsed()
	_u.mutation.SetDiskUsed(v)
	return _u
}

// SetNillableDiskUsed sets the "disk_used" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableDiskUsed(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetDiskUsed(*v)
	}
	return _u
}

// AddDiskUsed adds value to the "disk_used" field.
func (_u *SystemMonitorUpdateOne) AddDiskUsed(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddDiskUsed(v)
	return _u
}

// SetDiskFree sets the "disk_free" field.
func (_u *SystemMonitorUpdateOne) SetDiskFree(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetDiskFree()
	_u.mutation.SetDiskFree(v)
	return _u
}

// SetNillableDiskFree sets the "disk_free" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableDiskFree(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetDiskFree(*v)
	}
	return _u
}

// AddDiskFree adds value to the "disk_free" field.
func (_u *SystemMonitorUpdateOne) AddDiskFree(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddDiskFree(v)
	return _u
}

// SetDiskUsagePercent sets the "disk_usage_percent" field.
func (_u *SystemMonitorUpdateOne) SetDiskUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetDiskUsagePercent()
	_u.mutation.SetDiskUsagePercent(v)
	return _u
}

// SetNillableDiskUsagePercent sets the "disk_usage_percent" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableDiskUsagePercent(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetDiskUsagePercent(*v)
	}
	return _u
}

// AddDiskUsagePercent adds value to the "disk_usage_percent" field.
func (_u *SystemMonitorUpdateOne) AddDiskUsagePercent(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddDiskUsagePercent(v)
	return _u
}

// SetNetworkBytesSent sets the "network_bytes_sent" field.
func (_u *SystemMonitorUpdateOne) SetNetworkBytesSent(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetNetworkBytesSent()
	_u.mutation.SetNetworkBytesSent(v)
	return _u
}

// SetNillableNetworkBytesSent sets the "network_bytes_sent" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableNetworkBytesSent(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetNetworkBytesSent(*v)
	}
	return _u
}

// AddNetworkBytesSent adds value to the "network_bytes_sent" field.
func (_u *SystemMonitorUpdateOne) AddNetworkBytesSent(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddNetworkBytesSent(v)
	return _u
}

// SetNetworkBytesRecv sets the "network_bytes_recv" field.
func (_u *SystemMonitorUpdateOne) SetNetworkBytesRecv(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetNetworkBytesRecv()
	_u.mutation.SetNetworkBytesRecv(v)
	return _u
}

// SetNillableNetworkBytesRecv sets the "network_bytes_recv" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableNetworkBytesRecv(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetNetworkBytesRecv(*v)
	}
	return _u
}

// AddNetworkBytesRecv adds value to the "network_bytes_recv" field.
func (_u *SystemMonitorUpdateOne) AddNetworkBytesRecv(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddNetworkBytesRecv(v)
	return _u
}

// SetOs sets the "os" field.
func (_u *SystemMonitorUpdateOne) SetOs(v string) *SystemMonitorUpdateOne {
	_u.mutation.SetOs(v)
	return _u
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableOs(v *string) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetOs(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *SystemMonitorUpdateOne) SetPlatform(v string) *SystemMonitorUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillablePlatform(v *string) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetPlatformVersion sets the "platform_version" field.
func (_u *SystemMonitorUpdateOne) SetPlatformVersion(v string) *SystemMonitorUpdateOne {
	_u.mutation.SetPlatformVersion(v)
	return _u
}

// SetNillablePlatformVersion sets the "platform_version" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillablePlatformVersion(v *string) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetPlatformVersion(*v)
	}
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *SystemMonitorUpdateOne) SetHostname(v string) *SystemMonitorUpdateOne {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableHostname(v *string) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// SetGoroutinesCount sets the "goroutines_count" field.
func (_u *SystemMonitorUpdateOne) SetGoroutinesCount(v int) *SystemMonitorUpdateOne {
	_u.mutation.ResetGoroutinesCount()
	_u.mutation.SetGoroutinesCount(v)
	return _u
}

// SetNillableGoroutinesCount sets the "goroutines_count" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableGoroutinesCount(v *int) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetGoroutinesCount(*v)
	}
	return _u
}

// AddGoroutinesCount adds value to the "goroutines_count" field.
func (_u *SystemMonitorUpdateOne) AddGoroutinesCount(v int) *SystemMonitorUpdateOne {
	_u.mutation.AddGoroutinesCount(v)
	return _u
}

// SetHeapAlloc sets the "heap_alloc" field.
func (_u *SystemMonitorUpdateOne) SetHeapAlloc(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetHeapAlloc()
	_u.mutation.SetHeapAlloc(v)
	return _u
}

// SetNillableHeapAlloc sets the "heap_alloc" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableHeapAlloc(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetHeapAlloc(*v)
	}
	return _u
}

// AddHeapAlloc adds value to the "heap_alloc" field.
func (_u *SystemMonitorUpdateOne) AddHeapAlloc(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddHeapAlloc(v)
	return _u
}

// SetHeapSys sets the "heap_sys" field.
func (_u *SystemMonitorUpdateOne) SetHeapSys(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetHeapSys()
	_u.mutation.SetHeapSys(v)
	return _u
}

// SetNillableHeapSys sets the "heap_sys" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableHeapSys(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetHeapSys(*v)
	}
	return _u
}

// AddHeapSys adds value to the "heap_sys" field.
func (_u *SystemMonitorUpdateOne) AddHeapSys(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddHeapSys(v)
	return _u
}

// SetGcCount sets the "gc_count" field.
func (_u *SystemMonitorUpdateOne) SetGcCount(v uint32) *SystemMonitorUpdateOne {
	_u.mutation.ResetGcCount()
	_u.mutation.SetGcCount(v)
	return _u
}

// SetNillableGcCount sets the "gc_count" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableGcCount(v *uint32) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetGcCount(*v)
	}
	return _u
}

// AddGcCount adds value to the "gc_count" field.
func (_u *SystemMonitorUpdateOne) AddGcCount(v int32) *SystemMonitorUpdateOne {
	_u.mutation.AddGcCount(v)
	return _u
}

// SetLoadAvg1 sets the "load_avg_1" field.
func (_u *SystemMonitorUpdateOne) SetLoadAvg1(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetLoadAvg1()
	_u.mutation.SetLoadAvg1(v)
	return _u
}

// SetNillableLoadAvg1 sets the "load_avg_1" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableLoadAvg1(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetLoadAvg1(*v)
	}
	return _u
}

// AddLoadAvg1 adds value to the "load_avg_1" field.
func (_u *SystemMonitorUpdateOne) AddLoadAvg1(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddLoadAvg1(v)
	return _u
}

// ClearLoadAvg1 clears the value of the "load_avg_1" field.
func (_u *SystemMonitorUpdateOne) ClearLoadAvg1() *SystemMonitorUpdateOne {
	_u.mutation.ClearLoadAvg1()
	return _u
}

// SetLoadAvg5 sets the "load_avg_5" field.
func (_u *SystemMonitorUpdateOne) SetLoadAvg5(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetLoadAvg5()
	_u.mutation.SetLoadAvg5(v)
	return _u
}

// SetNillableLoadAvg5 sets the "load_avg_5" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableLoadAvg5(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetLoadAvg5(*v)
	}
	return _u
}

// AddLoadAvg5 adds value to the "load_avg_5" field.
func (_u *SystemMonitorUpdateOne) AddLoadAvg5(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddLoadAvg5(v)
	return _u
}

// ClearLoadAvg5 clears the value of the "load_avg_5" field.
func (_u *SystemMonitorUpdateOne) ClearLoadAvg5() *SystemMonitorUpdateOne {
	_u.mutation.ClearLoadAvg5()
	return _u
}

// SetLoadAvg15 sets the "load_avg_15" field.
func (_u *SystemMonitorUpdateOne) SetLoadAvg15(v float64) *SystemMonitorUpdateOne {
	_u.mutation.ResetLoadAvg15()
	_u.mutation.SetLoadAvg15(v)
	return _u
}

// SetNillableLoadAvg15 sets the "load_avg_15" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableLoadAvg15(v *float64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetLoadAvg15(*v)
	}
	return _u
}

// AddLoadAvg15 adds value to the "load_avg_15" field.
func (_u *SystemMonitorUpdateOne) AddLoadAvg15(v float64) *SystemMonitorUpdateOne {
	_u.mutation.AddLoadAvg15(v)
	return _u
}

// ClearLoadAvg15 clears the value of the "load_avg_15" field.
func (_u *SystemMonitorUpdateOne) ClearLoadAvg15() *SystemMonitorUpdateOne {
	_u.mutation.ClearLoadAvg15()
	return _u
}

// SetUptime sets the "uptime" field.
func (_u *SystemMonitorUpdateOne) SetUptime(v uint64) *SystemMonitorUpdateOne {
	_u.mutation.ResetUptime()
	_u.mutation.SetUptime(v)
	return _u
}

// SetNillableUptime sets the "uptime" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableUptime(v *uint64) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetUptime(*v)
	}
	return _u
}

// AddUptime adds value to the "uptime" field.
func (_u *SystemMonitorUpdateOne) AddUptime(v int64) *SystemMonitorUpdateOne {
	_u.mutation.AddUptime(v)
	return _u
}

// SetRecordedAt sets the "recorded_at" field.
func (_u *SystemMonitorUpdateOne) SetRecordedAt(v time.Time) *SystemMonitorUpdateOne {
	_u.mutation.SetRecordedAt(v)
	return _u
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (_u *SystemMonitorUpdateOne) SetNillableRecordedAt(v *time.Time) *SystemMonitorUpdateOne {
	if v != nil {
		_u.SetRecordedAt(*v)
	}
	return _u
}

// Mutation returns the SystemMonitorMutation object of the builder.
func (_u *SystemMonitorUpdateOne) Mutation() *SystemMonitorMutation {
	return _u.mutation
}

// Where appends a list predicates to the SystemMonitorUpdate builder.
func (_u *SystemMonitorUpdateOne) Where(ps ...predicate.SystemMonitor) *SystemMonitorUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SystemMonitorUpdateOne) Select(field string, fields ...string) *SystemMonitorUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SystemMonitor entity.
func (_u *SystemMonitorUpdateOne) Save(ctx context.Context) (*SystemMonitor, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemMonitorUpdateOne) SaveX(ctx context.Context) *SystemMonitor {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SystemMonitorUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemMonitorUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SystemMonitorUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if systemmonitor.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized systemmonitor.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := systemmonitor.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SystemMonitorUpdateOne) check() error {
	if v, ok := _u.mutation.CPUUsagePercent(); ok {
		if err := systemmonitor.CPUUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "cpu_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CPUCores(); ok {
		if err := systemmonitor.CPUCoresValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cores", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.cpu_cores": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MemoryUsagePercent(); ok {
		if err := systemmonitor.MemoryUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "memory_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.memory_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DiskUsagePercent(); ok {
		if err := systemmonitor.DiskUsagePercentValidator(v); err != nil {
			return &ValidationError{Name: "disk_usage_percent", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.disk_usage_percent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Os(); ok {
		if err := systemmonitor.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.os": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Platform(); ok {
		if err := systemmonitor.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PlatformVersion(); ok {
		if err := systemmonitor.PlatformVersionValidator(v); err != nil {
			return &ValidationError{Name: "platform_version", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.platform_version": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Hostname(); ok {
		if err := systemmonitor.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.hostname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GoroutinesCount(); ok {
		if err := systemmonitor.GoroutinesCountValidator(v); err != nil {
			return &ValidationError{Name: "goroutines_count", err: fmt.Errorf(`ent: validator failed for field "SystemMonitor.goroutines_count": %w`, err)}
		}
	}
	return nil
}

func (_u *SystemMonitorUpdateOne) sqlSave(ctx context.Context) (_node *SystemMonitor, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemmonitor.Table, systemmonitor.Columns, sqlgraph.NewFieldSpec(systemmonitor.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemMonitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemmonitor.FieldID)
		for _, f := range fields {
			if !systemmonitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemmonitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(systemmonitor.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(systemmonitor.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(systemmonitor.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(systemmonitor.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(systemmonitor.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(systemmonitor.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(systemmonitor.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.CPUUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldCPUUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCPUUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldCPUUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(systemmonitor.FieldCPUCores, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(systemmonitor.FieldCPUCores, field.TypeInt, value)
	}
	if value, ok := _u.mutation.MemoryTotal(); ok {
		_spec.SetField(systemmonitor.FieldMemoryTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryTotal(); ok {
		_spec.AddField(systemmonitor.FieldMemoryTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryUsed(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryUsed(); ok {
		_spec.AddField(systemmonitor.FieldMemoryUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryFree(); ok {
		_spec.SetField(systemmonitor.FieldMemoryFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryFree(); ok {
		_spec.AddField(systemmonitor.FieldMemoryFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.MemoryUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldMemoryUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMemoryUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldMemoryUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.DiskTotal(); ok {
		_spec.SetField(systemmonitor.FieldDiskTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskTotal(); ok {
		_spec.AddField(systemmonitor.FieldDiskTotal, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskUsed(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskUsed(); ok {
		_spec.AddField(systemmonitor.FieldDiskUsed, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskFree(); ok {
		_spec.SetField(systemmonitor.FieldDiskFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDiskFree(); ok {
		_spec.AddField(systemmonitor.FieldDiskFree, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.DiskUsagePercent(); ok {
		_spec.SetField(systemmonitor.FieldDiskUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiskUsagePercent(); ok {
		_spec.AddField(systemmonitor.FieldDiskUsagePercent, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.NetworkBytesSent(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesSent, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNetworkBytesSent(); ok {
		_spec.AddField(systemmonitor.FieldNetworkBytesSent, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.NetworkBytesRecv(); ok {
		_spec.SetField(systemmonitor.FieldNetworkBytesRecv, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNetworkBytesRecv(); ok {
		_spec.AddField(systemmonitor.FieldNetworkBytesRecv, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Os(); ok {
		_spec.SetField(systemmonitor.FieldOs, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(systemmonitor.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.PlatformVersion(); ok {
		_spec.SetField(systemmonitor.FieldPlatformVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(systemmonitor.FieldHostname, field.TypeString, value)
	}
	if value, ok := _u.mutation.GoroutinesCount(); ok {
		_spec.SetField(systemmonitor.FieldGoroutinesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGoroutinesCount(); ok {
		_spec.AddField(systemmonitor.FieldGoroutinesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.HeapAlloc(); ok {
		_spec.SetField(systemmonitor.FieldHeapAlloc, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHeapAlloc(); ok {
		_spec.AddField(systemmonitor.FieldHeapAlloc, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.HeapSys(); ok {
		_spec.SetField(systemmonitor.FieldHeapSys, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHeapSys(); ok {
		_spec.AddField(systemmonitor.FieldHeapSys, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.GcCount(); ok {
		_spec.SetField(systemmonitor.FieldGcCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedGcCount(); ok {
		_spec.AddField(systemmonitor.FieldGcCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.LoadAvg1(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg1, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg1(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg1, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg1Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg1, field.TypeFloat64)
	}
	if value, ok := _u.mutation.LoadAvg5(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg5, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg5(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg5, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg5Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg5, field.TypeFloat64)
	}
	if value, ok := _u.mutation.LoadAvg15(); ok {
		_spec.SetField(systemmonitor.FieldLoadAvg15, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLoadAvg15(); ok {
		_spec.AddField(systemmonitor.FieldLoadAvg15, field.TypeFloat64, value)
	}
	if _u.mutation.LoadAvg15Cleared() {
		_spec.ClearField(systemmonitor.FieldLoadAvg15, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Uptime(); ok {
		_spec.SetField(systemmonitor.FieldUptime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUptime(); ok {
		_spec.AddField(systemmonitor.FieldUptime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.RecordedAt(); ok {
		_spec.SetField(systemmonitor.FieldRecordedAt, field.TypeTime, value)
	}
	_node = &SystemMonitor{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemmonitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
