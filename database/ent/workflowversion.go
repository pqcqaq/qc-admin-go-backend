// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/workflowversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowVersion is the model entity for the WorkflowVersion schema.
type WorkflowVersion struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 工作流应用ID
	ApplicationID uint64 `json:"application_id,omitempty"`
	// 版本号
	Version uint `json:"version,omitempty"`
	// 版本快照
	Snapshot map[string]interface{} `json:"snapshot,omitempty"`
	// 变更日志
	ChangeLog    string `json:"change_log,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowversion.FieldSnapshot:
			values[i] = new([]byte)
		case workflowversion.FieldID, workflowversion.FieldCreateBy, workflowversion.FieldUpdateBy, workflowversion.FieldApplicationID, workflowversion.FieldVersion:
			values[i] = new(sql.NullInt64)
		case workflowversion.FieldChangeLog:
			values[i] = new(sql.NullString)
		case workflowversion.FieldCreateTime, workflowversion.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowVersion fields.
func (_m *WorkflowVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowversion.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case workflowversion.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case workflowversion.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case workflowversion.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case workflowversion.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case workflowversion.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				_m.ApplicationID = uint64(value.Int64)
			}
		case workflowversion.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = uint(value.Int64)
			}
		case workflowversion.FieldSnapshot:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field snapshot", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Snapshot); err != nil {
					return fmt.Errorf("unmarshal field snapshot: %w", err)
				}
			}
		case workflowversion.FieldChangeLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_log", values[i])
			} else if value.Valid {
				_m.ChangeLog = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowVersion.
// This includes values selected through modifiers, order, etc.
func (_m *WorkflowVersion) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this WorkflowVersion.
// Note that you need to call WorkflowVersion.Unwrap() before calling this method if this WorkflowVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkflowVersion) Update() *WorkflowVersionUpdateOne {
	return NewWorkflowVersionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkflowVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkflowVersion) Unwrap() *WorkflowVersion {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowVersion is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkflowVersion) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteString(", ")
	builder.WriteString("snapshot=")
	builder.WriteString(fmt.Sprintf("%v", _m.Snapshot))
	builder.WriteString(", ")
	builder.WriteString("change_log=")
	builder.WriteString(_m.ChangeLog)
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowVersions is a parsable slice of WorkflowVersion.
type WorkflowVersions []*WorkflowVersion
