// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/attachment"
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *AttachmentMutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (_u *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *AttachmentUpdate) SetCreateBy(v uint64) *AttachmentUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableCreateBy(v *uint64) *AttachmentUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AttachmentUpdate) AddCreateBy(v int64) *AttachmentUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AttachmentUpdate) ClearCreateBy() *AttachmentUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AttachmentUpdate) SetUpdateTime(v time.Time) *AttachmentUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AttachmentUpdate) SetUpdateBy(v uint64) *AttachmentUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableUpdateBy(v *uint64) *AttachmentUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AttachmentUpdate) AddUpdateBy(v int64) *AttachmentUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AttachmentUpdate) ClearUpdateBy() *AttachmentUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AttachmentUpdate) SetDeleteTime(v time.Time) *AttachmentUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableDeleteTime(v *time.Time) *AttachmentUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AttachmentUpdate) ClearDeleteTime() *AttachmentUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AttachmentUpdate) SetDeleteBy(v uint64) *AttachmentUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableDeleteBy(v *uint64) *AttachmentUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AttachmentUpdate) AddDeleteBy(v int64) *AttachmentUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AttachmentUpdate) ClearDeleteBy() *AttachmentUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetFilename sets the "filename" field.
func (_u *AttachmentUpdate) SetFilename(v string) *AttachmentUpdate {
	_u.mutation.SetFilename(v)
	return _u
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableFilename(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetFilename(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *AttachmentUpdate) SetPath(v string) *AttachmentUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillablePath(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *AttachmentUpdate) SetURL(v string) *AttachmentUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableURL(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *AttachmentUpdate) ClearURL() *AttachmentUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetContentType sets the "content_type" field.
func (_u *AttachmentUpdate) SetContentType(v string) *AttachmentUpdate {
	_u.mutation.SetContentType(v)
	return _u
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableContentType(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetContentType(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *AttachmentUpdate) SetSize(v int64) *AttachmentUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableSize(v *int64) *AttachmentUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *AttachmentUpdate) AddSize(v int64) *AttachmentUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// SetEtag sets the "etag" field.
func (_u *AttachmentUpdate) SetEtag(v string) *AttachmentUpdate {
	_u.mutation.SetEtag(v)
	return _u
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableEtag(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetEtag(*v)
	}
	return _u
}

// ClearEtag clears the value of the "etag" field.
func (_u *AttachmentUpdate) ClearEtag() *AttachmentUpdate {
	_u.mutation.ClearEtag()
	return _u
}

// SetBucket sets the "bucket" field.
func (_u *AttachmentUpdate) SetBucket(v string) *AttachmentUpdate {
	_u.mutation.SetBucket(v)
	return _u
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableBucket(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetBucket(*v)
	}
	return _u
}

// SetStorageProvider sets the "storage_provider" field.
func (_u *AttachmentUpdate) SetStorageProvider(v string) *AttachmentUpdate {
	_u.mutation.SetStorageProvider(v)
	return _u
}

// SetNillableStorageProvider sets the "storage_provider" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableStorageProvider(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetStorageProvider(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *AttachmentUpdate) SetMetadata(v map[string]interface{}) *AttachmentUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AttachmentUpdate) ClearMetadata() *AttachmentUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *AttachmentUpdate) SetStatus(v attachment.Status) *AttachmentUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableStatus(v *attachment.Status) *AttachmentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetUploadSessionID sets the "upload_session_id" field.
func (_u *AttachmentUpdate) SetUploadSessionID(v string) *AttachmentUpdate {
	_u.mutation.SetUploadSessionID(v)
	return _u
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableUploadSessionID(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetUploadSessionID(*v)
	}
	return _u
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (_u *AttachmentUpdate) ClearUploadSessionID() *AttachmentUpdate {
	_u.mutation.ClearUploadSessionID()
	return _u
}

// SetTag1 sets the "tag1" field.
func (_u *AttachmentUpdate) SetTag1(v string) *AttachmentUpdate {
	_u.mutation.SetTag1(v)
	return _u
}

// SetNillableTag1 sets the "tag1" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableTag1(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetTag1(*v)
	}
	return _u
}

// ClearTag1 clears the value of the "tag1" field.
func (_u *AttachmentUpdate) ClearTag1() *AttachmentUpdate {
	_u.mutation.ClearTag1()
	return _u
}

// SetTag2 sets the "tag2" field.
func (_u *AttachmentUpdate) SetTag2(v string) *AttachmentUpdate {
	_u.mutation.SetTag2(v)
	return _u
}

// SetNillableTag2 sets the "tag2" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableTag2(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetTag2(*v)
	}
	return _u
}

// ClearTag2 clears the value of the "tag2" field.
func (_u *AttachmentUpdate) ClearTag2() *AttachmentUpdate {
	_u.mutation.ClearTag2()
	return _u
}

// SetTag3 sets the "tag3" field.
func (_u *AttachmentUpdate) SetTag3(v string) *AttachmentUpdate {
	_u.mutation.SetTag3(v)
	return _u
}

// SetNillableTag3 sets the "tag3" field if the given value is not nil.
func (_u *AttachmentUpdate) SetNillableTag3(v *string) *AttachmentUpdate {
	if v != nil {
		_u.SetTag3(*v)
	}
	return _u
}

// ClearTag3 clears the value of the "tag3" field.
func (_u *AttachmentUpdate) ClearTag3() *AttachmentUpdate {
	_u.mutation.ClearTag3()
	return _u
}

// Mutation returns the AttachmentMutation object of the builder.
func (_u *AttachmentUpdate) Mutation() *AttachmentMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AttachmentUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if attachment.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized attachment.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := attachment.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttachmentUpdate) check() error {
	if v, ok := _u.mutation.Filename(); ok {
		if err := attachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Attachment.filename": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := attachment.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Attachment.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ContentType(); ok {
		if err := attachment.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.content_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Etag(); ok {
		if err := attachment.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Attachment.etag": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Bucket(); ok {
		if err := attachment.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Attachment.bucket": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StorageProvider(); ok {
		if err := attachment.StorageProviderValidator(v); err != nil {
			return &ValidationError{Name: "storage_provider", err: fmt.Errorf(`ent: validator failed for field "Attachment.storage_provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := attachment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Attachment.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UploadSessionID(); ok {
		if err := attachment.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Attachment.upload_session_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag1(); ok {
		if err := attachment.Tag1Validator(v); err != nil {
			return &ValidationError{Name: "tag1", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag1": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag2(); ok {
		if err := attachment.Tag2Validator(v); err != nil {
			return &ValidationError{Name: "tag2", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag2": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag3(); ok {
		if err := attachment.Tag3Validator(v); err != nil {
			return &ValidationError{Name: "tag3", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag3": %w`, err)}
		}
	}
	return nil
}

func (_u *AttachmentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(attachment.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(attachment.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(attachment.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(attachment.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(attachment.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(attachment.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(attachment.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(attachment.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(attachment.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(attachment.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Filename(); ok {
		_spec.SetField(attachment.FieldFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(attachment.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.ContentType(); ok {
		_spec.SetField(attachment.FieldContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(attachment.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Etag(); ok {
		_spec.SetField(attachment.FieldEtag, field.TypeString, value)
	}
	if _u.mutation.EtagCleared() {
		_spec.ClearField(attachment.FieldEtag, field.TypeString)
	}
	if value, ok := _u.mutation.Bucket(); ok {
		_spec.SetField(attachment.FieldBucket, field.TypeString, value)
	}
	if value, ok := _u.mutation.StorageProvider(); ok {
		_spec.SetField(attachment.FieldStorageProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(attachment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(attachment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UploadSessionID(); ok {
		_spec.SetField(attachment.FieldUploadSessionID, field.TypeString, value)
	}
	if _u.mutation.UploadSessionIDCleared() {
		_spec.ClearField(attachment.FieldUploadSessionID, field.TypeString)
	}
	if value, ok := _u.mutation.Tag1(); ok {
		_spec.SetField(attachment.FieldTag1, field.TypeString, value)
	}
	if _u.mutation.Tag1Cleared() {
		_spec.ClearField(attachment.FieldTag1, field.TypeString)
	}
	if value, ok := _u.mutation.Tag2(); ok {
		_spec.SetField(attachment.FieldTag2, field.TypeString, value)
	}
	if _u.mutation.Tag2Cleared() {
		_spec.ClearField(attachment.FieldTag2, field.TypeString)
	}
	if value, ok := _u.mutation.Tag3(); ok {
		_spec.SetField(attachment.FieldTag3, field.TypeString, value)
	}
	if _u.mutation.Tag3Cleared() {
		_spec.ClearField(attachment.FieldTag3, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttachmentMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *AttachmentUpdateOne) SetCreateBy(v uint64) *AttachmentUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableCreateBy(v *uint64) *AttachmentUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AttachmentUpdateOne) AddCreateBy(v int64) *AttachmentUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AttachmentUpdateOne) ClearCreateBy() *AttachmentUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AttachmentUpdateOne) SetUpdateTime(v time.Time) *AttachmentUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AttachmentUpdateOne) SetUpdateBy(v uint64) *AttachmentUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableUpdateBy(v *uint64) *AttachmentUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AttachmentUpdateOne) AddUpdateBy(v int64) *AttachmentUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AttachmentUpdateOne) ClearUpdateBy() *AttachmentUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AttachmentUpdateOne) SetDeleteTime(v time.Time) *AttachmentUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableDeleteTime(v *time.Time) *AttachmentUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AttachmentUpdateOne) ClearDeleteTime() *AttachmentUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *AttachmentUpdateOne) SetDeleteBy(v uint64) *AttachmentUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableDeleteBy(v *uint64) *AttachmentUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *AttachmentUpdateOne) AddDeleteBy(v int64) *AttachmentUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *AttachmentUpdateOne) ClearDeleteBy() *AttachmentUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetFilename sets the "filename" field.
func (_u *AttachmentUpdateOne) SetFilename(v string) *AttachmentUpdateOne {
	_u.mutation.SetFilename(v)
	return _u
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableFilename(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetFilename(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *AttachmentUpdateOne) SetPath(v string) *AttachmentUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillablePath(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *AttachmentUpdateOne) SetURL(v string) *AttachmentUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableURL(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *AttachmentUpdateOne) ClearURL() *AttachmentUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetContentType sets the "content_type" field.
func (_u *AttachmentUpdateOne) SetContentType(v string) *AttachmentUpdateOne {
	_u.mutation.SetContentType(v)
	return _u
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableContentType(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetContentType(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *AttachmentUpdateOne) SetSize(v int64) *AttachmentUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableSize(v *int64) *AttachmentUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *AttachmentUpdateOne) AddSize(v int64) *AttachmentUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// SetEtag sets the "etag" field.
func (_u *AttachmentUpdateOne) SetEtag(v string) *AttachmentUpdateOne {
	_u.mutation.SetEtag(v)
	return _u
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableEtag(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetEtag(*v)
	}
	return _u
}

// ClearEtag clears the value of the "etag" field.
func (_u *AttachmentUpdateOne) ClearEtag() *AttachmentUpdateOne {
	_u.mutation.ClearEtag()
	return _u
}

// SetBucket sets the "bucket" field.
func (_u *AttachmentUpdateOne) SetBucket(v string) *AttachmentUpdateOne {
	_u.mutation.SetBucket(v)
	return _u
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableBucket(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetBucket(*v)
	}
	return _u
}

// SetStorageProvider sets the "storage_provider" field.
func (_u *AttachmentUpdateOne) SetStorageProvider(v string) *AttachmentUpdateOne {
	_u.mutation.SetStorageProvider(v)
	return _u
}

// SetNillableStorageProvider sets the "storage_provider" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableStorageProvider(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetStorageProvider(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *AttachmentUpdateOne) SetMetadata(v map[string]interface{}) *AttachmentUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AttachmentUpdateOne) ClearMetadata() *AttachmentUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *AttachmentUpdateOne) SetStatus(v attachment.Status) *AttachmentUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableStatus(v *attachment.Status) *AttachmentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetUploadSessionID sets the "upload_session_id" field.
func (_u *AttachmentUpdateOne) SetUploadSessionID(v string) *AttachmentUpdateOne {
	_u.mutation.SetUploadSessionID(v)
	return _u
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableUploadSessionID(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetUploadSessionID(*v)
	}
	return _u
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (_u *AttachmentUpdateOne) ClearUploadSessionID() *AttachmentUpdateOne {
	_u.mutation.ClearUploadSessionID()
	return _u
}

// SetTag1 sets the "tag1" field.
func (_u *AttachmentUpdateOne) SetTag1(v string) *AttachmentUpdateOne {
	_u.mutation.SetTag1(v)
	return _u
}

// SetNillableTag1 sets the "tag1" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableTag1(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetTag1(*v)
	}
	return _u
}

// ClearTag1 clears the value of the "tag1" field.
func (_u *AttachmentUpdateOne) ClearTag1() *AttachmentUpdateOne {
	_u.mutation.ClearTag1()
	return _u
}

// SetTag2 sets the "tag2" field.
func (_u *AttachmentUpdateOne) SetTag2(v string) *AttachmentUpdateOne {
	_u.mutation.SetTag2(v)
	return _u
}

// SetNillableTag2 sets the "tag2" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableTag2(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetTag2(*v)
	}
	return _u
}

// ClearTag2 clears the value of the "tag2" field.
func (_u *AttachmentUpdateOne) ClearTag2() *AttachmentUpdateOne {
	_u.mutation.ClearTag2()
	return _u
}

// SetTag3 sets the "tag3" field.
func (_u *AttachmentUpdateOne) SetTag3(v string) *AttachmentUpdateOne {
	_u.mutation.SetTag3(v)
	return _u
}

// SetNillableTag3 sets the "tag3" field if the given value is not nil.
func (_u *AttachmentUpdateOne) SetNillableTag3(v *string) *AttachmentUpdateOne {
	if v != nil {
		_u.SetTag3(*v)
	}
	return _u
}

// ClearTag3 clears the value of the "tag3" field.
func (_u *AttachmentUpdateOne) ClearTag3() *AttachmentUpdateOne {
	_u.mutation.ClearTag3()
	return _u
}

// Mutation returns the AttachmentMutation object of the builder.
func (_u *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return _u.mutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (_u *AttachmentUpdateOne) Where(ps ...predicate.Attachment) *AttachmentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Attachment entity.
func (_u *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AttachmentUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if attachment.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized attachment.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := attachment.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttachmentUpdateOne) check() error {
	if v, ok := _u.mutation.Filename(); ok {
		if err := attachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Attachment.filename": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Path(); ok {
		if err := attachment.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Attachment.path": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ContentType(); ok {
		if err := attachment.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.content_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Etag(); ok {
		if err := attachment.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Attachment.etag": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Bucket(); ok {
		if err := attachment.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "Attachment.bucket": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StorageProvider(); ok {
		if err := attachment.StorageProviderValidator(v); err != nil {
			return &ValidationError{Name: "storage_provider", err: fmt.Errorf(`ent: validator failed for field "Attachment.storage_provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := attachment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Attachment.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UploadSessionID(); ok {
		if err := attachment.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Attachment.upload_session_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag1(); ok {
		if err := attachment.Tag1Validator(v); err != nil {
			return &ValidationError{Name: "tag1", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag1": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag2(); ok {
		if err := attachment.Tag2Validator(v); err != nil {
			return &ValidationError{Name: "tag2", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag2": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Tag3(); ok {
		if err := attachment.Tag3Validator(v); err != nil {
			return &ValidationError{Name: "tag3", err: fmt.Errorf(`ent: validator failed for field "Attachment.tag3": %w`, err)}
		}
	}
	return nil
}

func (_u *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(attachment.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(attachment.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(attachment.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(attachment.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(attachment.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(attachment.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(attachment.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(attachment.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(attachment.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(attachment.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.Filename(); ok {
		_spec.SetField(attachment.FieldFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(attachment.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.ContentType(); ok {
		_spec.SetField(attachment.FieldContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(attachment.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Etag(); ok {
		_spec.SetField(attachment.FieldEtag, field.TypeString, value)
	}
	if _u.mutation.EtagCleared() {
		_spec.ClearField(attachment.FieldEtag, field.TypeString)
	}
	if value, ok := _u.mutation.Bucket(); ok {
		_spec.SetField(attachment.FieldBucket, field.TypeString, value)
	}
	if value, ok := _u.mutation.StorageProvider(); ok {
		_spec.SetField(attachment.FieldStorageProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(attachment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(attachment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UploadSessionID(); ok {
		_spec.SetField(attachment.FieldUploadSessionID, field.TypeString, value)
	}
	if _u.mutation.UploadSessionIDCleared() {
		_spec.ClearField(attachment.FieldUploadSessionID, field.TypeString)
	}
	if value, ok := _u.mutation.Tag1(); ok {
		_spec.SetField(attachment.FieldTag1, field.TypeString, value)
	}
	if _u.mutation.Tag1Cleared() {
		_spec.ClearField(attachment.FieldTag1, field.TypeString)
	}
	if value, ok := _u.mutation.Tag2(); ok {
		_spec.SetField(attachment.FieldTag2, field.TypeString, value)
	}
	if _u.mutation.Tag2Cleared() {
		_spec.ClearField(attachment.FieldTag2, field.TypeString)
	}
	if value, ok := _u.mutation.Tag3(); ok {
		_spec.SetField(attachment.FieldTag3, field.TypeString, value)
	}
	if _u.mutation.Tag3Cleared() {
		_spec.ClearField(attachment.FieldTag3, field.TypeString)
	}
	_node = &Attachment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
