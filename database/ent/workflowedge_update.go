// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-backend/database/ent/predicate"
	"go-backend/database/ent/workflowapplication"
	"go-backend/database/ent/workflowedge"
	"go-backend/database/ent/workflownode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowEdgeUpdate is the builder for updating WorkflowEdge entities.
type WorkflowEdgeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowEdgeMutation
}

// Where appends a list predicates to the WorkflowEdgeUpdate builder.
func (_u *WorkflowEdgeUpdate) Where(ps ...predicate.WorkflowEdge) *WorkflowEdgeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowEdgeUpdate) SetCreateBy(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableCreateBy(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowEdgeUpdate) AddCreateBy(v int64) *WorkflowEdgeUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowEdgeUpdate) ClearCreateBy() *WorkflowEdgeUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowEdgeUpdate) SetUpdateTime(v time.Time) *WorkflowEdgeUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowEdgeUpdate) SetUpdateBy(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableUpdateBy(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowEdgeUpdate) AddUpdateBy(v int64) *WorkflowEdgeUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowEdgeUpdate) ClearUpdateBy() *WorkflowEdgeUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowEdgeUpdate) SetDeleteTime(v time.Time) *WorkflowEdgeUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableDeleteTime(v *time.Time) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowEdgeUpdate) ClearDeleteTime() *WorkflowEdgeUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowEdgeUpdate) SetDeleteBy(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableDeleteBy(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowEdgeUpdate) AddDeleteBy(v int64) *WorkflowEdgeUpdate {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowEdgeUpdate) ClearDeleteBy() *WorkflowEdgeUpdate {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetEdgeKey sets the "edge_key" field.
func (_u *WorkflowEdgeUpdate) SetEdgeKey(v string) *WorkflowEdgeUpdate {
	_u.mutation.SetEdgeKey(v)
	return _u
}

// SetNillableEdgeKey sets the "edge_key" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableEdgeKey(v *string) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetEdgeKey(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowEdgeUpdate) SetApplicationID(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableApplicationID(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetSourceNodeID sets the "source_node_id" field.
func (_u *WorkflowEdgeUpdate) SetSourceNodeID(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.SetSourceNodeID(v)
	return _u
}

// SetNillableSourceNodeID sets the "source_node_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableSourceNodeID(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetSourceNodeID(*v)
	}
	return _u
}

// SetTargetNodeID sets the "target_node_id" field.
func (_u *WorkflowEdgeUpdate) SetTargetNodeID(v uint64) *WorkflowEdgeUpdate {
	_u.mutation.SetTargetNodeID(v)
	return _u
}

// SetNillableTargetNodeID sets the "target_node_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableTargetNodeID(v *uint64) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetTargetNodeID(*v)
	}
	return _u
}

// SetSourceHandle sets the "source_handle" field.
func (_u *WorkflowEdgeUpdate) SetSourceHandle(v string) *WorkflowEdgeUpdate {
	_u.mutation.SetSourceHandle(v)
	return _u
}

// SetNillableSourceHandle sets the "source_handle" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableSourceHandle(v *string) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetSourceHandle(*v)
	}
	return _u
}

// ClearSourceHandle clears the value of the "source_handle" field.
func (_u *WorkflowEdgeUpdate) ClearSourceHandle() *WorkflowEdgeUpdate {
	_u.mutation.ClearSourceHandle()
	return _u
}

// SetTargetHandle sets the "target_handle" field.
func (_u *WorkflowEdgeUpdate) SetTargetHandle(v string) *WorkflowEdgeUpdate {
	_u.mutation.SetTargetHandle(v)
	return _u
}

// SetNillableTargetHandle sets the "target_handle" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableTargetHandle(v *string) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetTargetHandle(*v)
	}
	return _u
}

// ClearTargetHandle clears the value of the "target_handle" field.
func (_u *WorkflowEdgeUpdate) ClearTargetHandle() *WorkflowEdgeUpdate {
	_u.mutation.ClearTargetHandle()
	return _u
}

// SetType sets the "type" field.
func (_u *WorkflowEdgeUpdate) SetType(v workflowedge.Type) *WorkflowEdgeUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableType(v *workflowedge.Type) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetLabel sets the "label" field.
func (_u *WorkflowEdgeUpdate) SetLabel(v string) *WorkflowEdgeUpdate {
	_u.mutation.SetLabel(v)
	return _u
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableLabel(v *string) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetLabel(*v)
	}
	return _u
}

// ClearLabel clears the value of the "label" field.
func (_u *WorkflowEdgeUpdate) ClearLabel() *WorkflowEdgeUpdate {
	_u.mutation.ClearLabel()
	return _u
}

// SetBranchName sets the "branch_name" field.
func (_u *WorkflowEdgeUpdate) SetBranchName(v string) *WorkflowEdgeUpdate {
	_u.mutation.SetBranchName(v)
	return _u
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableBranchName(v *string) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetBranchName(*v)
	}
	return _u
}

// ClearBranchName clears the value of the "branch_name" field.
func (_u *WorkflowEdgeUpdate) ClearBranchName() *WorkflowEdgeUpdate {
	_u.mutation.ClearBranchName()
	return _u
}

// SetAnimated sets the "animated" field.
func (_u *WorkflowEdgeUpdate) SetAnimated(v bool) *WorkflowEdgeUpdate {
	_u.mutation.SetAnimated(v)
	return _u
}

// SetNillableAnimated sets the "animated" field if the given value is not nil.
func (_u *WorkflowEdgeUpdate) SetNillableAnimated(v *bool) *WorkflowEdgeUpdate {
	if v != nil {
		_u.SetAnimated(*v)
	}
	return _u
}

// SetStyle sets the "style" field.
func (_u *WorkflowEdgeUpdate) SetStyle(v map[string]interface{}) *WorkflowEdgeUpdate {
	_u.mutation.SetStyle(v)
	return _u
}

// ClearStyle clears the value of the "style" field.
func (_u *WorkflowEdgeUpdate) ClearStyle() *WorkflowEdgeUpdate {
	_u.mutation.ClearStyle()
	return _u
}

// SetData sets the "data" field.
func (_u *WorkflowEdgeUpdate) SetData(v map[string]interface{}) *WorkflowEdgeUpdate {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *WorkflowEdgeUpdate) ClearData() *WorkflowEdgeUpdate {
	_u.mutation.ClearData()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowEdgeUpdate) SetApplication(v *WorkflowApplication) *WorkflowEdgeUpdate {
	return _u.SetApplicationID(v.ID)
}

// SetSourceNode sets the "source_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdate) SetSourceNode(v *WorkflowNode) *WorkflowEdgeUpdate {
	return _u.SetSourceNodeID(v.ID)
}

// SetTargetNode sets the "target_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdate) SetTargetNode(v *WorkflowNode) *WorkflowEdgeUpdate {
	return _u.SetTargetNodeID(v.ID)
}

// Mutation returns the WorkflowEdgeMutation object of the builder.
func (_u *WorkflowEdgeUpdate) Mutation() *WorkflowEdgeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowEdgeUpdate) ClearApplication() *WorkflowEdgeUpdate {
	_u.mutation.ClearApplication()
	return _u
}

// ClearSourceNode clears the "source_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdate) ClearSourceNode() *WorkflowEdgeUpdate {
	_u.mutation.ClearSourceNode()
	return _u
}

// ClearTargetNode clears the "target_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdate) ClearTargetNode() *WorkflowEdgeUpdate {
	_u.mutation.ClearTargetNode()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowEdgeUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowEdgeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowEdgeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowEdgeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowEdgeUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowedge.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowedge.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowedge.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowEdgeUpdate) check() error {
	if v, ok := _u.mutation.EdgeKey(); ok {
		if err := workflowedge.EdgeKeyValidator(v); err != nil {
			return &ValidationError{Name: "edge_key", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.edge_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := workflowedge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.type": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.application"`)
	}
	if _u.mutation.SourceNodeCleared() && len(_u.mutation.SourceNodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.source_node"`)
	}
	if _u.mutation.TargetNodeCleared() && len(_u.mutation.TargetNodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.target_node"`)
	}
	return nil
}

func (_u *WorkflowEdgeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowedge.Table, workflowedge.Columns, sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowedge.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowedge.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowedge.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowedge.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowedge.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowedge.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowedge.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflowedge.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflowedge.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflowedge.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflowedge.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflowedge.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.EdgeKey(); ok {
		_spec.SetField(workflowedge.FieldEdgeKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceHandle(); ok {
		_spec.SetField(workflowedge.FieldSourceHandle, field.TypeString, value)
	}
	if _u.mutation.SourceHandleCleared() {
		_spec.ClearField(workflowedge.FieldSourceHandle, field.TypeString)
	}
	if value, ok := _u.mutation.TargetHandle(); ok {
		_spec.SetField(workflowedge.FieldTargetHandle, field.TypeString, value)
	}
	if _u.mutation.TargetHandleCleared() {
		_spec.ClearField(workflowedge.FieldTargetHandle, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(workflowedge.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Label(); ok {
		_spec.SetField(workflowedge.FieldLabel, field.TypeString, value)
	}
	if _u.mutation.LabelCleared() {
		_spec.ClearField(workflowedge.FieldLabel, field.TypeString)
	}
	if value, ok := _u.mutation.BranchName(); ok {
		_spec.SetField(workflowedge.FieldBranchName, field.TypeString, value)
	}
	if _u.mutation.BranchNameCleared() {
		_spec.ClearField(workflowedge.FieldBranchName, field.TypeString)
	}
	if value, ok := _u.mutation.Animated(); ok {
		_spec.SetField(workflowedge.FieldAnimated, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Style(); ok {
		_spec.SetField(workflowedge.FieldStyle, field.TypeJSON, value)
	}
	if _u.mutation.StyleCleared() {
		_spec.ClearField(workflowedge.FieldStyle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(workflowedge.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(workflowedge.FieldData, field.TypeJSON)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.ApplicationTable,
			Columns: []string{workflowedge.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.ApplicationTable,
			Columns: []string{workflowedge.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SourceNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.SourceNodeTable,
			Columns: []string{workflowedge.SourceNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SourceNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.SourceNodeTable,
			Columns: []string{workflowedge.SourceNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.TargetNodeTable,
			Columns: []string{workflowedge.TargetNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.TargetNodeTable,
			Columns: []string{workflowedge.TargetNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowedge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowEdgeUpdateOne is the builder for updating a single WorkflowEdge entity.
type WorkflowEdgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowEdgeMutation
}

// SetCreateBy sets the "create_by" field.
func (_u *WorkflowEdgeUpdateOne) SetCreateBy(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableCreateBy(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *WorkflowEdgeUpdateOne) AddCreateBy(v int64) *WorkflowEdgeUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *WorkflowEdgeUpdateOne) ClearCreateBy() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WorkflowEdgeUpdateOne) SetUpdateTime(v time.Time) *WorkflowEdgeUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *WorkflowEdgeUpdateOne) SetUpdateBy(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableUpdateBy(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *WorkflowEdgeUpdateOne) AddUpdateBy(v int64) *WorkflowEdgeUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *WorkflowEdgeUpdateOne) ClearUpdateBy() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *WorkflowEdgeUpdateOne) SetDeleteTime(v time.Time) *WorkflowEdgeUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableDeleteTime(v *time.Time) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *WorkflowEdgeUpdateOne) ClearDeleteTime() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetDeleteBy sets the "delete_by" field.
func (_u *WorkflowEdgeUpdateOne) SetDeleteBy(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.ResetDeleteBy()
	_u.mutation.SetDeleteBy(v)
	return _u
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableDeleteBy(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetDeleteBy(*v)
	}
	return _u
}

// AddDeleteBy adds value to the "delete_by" field.
func (_u *WorkflowEdgeUpdateOne) AddDeleteBy(v int64) *WorkflowEdgeUpdateOne {
	_u.mutation.AddDeleteBy(v)
	return _u
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (_u *WorkflowEdgeUpdateOne) ClearDeleteBy() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearDeleteBy()
	return _u
}

// SetEdgeKey sets the "edge_key" field.
func (_u *WorkflowEdgeUpdateOne) SetEdgeKey(v string) *WorkflowEdgeUpdateOne {
	_u.mutation.SetEdgeKey(v)
	return _u
}

// SetNillableEdgeKey sets the "edge_key" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableEdgeKey(v *string) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetEdgeKey(*v)
	}
	return _u
}

// SetApplicationID sets the "application_id" field.
func (_u *WorkflowEdgeUpdateOne) SetApplicationID(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.SetApplicationID(v)
	return _u
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableApplicationID(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetApplicationID(*v)
	}
	return _u
}

// SetSourceNodeID sets the "source_node_id" field.
func (_u *WorkflowEdgeUpdateOne) SetSourceNodeID(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.SetSourceNodeID(v)
	return _u
}

// SetNillableSourceNodeID sets the "source_node_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableSourceNodeID(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetSourceNodeID(*v)
	}
	return _u
}

// SetTargetNodeID sets the "target_node_id" field.
func (_u *WorkflowEdgeUpdateOne) SetTargetNodeID(v uint64) *WorkflowEdgeUpdateOne {
	_u.mutation.SetTargetNodeID(v)
	return _u
}

// SetNillableTargetNodeID sets the "target_node_id" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableTargetNodeID(v *uint64) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetTargetNodeID(*v)
	}
	return _u
}

// SetSourceHandle sets the "source_handle" field.
func (_u *WorkflowEdgeUpdateOne) SetSourceHandle(v string) *WorkflowEdgeUpdateOne {
	_u.mutation.SetSourceHandle(v)
	return _u
}

// SetNillableSourceHandle sets the "source_handle" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableSourceHandle(v *string) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetSourceHandle(*v)
	}
	return _u
}

// ClearSourceHandle clears the value of the "source_handle" field.
func (_u *WorkflowEdgeUpdateOne) ClearSourceHandle() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearSourceHandle()
	return _u
}

// SetTargetHandle sets the "target_handle" field.
func (_u *WorkflowEdgeUpdateOne) SetTargetHandle(v string) *WorkflowEdgeUpdateOne {
	_u.mutation.SetTargetHandle(v)
	return _u
}

// SetNillableTargetHandle sets the "target_handle" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableTargetHandle(v *string) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetTargetHandle(*v)
	}
	return _u
}

// ClearTargetHandle clears the value of the "target_handle" field.
func (_u *WorkflowEdgeUpdateOne) ClearTargetHandle() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearTargetHandle()
	return _u
}

// SetType sets the "type" field.
func (_u *WorkflowEdgeUpdateOne) SetType(v workflowedge.Type) *WorkflowEdgeUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableType(v *workflowedge.Type) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetLabel sets the "label" field.
func (_u *WorkflowEdgeUpdateOne) SetLabel(v string) *WorkflowEdgeUpdateOne {
	_u.mutation.SetLabel(v)
	return _u
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableLabel(v *string) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetLabel(*v)
	}
	return _u
}

// ClearLabel clears the value of the "label" field.
func (_u *WorkflowEdgeUpdateOne) ClearLabel() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearLabel()
	return _u
}

// SetBranchName sets the "branch_name" field.
func (_u *WorkflowEdgeUpdateOne) SetBranchName(v string) *WorkflowEdgeUpdateOne {
	_u.mutation.SetBranchName(v)
	return _u
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableBranchName(v *string) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetBranchName(*v)
	}
	return _u
}

// ClearBranchName clears the value of the "branch_name" field.
func (_u *WorkflowEdgeUpdateOne) ClearBranchName() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearBranchName()
	return _u
}

// SetAnimated sets the "animated" field.
func (_u *WorkflowEdgeUpdateOne) SetAnimated(v bool) *WorkflowEdgeUpdateOne {
	_u.mutation.SetAnimated(v)
	return _u
}

// SetNillableAnimated sets the "animated" field if the given value is not nil.
func (_u *WorkflowEdgeUpdateOne) SetNillableAnimated(v *bool) *WorkflowEdgeUpdateOne {
	if v != nil {
		_u.SetAnimated(*v)
	}
	return _u
}

// SetStyle sets the "style" field.
func (_u *WorkflowEdgeUpdateOne) SetStyle(v map[string]interface{}) *WorkflowEdgeUpdateOne {
	_u.mutation.SetStyle(v)
	return _u
}

// ClearStyle clears the value of the "style" field.
func (_u *WorkflowEdgeUpdateOne) ClearStyle() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearStyle()
	return _u
}

// SetData sets the "data" field.
func (_u *WorkflowEdgeUpdateOne) SetData(v map[string]interface{}) *WorkflowEdgeUpdateOne {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *WorkflowEdgeUpdateOne) ClearData() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearData()
	return _u
}

// SetApplication sets the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowEdgeUpdateOne) SetApplication(v *WorkflowApplication) *WorkflowEdgeUpdateOne {
	return _u.SetApplicationID(v.ID)
}

// SetSourceNode sets the "source_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdateOne) SetSourceNode(v *WorkflowNode) *WorkflowEdgeUpdateOne {
	return _u.SetSourceNodeID(v.ID)
}

// SetTargetNode sets the "target_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdateOne) SetTargetNode(v *WorkflowNode) *WorkflowEdgeUpdateOne {
	return _u.SetTargetNodeID(v.ID)
}

// Mutation returns the WorkflowEdgeMutation object of the builder.
func (_u *WorkflowEdgeUpdateOne) Mutation() *WorkflowEdgeMutation {
	return _u.mutation
}

// ClearApplication clears the "application" edge to the WorkflowApplication entity.
func (_u *WorkflowEdgeUpdateOne) ClearApplication() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearApplication()
	return _u
}

// ClearSourceNode clears the "source_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdateOne) ClearSourceNode() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearSourceNode()
	return _u
}

// ClearTargetNode clears the "target_node" edge to the WorkflowNode entity.
func (_u *WorkflowEdgeUpdateOne) ClearTargetNode() *WorkflowEdgeUpdateOne {
	_u.mutation.ClearTargetNode()
	return _u
}

// Where appends a list predicates to the WorkflowEdgeUpdate builder.
func (_u *WorkflowEdgeUpdateOne) Where(ps ...predicate.WorkflowEdge) *WorkflowEdgeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowEdgeUpdateOne) Select(field string, fields ...string) *WorkflowEdgeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated WorkflowEdge entity.
func (_u *WorkflowEdgeUpdateOne) Save(ctx context.Context) (*WorkflowEdge, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowEdgeUpdateOne) SaveX(ctx context.Context) *WorkflowEdge {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowEdgeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowEdgeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WorkflowEdgeUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if workflowedge.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized workflowedge.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := workflowedge.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowEdgeUpdateOne) check() error {
	if v, ok := _u.mutation.EdgeKey(); ok {
		if err := workflowedge.EdgeKeyValidator(v); err != nil {
			return &ValidationError{Name: "edge_key", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.edge_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := workflowedge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WorkflowEdge.type": %w`, err)}
		}
	}
	if _u.mutation.ApplicationCleared() && len(_u.mutation.ApplicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.application"`)
	}
	if _u.mutation.SourceNodeCleared() && len(_u.mutation.SourceNodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.source_node"`)
	}
	if _u.mutation.TargetNodeCleared() && len(_u.mutation.TargetNodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEdge.target_node"`)
	}
	return nil
}

func (_u *WorkflowEdgeUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowEdge, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowedge.Table, workflowedge.Columns, sqlgraph.NewFieldSpec(workflowedge.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowEdge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowedge.FieldID)
		for _, f := range fields {
			if !workflowedge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowedge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(workflowedge.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(workflowedge.FieldCreateBy, field.TypeUint64, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(workflowedge.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(workflowedge.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(workflowedge.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(workflowedge.FieldUpdateBy, field.TypeUint64, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(workflowedge.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(workflowedge.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(workflowedge.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteBy(); ok {
		_spec.SetField(workflowedge.FieldDeleteBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDeleteBy(); ok {
		_spec.AddField(workflowedge.FieldDeleteBy, field.TypeUint64, value)
	}
	if _u.mutation.DeleteByCleared() {
		_spec.ClearField(workflowedge.FieldDeleteBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.EdgeKey(); ok {
		_spec.SetField(workflowedge.FieldEdgeKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceHandle(); ok {
		_spec.SetField(workflowedge.FieldSourceHandle, field.TypeString, value)
	}
	if _u.mutation.SourceHandleCleared() {
		_spec.ClearField(workflowedge.FieldSourceHandle, field.TypeString)
	}
	if value, ok := _u.mutation.TargetHandle(); ok {
		_spec.SetField(workflowedge.FieldTargetHandle, field.TypeString, value)
	}
	if _u.mutation.TargetHandleCleared() {
		_spec.ClearField(workflowedge.FieldTargetHandle, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(workflowedge.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Label(); ok {
		_spec.SetField(workflowedge.FieldLabel, field.TypeString, value)
	}
	if _u.mutation.LabelCleared() {
		_spec.ClearField(workflowedge.FieldLabel, field.TypeString)
	}
	if value, ok := _u.mutation.BranchName(); ok {
		_spec.SetField(workflowedge.FieldBranchName, field.TypeString, value)
	}
	if _u.mutation.BranchNameCleared() {
		_spec.ClearField(workflowedge.FieldBranchName, field.TypeString)
	}
	if value, ok := _u.mutation.Animated(); ok {
		_spec.SetField(workflowedge.FieldAnimated, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Style(); ok {
		_spec.SetField(workflowedge.FieldStyle, field.TypeJSON, value)
	}
	if _u.mutation.StyleCleared() {
		_spec.ClearField(workflowedge.FieldStyle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(workflowedge.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(workflowedge.FieldData, field.TypeJSON)
	}
	if _u.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.ApplicationTable,
			Columns: []string{workflowedge.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.ApplicationTable,
			Columns: []string{workflowedge.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowapplication.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SourceNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.SourceNodeTable,
			Columns: []string{workflowedge.SourceNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SourceNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.SourceNodeTable,
			Columns: []string{workflowedge.SourceNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.TargetNodeTable,
			Columns: []string{workflowedge.TargetNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowedge.TargetNodeTable,
			Columns: []string{workflowedge.TargetNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowEdge{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowedge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
