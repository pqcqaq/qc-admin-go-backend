// Code generated by ent, DO NOT EDIT.

package oauthtoken

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthtoken type in the database.
	Label = "oauth_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldDeleteBy holds the string denoting the delete_by field in the database.
	FieldDeleteBy = "delete_by"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldAccessExpiresAt holds the string denoting the access_expires_at field in the database.
	FieldAccessExpiresAt = "access_expires_at"
	// FieldRefreshExpiresAt holds the string denoting the refresh_expires_at field in the database.
	FieldRefreshExpiresAt = "refresh_expires_at"
	// FieldRevokedAt holds the string denoting the revoked_at field in the database.
	FieldRevokedAt = "revoked_at"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAuthorizationCode holds the string denoting the authorization_code edge name in mutations.
	EdgeAuthorizationCode = "authorization_code"
	// EdgeUserAuthorization holds the string denoting the user_authorization edge name in mutations.
	EdgeUserAuthorization = "user_authorization"
	// Table holds the table name of the oauthtoken in the database.
	Table = "oauth_tokens"
	// ApplicationTable is the table that holds the application relation/edge.
	ApplicationTable = "oauth_tokens"
	// ApplicationInverseTable is the table name for the OauthApplication entity.
	// It exists in this package in order to avoid circular dependency with the "oauthapplication" package.
	ApplicationInverseTable = "oauth_applications"
	// ApplicationColumn is the table column denoting the application relation/edge.
	ApplicationColumn = "application_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oauth_tokens"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "sys_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// AuthorizationCodeTable is the table that holds the authorization_code relation/edge.
	AuthorizationCodeTable = "oauth_tokens"
	// AuthorizationCodeInverseTable is the table name for the OauthAuthorizationCode entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauthorizationcode" package.
	AuthorizationCodeInverseTable = "oauth_authorization_codes"
	// AuthorizationCodeColumn is the table column denoting the authorization_code relation/edge.
	AuthorizationCodeColumn = "oauth_authorization_code_token"
	// UserAuthorizationTable is the table that holds the user_authorization relation/edge.
	UserAuthorizationTable = "oauth_tokens"
	// UserAuthorizationInverseTable is the table name for the OauthUserAuthorization entity.
	// It exists in this package in order to avoid circular dependency with the "oauthuserauthorization" package.
	UserAuthorizationInverseTable = "oauth_user_authorizations"
	// UserAuthorizationColumn is the table column denoting the user_authorization relation/edge.
	UserAuthorizationColumn = "oauth_user_authorization_token"
)

// Columns holds all SQL columns for oauthtoken fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldCreateBy,
	FieldUpdateTime,
	FieldUpdateBy,
	FieldDeleteTime,
	FieldDeleteBy,
	FieldAccessToken,
	FieldRefreshToken,
	FieldApplicationID,
	FieldUserID,
	FieldScope,
	FieldAccessExpiresAt,
	FieldRefreshExpiresAt,
	FieldRevokedAt,
	FieldLastUsedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "oauth_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"oauth_authorization_code_token",
	"oauth_user_authorization_token",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-backend/database/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	AccessTokenValidator func(string) error
	// RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	RefreshTokenValidator func(string) error
)

// OrderOption defines the ordering options for the OauthToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByDeleteBy orders the results by the delete_by field.
func ByDeleteBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteBy, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAccessExpiresAt orders the results by the access_expires_at field.
func ByAccessExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessExpiresAt, opts...).ToFunc()
}

// ByRefreshExpiresAt orders the results by the refresh_expires_at field.
func ByRefreshExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshExpiresAt, opts...).ToFunc()
}

// ByRevokedAt orders the results by the revoked_at field.
func ByRevokedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevokedAt, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByApplicationField orders the results by application field.
func ByApplicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorizationCodeField orders the results by authorization_code field.
func ByAuthorizationCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizationCodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserAuthorizationField orders the results by user_authorization field.
func ByUserAuthorizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAuthorizationStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newAuthorizationCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizationCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AuthorizationCodeTable, AuthorizationCodeColumn),
	)
}
func newUserAuthorizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAuthorizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserAuthorizationTable, UserAuthorizationColumn),
	)
}
