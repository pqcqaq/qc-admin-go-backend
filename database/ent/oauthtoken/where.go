// Code generated by ent, DO NOT EDIT.

package oauthtoken

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUpdateBy, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldDeleteBy, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldApplicationID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUserID, v))
}

// AccessExpiresAt applies equality check predicate on the "access_expires_at" field. It's identical to AccessExpiresAtEQ.
func AccessExpiresAt(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldAccessExpiresAt, v))
}

// RefreshExpiresAt applies equality check predicate on the "refresh_expires_at" field. It's identical to RefreshExpiresAtEQ.
func RefreshExpiresAt(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRefreshExpiresAt, v))
}

// RevokedAt applies equality check predicate on the "revoked_at" field. It's identical to RevokedAtEQ.
func RevokedAt(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRevokedAt, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldUpdateBy))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldDeleteTime))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldDeleteBy))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldApplicationID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldUserID, vs...))
}

// AccessExpiresAtEQ applies the EQ predicate on the "access_expires_at" field.
func AccessExpiresAtEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldAccessExpiresAt, v))
}

// AccessExpiresAtNEQ applies the NEQ predicate on the "access_expires_at" field.
func AccessExpiresAtNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldAccessExpiresAt, v))
}

// AccessExpiresAtIn applies the In predicate on the "access_expires_at" field.
func AccessExpiresAtIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldAccessExpiresAt, vs...))
}

// AccessExpiresAtNotIn applies the NotIn predicate on the "access_expires_at" field.
func AccessExpiresAtNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldAccessExpiresAt, vs...))
}

// AccessExpiresAtGT applies the GT predicate on the "access_expires_at" field.
func AccessExpiresAtGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldAccessExpiresAt, v))
}

// AccessExpiresAtGTE applies the GTE predicate on the "access_expires_at" field.
func AccessExpiresAtGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldAccessExpiresAt, v))
}

// AccessExpiresAtLT applies the LT predicate on the "access_expires_at" field.
func AccessExpiresAtLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldAccessExpiresAt, v))
}

// AccessExpiresAtLTE applies the LTE predicate on the "access_expires_at" field.
func AccessExpiresAtLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldAccessExpiresAt, v))
}

// RefreshExpiresAtEQ applies the EQ predicate on the "refresh_expires_at" field.
func RefreshExpiresAtEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtNEQ applies the NEQ predicate on the "refresh_expires_at" field.
func RefreshExpiresAtNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtIn applies the In predicate on the "refresh_expires_at" field.
func RefreshExpiresAtIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldRefreshExpiresAt, vs...))
}

// RefreshExpiresAtNotIn applies the NotIn predicate on the "refresh_expires_at" field.
func RefreshExpiresAtNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldRefreshExpiresAt, vs...))
}

// RefreshExpiresAtGT applies the GT predicate on the "refresh_expires_at" field.
func RefreshExpiresAtGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtGTE applies the GTE predicate on the "refresh_expires_at" field.
func RefreshExpiresAtGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtLT applies the LT predicate on the "refresh_expires_at" field.
func RefreshExpiresAtLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldRefreshExpiresAt, v))
}

// RefreshExpiresAtLTE applies the LTE predicate on the "refresh_expires_at" field.
func RefreshExpiresAtLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldRefreshExpiresAt, v))
}

// RevokedAtEQ applies the EQ predicate on the "revoked_at" field.
func RevokedAtEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldRevokedAt, v))
}

// RevokedAtNEQ applies the NEQ predicate on the "revoked_at" field.
func RevokedAtNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldRevokedAt, v))
}

// RevokedAtIn applies the In predicate on the "revoked_at" field.
func RevokedAtIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldRevokedAt, vs...))
}

// RevokedAtNotIn applies the NotIn predicate on the "revoked_at" field.
func RevokedAtNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldRevokedAt, vs...))
}

// RevokedAtGT applies the GT predicate on the "revoked_at" field.
func RevokedAtGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldRevokedAt, v))
}

// RevokedAtGTE applies the GTE predicate on the "revoked_at" field.
func RevokedAtGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldRevokedAt, v))
}

// RevokedAtLT applies the LT predicate on the "revoked_at" field.
func RevokedAtLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldRevokedAt, v))
}

// RevokedAtLTE applies the LTE predicate on the "revoked_at" field.
func RevokedAtLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldRevokedAt, v))
}

// RevokedAtIsNil applies the IsNil predicate on the "revoked_at" field.
func RevokedAtIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldRevokedAt))
}

// RevokedAtNotNil applies the NotNil predicate on the "revoked_at" field.
func RevokedAtNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldRevokedAt))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.OauthToken {
	return predicate.OauthToken(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.OauthToken {
	return predicate.OauthToken(sql.FieldNotNull(FieldLastUsedAt))
}

// HasApplication applies the HasEdge predicate on the "application" edge.
func HasApplication() predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationWith applies the HasEdge predicate on the "application" edge with a given conditions (other predicates).
func HasApplicationWith(preds ...predicate.OauthApplication) predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := newApplicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthorizationCode applies the HasEdge predicate on the "authorization_code" edge.
func HasAuthorizationCode() predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AuthorizationCodeTable, AuthorizationCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorizationCodeWith applies the HasEdge predicate on the "authorization_code" edge with a given conditions (other predicates).
func HasAuthorizationCodeWith(preds ...predicate.OauthAuthorizationCode) predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := newAuthorizationCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserAuthorization applies the HasEdge predicate on the "user_authorization" edge.
func HasUserAuthorization() predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserAuthorizationTable, UserAuthorizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAuthorizationWith applies the HasEdge predicate on the "user_authorization" edge with a given conditions (other predicates).
func HasUserAuthorizationWith(preds ...predicate.OauthUserAuthorization) predicate.OauthToken {
	return predicate.OauthToken(func(s *sql.Selector) {
		step := newUserAuthorizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthToken) predicate.OauthToken {
	return predicate.OauthToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthToken) predicate.OauthToken {
	return predicate.OauthToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthToken) predicate.OauthToken {
	return predicate.OauthToken(sql.NotPredicates(p))
}
