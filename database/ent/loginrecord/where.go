// Code generated by ent, DO NOT EDIT.

package loginrecord

import (
	"go-backend/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreateTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdateBy, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserID, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIdentifier, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserAgent, v))
}

// DeviceInfo applies equality check predicate on the "device_info" field. It's identical to DeviceInfoEQ.
func DeviceInfo(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDeviceInfo, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldLocation, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldFailureReason, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldSessionID, v))
}

// LogoutTime applies equality check predicate on the "logout_time" field. It's identical to LogoutTimeEQ.
func LogoutTime(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldLogoutTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDuration, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldClientID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldCreateTime, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldCreateBy))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldUpdateBy))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldIdentifier, v))
}

// CredentialTypeEQ applies the EQ predicate on the "credential_type" field.
func CredentialTypeEQ(v CredentialType) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCredentialType, v))
}

// CredentialTypeNEQ applies the NEQ predicate on the "credential_type" field.
func CredentialTypeNEQ(v CredentialType) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldCredentialType, v))
}

// CredentialTypeIn applies the In predicate on the "credential_type" field.
func CredentialTypeIn(vs ...CredentialType) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldCredentialType, vs...))
}

// CredentialTypeNotIn applies the NotIn predicate on the "credential_type" field.
func CredentialTypeNotIn(vs ...CredentialType) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldCredentialType, vs...))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldUserAgent, v))
}

// DeviceInfoEQ applies the EQ predicate on the "device_info" field.
func DeviceInfoEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDeviceInfo, v))
}

// DeviceInfoNEQ applies the NEQ predicate on the "device_info" field.
func DeviceInfoNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldDeviceInfo, v))
}

// DeviceInfoIn applies the In predicate on the "device_info" field.
func DeviceInfoIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldDeviceInfo, vs...))
}

// DeviceInfoNotIn applies the NotIn predicate on the "device_info" field.
func DeviceInfoNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldDeviceInfo, vs...))
}

// DeviceInfoGT applies the GT predicate on the "device_info" field.
func DeviceInfoGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldDeviceInfo, v))
}

// DeviceInfoGTE applies the GTE predicate on the "device_info" field.
func DeviceInfoGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldDeviceInfo, v))
}

// DeviceInfoLT applies the LT predicate on the "device_info" field.
func DeviceInfoLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldDeviceInfo, v))
}

// DeviceInfoLTE applies the LTE predicate on the "device_info" field.
func DeviceInfoLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldDeviceInfo, v))
}

// DeviceInfoContains applies the Contains predicate on the "device_info" field.
func DeviceInfoContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldDeviceInfo, v))
}

// DeviceInfoHasPrefix applies the HasPrefix predicate on the "device_info" field.
func DeviceInfoHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldDeviceInfo, v))
}

// DeviceInfoHasSuffix applies the HasSuffix predicate on the "device_info" field.
func DeviceInfoHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldDeviceInfo, v))
}

// DeviceInfoIsNil applies the IsNil predicate on the "device_info" field.
func DeviceInfoIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldDeviceInfo))
}

// DeviceInfoNotNil applies the NotNil predicate on the "device_info" field.
func DeviceInfoNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldDeviceInfo))
}

// DeviceInfoEqualFold applies the EqualFold predicate on the "device_info" field.
func DeviceInfoEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldDeviceInfo, v))
}

// DeviceInfoContainsFold applies the ContainsFold predicate on the "device_info" field.
func DeviceInfoContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldDeviceInfo, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldLocation, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldStatus, vs...))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonIsNil applies the IsNil predicate on the "failure_reason" field.
func FailureReasonIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldFailureReason))
}

// FailureReasonNotNil applies the NotNil predicate on the "failure_reason" field.
func FailureReasonNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldFailureReason))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldFailureReason, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldSessionID))
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldSessionID))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldSessionID, v))
}

// LogoutTimeEQ applies the EQ predicate on the "logout_time" field.
func LogoutTimeEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldLogoutTime, v))
}

// LogoutTimeNEQ applies the NEQ predicate on the "logout_time" field.
func LogoutTimeNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldLogoutTime, v))
}

// LogoutTimeIn applies the In predicate on the "logout_time" field.
func LogoutTimeIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldLogoutTime, vs...))
}

// LogoutTimeNotIn applies the NotIn predicate on the "logout_time" field.
func LogoutTimeNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldLogoutTime, vs...))
}

// LogoutTimeGT applies the GT predicate on the "logout_time" field.
func LogoutTimeGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldLogoutTime, v))
}

// LogoutTimeGTE applies the GTE predicate on the "logout_time" field.
func LogoutTimeGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldLogoutTime, v))
}

// LogoutTimeLT applies the LT predicate on the "logout_time" field.
func LogoutTimeLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldLogoutTime, v))
}

// LogoutTimeLTE applies the LTE predicate on the "logout_time" field.
func LogoutTimeLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldLogoutTime, v))
}

// LogoutTimeIsNil applies the IsNil predicate on the "logout_time" field.
func LogoutTimeIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldLogoutTime))
}

// LogoutTimeNotNil applies the NotNil predicate on the "logout_time" field.
func LogoutTimeNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldLogoutTime))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldDuration))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldMetadata))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v uint64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldClientID, v))
}

// ClientIDIsNil applies the IsNil predicate on the "client_id" field.
func ClientIDIsNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIsNull(FieldClientID))
}

// ClientIDNotNil applies the NotNil predicate on the "client_id" field.
func ClientIDNotNil() predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotNull(FieldClientID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LoginRecord {
	return predicate.LoginRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LoginRecord {
	return predicate.LoginRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.NotPredicates(p))
}
