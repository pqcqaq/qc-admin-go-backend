// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-backend/database/ent/oauthprovider"
	"go-backend/database/ent/oauthstate"
	"go-backend/database/ent/oauthuser"
	"go-backend/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthUser is the model entity for the OauthUser schema.
type OauthUser struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 创建人ID
	CreateBy uint64 `json:"create_by,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 更新人ID
	UpdateBy uint64 `json:"update_by,omitempty"`
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 删除人ID
	DeleteBy uint64 `json:"delete_by,omitempty"`
	// 关联的提供商ID
	ProviderID uint64 `json:"provider_id,omitempty"`
	// 关联的本地用户ID
	UserID uint64 `json:"user_id,omitempty"`
	// 关联的状态ID
	StateID uint64 `json:"state_id,omitempty"`
	// 第三方提供商的用户ID
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// 第三方返回的原始用户信息
	RawUserInfo map[string]interface{} `json:"raw_user_info,omitempty"`
	// 第三方颁发的访问令牌
	AccessToken string `json:"-"`
	// 第三方刷新令牌
	RefreshToken string `json:"-"`
	// 访问令牌过期时间
	AccessExpiresAt *time.Time `json:"access_expires_at,omitempty"`
	// 刷新令牌过期时间
	RefreshExpiresAt *time.Time `json:"refresh_expires_at,omitempty"`
	// 用户信息加载状态
	LoadState oauthuser.LoadState `json:"load_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthUserQuery when eager-loading is set.
	Edges        OauthUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthUserEdges holds the relations/edges for other nodes in the graph.
type OauthUserEdges struct {
	// Provider holds the value of the provider edge.
	Provider *OauthProvider `json:"provider,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// State holds the value of the state edge.
	State *OauthState `json:"state,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserEdges) ProviderOrErr() (*OauthProvider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthprovider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthUserEdges) StateOrErr() (*OauthState, error) {
	if e.State != nil {
		return e.State, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oauthstate.Label}
	}
	return nil, &NotLoadedError{edge: "state"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldRawUserInfo:
			values[i] = new([]byte)
		case oauthuser.FieldID, oauthuser.FieldCreateBy, oauthuser.FieldUpdateBy, oauthuser.FieldDeleteBy, oauthuser.FieldProviderID, oauthuser.FieldUserID, oauthuser.FieldStateID:
			values[i] = new(sql.NullInt64)
		case oauthuser.FieldProviderUserID, oauthuser.FieldAccessToken, oauthuser.FieldRefreshToken, oauthuser.FieldLoadState:
			values[i] = new(sql.NullString)
		case oauthuser.FieldCreateTime, oauthuser.FieldUpdateTime, oauthuser.FieldDeleteTime, oauthuser.FieldAccessExpiresAt, oauthuser.FieldRefreshExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthUser fields.
func (_m *OauthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = uint64(value.Int64)
			}
		case oauthuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case oauthuser.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = uint64(value.Int64)
			}
		case oauthuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case oauthuser.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = uint64(value.Int64)
			}
		case oauthuser.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = value.Time
			}
		case oauthuser.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				_m.DeleteBy = uint64(value.Int64)
			}
		case oauthuser.FieldProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				_m.ProviderID = uint64(value.Int64)
			}
		case oauthuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint64(value.Int64)
			}
		case oauthuser.FieldStateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state_id", values[i])
			} else if value.Valid {
				_m.StateID = uint64(value.Int64)
			}
		case oauthuser.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				_m.ProviderUserID = value.String
			}
		case oauthuser.FieldRawUserInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw_user_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RawUserInfo); err != nil {
					return fmt.Errorf("unmarshal field raw_user_info: %w", err)
				}
			}
		case oauthuser.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				_m.AccessToken = value.String
			}
		case oauthuser.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				_m.RefreshToken = value.String
			}
		case oauthuser.FieldAccessExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field access_expires_at", values[i])
			} else if value.Valid {
				_m.AccessExpiresAt = new(time.Time)
				*_m.AccessExpiresAt = value.Time
			}
		case oauthuser.FieldRefreshExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_expires_at", values[i])
			} else if value.Valid {
				_m.RefreshExpiresAt = new(time.Time)
				*_m.RefreshExpiresAt = value.Time
			}
		case oauthuser.FieldLoadState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field load_state", values[i])
			} else if value.Valid {
				_m.LoadState = oauthuser.LoadState(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthUser.
// This includes values selected through modifiers, order, etc.
func (_m *OauthUser) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the OauthUser entity.
func (_m *OauthUser) QueryProvider() *OauthProviderQuery {
	return NewOauthUserClient(_m.config).QueryProvider(_m)
}

// QueryUser queries the "user" edge of the OauthUser entity.
func (_m *OauthUser) QueryUser() *UserQuery {
	return NewOauthUserClient(_m.config).QueryUser(_m)
}

// QueryState queries the "state" edge of the OauthUser entity.
func (_m *OauthUser) QueryState() *OauthStateQuery {
	return NewOauthUserClient(_m.config).QueryState(_m)
}

// Update returns a builder for updating this OauthUser.
// Note that you need to call OauthUser.Unwrap() before calling this method if this OauthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthUser) Update() *OauthUserUpdateOne {
	return NewOauthUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthUser) Unwrap() *OauthUser {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthUser is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthUser) String() string {
	var builder strings.Builder
	builder.WriteString("OauthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreateBy))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.UpdateBy))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(_m.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("state_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StateID))
	builder.WriteString(", ")
	builder.WriteString("provider_user_id=")
	builder.WriteString(_m.ProviderUserID)
	builder.WriteString(", ")
	builder.WriteString("raw_user_info=")
	builder.WriteString(fmt.Sprintf("%v", _m.RawUserInfo))
	builder.WriteString(", ")
	builder.WriteString("access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("refresh_token=<sensitive>")
	builder.WriteString(", ")
	if v := _m.AccessExpiresAt; v != nil {
		builder.WriteString("access_expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.RefreshExpiresAt; v != nil {
		builder.WriteString("refresh_expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("load_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoadState))
	builder.WriteByte(')')
	return builder.String()
}

// OauthUsers is a parsable slice of OauthUser.
type OauthUsers []*OauthUser
